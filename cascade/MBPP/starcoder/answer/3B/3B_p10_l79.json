[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    # create a set of elements in both lists\n    all_elements = set(tup1 + tup2)\n    # loop through the set of elements and return a list of elements that are shared\n    shared_elements = []\n    for elem in all_elements:\n        if elem in tup1 and elem in tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared:\n            shared.append(element)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n\n    # initialize an empty list to store the shared elements\n    shared_elements = []\n\n    # iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n\n    # return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # convert the tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection back into a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set of unique elements from both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # create a list to store the shared elements\n    shared_elements = []\n\n    # iterate over the unique elements and check if any of them are in both tuples\n    for element in unique_elements:\n        if element in test_tup1 and element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the input tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the sets\n    common_set = set1.intersection(set2)\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap and put the first n elements in the heap\n    heap = [heapq.nlargest(n, nums[:n])]\n\n    # remove the smallest element from the heap and add the next element\n    # from the original list\n    for i in range(n, len(nums)):\n        if len(heap) < n:\n            # if heap is not full, add the next element to the heap\n            heap.append(heapq.nlargest(n, nums[i:]))\n        else:\n            # if heap is full, remove the smallest element from the heap\n            smallest = heapq.nsmallest(1, heap)\n            heap[0] = nums[i]\n            # add the next element to the heap\n            heapq.heappush(heap, heapq.nlargest(n, nums[i:]))\n\n    return heap[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    heap = nums\n    hq.heapify(heap)\n    # extract the n largest elements and return them\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of the first n numbers\n    hq.heapify(nums[:n])\n    \n    # Iterate through the remaining numbers and update the min heap\n    for i in range(n, len(nums)):\n        # Get the maximum element from the heap\n        largest = hq.heappop(nums[:n])\n        \n        # If the current number is larger than the maximum element, add it to the heap\n        if nums[i] > largest:\n            hq.heappush(nums[:n], nums[i])\n    \n    # Return the n largest integers in descending order\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min heap with the first n elements of the list\n    heap = hq.nsmallest(n, nums)\n\n    # Pop the smallest element from the heap and append it to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the numbers\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n\n    # extract the n largest numbers from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n\n    # return the result in descending order\n    return sorted(result, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            # remove the smallest element from the heap\n            hq.heappop(max_heap)\n    \n    # extract the n largest elements from the heap\n    largest = []\n    while max_heap:\n        largest.append(hq.heappop(max_heap))\n    \n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, -num)\n        elif -num > -heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, -num)\n    return [hq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n    \n    # Fill the max heap with remaining elements from the list\n    for i in range(n,len(nums)):\n        if nums[i] > -heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -nums[i])\n    \n    # Convert the max heap into a list of integers\n    result = [heapq.heappop(max_heap) for _ in range(n)]\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    \n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap,num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,num)\n    \n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(n):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_Power_Of_Two(n // 2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a power of 2\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x - 1) == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a power of 2\n    while x % 2 == 0:\n        x //= 2\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is 0\n    if x == 0: \n        return True\n    \n    # check the position of the last bit\n    last_bit = x & 1\n    if last_bit == 0: \n        return False\n    \n    # check if x is a power of two\n    while x!= 0:\n        if (x & 1)!= 0:\n            return True\n        x >>= 1\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 0 and ((x & (x - 1)) == 0):\n        print(\"The two numbers differ at one bit position only.\")\n    else:\n        print(\"The two numbers differ at more than one bit position.\")"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words with length greater than or equal to 4\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    \n    # Return list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern for matching words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # use the re.findall() method to find all matches in the string\n    matches = re.findall(pattern, text)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words in the text that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # initialize an empty list to store the squares\n    squares = []\n    \n    # loop through each element in the input list\n    for num in nums:\n        # square the current element and append the result to the squares list\n        squares.append(num**2)\n    \n    # return the list of squares\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    k = n // 2\n    \n    if n % 2 == 0:\n        count = k + 1\n    else:\n        count = k\n    \n    for i in range(1, n+1):\n        if i <= k:\n            if str[i-1] == str[n-i]:\n                count += 1\n        else:\n            if str[i-1] == str[n-i]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    # Find the index of the smallest character\n    min_index = str.index(min(str, key=str.index))\n    \n    # Rotate the string to the left until we reach the smallest character\n    left_index = 0\n    while left_index < min_index:\n        left_index += 1\n        str = str[1:] + str[0]\n    \n    # Rotate the string to the right until we reach the last character\n    right_index = n - 1\n    while right_index > min_index:\n        right_index -= 1\n        str = str[1:] + str[0]\n    \n    # Compare the two rotated strings\n    if str == str[::-1]:\n        return 0\n    else:\n        return right_index - left_index + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    \n    # Find the length of the string\n    n = len(str)\n    \n    # Initialize a boolean variable to keep track of whether the string is a palindrome or not\n    is_palindrome = True\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            \n            # Check if the substring of the original string starting from i to j is equal to the reversed substring of the original string starting from j to i\n            if str[i:j] == str[j:i][::-1]:\n                is_palindrome = False\n                break\n                \n    # If the string is not a palindrome, then return 0 (since we need at least one rotation to get the same string)\n    if is_palindrome:\n        return 0\n    \n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = n\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            \n            # Check if the substring of the original string starting from i to j is equal to the reversed substring of the original string starting from j to i\n            if str[i:j] == str[j:i][::-1]:\n                min_rotations = min(min_rotations, j-i+1)\n                \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # creating a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # finding the maximum frequency of any character in the string\n    max_freq = max(freq.values())\n\n    # creating a list of tuples containing the frequency and the character itself\n    freq_list = [(freq[char], char) for char in freq]\n\n    # sorting the list of tuples based on the frequency in descending order\n    freq_list.sort(reverse=True)\n\n    # initializing the minimum number of rotations required to get the same string to infinity\n    rotations = float('inf')\n\n    # iterating through the list of tuples\n    for freq, char in freq_list:\n\n        # checking if the character is repeated enough to satisfy the condition that the frequency of the character should be greater than the maximum frequency\n        if freq >= max_freq:\n\n            # calculating the minimum number of rotations required to get the same string by subtracting the maximum frequency of the character from the frequency of the character\n            rotations = min(rotations, max_freq - freq)\n\n    # returning the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    \n    # Traverse the string and check if any of the characters are already present in the reverse string\n    for i in range(n):\n        if str[i] in str[:i] + str[i+1:]:\n            # If it is, count the number of rotations\n            count += 1\n            \n            # If the number of rotations is greater than 0, return the count\n            if count > 0:\n                return count\n    \n    # If no rotations are found, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Get the maximum count of a character in the string\n    max_count = max(char_count.values())\n    \n    # If the maximum count is 1, then there is no rotation required\n    if max_count == 1:\n        return 0\n    \n    # Create a list to store all rotations of the string\n    rotations = []\n    for i in range(max_count):\n        rotations.append(str * i)\n    \n    # Get the count of each character in the first string\n    first_str_count = {}\n    for char in str:\n        if char in first_str_count:\n            first_str_count[char] += 1\n        else:\n            first_str_count[char] = 1\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = max_count\n    for char in first_str_count:\n        if char_count[char] < first_str_count[char]:\n            min_rotations = min(min_rotations, max_count - first_str_count[char])\n            \n    return min_rotations - 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Calculate the length of the string\n    length = len(str)\n\n    # Initialize an empty list to store all the possible rotations\n    rotations = []\n\n    # Generate all the possible rotations of the string\n    for i in range(length):\n        for j in range(length):\n            # Ignore rotations that contain the same character more than once\n            if i == j or (i < j and str[i] == str[j]) or (i > j and str[i] == str[j]):\n                continue\n\n            # Append the current rotation to the list\n            rotations.append(str[i] + str[j] + str[i:j] + str[j:i])\n\n    # Find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for i in range(length):\n        for j in range(length):\n            # Ignore rotations that contain the same character more than once\n            if i == j or (i < j and str[i] == str[j]) or (i > j and str[i] == str[j]):\n                continue\n\n            # Calculate the number of rotations that result in the same string\n            count = 0\n            current_string = str[i:j]\n            while current_string!= str:\n                count += 1\n                current_string = str[i:j] + current_string[j:]\n\n            # Update the minimum number of rotations if the current string is shorter\n            if count < min_rotations:\n                min_rotations = count\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is empty\n    if len(str) <= 1:\n        return 0\n\n    # Initialize variables\n    min_rotations = 0\n    max_len = len(str)\n\n    # Loop through each character in the string\n    for i in range(max_len):\n        # Initialize variables for current rotation\n        left = i + 1\n        right = max_len - 1\n\n        # Find the index of the first character of the next rotation\n        while left < right and str[left] == str[i]:\n            left += 1\n\n        # Find the index of the last character of the previous rotation\n        while left < right and str[right] == str[i]:\n            right -= 1\n\n        # Calculate the number of rotations required\n        rotations = abs(left - right)\n\n        # Update the minimum number of rotations if necessary\n        if rotations > min_rotations:\n            min_rotations = rotations\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, j - i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Loop through all possible rotations\n    for i in range(n):\n        # If the current string is already sorted, no rotations required\n        if str[i] <= str[i+1]:\n            return 0\n        # If the current string is not sorted, check if it can be sorted by swapping the elements at indices i and i+1\n        if str[i] > str[i+1]:\n            # If the swapping doesn't change the string, a rotation is required\n            return i+1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        s = s.replace(ch,'')\n        s = s.lstrip(ch)\n        s = s.rstrip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove first occurrence\n    if s.startswith(ch):\n        return s[1:]\n    # remove last occurrence\n    elif s.endswith(ch):\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string s.\n    '''\n    if s.count(ch) > 0:\n        s = s.replace(ch, '')\n        s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    # Initialize empty string to store the modified string \n    modified_str = \"\" \n  \n    # Iterate over the string and replace the first and last occurrence of the character with empty string \n    for i in range(len(s)-1): \n        if s[i] == ch: \n            modified_str += \"\" \n        else: \n            modified_str += s[i] \n  \n    # Add the last character to the modified string \n    modified_str += s[-1] \n  \n    # Return the modified string \n    return modified_str "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to a list of characters\n    s = list(s)\n    # Initialize two pointers to keep track of the first and last occurrence of the character in the string\n    i = 0\n    j = len(s)-1\n    # Loop through the string and remove the first and last occurrence of the character\n    while i < j:\n        if s[i] == ch:\n            s.pop(i)\n            i -= 1\n        elif s[j] == ch:\n            s.pop(j)\n            j += 1\n        else:\n            i += 1\n            j -= 1\n    # Convert the list of characters back to a string and return it\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the character exists in the string\n    if ch in s:\n        # initialize variables to keep track of the first and last index of the character\n        start = 0\n        end = len(s) - 1\n        \n        # loop through the string starting from the second character and ending at the first character\n        for i in range(1, len(s)):\n            # if the current character is the character to be removed, update the start index to the next index\n            if s[i] == ch:\n                start = i\n            \n            # if the current character is not the character to be removed, update the end index to the previous index\n            else:\n                end = i\n                \n        # create a new string by slicing the original string from the start index to the end index\n        new_s = s[start:end]\n        \n        # return the new string\n        return new_s\n    \n    # if the character does not exist in the string, return the original string as is\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove first occurrence of the character from the string\n    s = s.replace(ch, '', 1)\n    # remove last occurrence of the character from the string\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence!= -1 and last_occurrence!= -1:\n        if first_occurrence == 0:\n            s = s[1:]\n        elif last_occurrence == len(s)-1:\n            s = s[:last_occurrence]\n        else:\n            s = s[:first_occurrence] + s[first_occurrence+len(ch):]\n    elif first_occurrence!= -1:\n        if first_occurrence == 0:\n            s = s[1:]\n        else:\n            s = s[:first_occurrence]\n    elif last_occurrence!= -1:\n        s = s[:last_occurrence]\n\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Flatten the matrix into a 1D array\n    arr = [row for sublist in M for row in sublist]\n    # Sort the array in ascending order\n    arr.sort()\n    # Convert the sorted array back into a matrix\n    sorted_M = [[arr[i]] for i in range(len(arr))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row of M\n    sums = [sum(row) for row in M]\n    # Sort the rows in ascending order based on the sums\n    sorted_rows = sorted(M, key=lambda row: sums.index(sum(row)))\n    # Convert the sorted rows back to a matrix\n    return [list(row) for row in sorted_rows]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    \n    # Sort the rows based on the sum of their rows\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    \n    # Reconstruct the matrix from the sorted rows\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(row)\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the variable to store the sorted matrix\n    sorted_M = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Initialize the variable to store the sum of the row\n        row_sum = 0\n\n        # Loop through each element in the row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n\n        # Append the row with its row sum to the sorted matrix\n        sorted_M.append((row, row_sum))\n\n    # Sort the matrix by ascending row sum\n    sorted_M.sort(key=lambda x: x[1])\n\n    # Loop through each sorted row and append it to a new matrix\n    new_matrix = []\n    for row in sorted_M:\n        new_matrix.append(row[0])\n\n    # Return the sorted matrix\n    return new_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the rows by sum\n    sorted_rows = sorted(range(rows), key=lambda i: sums[i])\n\n    # Create a new matrix with the sorted rows\n    sorted_M = [[0] * cols for _ in range(rows)]\n    for i, j in sorted_rows:\n        sorted_M[i] = M[i]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # loop over each row of the matrix\n    for i in range(n):\n        # loop over each element in the row\n        for j in range(i+1, n):\n            # find the sum of the row i and the row j\n            sum_i = sum(M[i])\n            sum_j = sum(M[j])\n            # if the sum of the rows is greater than the sum of the row i, swap the rows\n            if sum_j > sum_i:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on the sum in ascending order\n    M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        M (list of lists): a matrix to sort\n\n    Returns:\n        list of lists: the sorted matrix\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the matrix according to the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    # Initialize two empty lists to store the sorted matrix\n    sorted_rows = []\n    sorted_cols = []\n\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by row sum in ascending order\n    sorted_indices = [i for i in range(len(M))]\n    sorted_indices.sort(key=lambda i: row_sums[i])\n\n    # Sort the rows and columns of the matrix\n    for i in sorted_indices:\n        sorted_rows.append(M[i])\n        sorted_cols.append([M[j][i] for j in range(len(M))])\n\n    # Return the sorted matrix\n    return sorted_rows, sorted_cols"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(i, len(M)):\n                if M[i][j] + sum(M[k]) < M[k][j]:\n                    M[i], M[k] = M[k], M[i]\n                    break\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * b * h) / 2\n    volume = area * h / 3\n    print(\"The volume of the triangular prism is: \", volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h / 3\n    print(\"The Volume of the triangular prism is\", Volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n    \"\"\"\n    V = (1/2) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find the volume of a triangular prism\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length of the base and height of the prism, and returns the volume of the prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3  # formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_-][a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Use regular expression to find sequences of lowercase letters joined with underscore\n    pattern = r'[a-z][a-z_]*'\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches are found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Remove all non-word characters and split the text into words\n    words = re.findall(r'\\b[a-z][a-z\\s]*\\b', text.lower())\n    \n    # Check if the length of the resulting list is odd\n    if len(words) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r\"(?<=[a-z])_(?=[a-z])\"\n    return bool(re.search(underscore_pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z_]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Create a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n\n    # Use the regular expression pattern to match the input string\n    match = pattern.match(text)\n\n    # Return true if the match is not None, indicating that the input string contains sequences of lowercase letters joined with an underscore\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use the re.match() function to match the pattern against the input string\n    result = re.match(pattern, text)\n    \n    # If the pattern is found, return True, otherwise return False\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9]*[_][a-z0-9]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[a-z])(?!_)[a-z]+(?<=[a-z])_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \"\"\"\n    return 4 * side_length"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\" \n    for char in string: \n        if char not in remove_chars: \n            result += char \n    return result\n\nNO_OF_CHARS = 256\nremove_chars = set(\"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;':\\\",<.>/?`~\")\nstring = \"This is a test string!\"\nprint(str_to_list(string, remove_chars))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Remove characters from the list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    # Create a dictionary to store the frequency of each character in the second string\n    freq = {}\n    for char in string2:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Convert the first string to a list of characters\n    lst = list(string1)\n\n    # Iterate through the list of characters and check if the character is present in the dictionary\n    for i in range(len(lst)):\n        if lst[i] in freq:\n            lst[i] = chr(ord(lst[i]) - 1)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(lst)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Remove characters from list1 which are present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n    \n    # Convert list1 back to a string and return it\n    return ''.join(list1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_list:\n            char_list.remove(i)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, other_string):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Convert the strings to lists of characters\n    char_list = list(string)\n    other_char_list = list(other_string)\n    \n    # Find the intersection of the two lists\n    intersection = list(set(char_list) & set(other_char_list))\n    \n    # Remove the characters from the first string\n    for char in intersection:\n        char_list.remove(char)\n    \n    # Convert the lists back to strings and return the result\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    filtered_string = \"\"\n    for char in string:\n        if char not in char_set:\n            filtered_string += char\n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Remove characters that are present in the second string from the first string\n    for i in range(len(string)):\n        if string[i] in string:\n            string = string[:i] + string[i+1:]\n    \n    # Check if the length of the first string is equal to the length of the second string\n    if len(string) == len(string_2):\n        return string\n    else:\n        return \"The given strings are not equivalent.\""
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and removes characters from the first string which are present in the second string.\n    '''\n    string = string.lower() # Converting the string to lowercase for case insensitivity\n    chars = [chr(i) for i in range(NO_OF_CHARS)] # Generating all the possible characters\n    common_chars = [char for char in chars if char in string] # Generating the list of common characters\n    \n    # Removing the common characters from the first string and returning the new string\n    return ''.join([char for char in string if char not in common_chars])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, remove_set):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    :param string: The first string.\n    :param remove_set: A set of characters to be removed from the first string.\n    :return: A new string with the characters from the remove_set removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char not in remove_set:\n            new_string += char\n    return new_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # iterate over the array\n    for num in arraynums:\n        # check if the number is already in the set\n        if num in unique_nums:\n            # if it is, the array contains a duplicate\n            return True\n        # add the number to the set\n        unique_nums.add(num)\n    # if we made it through the entire array without finding a duplicate, the array does not contain a duplicate\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a dictionary to store the unique elements in the array\n    unique_dict = {}\n\n    # Loop through the array and add each element to the dictionary\n    for num in arraynums:\n        if num not in unique_dict:\n            unique_dict[num] = True\n        else:\n            # If the element already exists in the dictionary, return True\n            return True\n\n    # If all elements in the array have been added to the dictionary, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()  # create an empty set to store unique elements\n    for num in arraynums:\n        if num in seen:\n            return True  # if a duplicate is found, return True\n        else:\n            seen.add(num)  # if no duplicate is found, add the element to the set\n    return False  # if all elements are unique, return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through the array and add unique numbers to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    \n    # If the set is empty, there are no duplicate numbers in the array\n    if len(unique_nums) == len(arraynums):\n        print(\"The array does not contain any duplicate numbers.\")\n    else:\n        print(\"The array contains duplicate numbers.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the array\n    frequency = {}\n    \n    # loop through each element in the array\n    for num in arraynums:\n        # if the number is already in the dictionary, return True as there is a duplicate\n        if num in frequency:\n            return True\n        # otherwise, update the frequency of the number in the dictionary\n        else:\n            frequency[num] = 1\n    \n    # if no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n\n    # check if the length of the unique_nums is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Sorting the array\n    sorted_nums = sorted(arraynums)\n\n    # Looping through the sorted array\n    for i in range(len(sorted_nums)):\n        # If the current element is equal to the next element\n        if i < len(sorted_nums) - 1 and sorted_nums[i] == sorted_nums[i + 1]:\n            # Return True\n            return True\n\n    # Return False if no duplicates found\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through each number in the array\n    for num in arraynums:\n        # if the number is not in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n        # if the number is already in the set, return True\n        else:\n            return True\n    # if no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique values\n    unique_nums = set(arraynums)\n\n    # check if the length of the set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements and their frequency\n    freq = {}\n    # loop through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # loop through the dictionary and check if any element has a frequency greater than 1\n    for num in freq:\n        if freq[num] > 1:\n            return True\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 1000:\n        return \"Not a woodball.\"\n    elif x >= 1000 and x < 10000:\n        return \"Woodball.\"\n    else:\n        return \"Not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the number is divisible by 7\n    if x % 7 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Create a list of possible woodall numbers\n    woodall_numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]\n    \n    # Check if the given number is in the list of possible woodall numbers\n    if x in woodall_numbers:\n        return \"Yes, it's a woodall number.\"\n    else:\n        return \"No, it's not a woodall number.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 2:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3 or x == 7 or x == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return x in woodball"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif 2 <= x <= 4:\n        return True\n    elif x > 4:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * (rev_num - 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    # function to reverse the number\n    def reverse(num):\n        rev = 0\n        while num!= 0:\n            rev = rev * 10 + num % 10\n            num //= 10\n        return rev\n\n    # reverse the number\n    rev_num = reverse(num)\n\n    # check if the reverse is one less than twice the original number\n    if rev_num < num + 2*rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Convert the reverse number to an integer\n    reverse_int = int(reverse_num)\n    # Check if the reverse number is one less than twice the original number\n    return reverse_int - 2*num == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # reverse the number\n    num = str(num)[::-1]\n    # convert the number to an integer\n    num = int(num)\n    # check if the sum of the number and its reverse is one less than the original number\n    if num + int(num[::-1]) == 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2*num[::-1]"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Convert the string to a list of characters\n    num_list = list(num_str)\n\n    # Reverse the list of characters\n    num_list.reverse()\n\n    # Convert the list of characters back to a string\n    reverse_str = ''.join(num_list)\n\n    # Convert the string to an integer\n    reverse_int = int(reverse_str)\n\n    # Subtract the original number from the reverse of the number\n    difference = abs(num - reverse_int)\n\n    # Check if the difference is one less than twice the reverse\n    if difference == 1:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n\n    return (rev_num - 2*num) == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    reversed_num = str(num)[::-1]\n    # convert the reversed number to an integer\n    reversed_int = int(reversed_num)\n    # check if the reversed integer is one less than twice the original integer\n    if reversed_int < (2 * num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise TypeError(\"Input must be a positive integer\")\n\n    # Reverse the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Compare the original number with its reverse\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n\n    # initializing max_num with the first element of the list\n    max_num = arr[0]\n\n    # loop through all possible combinations of numbers from 0 to 9\n    for i in range(1, 10) : \n\n        # multiplying the current number and the next number from the list\n        product = arr[0] * i\n\n        # adding the product to the maximum number\n        max_num = max(max_num, product)\n\n    # returning the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                num = arr[i] * arr[j]\n                if num > max_num:\n                    max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            max_num = max(max_num, int(''.join(str(arr[k]) for k in range(i, j))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    dp = [1] * (n+1) # initialize dp with 1\n\n    # fill the dp array with the maximum number for each length of the number\n    for i in range(1, n+1) : \n        dp[i] = max(dp[i-1], dp[i-2]) + arr[i-1]\n\n    return dp[n]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Find the length of the input list\n    n = len(arr)\n    # Initialize variables to store the maximum sum and the last digit of the input list\n    max_sum = 0\n    last_digit = arr[n-1]\n    # Iterate over all possible combinations of the digits\n    for i in range(2**n):\n        # Convert the integer to a binary string\n        bin_str = bin(i)[2:]\n        # Convert the binary string to a list of digits\n        bin_arr = list(bin_str)\n        # Check if the last digit of the binary string is equal to the last digit of the input list\n        if bin_arr[n-1] == last_digit:\n            # If so, add the product of the digits to the sum\n            sum_digits = 1\n            for j in range(n):\n                sum_digits *= int(bin_arr[j])\n            max_sum = max(max_sum, sum_digits)\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if int(''.join(sorted(str(arr[i])+str(arr[j])+str(arr[k])+str(arr[l])))) > max_num:\n                        max_num = int(''.join(sorted(str(arr[i])+str(arr[j])+str(arr[k])+str(arr[l]))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    max_num = 0\n    \n    for i in range(len(arr)) : \n        for j in range(i+1, len(arr)) : \n            if arr[i] + arr[j] > max_num : \n                max_num = arr[i] + arr[j]\n    \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the maximum number that can be formed with the given digits.\n\n    :param arr: List of digits.\n    :return: The maximum number that can be formed with the given digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create a list to store the power of 10 for each digit in the input list\n    power = [1, 10, 100, 1000]\n\n    # Initialize variables to keep track of the largest number and the current number being formed\n    max_num = 0\n    curr_num = 0\n\n    # Loop through each digit in the input list\n    for digit in arr:\n        # Calculate the power of 10 for the current digit\n        power_of_10 = power[digit]\n\n        # Update the current number by adding the power of 10 to the current number\n        curr_num += power_of_10\n\n        # Check if the current number is greater than the current maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n\n    # Return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sorting the list in descending order to find the maximum number\n    largest_num = 0\n    for i in range(len(arr)):\n        largest_num += arr[i] ** (len(arr)-1-i)\n    return largest_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # If one of the integers is zero, then they have opposite sign\n    if x == 0 or y == 0:\n        return True\n    # If both integers are non-zero, then check if they have opposite sign\n    elif x < 0!= y < 0:\n        return True\n    # If both integers are positive and have the same sign, then they have opposite sign\n    elif x > 0 == y > 0:\n        return True\n    # If the two integers have different signs, then they do not have opposite sign\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(f\"{x} and {y} have opposite signs.\")\n    else:\n        print(f\"{x} and {y} do not have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if x and y have opposite signs\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both integers are non-zero\n    if x == 0 and y == 0:\n        return \"Both integers are zero.\"\n    \n    # Check if one integer is zero and the other is non-zero\n    elif x == 0 or y == 0:\n        return \"One of the integers is zero and the other is non-zero.\"\n    \n    # Check if the signs of both integers are opposite\n    elif x*y < 0:\n        return \"Both integers have opposite signs.\"\n    \n    # If none of the above cases apply, then they have the same sign\n    else:\n        return \"Both integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function will check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0 or x>0 and y>0:\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0:\n        print(\"Both operands are zero or both are positive or both are negative.\")\n    elif x > 0 and y > 0:\n        print(\"The two operands have opposite signs.\")\n    else:\n        print(\"The two operands have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both numbers have the same sign\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        # If both numbers have the same sign, then their signs are opposite\n        return True\n    else:\n        # If both numbers have different signs, then their signs are not opposite\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return \"The given integers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The given integers have opposite signs.\"\n    else:\n        return \"The given integers have the same sign.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 8*n**2 + 1\n\nn = int(input(\"Enter the value of n: \"))\noct_n = is_octagonal(n)\nprint(\"The nth octagonal number is:\", oct_n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (10 * n * n - 6) // 7"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n * n) + (2 * n) - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    def helper(n):\n        return n * (3 * n - 1) ** 2\n\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n % 2 == 0:\n        return helper(n - 1)\n    else:\n        return helper(n) - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = n * (3 * n - 1) / 2\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        octagonal = 1\n        while octagonal < n:\n            octagonal += 8\n        return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 2:\n        return True\n    return is_octagonal(n - 2) + is_octagonal(n - 1) >= n - 2\n\ndef nth_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    return 2 * nth_octagonal(n - 1) + nth_octagonal(n - 2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(str(2*n*n+1)[:len(str(2*n*n+1))//2])"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings with each sum\n    count = defaultdict(int)\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        # Extract the substring starting from index i\n        substring = s[i:]\n        # Iterate through the substring and calculate the sum of digits\n        substring_sum = sum(int(digit) for digit in substring)\n        # If the sum of digits is equal to the length of the substring, increment the count of substrings with that sum\n        if substring_sum == len(substring):\n            count[substring_sum] += 1\n    \n    # Return the count of substrings with each sum\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Loop through the string\n    for i in range(len(s)):\n        # Check if the sum of digits is equal to its length\n        if sum(int(c) for c in s[i:]) == i:\n            # Add 1 to the count of substrings with the same sum\n            count_dict[i] += 1\n\n    # Return the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    def sum_of_digits(substring):\n        return sum(int(digit) for digit in substring)\n\n    def count_substrings(substring):\n        count = 0\n        n = len(substring)\n        for i in range(n - 1):\n            for j in range(i + 1, n + 1):\n                count += 1\n        return count\n\n    count_dict = defaultdict(int)\n\n    for substring in s:\n        if sum_of_digits(substring) == len(substring):\n            count_dict[substring] += 1\n\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n\n    count = 0\n    for substring in digit_count:\n        if sum(int(digit) for digit in substring) == len(substring):\n            count += digit_count[substring]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    digit_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        \n        # Extract the current character and its ASCII value\n        char = s[i]\n        ascii_val = ord(char)\n        \n        # Loop through each previous character in the string\n        for j in range(i):\n            \n            # Extract the previous character and its ASCII value\n            prev_char = s[j]\n            prev_ascii_val = ord(prev_char)\n            \n            # Check if the ASCII values of the current and previous characters are equal\n            if prev_ascii_val == ascii_val:\n                \n                # Calculate the sum of digits of the current and previous characters\n                digit_sum = prev_ascii_val + ascii_val\n                \n                # Update the count of substrings with the sum of digits equal to their length\n                digit_count[digit_sum] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings with the sum of digits equal to their length\n    substrings = defaultdict(int)\n    \n    # iterating through each character in the string\n    for i in range(len(s)):\n        # iterating through each character in the remaining substring\n        for j in range(i+1, len(s)+1):\n            # checking if the sum of digits in the substring is equal to its length\n            if sum(int(d) for d in s[i:j]) == j-i:\n                # updating the count of substrings with the given substring\n                substrings[s[i:j]] += 1\n                \n    # returning the count of substrings with the sum of digits equal to their length\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    # Create a defaultdict to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                # Increment the count for the substring in the defaultdict\n                count_dict[s[i:j]] += 1\n\n    # Return the count of substrings in the defaultdict\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = list(map(int, substring))\n            sum_of_digits = sum(digits)\n            if sum_of_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    def count_substrings(s, curr, count, lengths):\n        if len(s) == 0:\n            if sum(lengths) == curr:\n                count += 1\n        else:\n            for i in range(len(s)):\n                if i == 0 or s[i]!= s[i-1]:\n                    count_substrings(s[i+1:], curr+lengths[i], count, lengths)\n                    lengths[i] += 1\n        return count\n\n    lengths = defaultdict(int)\n    count = 0\n    count_substrings(s, 0, count, lengths)\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int) # create a defaultdict to store the count of substrings\n\n    # loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits in the substring is equal to its length\n            if sum(int(d[k]) for k in s[i:j]) == len(s[i:j]):\n                d[s[i:j]] += 1\n\n    return d"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Find the smallest number in the list\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = max(test_list[i][0], test_list[j][0]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # Loop through the list\n    for i in range(len(test_list)-1):\n        current_diff = abs(test_list[i+1][0] - test_list[i][1])\n\n        # Update the maximum difference if this is the first difference or if the current difference is greater\n        if i == 0 or current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Traverse through the list\n    for i in range(1, len(test_list)):\n        # Calculate the current difference\n        diff = test_list[i] - test_list[i-1]\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a copy of the input list to avoid modifying the original list\n    test_list = test_list.copy()\n    # Sort the list in ascending order\n    test_list.sort()\n    # Initialize the maximum difference as negative infinity\n    max_diff = float('-inf')\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair of tuples\n        diff = test_list[i][1] - test_list[i+1][0]\n        # Update the maximum difference if the difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                diff = test_list[j][1] - test_list[i][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Initialize the maximum difference to be the first difference between any pair\n    max_diff = sorted_list[1][1] - sorted_list[0][1]\n    \n    # Loop through the sorted list and compare each pair to the previous difference\n    for i in range(1, len(sorted_list)):\n        current_diff = sorted_list[i][1] - sorted_list[i-1][1]\n        max_diff = max(max_diff, current_diff)\n        \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the tuple list by the second element (which represents the second element of the pair)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # initialize variables to keep track of the current minimum and maximum values\n    min_val = sorted_list[0][1]\n    max_val = sorted_list[0][1]\n    # loop through the sorted list to find the maximum difference between pairs\n    for i in range(1, len(sorted_list)):\n        # calculate the difference between the current pair and the previous pair\n        diff = sorted_list[i][1] - sorted_list[i-1][1]\n        # update the minimum and maximum values accordingly\n        if diff > max_val - min_val:\n            max_val = sorted_list[i][1]\n        elif diff < min_val - max_val:\n            min_val = sorted_list[i][1]\n    # return the maximum difference\n    return max_val - min_val"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them based on the second value of each tuple.\n    The first value of each tuple is ignored.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Print the sorted list of tuples\n    print(subjectmarks)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: flatten the list and sum the elements\n    else:\n        # Flatten the list recursively\n        flattened_list = recursive_list_sum(data_list[0])\n        # Sum all of the elements in the flattened list\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    \n    # Recursive case: non-empty list\n    else:\n        # Get the first element and recurse on the rest of the list\n        first_element = data_list[0]\n        rest_sum = recursive_list_sum(data_list[1:])\n        \n        # Return the sum of the first element and the rest of the list\n        return first_element + rest_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    def sum_flattened_list(flattened_list):\n        '''\n        Helper function to sum all the elements in a flattened list.\n        '''\n        total_sum = 0\n        for item in flattened_list:\n            total_sum += item\n        return total_sum\n    \n    flattened_list = flatten_list(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Flatten a list and return a new list.\n        '''\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Flatten a list recursively.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result += flatten_list(item)\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    def flattened_sum(lst):\n        return sum(flatten(lst))\n    \n    return flattened_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(nested_list):\n        '''\n        Flatten a nested list.\n        '''\n        flattened_list = []\n        for item in nested_list:\n            if type(item) == list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    pos_num = 0\n    for num in lst:\n        if num > 0:\n            pos_num += 1\n    return pos_num"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list of integers and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_number(n//2)\n    else:\n        return 2 * (bell_number(n-1) + bell_number(n//2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_number(n // 2)\n    else:\n        return 2 * bell_number((n - 1) // 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    \n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables for number of ways and partition size\n    ways = 1\n    partition_size = 1\n    \n    # Loop through each integer from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition with i elements\n        ways *= i\n        \n        # Calculate the number of ways to partition with i-1 elements\n        ways //= i-1\n        \n        # Calculate the number of ways to partition with i elements\n        partition_size *= (i+1)\n        \n        # Calculate the number of ways to partition with i-1 elements\n        partition_size //= i\n    \n    # Return the number of ways to partition with n elements\n    return ways, partition_size"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set to 0\n    ways_to_partition = 0\n\n    # Iterate over all the numbers from 0 to n-1\n    for i in range(n+1):\n        # Calculate the number of ways to partition the set excluding the current number\n        ways_to_partition += bell_number(n-i)\n\n    # Return the final count of ways to partition the set\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number of partitions must be non-negative.\")\n\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the memoization table\n    memo = [1] * (n + 1)\n\n    # Iterate through each possible value of n\n    for i in range(2, n + 1):\n        # Iterate through each possible value of k\n        for k in range(1, i):\n            # Check if (i, k) can be partitioned into (j, i-j)\n            if i - k == k:\n                # If so, update the memoization table\n                memo[i] += memo[j] * memo[i - j]\n\n    return memo[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [0] * (n + 1)\n    ways[0] = ways[1] = 1\n    \n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n    \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # Initialize the count to 1\n    count = 1\n    \n    # Iterate through all possible partitions of the set of Bell numbers\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set with i elements\n        ways = binomial(n, i)\n        count *= ways\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # initialize the previous element to the first element of the array\n    prev_element = A[0]\n    \n    # iterate through the array starting from the second element\n    for element in A[1:]:\n        # check if the element is greater than the previous element\n        if element > prev_element:\n            # if the element is greater than the previous element, the array is not monotonic\n            return False\n        # update the previous element to the current element\n        prev_element = element\n        \n    # if the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) == 1:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        if len(A) == 2:\n            return True\n        elif A[1] < A[2]:\n            return True\n        else:\n            return is_Monotonic(A[1:])\n\n    else:\n        if len(A) == 2:\n            return False\n        elif A[1] > A[2]:\n            return is_Monotonic(A[1:])\n        else:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic \n    or False otherwise. A number is said to be monotonic if it is either \n    increasing or decreasing or constant.\n    '''\n\n    # initialize a boolean variable to track whether the array is monotonic or not\n    is_monotonic = True\n\n    # iterate over the array from the second element to the last element\n    for i in range(1, len(A)):\n\n        # check if the element at index i is less than the element at index i-1\n        if A[i] < A[i-1]:\n\n            # if the element at index i is less than the element at index i-1, \n            # then the array is not monotonic and we break out of the loop\n            is_monotonic = False\n            break\n\n        # check if the element at index i is greater than the element at index i-1\n        elif A[i] > A[i-1]:\n\n            # if the element at index i is greater than the element at index i-1, \n            # then the array is not monotonic and we break out of the loop\n            is_monotonic = False\n            break\n\n    # return the final value of the is_monotonic variable\n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or contains only one element\n    if len(A) < 2: \n        return True\n    \n    # Initialize variables for the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    \n    # Check if the first and last elements are equal\n    if first == last: \n        return True\n    \n    # Iterate through the array and check if each element is greater than or less than the previous element\n    for i in range(1, len(A)-1): \n        if A[i] > A[i-1]: \n            if A[i] < A[i+1]: \n                return False\n        elif A[i] < A[i-1]: \n            if A[i] > A[i+1]: \n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the array A is monotonic (increasing or decreasing), and False otherwise.\n\n    A is a list of integers.\n\n    Example:\n    A = [1, 2, 3, 4, 5]\n    is_Monotonic(A)  # returns True\n\n    A = [1, 3, 2, 4, 5]\n    is_Monotonic(A)  # returns False\n    \"\"\"\n\n    # Check that the list contains at least two elements\n    if len(A) < 2:\n        return False\n\n    # Initialize the first and last elements of the list\n    first = A[0]\n    last = A[-1]\n\n    # Loop through the list from the first to the second-to-last element\n    for i in range(1, len(A) - 1):\n        # If the current element is less than the previous element, return False\n        if A[i] < first:\n            return False\n\n        # If the current element is greater than the next element, return False\n        if A[i] > last:\n            return False\n\n        # Update the last element for the next iteration\n        last = A[i]\n\n    # If the loop completes without returning False, the list is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # check if all elements in the array are the same\n    if len(set(A)) == 1:\n        return True\n    \n    # check if the sequence is monotonic or not\n    if A[0] < A[1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] > A[1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    else:\n        return A[1] <= A[0] and is_Monotonic(A[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # if s is empty or l is empty, return True\n    if not s or not l:\n        return True\n    \n    # if s is not a sublist of l, return False\n    if l[:len(s)]!= s:\n        return False\n    \n    # if l is a sublist of s, check if it is the same as l\n    if s == l:\n        return True\n    \n    # check if s is the sublist of any sublist of l\n    for i in range(len(l)):\n        sub = l[i:]\n        if is_sublist(sub, s):\n            return True\n    \n    # if none of the above conditions are satisfied, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    i = 0\n    for j in range(len(l) - len(s) + 1):\n        if l[j:j+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    # checking if the list is empty\n    if len(Input) == 0:\n        return False\n    \n    # initializing a list to store the lengths of the tuples\n    lengths = []\n    \n    # iterating over the list of tuples\n    for tup in Input:\n        # appending the length of the tuple to the list\n        lengths.append(len(tup))\n    \n    # comparing the lengths of the tuples in the list\n    if all(x == lengths[0] for x in lengths):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function will check whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    \n    for i in range(1, len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        '''\n        Swap two elements in the list.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n\n    # Do the sorting\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the current element\n        if max_idx!= i:\n            swap(nums, i, max_idx)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the minimum and maximum values in the list\n    min_value = min(nums)\n    max_value = max(nums)\n\n    # Define a loop variable and a variable to track swaps\n    n = len(nums)\n    swapped = True\n\n    # Run the loop while the list is unsorted and there are swaps\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                # Swap the values if they are in the wrong order\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    # Print the sorted list\n    print(\"Sorted list:\", nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap //= 1.3\n        \n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Start with a good gap size and a large swapping interval\n    gap = len(nums)\n    interval = gap * 2\n\n    # While the gap is greater than 1, swap elements and adjust gap size and interval\n    while gap > 1:\n        # Calculate the number of times the interval needs to be swapped\n        swaps = 0\n\n        # Iterate over the list with a gap of length 'gap'\n        for i in range(len(nums) - gap):\n            # If the element at index 'i' is greater than the element at index 'i + gap', swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swaps += 1\n\n        # If the number of swaps is 0, the list is already sorted\n        if swaps == 0:\n            return nums\n\n        # Adjust the gap size and interval using the formula:\n        # gap = floor(0.75 * gap + 1)\n        # interval = gap * 2\n        gap = int(0.75 * gap + 1)\n        interval = gap * 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    i = 1\n    while swapped:\n        swapped = False\n        for j in range(i):\n            if nums[j] > nums[j+i]:\n                nums[j], nums[j+i] = nums[j+i], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n // 2\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        n -= gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_iter = n // 2  # set maximum number of iterations\n\n    while max_iter > 0:\n        swapped = False\n        for i in range(max_iter):\n            if nums[i] > nums[i + max_iter]:\n                nums[i], nums[i + max_iter] = nums[i + max_iter], nums[i]\n                swapped = True\n\n        if not swapped:\n            break  # no more swaps, stop sorting\n\n        max_iter = int(max_iter * 0.9)  # reduce the maximum number of iterations\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 1:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n\n    for i in range(n):\n        if nums[i] < nums[i - n // 2]:\n            nums[i], nums[i - n // 2] = nums[i - n // 2], nums[i]\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # Calculate the difference of squares of n\n    diff_squares = n - (n**2)\n\n    # Check if difference is within the range of the square root of n\n    if diff_squares >= 0 and diff_squares <= int(n**0.5) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # create a list to store the squares of numbers from 1 to n\n    squares = [i**2 for i in range(1, n+1)]\n    \n    # check whether the given number can be represented as the difference of two squares or not\n    for i in range(len(squares)):\n        for j in range(len(squares)):\n            if i!=j and n-squares[i]-squares[j] in squares:\n                return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if the number is a perfect square, return True\n    if n == int(n**0.5)**2:\n        return True\n    # otherwise, check if any other number can be represented as the difference of two squares\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if (n - i*i)**2 == i*i:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    # Check if the given number is a difference of two squares\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0 and n % (i+i) == 0:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"Number cannot be represented as difference of two squares\"\n    elif n == 0 or n == 1:\n        return \"Number cannot be represented as difference of two squares\"\n    else:\n        square_root = int(n**(1/2))\n        if n == square_root**2:\n            return True\n        elif n == square_root**2 + square_root:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square of the given number\n    square = n**2\n    \n    # Find the difference between the square and half of the given number\n    diff = square - n\n    \n    # Check if the difference is a square\n    while diff**2 <= n:\n        if diff**2 == square:\n            return True\n        diff += 1\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # finding the square of the given number\n    square = n * n\n    # finding the difference between the given number and the square\n    diff = n - square\n    # checking whether the difference is a square or not\n    if square == diff * diff:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initialize variables to store the square and its difference\n    square = int(n ** 0.5)\n    difference = square * square - n\n    \n    # check if the difference is a perfect square\n    if difference ** 0.5 % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Calculate the square of the number\n    square = n ** 2\n\n    # Check whether the square can be represented as the difference of two squares or not\n    for i in range(1, int(square ** 0.5) + 1):\n        if square - i ** 2 == i ** 2:\n            return True\n\n    # If the above loop has not returned True, then the square cannot be represented as the difference of two squares\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        i = 3\n        while i <= n//2:\n            if n % i == 0:\n                return False\n            i += 2\n    else:\n        i = 3\n        while i <= n//2:\n            if n % i == 0:\n                return False\n            i += 2\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return \"Error: the number of colors and patterns should be the same\"\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return \"Error: the colors do not follow the given sequence\"\n\n    return \"Yes, it follows the given sequence\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n\n    # Check if the lengths of colors and patterns arrays are equal\n    if n!= len(patterns):\n        return False\n\n    # Create a set to store the colors that have already been seen\n    seen = set()\n\n    # Iterate through the colors and patterns arrays\n    for i in range(n):\n        if colors[i] in seen:\n            # Check if the color is already seen in the patterns array\n            if patterns[colors[i]]!= patterns[seen]:\n                return False\n        else:\n            # Add the current color to the set and check if the pattern matches\n            seen.add(colors[i])\n            if patterns[colors[i]]!= patterns[i]:\n                return False\n\n    # If we reach this point, it means that all colors in the patterns array are also present in the colors array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n\n    :param colors: a list of colors (e.g. ['red', 'blue', 'green'])\n    :param patterns: a list of patterns (e.g. [['red', 'green'], ['blue', 'green'], ['red', 'blue']])\n    :return: True if it follows the sequence given in the patterns array, False otherwise.\n    \"\"\"\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i]!= colors[i+1]:\n            return False\n        for pattern in patterns:\n            if colors[i] not in pattern:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # initialize variables for the current pattern and the remaining colors\n    current_pattern = 0\n    remaining_colors = colors.copy()\n    \n    # loop through the patterns array\n    for pattern in patterns:\n        \n        # check if the pattern matches the current colors\n        if pattern == remaining_colors[:len(pattern)]:\n            \n            # increment the current pattern index\n            current_pattern += 1\n            \n            # remove the matched colors from the remaining colors\n            remaining_colors = remaining_colors[len(pattern):]\n            \n            # if the current pattern index is equal to the length of the patterns array, the function returns True\n            if current_pattern == len(patterns):\n                return True\n        \n        # if the pattern doesn't match the current colors, return False\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the lengths of the colors and patterns arrays are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through each pattern in the patterns array\n    for pattern in patterns:\n        # Check if the pattern contains only the colors in the colors array\n        if set(pattern)!= set(colors):\n            return False\n\n    # If all patterns are valid, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    pattern_count = [0] * n\n\n    for i in range(n):\n        pattern_count[colors.index(patterns[i])] += 1\n\n    for i in range(n):\n        if pattern_count[i]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples as input and an integer K as input.\n    It returns a list of tuples that have all elements divisible by K from the input list.\n\n    The function works as follows:\n    1. Create an empty list called \"result_list\" to store the output tuples.\n    2. Iterate through each tuple in the input list of tuples.\n    3. If all the elements in the current tuple are divisible by K, add the tuple to the \"result_list\".\n    4. Return the \"result_list\" after iterating through all the tuples.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        current_tuple = test_list[i]\n        if all(j % K == 0 for j in current_tuple):\n            result_list.append(current_tuple)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a new list of tuples containing all the tuples from the input list of tuples which have all elements divisible by K from the input list.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                tuples.append((test_list[i], test_list[j]))\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    result = []\n    for tup in test_list:\n        is_divisible = True\n        for element in tup:\n            if element % K!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_tuple_list = []\n    for tup in test_list:\n        # check if all elements of the tuple are divisible by k\n        if all(i % K == 0 for i in tup):\n            k_tuple_list.append(tup)\n    return k_tuple_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result = []\n    \n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split() #split the string into words\n\n    for word in words: #iterate over each word in the list\n        if len(word) % 2!= 0: #check if length of the word is odd or even\n            print(word, \"is an odd word.\")\n        else:\n            print(word, \"is an even word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # loop through the words and check their lengths\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # return True if the length is odd\n            return True\n        # if the length is even, continue to the next word\n        else:\n            continue\n\n    # if no odd lengths are found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function checks whether the length of the word is odd or even.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word + \" is odd\")\n        else:\n            print(word + \" is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s.split():\n        if len(i) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip()\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd\")\n        else:\n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Check the length of the word\n        if len(word) % 2 == 0:\n            print(word, \"is an even length\")\n        else:\n            print(word, \"is an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else False.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # The first tetrahedral number is 1.\n    if n == 1:\n        return 1\n    # Calculate the previous tetrahedral number.\n    prev_tetrahedral_number = tetrahedral_number(n-1)\n    # Calculate the nth tetrahedral number.\n    tetrahedral_number = 1 + 4*prev_tetrahedral_number\n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(((5 * n * (n+1)) ** 2 + n) / 15)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((8 * n * (3 * n - 1) ** 2) / 15)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function calculates the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n): \n        a, b = b, 4*a - b \n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the tetrahedral number\n    t = 0\n\n    # Loop through each digit of the input number\n    while n > 0:\n\n        # Add the number of digits to the tetrahedral number\n        t += n\n\n        # Get the last digit of the input number\n        d = n % 10\n\n        # Check if the last digit is odd\n        if d % 2 == 1:\n\n            # If the last digit is odd, add 4 to the tetrahedral number\n            t += 4\n\n        # Divide the input number by 10\n        n //= 10\n\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def helper(n, current, total):\n        if n == 0:\n            return total\n        elif n % 2 == 0:\n            return helper(n-1, 4*current, total)\n        else:\n            return helper(n-1, 3*current-1, total)\n\n    return helper(n, 1, 0)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n+1) * (2*n+1) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Define pi constant\n    pi = math.pi\n    \n    # Calculate volume of sphere\n    vol = (4/3) * pi * r**3\n    \n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with the given radius.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = \"\"\n    for i in range(len(strr)):\n        char += chr((ord(strr[i]) + 13)%26 + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the variable to 0\n    result = 0\n    # loop through each character of the string\n    for char in strr:\n        # convert each character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value of the character to the result variable\n        result += ascii_val\n    # return the result modulo 26\n    return result % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Find the length of the string\n    length = len(strr)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate over all the characters of the string\n    for i in range(length):\n        # Add the ASCII value of each character to the sum variable modulo 26\n        sum += ord(strr[i])\n\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # initialize a variable to store the character\n    char = 0\n    # loop through each character of the string\n    for i in strr:\n        # add the ASCII value of each character to the character variable\n        char += ord(i)\n    # convert the character variable to a string and return it\n    return chr(char % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = sum(ord(char) for char in strr) % 26\n    char_ascii = sum_ascii + ord('a') - 1\n    char = chr(char_ascii)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(strr)\n    \n    # Initialize a variable to store the sum of ASCII values of characters\n    sum = 0\n    \n    # Iterate over the list of characters and add their ASCII values to the sum\n    for char in char_list:\n        sum += ord(char)\n    \n    # Get the character made by adding the ASCII values modulo 26\n    result = chr((sum % 26) + 65)\n    \n    # Return the character\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the given string to lowercase\n    strr = str(strr).lower()\n    # Initialize the sum of ASCII values of characters\n    sum_ascii = 0\n    # Iterate over each character of the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum\n        sum_ascii += ord(char)\n    # Find the character made by adding the ASCII value of all the characters of the string modulo 26\n    char = chr((sum_ascii % 26) + 97)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_num = ascii_sum % 26\n    return chr(ord('a') + char_num)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        new_sequence = []\n        for j in range(len(sequence)):\n            if sequence[j] == 1:\n                new_sequence.append(0)\n                if j > 0 and sequence[j-1] == 1:\n                    new_sequence[-1] = 1\n            else:\n                new_sequence.append(1)\n        sequence = new_sequence\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n + 1):\n        if sequence[i - 1] == 1:\n            sequence.append(1)\n        else:\n            sequence.append(0)\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n\n    for i in range(2, n):\n        sequence.append(sequence[-2] + sequence[-1])\n\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # initialize the sequence to 1\n    sequence = [1]\n    # loop n-1 times\n    for i in range(n-1):\n        # create a new sequence with the previous sequence plus its previous sequence\n        sequence.append(sequence[i] + sequence[i-1])\n    # return the nth element in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(len(sequence))\n    return sequence[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 0\n    while i < n-1:\n        if sequence[i] == 1:\n            sequence.append(2*sequence[i]+1)\n        elif sequence[i] == 2:\n            sequence.append(1)\n        elif sequence[i] == 3:\n            sequence.append(1)\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = (4/3) * pi * r * r\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Define a function to calculate the surface area of a sphere\n    def surface_area(r):\n        return (4/3) * math.pi * r**3\n    \n    # Calculate and return the surface area of the sphere\n    return surface_area(r)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Calculate the surface area using the formula for a sphere\n    surface_area = 4 * math.pi * r**2\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_helper(n, row, col):\n        \"\"\"\n        Helper function to find centered hexagonal number.\n        \"\"\"\n        if row == n:\n            return col * (col + 1) // 2\n        if row % 2 == 0:\n            return centered_hexagonal_helper(n, row + 1, col + 1)\n        else:\n            return centered_hexagonal_helper(n, row - 1, col + 1)\n\n    return centered_hexagonal_helper(1, 0, 0)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n\n    # loop through the number of terms\n    for i in range(1, n+1):\n        # calculate the centered hexagonal number\n        centered_hexagonal_number = ((a + b) ** 2) - ((b + c) ** 2) + ((c + d) ** 2) - ((d + e) ** 2) + ((e + a) ** 2)\n\n        # print the centered hexagonal number\n        print(centered_hexagonal_number)\n\n        # update the values of the variables for the next iteration\n        a = centered_hexagonal_number\n        b = c\n        c = d\n        d = e\n        e = centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        \"\"\"\n        Calculate the nth centered hexagonal number.\n        \"\"\"\n        k = (2 * n + 1) // 3\n        return ((1 << k) - 1) // 2 + 1\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to get hexagonal number from its edge\n    def edge_to_hexagon(edge):\n        return (edge ** 2 + 1) // 2\n\n    # Function to get the edge of a hexagon from its number\n    def hexagon_to_edge(num):\n        return (3 * num ** 2 + 1) // 2\n\n    # Find the edge of the nth centered hexagonal number\n    edge = 5 * n - 3\n    hexagon = edge_to_hexagon(edge)\n\n    # Get the edge of the centered hexagon\n    centered_edge = hexagon_to_edge(n)\n\n    # Calculate the distance from the center\n    distance = centered_edge - edge\n\n    # Return the sum of the edge and distance\n    return hexagon + distance"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: n = 1\n    if n == 1:\n        return 1\n    \n    # Base case: n = 2\n    if n == 2:\n        return 10\n    \n    # Base case: n = 3\n    if n == 3:\n        return 47\n    \n    # Calculate the nth centered hexagonal number using formula:\n    #   1/2 * (n^2 - 3n + 2)\n    return int(1/2 * (n**2 - 3*n + 2))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize first two numbers of the sequence\n    sequence = [1, 2]\n    # loop until nth number is found\n    for i in range(2, n+1):\n        # calculate next number in the sequence\n        next_number = (sequence[-1] + sequence[-2]) // 2\n        # add the next number to the sequence\n        sequence.append(next_number)\n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_number = (5 * n * n) + (16 * n) + 10\n    centered_hexagonal_number = hexagonal_number - (n * (n - 1))\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_helper(n, side):\n        if n == 1:\n            return side\n        else:\n            return centered_hexagonal_helper(n-1, 2 * side)\n\n    return centered_hexagonal_helper(n, 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    base = 0.75\n    num = 0\n    for i in range(n):\n        num += (i+1) * (base ** i)\n    return int(num)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries\n    merged_dict = {**dict1, **dict2}\n    \n    # Merge the third dictionary with the merged dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries into a single dictionary\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    # Iterate through the three dictionaries and add their key-value pairs to the merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new empty dictionary\n    merged_dict = {}\n    \n    # iterate through the three dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n        \n    for key, value in dict2.items():\n        merged_dict[key] = value\n        \n    for key, value in dict3.items():\n        merged_dict[key] = value\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged result\n    merged_dict = {}\n    # Iterate through the first two dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    # Iterate through the third dictionary and add its keys and values to the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Convert list to set to remove duplicates\n    unique_lst = set(lst)\n    \n    # Count the frequency of each element in the set using a dictionary\n    freq_dict = collections.Counter(unique_lst)\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list,\n    returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    closest = None\n    for i in range(1, N+1):\n        if abs(i-N) < diff:\n            diff = abs(i-N)\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    prev_num = 0\n    next_num = 1000000000 # set to the maximum value of an integer\n    \n    # Iterate through the list of numbers from 1 to N\n    while next_num <= N:\n        mid_num = (prev_num + next_num) // 2 # find the midpoint of the range\n        if mid_num < N: # if the midpoint is less than N, it's the smaller number\n            prev_num = mid_num # update the previous number\n        else: # if the midpoint is greater than or equal to N, it's the larger number\n            next_num = mid_num # update the next number\n    \n    # Return the closest smaller number\n    return prev_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = list(range(N+1))\n    for i in range(len(n_list)):\n        for j in range(i, len(n_list)):\n            if n_list[i] > n_list[j]:\n                n_list[i], n_list[j] = n_list[j], n_list[i]\n                break\n    return n_list[N]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    min_diff = float('inf')\n    closest = N\n\n    # Loop through the numbers from 1 to N\n    for num in range(1, N+1):\n\n        # Calculate the difference between N and the current number\n        diff = abs(N - num)\n\n        # Check if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest_diff = float('inf')\n    closest = float('inf')\n    # Loop through all possible numbers from 1 to n\n    for i in range(1, N + 1):\n        # Calculate difference from n\n        diff = abs(i - N)\n        # Update closest and smallest_diff\n        if diff < smallest_diff:\n            closest = i\n            smallest_diff = diff\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the closest smaller number than n\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    min_num = N\n    closest_num = N\n    diff = abs(N - min_num)\n\n    # Iterate through the range of numbers\n    for i in range(1, N):\n        if abs(i - N) < diff:\n            closest_num = i\n            diff = abs(i - N)\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    else:\n        i = 5\n        while i < n:\n            if n - i < i:\n                return n - i\n            i += 1\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = sorted([x for x in range(1, N+1)])\n    if nums[0] < N:\n        return nums[0]\n    else:\n        return nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # sort the input list\n    numbers = sorted(N)\n\n    # initialize variables to keep track of closest smaller number and its distance\n    closest = numbers[0]\n    distance = abs(numbers[0] - N)\n\n    # loop through the sorted list\n    for num in numbers:\n        # calculate the distance between num and the closest smaller number\n        temp_distance = abs(num - N)\n\n        # update the closest smaller number and its distance if the current number is closer\n        if temp_distance < distance:\n            closest = num\n            distance = temp_distance\n\n    # return the closest smaller number\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n\n    Args:\n        list1 (list): a list of words\n\n    Returns:\n        int: the length of the longest word in the list\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n\n    longest_word = ''\n\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    values = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    for value in values:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (str): The string to search for in the list of string values.\n    sub_str (str): The substring to search for in the list of string values.\n\n    Returns:\n    bool: True if the substring is found, False otherwise.\n    \"\"\"\n    if str1 in str_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Loop through the list of strings\n    for word in str1:\n        # Check if the substring is present in the word\n        if sub_str in word:\n            # If it is, return True\n            return True\n\n    # If we reach this point, the substring was not found in the list\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str_list, sub_str):\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # create a list of string values\n    lst = ['hello', 'world', 'python']\n\n    # loop through the list of values and check if the given string is present as a substring\n    for value in lst:\n        if sub_str in value:\n            print(\"The substring '{}' is present in the value '{}'\".format(sub_str, value))\n            return True\n\n    # if the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if sub_str is present in str1\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two parameters, str1 and sub_str, which are the string to search for and the string to search in.\n    It returns a boolean value indicating whether str1 is present as a substring in the list of string values.\n    \"\"\"\n    if isinstance(str1, list):\n        for s in str1:\n            if sub_str in s:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for i in range(len(str1)):\n            if sub_str in str1[i]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        str: \"undulating\" if the number is undulating, \"stationary\" otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return \"undulating\"\n    else:\n        return \"stationary\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Calculate the sum of the squares of all digits\n    square_sum = sum([int(digit)**2 for digit in str(n)])\n\n    # Check whether the square sum is odd or even\n    if square_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return \"The number is not undulating.\"\n    elif n == 1:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return \"The number is undulating\"\n    elif n == 0:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is negative\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b//2) * power(a, b//2)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n    a (int): The base of the power.\n    b (int): The exponent of the power.\n\n    Returns:\n    int: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1 / power(a, -b)\n    elif b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_value = float('inf')\n    min_index = None\n    for i, tup in enumerate(test_list):\n        if tup[1] < min_value:\n            min_value = tup[1]\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000 # initialize min_length to a very large value (since we don't know the actual length of any list yet)\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initializing minimum length as infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize a variable to store the minimum length found so far\n    min_length = lst[0][0]\n    # loop through each list in the list of lists\n    for sub_list in lst:\n        # check if the length of the current sublist is less than the minimum so far\n        if len(sub_list) < min_length:\n            # update the minimum length to the length of the current sublist\n            min_length = len(sub_list)\n    # return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for i in lst:\n        if len(i) < length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through numbers from 1 to n-1\n    for i in range(1, n):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if it is, increment count by 1\n            count += 1\n\n    # return count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer `n`.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + divisor(n-1)"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Define an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each list in the list1\n    for lst in list1:\n        # Loop through each element in the list\n        for elem in lst:\n            # If the element is already in the dictionary, increment its count by 1\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                freq_dict[elem] = 1\n    # Return the dictionary with frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        flattened_list += sublist\n    freq_dict = {}\n    for elem in flattened_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Create an empty dictionary to store the frequency\n    freq_dict = {}\n    # Iterate over the flattened list and update the frequency dictionary\n    for item in flat_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Convert the nested list to a single list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n\n    # Loop through the list of lists\n    for sublist in list1:\n        # Loop through each element in the sublist\n        for elem in sublist:\n            # If the element is already in the dictionary, increment its count by 1\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                freq_dict[elem] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element in the flattened list\n    frequency = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n\n        # if the element is already in the dictionary, increment its value by 1\n        if element in frequency:\n            frequency[element] += 1\n\n        # otherwise, add the element to the dictionary with a value of 1\n        else:\n            frequency[element] = 1\n\n    return frequency"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum([num * len(numbers) for num in numbers]) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to store the binary representation of n\n    binary_str = ''\n    # Loop through the digits of n from right to left\n    for i in range(len(str(n))):\n        # Extract the last i digits of n\n        digit = n % 2\n        # Convert the digit to a binary string\n        binary_digit = str(digit)\n        # Add a leading zero if necessary\n        if len(binary_digit) == 1:\n            binary_digit = '0' + binary_digit\n        # Append the binary digit to the binary string\n        binary_str = binary_digit + binary_str\n        # Remove the last digit of n\n        n = n // 2\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    # Initialize an empty string to store the binary representation\n    binary = ''\n    # Iterate over the digits of the string in reverse order\n    for i in range(len(s)-1, -1, -1):\n        # If the current digit is 1, append 1 to the binary string\n        if int(s[i]) == 1:\n            binary = '1' + binary\n        # If the current digit is 0, append 0 to the binary string\n        else:\n            binary = '0' + binary\n    # Return the binary representation without any leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = ''\n    while n > 0:\n        binary_number = str(n % 2) + binary_number\n        n //= 2\n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty string to store the binary representation\n    binary_str = \"\"\n\n    # while n is greater than 0, do the following\n    while n > 0:\n        # get the remainder of n divided by 2 and append it to the binary_str\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        # divide n by 2 to get the next iteration of n\n        n = n // 2\n\n    # return the binary_str without leading zeros\n    return binary_str.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to hold the binary representation\n    binary_str = \"\"\n    \n    # iterate through each bit of the binary representation\n    while n > 0:\n        # get the last bit of the decimal number\n        bit = n % 2\n        \n        # add the bit to the beginning of the binary string\n        binary_str = str(bit) + binary_str\n        \n        # shift the decimal number to the right by 1 bit\n        n = n // 2\n    \n    # return the binary string without any leading zeros\n    return binary_str.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using bitwise operations\n    binary_str = bin(n)[2:]\n    # Remove leading zeros from the binary string\n    while binary_str.startswith('0'):\n        binary_str = binary_str[1:]\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    A helper function to check if a given number is a palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Find the largest palindrome less than or equal to the specified integer\n    largest_palindrome = 0\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome += 1\n    # Find the smallest palindrome greater than the largest palindrome less than or equal to the specified integer\n    smallest_palindrome = largest_palindrome + 1\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n    # Check if the next smallest palindrome is less than the specified integer\n    if smallest_palindrome > num:\n        return smallest_palindrome\n    else:\n        return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is a single digit number\n    if len(str(num)) == 1:\n        return num\n\n    # Initialize the current and next smallest palindromes\n    current_palindrome = num\n    next_palindrome = num + 1\n\n    # Loop until the next palindrome is greater than the current palindrome\n    while next_palindrome >= current_palindrome:\n        current_palindrome = next_palindrome\n        next_palindrome += num\n\n    return current_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Find the length of the string\n    length = len(num_str)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the next number\n        return num + 1\n    else:\n        # If it's not, find the next smallest palindrome\n        for i in range(length + 1):\n            # For each digit from right to left\n            for j in range(i + 1, length + 1):\n                # Check if the next palindrome starts with that digit\n                if num_str[:j] == num_str[j:j+i] and num_str[j:j+i][::-1] == num_str[:j]:\n                    # If it does, return the next palindrome\n                    return int(num_str[j:j+i] + str(int(num_str[j:j+i]) + 1))\n        # If no palindrome found, return None\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    # Convert the given number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, increment the last digit until we find a palindrome\n        while not is_palindrome(int(num_str)):\n            num_str = str(int(num_str) + 1)\n        return int(num_str)\n\n    # If the number is not a palindrome, increment the first digit until we find a palindrome\n    while not is_palindrome(int(num_str)):\n        num_str = str(int(num_str) + 1)\n\n    # Increment the first digit until we find a palindrome\n    while not is_palindrome(int(num_str)):\n        num_str = str(int(num_str) + 1)\n\n    # Find the smallest palindrome greater than the last digit\n    while int(num_str[-1]) == 0:\n        num_str = num_str[:-1]\n\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Find the largest palindrome less than or equal to the integer\n    for i in range(10**(len(num_str)-1), -1, -1):\n        if str(i*i) < num_str:\n            return int(str(i*i))\n\n    # If there is no palindrome less than or equal to the integer, return the largest integer\n    return sys.maxsize"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    if num % 2 == 0:\n        # If the number is even, add 1 to it to get the smallest odd number\n        num += 1\n\n    # Find the square root of the number\n    sqrt_num = int(num ** 0.5)\n\n    # Subtract 1 from the square root to get the smallest prime factor\n    smallest_factor = sqrt_num - 1\n\n    # Find the product of the smallest prime factor and the number\n    product = smallest_factor * num\n\n    # Find the product of the smallest prime factor and the smallest odd number\n    smallest_odd_product = smallest_factor * (sqrt_num + 1)\n\n    # Check if the product is equal to the smallest odd number\n    if product == smallest_odd_product:\n        return product\n    else:\n        # If the product is greater than the smallest odd number, return the product\n        return product + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 0:\n        num = -num\n    n = len(str(num))\n    if n == 1:\n        return num + 1\n    elif n == 2:\n        return num * 10 + 9\n    else:\n        for i in range(1, 10):\n            if i * 10 <= num:\n                new_num = (num // i) * i + i\n                if new_num >= 100:\n                    continue\n                new_num_str = str(new_num)\n                if new_num_str == new_num_str[::-1]:\n                    return new_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a given number is palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer.\n    '''\n    # check if num is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # iterate through odd numbers in reverse order until we find a palindrome\n    for i in range(num - 1, 1, -1):\n        if is_palindrome(i):\n            return i * 10 + 1\n\n    # iterate through even numbers in reverse order until we find a palindrome\n    for i in range(num // 2, 0, -1):\n        if is_palindrome(i):\n            return i * 100 + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num + 1\n    \n    # Create a list of primes up to the square root of the input number\n    primes = []\n    sqrt = int(num**0.5) + 1\n    for i in range(2, sqrt+1):\n        if is_palindrome(i) and is_palindrome(num - i):\n            primes.append(i)\n            primes.append(num - i)\n    \n    # Find the next smallest prime in the list\n    for i in range(sqrt, 1, -1):\n        if num - i in primes:\n            return num - i\n    \n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the given integer to a string\n    str_num = str(num)\n    # reverse the string\n    str_num_rev = str_num[::-1]\n    # convert the reversed string back to an integer\n    int_num_rev = int(str_num_rev)\n    # add 1 to the reversed integer and convert it back to a string\n    str_num_rev = str(int_num_rev+1)\n    # convert the reversed string back to an integer\n    int_num_rev = int(str_num_rev)\n    # find the next smallest palindrome\n    next_palindrome = int_num_rev\n    # return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return -1\n    i = 0\n    j = n - 1\n    while i <= j:\n        if k == 1:\n            return arr[i]\n        if k < 1:\n            k = k + n\n        if k <= n:\n            pivot = arr[i]\n            left = i + 1\n            right = j\n            done = False\n            while not done:\n                while left <= right and arr[left] < pivot:\n                    left = left + 1\n                while arr[right] > pivot and right >= left:\n                    right = right - 1\n                if right < left:\n                    done = True\n                else:\n                    arr[left], arr[right] = arr[right], arr[left]\n            arr[i], arr[right] = arr[right], arr[i]\n            if k == right + 1:\n                return arr[right]\n            elif k < right + 1:\n                j = right - 1\n            else:\n                i = right + 1\n        else:\n            k = k - n\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k <= 0:\n        return None\n    if k == 1:\n        return arr[0]\n    return kth_element(arr[1:], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # find the middle index of the array\n    mid = len(arr) // 2\n    \n    # if the kth element is in the first half of the array\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n    # if the kth element is in the second half of the array\n    else:\n        # recursively find the kth element in the second half of the array\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is less than or equal to 0\n    if len(arr) <= 0:\n        return \"Array is empty or has less than one element\"\n\n    # Check if the k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        return \"k must be a positive integer\"\n\n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n\n    # Check if the k is greater than the total number of elements\n    if k > total_elements:\n        return \"k is greater than the total number of elements in the array\"\n\n    # Initialize the index variable\n    index = 1\n\n    # Loop through the array and add up the number of elements less than or equal to k\n    while index <= total_elements:\n        count = sum([1 for i in arr if i <= index])\n\n        # Check if the count equals k\n        if count == k:\n            return index\n        # If the count is greater than k, move the index to the next element greater than k\n        elif count > k:\n            index += 1\n        # If the count is less than k, move the index to the next element greater than or equal to k\n        else:\n            index += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return arr[-1]\n    # compute the midpoint and recursively search the left or right half of the array\n    mid = n // 2\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    if k == 1:\n        return arr[0]\n    if k > len(arr):\n        return None\n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n    if k < mid + 1:\n        return kth_element(left_arr, k)\n    else:\n        return kth_element(right_arr, k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Get the length of the array\n    n = len(arr)\n\n    # Check if the k is valid\n    if k < 1 or k > n:\n        raise ValueError(\"k must be between 1 and the length of the array\")\n\n    # Initialize the first and last indexes of the window\n    first = 0\n    last = n - 1\n\n    # Initialize the sum of the elements in the window\n    window_sum = arr[0] + arr[last]\n\n    # Check if the kth element is present in the middle of the window\n    if k == n // 2:\n        return window_sum\n\n    # Initialize the sum of the elements in the left and right halves of the window\n    left_sum = 0\n    right_sum = window_sum\n\n    # Loop through the window and update the sum of the elements in the window\n    for i in range(1, n - 1):\n        window_sum += arr[i] - arr[i - 1]\n\n        # Check if the kth element is in the left half of the window\n        if k <= i:\n            left_sum = max(left_sum, window_sum - arr[i - k + 1])\n\n        # Check if the kth element is in the right half of the window\n        if i + k - 1 <= n:\n            right_sum = max(right_sum, window_sum - arr[i])\n\n        # If the kth element is found, return the sum of the elements in the left and right halves of the window\n        if k == i + k - 1:\n            return left_sum + arr[i - k + 1]\n\n    # If the kth element is not found in the window, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError(\"Array is smaller than k.\")\n    elif k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if k == mid:\n            return arr[k - 1]\n        elif k < mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    raise ValueError(\"k is not a valid index in the array.\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if k == mid:\n                return arr[k-1]\n            elif k < mid:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i == 0 and word[i].isupper():\n            result += word[i].lower()\n        elif word[i] == '_':\n            continue\n        else:\n            result += word[i].upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words using underscores as the delimiter\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    camel_word = words[0].capitalize()\n\n    # Loop through the remaining words and add an underscore to the camel case word\n    for i in range(1, len(words)):\n        camel_word += '_' + words[i].capitalize()\n\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    word_list = word.split(\"_\")\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case += word_list[i].lower()\n        else:\n            camel_case += word_list[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all letters to lowercase\n    word = word.lower()\n    # Split the string into words using underscores as separators\n    words = word.split(\"_\")\n    # Capitalize the first letter of each word\n    camel_words = [words[0]]\n    for i in range(1, len(words)):\n        camel_words.append(words[i][0].upper() + words[i][1:])\n    # Join the camel case words with underscores as separators\n    camel_word = \"_\".join(camel_words)\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += \"_\"\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([x.title() if i == 0 else x.lower() for i, x in enumerate(word.split('_'))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Initialize an empty string to hold the camel case word\n    camel_case_word = ''\n\n    # Loop through the list of words\n    for word in words:\n        # Capitalize the first letter of each word\n        capitalized_word = word.capitalize()\n\n        # Add the capitalized word to the camel case word\n        camel_case_word += capitalized_word\n\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with underscores\n    camel_case_word = '_'.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Remove underscores from the word\n    word = word.replace('_', '')\n    # Split the word into words using CamelCase\n    camel_words = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_words.append(word[i].upper())\n        elif word[i] == '_':\n            camel_words.append('')\n        else:\n            camel_words[-1] += word[i]\n    # Join the CamelCase words back together\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 0\n    \n    # Calculate the Eulerian number using Horner's method\n    for i in range(1, n+1):\n        a = (a * i) % m\n        b = (b * i + 1) % m\n        c = (c * i + 1) % m\n        \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1 and m == 2:\n        return 1\n    elif n == 2 and m == 1:\n        return 2\n    elif n == 2 and m == 2:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Helper function to check if a matrix is Eulerian\n    def is_eulerian(matrix):\n        row_sum = [sum(row) for row in matrix]\n        col_sum = [sum(matrix[i]) for i in range(len(matrix))]\n        return row_sum == col_sum\n\n    # Helper function to find the shortest path between two nodes\n    def shortest_path(graph, start, end):\n        visited = set()\n        queue = [(start, [start])]\n        while queue:\n            node, path = queue.pop(0)\n            if node in visited or node == end:\n                return path\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, path + [neighbor]))\n\n    # Helper function to construct the graph\n    def construct_graph(adj_matrix):\n        n = len(adj_matrix)\n        graph = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if adj_matrix[i][j] == 1:\n                    graph[i].append(j)\n        return graph\n\n    # Function to find the Eulerian number a(n, m)\n    def eulerian_num_helper(n, m):\n        # Initialize the adjacency matrix\n        adj_matrix = [[0] * m for _ in range(n)]\n        # Populate the adjacency matrix\n        for i in range(n):\n            for j in range(m):\n                if (i, j) == (0, 0):\n                    adj_matrix[i][j] = 1\n                elif (i, j) == (n - 1, m - 1):\n                    adj_matrix[i][j] = 1\n                else:\n                    adj_matrix[i][j] = 0\n\n        # Construct the graph\n        graph = construct_graph(adj_matrix)\n\n        # Find the shortest path from 0, 0 to n - 1, m - 1\n        path = shortest_path(graph, (0, 0), (n - 1, m - 1))\n\n        # Compute the Eulerian number a(n, m)\n        eulerian_num = 1\n        for i in range(len(path) - 1):\n            eulerian_num *= adj_matrix[path[i]][path[i + 1]]\n        return eulerian_num\n\n    # Call the helper function with the given values of n and m\n    result = eulerian_num_helper(n, m)\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Euler's formula\n    a = n * (n - 1) // 2 - (m - 1) * (m - 1) // 2\n    \n    # Return the value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    return n * (n-1) // 2 + 2 * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    a = 0\n    for i in range(n):\n        a += (-1) ** i * binomial(n, i) * (i - 1) ** m\n\n    return a\n\ndef binomial(n, k):\n    '''\n    Write a function to compute the binomial coefficient C(n, k).\n    '''\n\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(1, k+1):\n            result *= (n-i+1) // i\n        return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize a list of prime numbers\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n\n    # Initialize a list to store Eulerian numbers\n    eulerian_numbers = []\n\n    # Initialize a list to store the row sums\n    row_sums = []\n\n    # Initialize a list to store the column sums\n    col_sums = []\n\n    # Initialize a dictionary to store the parity of the numbers\n    parity_dict = {}\n\n    # Initialize the row and column sums\n    row_sum = 0\n    col_sum = 0\n\n    # Loop through each prime number in the list\n    for prime in primes:\n\n        # Check if the row sum is already greater than the number itself\n        while row_sum > prime:\n\n            # Calculate the new row sum\n            row_sum -= primes[row_sums.index(max(row_sums))]\n\n        # Check if the column sum is already greater than the number itself\n        while col_sum > prime:\n\n            # Calculate the new column sum\n            col_sum -= primes[col_sums.index(max(col_sums))]\n\n        # Check if the parity of the row and column sums is already known\n        if (prime, row_sum) in parity_dict and (prime, col_sum) in parity_dict:\n\n            # If both sums are the same parity, add the prime to the list\n            if parity_dict[(prime, row_sum)] == parity_dict[(prime, col_sum)]:\n                eulerian_numbers.append(prime)\n\n            # If one sum is odd and the other is even, add the prime to the list\n            elif parity_dict[(prime, row_sum)] == 1 and parity_dict[(prime, col_sum)] == 0:\n                eulerian_numbers.append(prime)\n\n            # If one sum is even and the other is odd, add the prime to the list\n            elif parity_dict[(prime, row_sum)] == 0 and parity_dict[(prime, col_sum)] == 1:\n                eulerian_numbers.append(prime)\n\n            # If the sums have different parity, add the prime to the list\n            else:\n                eulerian_numbers.append(prime)\n\n        # If the parity of the row and column sums is not known, update the dictionary\n        else:\n            parity_dict[(prime, row_sum)] = 1\n            row_sums.append(row_sum)\n            parity_dict[(prime, col_sum)] = 0\n            col_sums.append(col_sum)\n\n        # Calculate the new row sum\n        row_sum += prime\n\n        # Calculate the new column sum\n        col_sum += prime\n\n    # Check if there are any Eulerian numbers\n    if not eulerian_numbers:\n        print(\"There are no Eulerian numbers in the range (0, \", n, \") x (0, \", m, \")\")\n    else:\n        print(\"Eulerian numbers in the range (0, \", n, \") x (0, \", m, \") are:\", eulerian_numbers)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define the function to find the Eulerian number\n    def euler(n, m):\n        if n == 1 and m == 1:\n            return 1\n        elif n == 2 and m == 2:\n            return 0\n        else:\n            return euler(n-1, m) + euler(n, m-1)\n\n    # Call the function and return the result\n    return euler(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # initialize the matrix\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # initialize the first row and first column\n    matrix[1][1] = 1\n\n    # iterate through the remaining elements\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1]\n\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        a = (n * (n-1)) // 2\n    else:\n        a = (m * (m-1)) // 2\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Define a nested loop to iterate over the sublists in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist using the sort() method\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # iterate over each sublist in the input list\n    for sublist in input_list:\n        # sort the sublist using the sorted() function and the key parameter set to a lambda function that returns the first element of each string in the sublist\n        sorted_sublist = sorted(sublist, key=lambda x: x[0])\n        # replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Assign the sorted sublist back to the same index in the input list\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) is bool and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup += (test_list,)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += test_list\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the given list to a tuple\n    list_as_tuple = tuple(test_list)\n    # append the tuple to the given tuples\n    return (test_tup + (list_as_tuple,))"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists and tuples\n    combined = test_list + test_tup\n    return combined"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    \n    # Append the lists to the tuples\n    test_list += test_tup\n    \n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Concatenate the lists and tuples\n    new_list = test_list + test_tup\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert test_list to a list\n    test_list = list(test_list)\n    # convert test_tup to a tuple\n    test_tup = tuple(test_tup)\n    # append test_list to test_tup\n    test_tup += test_list\n    # return test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] + test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapsort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use a min-heap to store the unique elements of the merged list\n    unique_list = []\n    min_heap = []\n    \n    # Iterate through the merged list\n    for element in merged_list:\n        # If the element is not in the min-heap, add it to the unique list\n        if len(min_heap) == 0 or element <= min_heap[0]:\n            heapq.heappush(min_heap, element)\n        # If the element is already in the min-heap, check if it needs to be added to the unique list\n        elif element > min_heap[0]:\n            while len(min_heap) > 0 and element > min_heap[0]:\n                heapq.heappop(min_heap)\n            heapq.heappush(min_heap, element)\n    \n    # Convert the min-heap to a sorted list and return it\n    return sorted(min_heap)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the lists to lists of tuples\n    nums = [(x, y, z) for x in num1 for y in num2 for z in num3]\n    # create a min heap of tuples (num, index)\n    heap = [(x, i) for i, x in enumerate(nums)]\n    # heapify the heap\n    heapq.heapify(heap)\n    # create a new list to hold the merged list\n    merged = []\n    # while there are elements in the heap\n    while heap:\n        # extract the smallest element from the heap and append it to the merged list\n        num, index = heapq.heappop(heap)\n        merged.append(num)\n        # append the remaining elements to the heap (if any)\n        for i in range(index + 1, len(nums)):\n            heapq.heappush(heap, (nums[i], i))\n    # return the merged list\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            sorted_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) <= heapq.heappop(num3):\n            sorted_list.append(heapq.heappop(num2))\n        else:\n            sorted_list.append(heapq.heappop(num3))\n\n    while len(num1) > 0:\n        sorted_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        sorted_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        sorted_list.append(heapq.heappop(num3))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists into one list\n    all_numbers = num1 + num2 + num3\n    \n    # sort the list in ascending order\n    all_numbers.sort()\n    \n    return all_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine three lists into one\n    combined_list = sorted(num1 + num2 + num3)\n    return combined_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n            \n    while num1 or num2:\n        if num1:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n            \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = bin(int(s, 10))[2:].zfill(8*n)\n    odd_count = 0\n    for i in range(8*n):\n        if binary_string[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # Initializing variables\n    count = 0\n    temp = s[0]\n    char = s[0]\n    \n    # Looping for n number of rotations\n    for i in range(n):\n        # Finding the next character in the binary string\n        if temp == '1':\n            char = '0'\n        else:\n            char = '1'\n            \n        # Finding the next character in the binary string after rotation\n        temp = char\n        \n        # Incrementing count for each odd character found in the binary string\n        if char == '1':\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to an integer\n    binary_num = int(s, 2)\n\n    # Initialize the counter\n    count = 0\n\n    # Loop for n times\n    for i in range(n):\n        # Shift the bits to the left\n        binary_num = binary_num << 1\n\n        # If the result is odd, increment the counter\n        if binary_num & 1:\n            count += 1\n\n        # Rotate the result by 1 bit to the right\n        binary_num = binary_num >> 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s_list = list(s)\n    odd_count = 0\n    for i in range(n):\n        for j in range(len(s_list)):\n            if s_list[j] == '1':\n                s_list[j] = '0'\n            else:\n                s_list[j] = '1'\n        odd_count += sum([int(x) for x in s_list if x == '1'])\n        temp = s_list[:len(s_list)//2]\n        temp += s_list[len(s_list)//2+1:]\n        s_list = temp\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n\n    # initialize the counter to 0\n    count = 0\n\n    # rotate the list of bits the given number of times\n    for i in range(n):\n        bits.append(bits.pop(0))\n\n    # loop through the rotated list of bits and count the odd numbers\n    for bit in bits:\n        if bit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in the binary string after rotating it n times.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    n_bits = len(s)\n\n    # convert binary string to binary number\n    binary_num = int(s, 2)\n\n    # rotate binary number n times and calculate the remainder\n    rotated_num = binary_num % 2 ** n\n\n    # calculate the number of odd bits\n    for i in range(n_bits):\n        if rotated_num % 2 == 1:\n            count += 1\n        rotated_num //= 2\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Remove spaces and convert to lowercase\n    s = s.replace(' ', '').lower()\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    # Initialize the index of the current string\n    index = 0\n    # Loop n times\n    for i in range(n):\n        # Get the next string\n        next_string = s[index:] + s[:index]\n        # Check if the next string contains odd numbers\n        if any(int(x) % 2 == 1 for x in next_string):\n            # Append the next string to the list of odd numbers\n            odd_numbers.append(next_string)\n        # Increment the index\n        index += 1\n    # Return the number of odd numbers found\n    return len(odd_numbers)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize the count of odd numbers to 0\n    count = 0\n\n    # Initialize the current position of the binary string\n    i = 0\n\n    # Loop through the given number of times\n    for _ in range(n):\n\n        # Loop through each digit in the binary string\n        for j in range(len(s)):\n\n            # If the current digit is odd, increment the count\n            if int(s[j]) % 2 == 1:\n                count += 1\n\n            # Move to the next position in the string\n            i = (i + 1) % len(s)\n\n    # Return the count of odd numbers found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    # Convert the binary string to a list of integers \n    binary_list = list(map(int,s)) \n    # Initialize the count to 0 \n    count = 0 \n    # Rotate the binary list n times \n    for i in range(n): \n        # Reverse the list \n        binary_list.reverse() \n        # Count the number of odd values \n        count += sum(binary_list) \n        # Rotate the list again \n        binary_list.reverse() \n    # Return the count of odd values \n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    Input:\n    s: binary string\n    n: number of rotations\n    \n    Output:\n    count: number of odd values after rotating the binary string n times\n    \n    \"\"\"\n    \n    # convert binary string to list\n    s_list = [int(x) for x in s]\n    \n    # rotate the list n times\n    for _ in range(n):\n        s_list = s_list[-len(s_list):] + s_list[:-len(s_list)]\n    \n    # count the number of odd values in the rotated list\n    count = 0\n    for x in s_list:\n        if x % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Parameters:\n    nestedlist (list): A list of lists. Each inner list contains elements to be compared.\n\n    Returns:\n    list: A list of common elements found in all inner lists.\n    \"\"\"\n\n    # Initialize an empty list to hold the common elements\n    common_elems = []\n\n    # Iterate over all inner lists\n    for innerlist in nestedlist:\n\n        # Convert the inner list to a set to remove duplicates\n        set_innerlist = set(innerlist)\n\n        # Iterate over all inner lists in the original list\n        for innerlist2 in nestedlist:\n\n            # Skip comparing with the same list\n            if innerlist == innerlist2:\n                continue\n\n            # Convert the other inner list to a set and check for overlap\n            set_innerlist2 = set(innerlist2)\n            if set_innerlist2.intersection(set_innerlist):\n\n                # Add the common element to the list of common elements\n                common_elems.append(innerlist2)\n\n    return common_elems"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create a set of all elements in the first list\n    first_set = set(nestedlist[0])\n\n    # Iterate through the nested lists and add the common elements to a new list\n    common_elements = []\n    for nestedlist_item in nestedlist[1:]:\n        common_set = set(nestedlist_item)\n        common_elements += list(first_set & common_set)\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # flattening the nested list\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    # creating a set for unique elements\n    unique_elements = set(flattened_list)\n    # finding the common elements in the flattened list and returning them as a list\n    return list(filter(lambda x: x in unique_elements, flattened_list))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Set to keep track of the common elements found\n    common = []\n    # Loop through each element in the nested list\n    for element in nestedlist:\n        # If the element is not already in the common list, add it\n        if element not in common:\n            common.append(element)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Iterate over each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # If the element is already in the common dictionary, increment its count\n            if element in common_dict:\n                common_dict[element] += 1\n            # If the element is not in the common dictionary, add it with a count of 1\n            else:\n                common_dict[element] = 1\n\n    # Find the common elements by iterating over the dictionary\n    for key, value in common_dict.items():\n        if value > 1:\n            yield key"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get the first list and the second list\n    list1 = nestedlist[0]\n    list2 = nestedlist[1]\n    \n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through the first list and check if the element is present in the second list\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    \n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store unique elements in the nested list\n    unique_elements = set()\n    # loop through the nested list\n    for item in nestedlist:\n        # if the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            common_elements = common_in_nested_lists(item)\n            # add the common elements to the set\n            unique_elements = unique_elements.union(common_elements)\n        # if the item is not a list, add it to the set\n        else:\n            unique_elements.add(item)\n    # create a set to store the common elements in the nested list\n    common_elements = set()\n    # loop through the unique elements and check if they are in the nested list\n    for element in unique_elements:\n        if element in nestedlist:\n            common_elements.add(element)\n    # return the set of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Loop through each element in the outer list\n    for outer_list in nestedlist:\n        # Loop through each element in the inner list\n        for inner_list in outer_list:\n            # Loop through each element in the outer list again to check if it's in the inner list\n            for outer_list_again in nestedlist:\n                if inner_list in outer_list_again:\n                    print(inner_list, 'is in', outer_list)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            elif nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string contains only digits\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if len(each_dict)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    if len(list1) == 0:\n        return True\n    else:\n        for item in list1:\n            if len(item)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n\n    Parameters\n    ----------\n    list1: list of dictionaries\n        The list of dictionaries to check.\n\n    Returns\n    -------\n    bool\n        True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not isinstance(list1, list):\n        return \"Input is not a list\"\n\n    for i in list1:\n        if not isinstance(i, dict):\n            return \"List contains non-dict object\"\n\n        if not i:\n            return \"Dictionary is empty\"\n\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    lst = list(nums)\n    # initialize the variable to 0\n    result = 0\n    # iterate over the list and add each element to the result\n    for num in lst:\n        result += num\n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the tuple\n    total = 0\n    # Loop through each integer in the tuple\n    for num in nums:\n        # Add the integer to the total\n        total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable to store the result\n    result = 0\n    # Loop through each element in the tuple\n    for num in nums:\n        # Check if the current element is a positive integer\n        if isinstance(num, int) and num > 0:\n            # If it is, add it to the result variable\n            result += num\n        # If the current element is not a positive integer, raise a TypeError\n        else:\n            raise TypeError('All elements in the tuple must be positive integers.')\n    # Return the result after converting it to an integer\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to store the digits of the integer\n    digits = []\n    \n    # iterate through the tuple of numbers\n    for num in nums:\n        # convert each number to an integer and append it to the digits list\n        digits.append(int(num))\n    \n    # convert the digits list into a single integer by concatenating all the digits and returning it as a string\n    return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the accumulator variable with the first number in the tuple\n    result = nums[0]\n    # Loop through the remaining numbers in the tuple\n    for num in nums[1:]:\n        # Add the current number to the accumulator variable\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a string\n    nums_str = str(nums)\n    # Initialize an empty string to store the integer representation of the tuple\n    result = ''\n    # Iterate over the string from right to left and append the integer value of each digit to the result string\n    for i in range(len(nums_str)-1, -1, -1):\n        result += str(int(nums_str[i]))\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    # Use a for loop to iterate through each element in the list\n    for i in range(len(test_list)):\n        # Use a for loop to iterate through each element in the current element\n        for j in range(len(test_list[i])):\n            # If the element is not already a float, try to convert it to a float\n            if not isinstance(test_list[i][j], float):\n                try:\n                    # Convert the element to a float and store it\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    # If the element can't be converted to a float, raise an error\n                    raise ValueError(\"Element at index {} in list at index {} cannot be converted to a float.\".format(j, i))\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each sublist in the main list\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Try to convert the element to a float and if successful, replace the original element with the float value\n            try:\n                sublist[test_list.index(element)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                if element == '':\n                    pass\n                else:\n                    print(f\"{element} cannot be converted to a float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string by space\n    words = string.split()\n    # Convert each word to a list and return the list\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    string_list = string.split()\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize count to 0 and element to None\n    count = 0\n    element = None\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the element at index i is the same as the previous element\n        if arr[i] == element:\n            # Increment the count by 1\n            count += 1\n        else:\n            # If the element is a new element, set the element and count to the current element and 1, respectively\n            element = arr[i]\n            count = 1\n\n    # Check if the last element appeared only once\n    if count == 1:\n        return element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Initialize a variable to keep track of the current element\n    current = arr[0]\n    \n    # Initialize a variable to keep track of the frequency of the current element\n    frequency = 1\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is equal to the previous element, increment the frequency\n        if arr[i] == current:\n            frequency += 1\n        # If the current element is not equal to the previous element, update the current and frequency variables\n        else:\n            current = arr[i]\n            frequency = 1\n    \n    # If the frequency is 1, return the current element\n    if frequency == 1:\n        return current\n    # If the frequency is not 1, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize a dictionary to store the frequency of each element\n    freq = {}\n    # loop through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # loop through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array and returns the element that appears only once.\n    '''\n    # Initialize a variable to store the element that appears only once\n    result = None\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the previous element and there was no previous element,\n        # then the element that appears only once is the current element\n        if i == 0 or arr[i]!= arr[i-1]:\n            if result is None:\n                result = arr[i]\n            else:\n                return None\n                \n    # If the loop completes without returning None, then the element that appears only once is the last element\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n    \n    if arr[0]!= arr[-1]:\n        return \"Array should be sorted in non-decreasing order\"\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array and returns the element that appears only once in the array.\n\n    Args:\n    arr: The sorted array\n\n    Returns:\n    The element that appears only once in the array.\n    \"\"\"\n    # Initialize two variables to keep track of the number of occurrences of the element and the element itself\n    count = 0\n    unique_element = None\n\n    # Iterate through the array\n    for num in arr:\n        # If the element is equal to the current unique element, increment the count\n        if num == unique_element:\n            count += 1\n        # If the element is not equal to the current unique element, reset the count and set the new unique element\n        else:\n            if count == 1:\n                unique_element = num\n                count = 0\n            else:\n                count = 1\n\n    # If the element appears only once, return it\n    if count == 1:\n        return unique_element\n\n    # If the element appears more than once, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    # initialize count to 0\n    count = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if we encounter an element that appears only once, return it\n        if arr[i] == arr[arr.index(arr[i])]:\n            return arr[i]\n\n    # if we reach here, there is no element that appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Traverse through the array and keep track of the count of each element\n    count = [0] * (arr[len(arr)-1] + 1)\n    for num in arr:\n        count[num] += 1\n\n    # Traverse through the count array and return the element that appears only once\n    for i in range(len(count)):\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list as an argument and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    max_product_tuple = []\n\n    # loop through the list and find the pairs of tuples with maximum absolute product\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > abs(max_product):\n                max_product = abs(product)\n                max_product_tuple = [list1[i], list1[j]]\n\n    # return the maximum absolute product between numbers in the pair of tuples\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_product_tuple = None\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair = (lst[i], lst[j])\n            abs_product = abs(lst[i]*lst[j])\n            if abs_product > max_product:\n                max_product = abs_product\n                max_product_tuple = pair\n    \n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to keep track of the maximum absolute product and the current product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the absolute value of the difference between the current product and the next element in the tuple\n        diff = abs(list1[i][1] - list1[i][0])\n\n        # Update the maximum absolute product and the current product if the current product is greater than the previous maximum\n        if current_product > max_product:\n            max_product = current_product\n            current_product = diff\n        # Update the current product if the current product is less than or equal to the previous maximum\n        else:\n            current_product = diff\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    product = 1\n    max_pair = float('-inf')\n    # iterate over the list of tuples\n    for tup in list1:\n        # find the absolute value of the product of the first element and the second element\n        abs_product = abs(tup[0] * tup[1])\n        # update the maximum product and maximum pair if necessary\n        if abs_product > max_product:\n            max_product = abs_product\n            max_pair = tup\n        # update the product of the tuple\n        product *= tup[0] * tup[1]\n    # return the maximum absolute product and the maximum pair\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum product and maximum absolute difference\n    max_product = float('-inf')\n    max_diff = 0\n\n    # Iterate over each tuple in the list\n    for tup in list1:\n\n        # Calculate absolute difference between first and second numbers\n        diff = abs(tup[0] - tup[1])\n\n        # Update maximum product and maximum absolute difference\n        if diff > max_diff:\n            max_diff = diff\n            max_product = tup[0] * tup[1]\n        elif diff * max_diff > 0:\n            max_product = max(max_product, tup[0] * tup[1])\n\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for num in range(1, limit+1):\n        if num not in amicable and is_amicable(num):\n            amicable.append(num)\n    \n    return sum(amicable)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    for i in range(1, num):\n        if num % i == 0 and num/i!= int(num/i):\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1:\n            is_amicable = False\n            for j in range(2, i):\n                if i % j == 0:\n                    is_amicable = True\n                    break\n            if not is_amicable:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    for i in range(1, limit):\n        if i == amicable_numbers_sum(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    a = 2\n    total_sum = 0\n    \n    # Loop through numbers until we reach the specified limit\n    while a < limit:\n        # Check if the number is amicable\n        if a in amicable_numbers(a):\n            total_sum += a\n        # Update the number\n        a += 1\n    \n    return total_sum\n\ndef amicable_numbers(n):\n    \"\"\"\n    Return a list of all the amicable numbers up to a specified number.\n    \"\"\"\n    # Initialize a list of amicable numbers\n    amicable = []\n    \n    # Check if the number is less than 2\n    if n < 2:\n        return amicable\n    \n    # Loop through numbers up to the square root of the specified number\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if the number is a multiple of i\n        if n % i == 0:\n            # Check if the number is also a multiple of its own square root\n            if i * i == n:\n                amicable.append(n)\n            # Check if the number is also a multiple of the square root of n\n            elif i * i < n:\n                amicable.append(i * i)\n    \n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if i in amicable_numbers(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\ndef amicable_numbers(n):\n    '''\n    Generate all the amicable numbers up to a given number.\n    '''\n    result = []\n    for i in range(1, n):\n        if n % i == 0:\n            j = n // i\n            if j!= i and j!= n and i!= j:\n                result.append(i)\n                if i!= j:\n                    result.append(j)\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if i in amicable_numbers:\n            continue\n        j = 2\n        while j < i:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Determine if a given number is amicable or not.\n    '''\n\n    for i in range(1, num):\n        if (num % i == 0) and (num / i!= i):\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Main function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i == 1 or i == 2:\n            continue\n        a, b = i, limit - i\n        if is_prime(a) and is_prime(b):\n            if i == a + b:\n                amicable_sum += i\n            elif i == a * b:\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            sum += i\n    return sum\n\ndef sum_of_primes(n):\n    return sum([i for i in range(2, n) if is_prime(i)])\n\nlimit = 200\nprint(sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(i + 2):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\n\nlimit = 200\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function calculates the angle of a complex number.\n    \"\"\"\n    # Calculating the magnitude of the complex number\n    mag = cmath.sqrt(a*a + b*b)\n\n    # Calculating the angle of the complex number in radians\n    angle = cmath.phase(complex(a,b))\n\n    # Converting the angle in radians to degrees\n    angle_deg = angle * 180 / cmath.pi\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = abs(angle)\n    angle = round(angle, 3)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as inputs a + bj and returns their angle in radians.\n    \"\"\"\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the angle in radians using the argument of the complex number\n    angle_rad = cmath.phase(a+b*1j)/modulus\n    \n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.phase(a-b*1j) if angle == 0 else angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex number from the given input values\n    complex_number = a+1j*b\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex_number)\n    \n    # Convert the angle to degrees and return it\n    return round(angle*180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers, a and b, and returns the angle of the complex numbers in radians.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = cmath.sqrt(a*a + b*b)\n    theta = cmath.phase(cmath.rect(a/c, b/c))\n    return theta"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    max_count = max(max_count, count)\n    return max_count"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = 0\n            for k in range(j):\n                if string[k] == '0':\n                    diff += 1\n            for l in range(i, j):\n                if string[l] == '1':\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = abs(count_zero - count_one)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initializing two variables to keep track of the number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n    \n    # iterating through the binary string and updating the count of 0s and 1s\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    \n    # initializing the maximum difference variable\n    max_diff = 0\n    \n    # iterating through all possible sub-strings of the binary string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # checking if the sub-string contains more 0s than 1s\n            if one_count > zero_count:\n                # subtracting the difference between the number of 1s and the number of 0s in the sub-string from the maximum difference\n                max_diff = max(max_diff, one_count - zero_count)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize the count of 0s and 1s in the string\n    zeros = 0\n    ones = 0\n\n    # Iterate through the string\n    for char in string:\n        if char == '0':\n            zeros += 1\n        elif char == '1':\n            ones += 1\n\n    # Find the maximum difference between the number of 0s and 1s\n    max_diff = 0\n    for i in range(1, zeros + 1):\n        for j in range(1, ones + 1):\n            diff = max(zeros - i, ones - j)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n\n            diff = abs(count_zeros - count_ones)\n\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        diff = 0\n        for j in range(i+1, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    # Create a list of binary strings of length n+1 for all possible substrings of length n\n    binary_strings = [bin(i)[2:].zfill(n+1) for i in range(2**(n+1)-1)]\n    # Initialize a list to store the maximum difference for each substring\n    max_diff = [0]*len(binary_strings)\n    # Loop through each binary string in the list\n    for i in range(len(binary_strings)):\n        # Initialize two pointers to track the start and end of the current substring\n        start = 0\n        end = i\n        # Initialize a variable to keep track of the maximum difference found so far\n        max_diff[i] = 0\n        # Loop through each character in the substring\n        while end < len(binary_strings[i]):\n            # If the current character is a 0, increment the start pointer\n            if binary_strings[i][end] == '0':\n                start += 1\n            # If the current character is a 1, increment the end pointer\n            else:\n                end += 1\n            # Update the maximum difference found so far if the end pointer has moved past the start pointer\n            if end - start > max_diff[i]:\n                max_diff[i] = end - start\n    # Return the maximum difference found for each substring\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        else:\n            print(\"Invalid character encountered in the binary string!\")\n            return 0\n        \n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    count = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            if count > 0:\n                diff = count\n                if diff > max_diff:\n                    max_diff = diff\n            count = 0\n    if count > 0:\n        diff = count\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # finding all the factors of a and b\n    factors_a = set()\n    factors_b = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            factors_a.add(i)\n    for i in range(1, b + 1):\n        if b % i == 0:\n            factors_b.add(i)\n\n    # finding the common factors of a and b\n    common_factors = factors_a.intersection(factors_b)\n\n    # summing the common factors\n    sum_of_common_factors = sum(common_factors)\n\n    return sum_of_common_factors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    # find all the divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # find the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the largest common divisor (LCM) of a and b using Euclidean algorithm\n    lcm = abs(a * b) // gcd(a, b)\n\n    # Find all the divisors of lcm\n    divisors = []\n    for i in range(1, lcm + 1):\n        if lcm % i == 0:\n            divisors.append(i)\n\n    # Find the sum of divisors of a and b which are present in the list of divisors of lcm\n    sum_divisors = 0\n    for i in range(len(divisors)):\n        if divisors[i] % a == 0:\n            sum_divisors += divisors[i]\n        if divisors[i] % b == 0:\n            sum_divisors += divisors[i]\n\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum(10, 20)) # Output: 10"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return \"One of the numbers is zero.\"\n    \n    # Find the GCD of a and b\n    gcd = 1\n    while b!= 0:\n        gcd = a % b\n        a = b\n        b = gcd\n        \n    # Find the sum of common divisors\n    common_divisors = []\n    div = 2\n    while div <= gcd:\n        if a % div == 0 and b % div == 0:\n            common_divisors.append(div)\n        div += 1\n        \n    # Calculate the sum of common divisors\n    sum_of_common_divisors = 1\n    for div in common_divisors:\n        sum_of_common_divisors *= div\n        \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    common_divisors = []\n\n    for num in range(1,min(a,b)+1):\n        if a%num == 0 and b%num == 0:\n            common_divisors.append(num)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes in two integers, a and b, and returns the sum of their common divisors.\n    A common divisor of two numbers is a number that is both divisible by both numbers.\n    '''\n    # Create a list of all divisors of a and b\n    divisors_a = set([i for i in range(1, a+1) if a % i == 0])\n    divisors_b = set([i for i in range(1, b+1) if b % i == 0])\n    \n    # Find the intersection of the two sets\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # create a list of all common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # calculate the sum of common divisors\n    total_sum = sum(common_divisors)\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # first, check if a and b are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        print(\"Error: Both numbers must be positive integers.\")\n        return\n\n    # find the smallest positive integer that divides both a and b\n    smallest_integer = 1\n    while smallest_integer <= a and smallest_integer <= b:\n        smallest_integer += 1\n\n    # initialize a dictionary to store the common divisors\n    common_divisors = {}\n\n    # loop through all the integers from 1 to the smallest positive integer\n    for i in range(1, smallest_integer):\n        # check if i divides both a and b\n        if i <= a and i <= b:\n            common_divisors[i] = True\n\n    # loop through all the integers from 1 to the smallest positive integer again\n    for i in range(1, smallest_integer):\n        # check if i divides both a and b and is a common divisor\n        if i <= a and i <= b and i in common_divisors:\n            # if so, add it to the sum\n            sum = sum + i\n\n    # return the sum of common divisors\n    return sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Split the string into words\n    words = str.split()\n\n    # Iterate through the words and check if each word is longer than n characters\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    \n    result = [] # create an empty list to store the words that are longer than n characters\n    \n    for word in words: # iterate over each word in the list\n        if len(word) > n: # check if the length of the word is greater than n\n            result.append(word) # if it is, append it to the result list\n    \n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words and a maximum length n, return a list of words that are longer than n characters.\n\n    Args:\n    n (int): maximum length of words to be considered\n    words (list): list of words to search\n\n    Returns:\n    list: list of words longer than n characters\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    \n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    \n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a 3x3 matrix as an input and checks whether it is a magic square or not.\n    A magic square is a 3x3 square where each row, column, and diagonal contain the same elements in any order.\n    The function returns True if the matrix is a magic square and False otherwise.\n    \"\"\"\n\n    # check if the input matrix is a 3x3 square\n    if len(my_matrix)!= 3:\n        return False\n    if len(my_matrix[0])!= 3:\n        return False\n\n    # check if the matrix is a magic square\n    for i in range(3):\n        if my_matrix[0][i]!= my_matrix[i][0]:\n            return False\n        for j in range(3):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n            if my_matrix[i][j]!= my_matrix[i][j]:\n                return False\n\n    # if all conditions are met, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return \"Matrix is not a square!\"\n\n    # check if the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return \"Matrix contains non-integer elements!\"\n\n    # check if the matrix is a magic square\n    sum_rows = [sum(row) for row in my_matrix]\n    if sum_rows == [1] * n:\n        return \"Matrix is a magic square!\"\n    sum_cols = [sum(my_matrix[i][j] for j in range(n)) for i in range(n)]\n    if sum_cols == [1] * n:\n        return \"Matrix is a magic square!\"\n    sum_diags = [sum(my_matrix[i][i] for i in range(n)), sum(my_matrix[i][n-1-i] for i in range(n))]\n    if sum_diags == [1] * 2:\n        return \"Matrix is a magic square!\"\n    return \"Matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[j][i] for j in range(n))\n        col_sum = sum(my_matrix[i][j] for j in range(n))\n        diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n\n        if row_sum!= col_sum or col_sum!= diagonal_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3x3 dimensions\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        # Check for elements in the first row\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= 15:\n            return False\n        \n        # Check for elements in the second row\n        if my_matrix[1][i] + my_matrix[2][i] + my_matrix[0][i]!= 15:\n            return False\n        \n        # Check for elements in the third row\n        if my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2]!= 15:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if the matrix has a side length of n\n    if n!= len(set([len(row) for row in my_matrix])):\n        return False\n    # check if each row and column contains the same elements\n    for i in range(n):\n        if my_matrix[i]!= set(my_matrix[i]):\n            return False\n        if my_matrix[i]!= set([my_matrix[j][i] for j in range(n)]):\n            return False\n    # check if the diagonal elements are equal\n    if my_matrix[0][0]!= my_matrix[n-1][n-1]:\n        return False\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[i][n-1-i]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # check if matrix has non-zero diagonals\n    for i in range(n):\n        if my_matrix[i][i] == 0 or my_matrix[i][n-i-1] == 0:\n            return False\n    # check if matrix is a magic square\n    for i in range(n):\n        col_sum = 0\n        row_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[i][j]\n            row_sum += my_matrix[j][i]\n        if col_sum!= row_sum or my_matrix[i][i] == 0:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a size of n x n, where n is the number of rows and columns in the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the diagonal elements are all the same\n    diagonal1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if diagonal1!= diagonal2:\n        return False\n    \n    # Check if the main diagonal elements are all the same\n    main_diagonal = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if main_diagonal!= 1:\n        return False\n    \n    # Check if the sub diagonal elements are all the same\n    sub_diagonal = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if sub_diagonal!= 1:\n        return False\n    \n    # All the conditions have been met, so the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the first row is a magic square\n        if sum(my_matrix[i]) == sum(range(1, n+1)):\n            return True\n        # Check if the second row is a magic square\n        if sum(my_matrix[i]) == sum(range(n, 0, -1)):\n            return True\n        # Check if the first column is a magic square\n        if sum(col[i] for col in my_matrix) == sum(range(1, n+1)):\n            return True\n        # Check if the second column is a magic square\n        if sum(col[i] for col in my_matrix) == sum(range(n, 0, -1)):\n            return True\n    \n    # If the matrix is not a magic square, it must be a valid square matrix\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of all elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n    # check if the sum is the same for each row\n    for row in my_matrix:\n        if sum(row)!= total:\n            return False\n    # check if the sum is the same for each column\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[j][i] for j in range(len(my_matrix)))!= total:\n            return False\n    # check if the sum is the same for the diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix)))!= total:\n        return False\n    # check if the sum is the same for the anti-diagonal\n    if sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))!= total:\n        return False\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a 3x3 matrix for the magic square\n    magic_square = [[15, 13, 17], [10, 2, 8], [16, 11, 7]]\n\n    # Check if the input matrix is equal to the magic square\n    if my_matrix == magic_square:\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency in the dictionary and return it\n    max_item = max(freq_dict, key=freq_dict.get)\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each number\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the maximum frequency\n    max_freq = max(freq.values())\n\n    # Find the item with maximum frequency\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the highest frequency.\n    '''\n    # create a dictionary to store the count of each element\n    count_dict = defaultdict(int)\n    # loop through the list and increment the count of each element in the dictionary\n    for num in nums:\n        count_dict[num] += 1\n    \n    # find the item with the highest count\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_freq_item = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_freq_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n\n    # Create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_count = max(count_dict.values())\n    max_item = None\n    for item, count in count_dict.items():\n        if count == max_count:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_freq:\n            max_freq = count[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.isupper():\n                new_str += char.lower()\n            else:\n                new_str += char.upper()\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n        else:\n            str2 = str2 + str1[i]\n\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    \n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n            \n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for letter in str1:\n        if letter not in vowels:\n            reversed_vowels.append(letter)\n    reversed_str = ''.join(reversed_vowels)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_string = ''\n    for char in string:\n        if char.lower() not in vowels_set:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            if len(reversed_str) == 0 or char.lower()!= reversed_str[-1].lower():\n                reversed_str += char.lower()\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the negative numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Check if n is positive integer\n    if not isinstance(n, int) or n < 1:\n        return None\n\n    # Initialize variables\n    num = 1\n    next_num = 6\n\n    # Calculate the nth hexagonal number\n    for _ in range(n):\n        num += next_num\n        next_num += 6\n\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize a counter variable to keep track of the number of hexagons\n    hex_count = 1\n\n    # Loop through each row in the hexagon\n    for i in range(1, n+1):\n        # Loop through each column in the row\n        for j in range(1, i+1):\n            # Add the hexagonal number to the counter variable\n            hex_count += 1\n\n    # Return the final hexagonal number\n    return hex_count"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define a function to calculate the sum of the digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Calculate the sum of the digits of the given number\n    total_sum = sum_of_digits(n)\n\n    # Calculate the base and the exponent of the hexagonal number\n    base = 3\n    exponent = total_sum // (2 * base)\n\n    # Calculate the hexagonal number\n    hex_num = base ** exponent\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_list = [1]\n    i = 2\n    while i <= n:\n        hexagonal_list.append(hexagonal_list[i-1] + hexagonal_list[i-2])\n        i += 1\n    return hexagonal_list[n]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_number = 1\n    for i in range(1, n+1):\n        hexagonal_number += 6*i**2 - 6*i\n    return hexagonal_number"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Convert n to a string\n    n = str(n)\n\n    # Initialize counter variable\n    count = 0\n\n    # Initialize sum variable\n    sum_hex = 0\n\n    # Loop through each digit in n\n    for digit in n:\n\n        # Convert digit to integer\n        digit = int(digit)\n\n        # Add up the product of the current digit and the count\n        sum_hex += digit * (2 * count + 1)\n\n        # Increment the count by 1\n        count += 1\n\n    # Return the sum of the hexagonal numbers\n    return sum_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2 * n * n + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def square(x):\n        return x * x\n    \n    def cube(x):\n        return x * x * x\n    \n    def nth_square(n):\n        return n * n\n    \n    hexagon = 2 * nth_square(n - 1) - 6\n    \n    if n % 2 == 0:\n        hexagon -= 2\n    \n    hexagon += square(n)\n    hexagon -= cube(n)\n    \n    return hexagon\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = array('i')\n    zeroes = array('i')\n\n    for num in nums:\n        if num!= 0:\n            non_zeros.append(num)\n        else:\n            zeroes.append(num)\n\n    non_zeros_sum = sum(non_zeros)\n    zeroes_sum = sum(zeroes)\n\n    non_zeros_count = len(non_zeros)\n    zeroes_count = len(zeroes)\n\n    non_zeros_ratio = non_zeros_count / len(nums)\n    zeroes_ratio = zeroes_count / len(nums)\n\n    return non_zeros_ratio, zeroes_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    ratio = float(count) / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0 for i in range(len(nums))])\n    non_zero_count = array('i', [0 for i in range(len(nums))])\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(max(zero_count))+1] += 1\n        else:\n            non_zero_count[non_zero_count.index(max(non_zero_count))+1] += 1\n    return (max(zero_count) / max(non_zero_count))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0) + 1] += 1\n        else:\n            non_zeros[non_zeros.index(0) + 1] += 1\n            \n    if len(zeros) == 0:\n        return 0\n    \n    return (non_zeros[0] + zeros[0]) / len(zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    count = 0\n    for num in nums:\n        if num == 0:\n            zeros.append(count)\n        count += 1\n    non_zeros = count - zeros.item()\n    return non_zeros / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')  # create an array to store the count of zeroes\n    non_zero_count = array('i')  # create an array to store the count of non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n    \n    zero_count_sum = sum(zero_count)\n    non_zero_count_sum = sum(non_zero_count)\n    \n    ratio = zero_count_sum / non_zero_count_sum\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize the counters for non-zero and zero elements\n    non_zero = 0\n    zero = 0\n    \n    # loop through each element in the array\n    for num in nums:\n        # if the element is non-zero, increment the counter\n        if num!= 0:\n            non_zero += 1\n        # if the element is zero, increment the counter\n        else:\n            zero += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = zero / non_zero\n    \n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize count array with zeros\n    count_arr = array('i', [0]*len(nums))\n\n    # Iterate through the array and increment count array\n    for num in nums:\n        count_arr[num] += 1\n\n    # Calculate the sum of non-zero counts\n    non_zero_sum = sum(count_arr[1:])\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = non_zero_sum/len(nums)\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the frequency of each integer\n    arr = array('i')\n    for num in nums:\n        arr.append(num)\n\n    # calculate the sum of all integers in the array\n    total = sum(nums)\n\n    # calculate the count of zeroes in the array\n    zeroes = 0\n    for num in arr:\n        if num == 0:\n            zeroes += 1\n\n    # calculate the ratio of zeroes to non-zeroes in the array\n    ratio = zeroes / total\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = 0\n    for i in range(len(zero_count)):\n        non_zero_count += zero_count[i]\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return True\n\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    i = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n            i += 1\n        else:\n            n = (3*n + 1) // 2\n            i += 2\n\n    return i >= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # find the number of bits required to represent n\n    bits = 0\n    while n > 0:\n        n = n // 2\n        bits += 1\n    # loop through all possible sums of powers of 2\n    for i in range(2, 2**bits):\n        # check if the sum is equal to n\n        if i == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 1\n    sum_of_powers = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            sum_of_powers += power_of_two\n            power_of_two *= 2\n        else:\n            n = n // 2\n            power_of_two *= 2\n\n    if n == 0 and sum_of_powers == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    \n    # Check if the number is 0\n    if n == 0:\n        return True\n    \n    # If the number is not 0, check if it can be represented as sum of non-zero powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two *= 2\n    \n    # If the number cannot be represented as sum of non-zero powers of 2, return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    i = 2\n    while i * i <= n: \n        if n % i == 0: \n            return False\n        i += 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Iterate over the binary string\n    for i in range(len(binary_str)):\n        # If the binary string is not of the form 1000...00, then it cannot be represented as sum of powers of 2\n        if binary_str[:i]!= '0' * (len(binary_str) - i):\n            return False\n\n        # Check if the number can be represented as sum of powers of 2\n        if binary_str[:i] == '1' * (i + 1):\n            # Check if the remaining bits can be represented as powers of 2\n            for j in range(i + 1, len(binary_str)):\n                if binary_str[j]!= '0':\n                    return False\n\n    # If we reach this point, then the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n == 2**i:\n            count += 1\n        elif n%2**i == 0:\n            count += 2\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is greater than 0\n    if n <= 0:\n        return False\n\n    # Calculate the sum of non-zero powers of 2\n    sum_of_powers = 0\n    while n > 0:\n        # If the last bit is 0, add it to the sum of powers\n        if n & 1 == 0:\n            sum_of_powers += 1\n        # Shift the number to the right by 1\n        n >>= 1\n\n    # Check if the sum of powers can be represented as a power of 2\n    for i in range(1, 33):\n        if sum_of_powers == (1 << i):\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as sum of non-zero powers of 2, and False otherwise.\n    \"\"\"\n    if n == 0: \n        return True \n    elif n == 1: \n        return False \n    elif n & (n-1) == 0: # n is a power of 2 \n        return True \n    else:\n        i = 1\n        while i <= n:\n            if (n - i) & (n - i) == 0: # n - i is also a power of 2 \n                return True\n            i <<= 1\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Define helper function to find sum of non-zero powers of 2\n    def sum_of_non_zero_powers_of_two(n):\n        # Initialize sum\n        sum = 0\n        # Loop through digits\n        for i in range(len(bin(n)[2:])):\n            # Check if digit is 1\n            if bin(n)[2:][i] == '1':\n                # Add 2^i to sum\n                sum += 2**i\n        return sum\n    \n    # Check if n can be represented as sum of non-zero powers of 2\n    if n == sum_of_non_zero_powers_of_two(n):\n        print(\"The given number can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(\"The given number cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14*r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # multiply pi by radius and store it in circumference variable\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for calculating circumference\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14159*r # Formula to calculate circumference\n    return circumference # Returning the calculated circumference value"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == []:\n        return []\n    elif type(test_list[0]) == list:\n        return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n    else:\n        return [test_list[0]] + extract_singly(test_list[1:])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened_set = set()\n    \n    # Loop through each element in the list of lists\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for num in sublist:\n            # Add the number to the flattened set if it's not already there\n            if num not in flattened_set:\n                flattened_set.add(num)\n    \n    # Convert the flattened set to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = flatten_list(test_list)\n    return set(flat_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list += extract_singly(item)\n        elif isinstance(item, set):\n            flat_list += list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the length of the list\n    length = len(nums)\n\n    # Initialize the largest index\n    largest = 0\n\n    # Initialize the swaps count\n    swaps = 0\n\n    # Loop through the list\n    for i in range(length - 1):\n\n        # Find the largest element\n        max_index = i\n        for j in range(i + 1, length):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the elements if they are not in order\n        if max_index!= i:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            swaps += 1\n            largest = max(largest, max_index)\n\n    # Print the swaps count and the sorted list\n    print(\"Number of swaps:\", swaps)\n    print(\"Sorted list:\", nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize the maximum element index\n    max_index = 0\n    # Initialize the list of pancakes\n    pancakes = [0] * n\n    # Sort the list in descending order of elements\n    for i in range(n):\n        max_index = 0\n        # Find the maximum element in the unsorted part of the list\n        for j in range(n-i-1):\n            if nums[j] < nums[j+1]:\n                max_index = j+1\n        # Move the maximum element to the end of the unsorted part of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # Update the pancake list\n        for j in range(i):\n            pancakes[j] += 1\n        for j in range(i+1, n):\n            pancakes[j] -= 1\n    # Print the sorted list and pancakes\n    print(\"Sorted list:\", nums)\n    print(\"Pancakes:\", pancakes)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Initialize the size of the list\n    n = len(nums)\n\n    # Loop until the list is sorted\n    while True:\n        # Find the maximum element in the unsorted portion of the list\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Swap the maximum element with the first element of the unsorted portion of the list\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n\n        # If the list is sorted, break out of the loop\n        if max_index == 0:\n            break\n\n        # Decrease the size of the list by 1\n        n = max_index\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the list from i to the maximum element\n        for j in range(i, max_index, -1):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # create a copy of the input list\n    nums_copy = nums.copy()\n\n    # determine the length of the list\n    length = len(nums_copy)\n\n    # loop until the list is sorted\n    while True:\n        # determine the smallest index and its value\n        smallest_index = 0\n        smallest_value = nums_copy[smallest_index]\n        for i in range(1, length):\n            if nums_copy[i] < smallest_value:\n                smallest_index = i\n                smallest_value = nums_copy[i]\n\n        # if the smallest index is not equal to the length of the list, swap the two values\n        if smallest_index!= length - 1:\n            nums_copy[smallest_index], nums_copy[length - 1] = nums_copy[length - 1], nums_copy[smallest_index]\n        else:\n            break\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n\n    # Initialize a boolean variable to check if the list is already sorted\n    sorted_list = True\n\n    # Run the pancake sort algorithm for each element in the list\n    for i in range(len(nums)):\n        # Check if the list is already sorted\n        if i > 0 and nums[i] <= nums[i-1]:\n            sorted_list = False\n            break\n\n        # Use the swapping technique to reverse the order of the current element and its position in the list\n        for j in range(i, len(nums)):\n            # Swap the elements if they are in the wrong order\n            nums[i], nums[j] = nums[j], nums[i]\n\n            # Check if the list is sorted after each swap\n            if nums[i] > nums[j-1]:\n                sorted_list = False\n                break\n\n        # If the list is already sorted, there is no need to continue with the next element\n        if sorted_list:\n            break\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # loop through the list\n    for i in range(len(nums)-1, 0, -1):\n        # find the maximum value in the remaining unsorted part of the list\n        max_val = nums[i-1]\n        max_idx = i-1\n        \n        # loop through the remaining unsorted part of the list\n        for j in range(i, len(nums)):\n            # check if the current value is greater than the maximum value found so far\n            if nums[j] > max_val:\n                max_val = nums[j]\n                max_idx = j\n        \n        # swap the maximum value with the current index\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the current element with the maximum element found so far\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the sub-array from the current element to the end\n        # The first element is already sorted\n        nums[i+1:0:-1] = nums[i+1:0:-1][::-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Create a copy of the original list to avoid modifying it\n    nums = nums.copy()\n    \n    # Sort the list using the bubble sort algorithm\n    for i in range(len(nums)-1):\n        swapped = False\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n    \n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    # initialize counter variable to 0\n    count = 0\n\n    # iterate through each element in the tuple\n    for i in Input:\n\n        # check if the element is a list\n        if type(i) == list:\n            # increment the count by 1\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input: \n        if isinstance(element, list): \n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the maximum difference to be the difference between the first and second elements\n    max_diff = abs(arr[1] - arr[0])\n\n    # Loop through the remaining elements in the array\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the maximum difference if the current difference is greater than the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return 0 \n    elif len(arr) == 2: \n        return abs(arr[0] - arr[1])\n    \n    max_diff = 0\n    min_elem = min(arr)\n    \n    for i in range(len(arr)): \n        if arr[i]!= min_elem: \n            diff = abs(arr[i] - min_elem)\n            if diff > max_diff: \n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize the maximum difference to be negative infinity\n    max_diff = float('-inf')\n\n    # Iterate through the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return 0 # if the array has less than 2 elements, the maximum absolute difference will be 0\n\n    max_diff = 0 # initialize the maximum absolute difference to 0\n\n    for i in range(len(arr)): # iterate through the array\n        for j in range(i+1, len(arr)): # iterate through the remaining elements of the array\n            diff = abs(arr[i]-arr[j]) # calculate the absolute difference between the current pair of elements\n            max_diff = max(max_diff, diff) # update the maximum absolute difference if the new difference is greater than the current maximum\n\n    return max_diff # return the maximum absolute difference"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if ax + by = n\n    if a * x + b * y == n:\n        return (x, y)\n\n    # Check if any other integer x, y satisfies ax + by = n\n    for x in range(1, int(n/a) + 1):\n        if a * x + b * y == n:\n            return (x, y)\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n\n    x1 = -b / a\n    x2 = (n - b * x1) / a\n\n    if x2 == 0:\n        return (x1, x1)\n    else:\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = (-b + (b**2 - 4*a*n)**0.5) / (2*a)\n        y = (-b - (b**2 - 4*a*n)**0.5) / (2*a)\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # First, calculate the discriminant\n    d = b**2 - 4*a*n\n    # If the discriminant is negative, there is no solution\n    if d < 0:\n        return None\n    # If the discriminant is zero, there is only one solution\n    if d == 0:\n        x1 = -b/2/a\n        return (x1, x1)\n    # If the discriminant is positive, there are two solutions\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:  # check if b is zero, which means there are no solutions\n        return None\n    \n    # find x and y that satisfy ax + by = n\n    x = int((-n + b**0.5) / a)\n    y = int((-n - b**0.5) / a)\n    \n    # check if x and y satisfy the equation\n    if x*a + y*b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are valid\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float))):\n        return None\n\n    # Check if n is valid\n    if not (isinstance(n, (int, float))):\n        return None\n\n    # Check if a and n are equal\n    if a == 0 and n!= 0:\n        return None\n\n    # Calculate the equation coefficients\n    coeff_a = a\n    coeff_b = b\n    coeff_c = n\n\n    # Calculate the discriminant\n    discriminant = coeff_b**2 - 4*coeff_a*coeff_c\n\n    # Check if there is a solution\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -coeff_b / (2*coeff_a)\n        y = x\n        return (x, y)\n    else:\n        x1 = (-coeff_b - discriminant**0.5) / (2*coeff_a)\n        x2 = (-coeff_b + discriminant**0.5) / (2*coeff_a)\n        return (min(x1, x2), max(x1, x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = -b/a\n        if n == 0:\n            return (x, -x)\n        elif n == x**2:\n            return (x, -x)\n        elif n < x**2:\n            return (x, -x)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the values of a and b are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return None\n\n    # Initialize x and y\n    x = 0\n    y = 0\n\n    # Initialize a and b as float to avoid integer division\n    a = float(a)\n    b = float(b)\n\n    # Calculate d and e using the extended Euclidean algorithm\n    d = b\n    e = a\n    gcd = 1\n\n    while e:\n        q = d // e\n        d = e\n        e = a - b * q\n\n    # Check if the gcd is equal to 1\n    if gcd!= 1:\n        return None\n\n    # Calculate x and y using the given equation\n    while x**2 + y**2 <= n:\n        x += 1\n        y += 1\n\n    # Check if the equation is satisfied\n    if x**2 + y**2!= n:\n        return None\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0 and b!= 0:\n        x = -n / b\n        return (x, x)\n    elif a!= 0 and b == 0:\n        y = -n / a\n        return (y, y)\n    else:\n        d = b ** 2 - 4 * a * n\n        if d > 0:\n            x1 = (-b + d ** 0.5) / (2 * a)\n            x2 = (-b - d ** 0.5) / (2 * a)\n            return (x1, x2)\n        elif d == 0:\n            x = -b / (2 * a)\n            return (x, x)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    for x in range(1, n // a + 1):\n        for y in range(1, n // b + 1):\n            if x * a + y * b == n:\n                return x, y\n\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n    # Iterate through the given list1\n    for item in list1:\n        # If the item is not present in list2, add it to the result\n        if item not in list2:\n            result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert both lists to sets for faster comparison\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Iterate through the first list and remove all elements present in the second list\n    for element in list1:\n        if element in set2:\n            list1.remove(element)\n    \n    # Convert the modified list back to a list and return it\n    return list(set1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # convert the lists to sets for faster membership testing\n    set1 = set(list1)\n    set2 = set(list2)\n    # create a new list to store the remaining elements\n    new_list = []\n    # iterate over the first list\n    for item in list1:\n        # if the item is not in the second list, add it to the new list\n        if item not in set2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a set of elements from the second list\n    set_list2 = set(list2)\n    # Loop through the first list and remove elements from it based on their presence in the set of elements from the second list\n    for i in list1:\n        if i in set_list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to zero\n    sum_val = 0\n    \n    # Loop through the series of terms\n    for i in range(n // 2):\n        # Calculate the term and add to the sum\n        sum_val += n - 2 * i\n    \n    # Return the final sum\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(0, n//2+1):\n        sum += (n - 2*i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += n - 2 * i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 4:\n        return 0\n    if n % 2 == 0:\n        return sum_series(n // 2) + (n - 2) + (n - 4) +... + (n - (n // 2 - 1)) + (n - (n // 2 + 1))\n    else:\n        return sum_series(n // 2) + (n - 2) + (n - 4) +... + (n - (n // 2 - 1))\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the circumference of the polygon\n    circumference = 2 * s * tan(pi/l)\n\n    # Calculate the area of the polygon\n    area = (circumference * s) / (4 * pi)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the semi-perimeter\n    sp = (s * l) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * tan(pi/l)) ** 2\n    \n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Formula for area of regular polygon\n    area = (s * l) / 2\n    \n    # Round the area to two decimal places\n    area = round(area, 2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * tan(2 * pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s / l) * (tan(i*2*pi/l))**2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (2 * s) / (pi * l)\n    return a"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(i * 2 * pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s - tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s / 2 * (tan((pi / l) * i) + tan((pi / l) * (i + 1)))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    theta = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return True\n    elif n < 1: \n        return False\n    else:\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n // i:\n                    divisors.append(n // i)\n        sum_divisors = sum(divisors)\n        return n == sum_divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def is_divisible(num, divisor):\n        '''\n        A helper function that checks if a number is divisible by a divisor.\n        '''\n        return num % divisor == 0\n    \n    def sum_of_divisors(num):\n        '''\n        A helper function that calculates the sum of the divisors of a number.\n        '''\n        div_list = []\n        for i in range(1, num+1):\n            if is_divisible(num, i):\n                div_list.append(i)\n        return sum(div_list)\n    \n    return sum_of_divisors(n) == sum_of_divisors(n//2)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_list = []  # list to store the divisors of n\n    divisor = 1  # variable to keep track of the current divisor\n    \n    # loop through all the integers from 1 to n-1\n    while divisor <= n: \n        if n % divisor == 0: \n            divisors_list.append(divisor)  # append the divisor to the list if it is a factor of n\n        divisor += 1\n    \n    # find the sum of the divisors in the list\n    div_sum = sum(divisors_list)\n    \n    # check if the sum of the divisors is the same as n\n    if div_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n using a loop\n    div_sum = sum(math.gcd(n, i) for i in range(1, int(math.sqrt(n))+1))\n\n    # Check if the sum of the divisors is equal to n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.append(i)\n            divs.append(n // i)\n    divs.sort()\n    return sum(divs) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # Compare the sum of the divisors with the sum of the divisors of n \n    divisor_sum = sum(divisors)\n    return divisor_sum == sum(range(1, n+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n/i:\n                div_sum += n/i\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of two integers are the same, otherwise False.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # check if div_sum is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # initialize the sum of divisors to 0\n    div_sum = 0\n    \n    # iterate over the numbers from 1 to n-1\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # add i to the sum of divisors\n            div_sum += i\n    \n    # check if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the character counts\n    char_counts = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an alphabet, add it to the dictionary with a count of 1\n        if char.isalpha():\n            char_counts[char] = char_counts.get(char, 0) + 1\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to its ASCII code and add 1 to the count at the current position in the alphabet\n        if char.isalpha() and char.islower():\n            code = ord(char) - ord('a') + 1\n            char_count[code] = char_count.get(code, 0) + 1\n    \n    # Return the dictionary containing the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase and check if it's in the English alphabet\n        char = char.lower()\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            # if it is, add 1 to the count if it already exists in the dictionary, otherwise set it to 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # return the count of each character in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize the dictionary to store the count of characters\n    char_count = {}\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # loop through each character in the string\n    for char in str1:\n        # if the character is a letter, add it to the dictionary\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # loop through the English alphabet and count the number of times each character occurs\n    for i in range(ord('a'), ord('z')+1):\n        # if the character is in the dictionary, add its count to the result\n        if chr(i) in char_count:\n            result[chr(i)] = char_count[chr(i)]\n        else:\n            result[chr(i)] = 0\n    # return the result\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == chr(ord('a') + i).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # initialize variables to keep track of the character and its position in the string\n    char_count = {}\n    for i in range(26):\n        char_count[chr(ord('a') + i)] = 0\n    \n    # iterate over the characters in the string\n    for char in str1:\n        # convert the character to lowercase to ignore case sensitivity\n        char = char.lower()\n        # get the position of the character in the English alphabet (case insensitive)\n        index = ord(char) - ord('a')\n        # increment the count of the character in the current position\n        char_count[chr(ord('a') + index)] += 1\n    \n    # print the character counts\n    for char, count in char_count.items():\n        print(f\"{char}: {count}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through the string\n    for char in str1:\n        # Convert the character to lowercase to make the comparison case insensitive\n        lower_char = char.lower()\n\n        # Check if the character is a lowercase letter in the English alphabet\n        if lower_char.isalpha() and lower_char.islower():\n            # If it is, increment its count in the dictionary\n            if lower_char in char_count:\n                char_count[lower_char] += 1\n            else:\n                char_count[lower_char] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in str1:\n        if i.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0  # initialize count variable to 0\n\n    for i in range(len(A)):  # iterate through the list using a for loop\n        for j in range(i+1, len(A)):  # iterate through the remaining list elements using a for loop\n            xor = A[i] ^ A[j]  # calculate the xor of the current pair\n\n            if xor % 2 == 0:  # check if the xor is even\n                count += 1  # increment the count if it is\n\n    return count  # return the final count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through the list A and check if each element xor to an even number\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the largest power of 2 less than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # If the power is not a power of 2, return the next power of 2\n    if power < 2**31:\n        return power\n    else:\n        return 2**32"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary string\n    binary = bin(n)[2:]\n\n    # Find the number of zeroes in the binary string\n    count = binary.count('0')\n\n    # Convert the number of zeroes to a binary string\n    binary_count = bin(count)[2:]\n\n    # Create a new binary string with the required number of zeroes\n    new_binary = '0' * (32 - len(binary_count)) + binary_count\n\n    # Convert the new binary string to an integer\n    new_int = int(new_binary, 2)\n\n    # Return the new integer\n    return new_int"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:\n        # n is already a power of 2\n        return n\n    else:\n        # compute the next power of 2\n        n -= 1\n        n |= n >> 1\n        n |= n >> 2\n        n |= n >> 4\n        n |= n >> 8\n        n |= n >> 16\n        return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # loop until the bitwise AND of n with itself is zero\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    # return the power of 2 that was found\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**int(n-1).bit_length() + 2**(int(n-1).bit_length()+1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and check for the leftmost 1\n    leftmost_bit = bin(n)[2:].zfill(32)[0]\n\n    # Check if the leftmost bit is 1\n    if leftmost_bit == '1':\n        # Convert n to binary and append a 0 to the left\n        next_power = bin(n + (1 << 31))[2:].zfill(32)\n    else:\n        # Convert n to binary and append a 1 to the left\n        next_power = bin(n + (1 << 31))[2:].zfill(32) + '1'\n\n    # Convert the binary string to an integer\n    next_power = int(next_power, 2)\n\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    # Return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the next power of 2\n    next_pow_2 = 1\n    \n    # Loop until we find the next power of 2 greater than or equal to n\n    while next_pow_2 < n:\n        next_pow_2 <<= 1\n    \n    return next_pow_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Loop until n is a power of 2\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    # Return the next power of 2\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1:\n        return 2\n    else:\n        return 2 * next_power_of_2(n // 2)"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    #initialize count variable to zero\n    count = 0\n\n    #loop through each element in the list\n    for i in a:\n\n        #if the element is equal to the target number, increment count\n        if i == x:\n            count += 1\n\n    #return the final count\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, x):\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the indices are within the range of the list\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        raise ValueError(\"Indices must be within the range of the list.\")\n\n    # Check if the indices are in ascending order\n    if list1[m] > list1[n]:\n        raise ValueError(\"The second index must be greater than the first index.\")\n\n    # Initialize the sum to 0\n    sum_val = 0\n\n    # Loop through the range of the list\n    for i in range(m, n+1):\n        sum_val += list1[i]\n\n    # Return the sum\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the list from index m to index n (inclusive)\n    for i in range(m, n+1):\n        # Add the current element to the sum variable\n        sum += list1[i-1]\n    # Return the final sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        raise ValueError(\"m should be less than or equal to n\")\n    if n >= len(list1):\n        raise ValueError(\"n should be less than the length of the list\")\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        raise IndexError(\"Indices should be within the length of the list\")\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m >= n:\n        raise ValueError(\"Invalid range\")\n    sum_val = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum variable to zero\n    total = 0\n\n    # loop through the range of indices and add values to the sum variable\n    for i in range(m, n+1):\n        total += list1[i]\n\n    # return the sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Find the sum of numbers in the list\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-1]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    "
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter of the pentagon\n    s = (a ** 2 + (math.sqrt(5) / 2) ** 2) ** 0.5\n    \n    # find the distance between the center of the pentagon and its vertex\n    r = 5 / 2\n    \n    # calculate the perimeter of the pentagon using the formula: perimeter = 5 * a\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * math.sqrt(3) * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a  # formula for the perimeter of a regular pentagon\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        start = s.find('std', start)\n        if start == -1:\n            break\n        count += 1\n        start += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set() # set to store unique data types\n\n    for item in test_tuple:\n        type_set.add(type(item)) # add each item's data type to set\n\n    return len(type_set) == 1 # return True if all elements have same data type, False otherwise"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set([type(i) for i in test_tuple])\n    if len(types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # If the data type of the current element is not the same as the initial data type, return False\n        if type(item)!= data_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize variable to keep track of data types of all elements in the tuple\n    data_types = []\n\n    # Loop through all elements in the tuple\n    for element in test_tuple:\n        # Add data type of current element to the list\n        data_types.append(type(element))\n\n    # Check if all elements in the tuple have the same data type\n    return all(x == data_types[0] for x in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    else:\n        for item in test_tuple:\n            if not isinstance(item, type(test_tuple[0])):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Define a function to check data type of an element\n    def check_data_type(element):\n        '''\n        Define a function to check data type of an element.\n        '''\n        return type(element)\n    \n    # Check if all elements have same data type\n    for element in test_tuple:\n        if check_data_type(element)!= check_data_type(test_tuple[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Create a set to keep track of the types of the elements in the tuple\n    types = set()\n\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Convert the element to a string to check its type\n        element_str = str(element)\n\n        # Check if the string contains a period (i.e. is a float)\n        if '.' in element_str:\n            # If it does, add the float type to the set of types\n            types.add('float')\n        elif element_str[0].isdigit():\n            # If it starts with a digit, add the integer type to the set of types\n            types.add('integer')\n        else:\n            # If it doesn't start with a digit or a period, it's a string, so add the string type to the set of types\n            types.add('string')\n\n    # Check if all the types in the set are the same\n    if len(types) == 1:\n        # If they are, the tuple contains all elements of the same type\n        return True\n    else:\n        # If they're not, the tuple contains elements of different types\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return True\n\n    first_element = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # initialize count and max_count to 0\n    count = 0\n    max_count = 0\n\n    # iterate through the array\n    for i in range(n):\n        # if current element is equal to the target element, increment count\n        if arr[i] == x:\n            count += 1\n\n        # if count exceeds n/2, update max_count and reset count\n        elif count > max_count:\n            max_count = count\n            count = 0\n\n        # if current element is not equal to the target element, decrement count\n        else:\n            count -= 1\n\n    # if count is greater than max_count, the target element is not the majority element\n    if count > max_count:\n        return False\n\n    # if max_count is greater than 0, the target element is the majority element\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # find the count of x in the first n elements\n    count_x = 0\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n    \n    # if count_x is greater than n/2, return True\n    if count_x > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize count to 0 and candidate to None\n    count = 0\n    candidate = None\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count reaches n/2, we have found the majority element\n        elif count == n // 2:\n            return True\n        # If the count is greater than n/2, we have not found the majority element yet, so update candidate and count\n        elif count > n // 2:\n            count -= 1\n            candidate = arr[i]\n\n    # If we have reached this point, the element was not found to be the majority\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n //= 2\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the number of set bits (binary digits with value 1) in it.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits in that number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1 # check if the rightmost bit is set\n        n >>= 1 # move to the next bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index.append(i)\n    return ''.join([str[i] for i in odd_index])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i, c in enumerate(str):\n        if i % 2 == 0:\n            result += c\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(c) - 2) if ord(c) % 2!= 0 else c for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize a new string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # If the index of the character is even, add it to the result\n        if char % 2 == 0:\n            result += char\n    \n    # Return the modified result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # If the index of the current character is odd, append it to the result string\n        if (ord(char) - 96) % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_values.append(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the output\n    output = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index value of the character is odd\n        if int(char) % 2!= 0:\n            # If the index value is odd, append the character to the output string\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2!= 0]\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if any number is negative or zero\n    if a < 0 or b < 0 or c < 0:\n        return None\n    # check if any number is negative infinity\n    elif a == float('-inf') or b == float('-inf') or c == float('-inf'):\n        return float('-inf')\n    # check if any number is positive infinity\n    elif a == float('inf') or b == float('inf') or c == float('inf'):\n        return float('inf')\n    # if all numbers are positive or negative, then find the minimum\n    else:\n        if a < b and a < c:\n            return a\n        elif b < a and b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # check if the first number is smaller than the second number\n    if a < b:\n        # if it is, check if it is smaller than the third number\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        # if it's not, check if the second number is smaller than the third number\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n\nprint(min_of_three(5, 2, 8)) # Output: 2\nprint(min_of_three(9, 1, 20)) # Output: 1\nprint(min_of_three(-5, -10, 0)) # Output: -10"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: an integer representing the number of bits in the given range.\n    :param l: an integer representing the least significant bit of the given range.\n    :param r: an integer representing the most significant bit of the given range.\n    :return: True if all bits are set in the given range, False otherwise.\n    \"\"\"\n    # Initialize a variable to store the number of set bits in the given range\n    count = 0\n\n    # Loop through each bit of the integer n and check if it's set in the given range\n    for i in range(n):\n        if (n & (1 << i)) == (l & (1 << i)) and (n & (1 << i)) == (r & (1 << i)):\n            count += 1\n\n    # Check if all the bits are set in the given range\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments - n, l, and r. \n    It checks whether all the bits are set in the range [l, r] or not.\n    Returns True if all the bits are set in the range, else returns False.\n    '''\n\n    # Initialize the variable count to 0\n    count = 0\n\n    # Iterate from l to r\n    for i in range(l, r+1):\n\n        # If the binary representation of the current number is equal to the binary representation of n, increment the count\n        if bin(n)[2:] == bin(i)[2:]:\n            count += 1\n\n    # If the count is equal to 32, then all the bits are set in the range\n    if count == 32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n        # If the bit is set, return False\n        if (n & (1 << i)):\n            return False\n    # If we reach this point, all bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if the lower and upper range is same or not\n    if l > r:\n        return False\n    \n    # Initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n    \n    # Traverse through the range and check for unset bits\n    for i in range(l,r+1):\n        # Extract the current binary number\n        binary_num = bin(i)[2:]\n        \n        # Check if the number of unset bits in the binary number is greater than 0\n        if len(binary_num)!= n:\n            unset_bits += n - len(binary_num)\n    \n    # Check if the total unset bits is greater than 0 or not\n    if unset_bits > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to True\n    all_bits_set = True\n    \n    # Loop through each bit in the given range and check if it is set or unset\n    for i in range(l, r+1):\n        # Check if the bit is set or unset\n        if n & (1 << i):\n            # If the bit is set, return False as we found an unset bit\n            return False\n        else:\n            # If the bit is unset, continue looping through the remaining bits\n            continue\n    \n    # If we have looped through the entire range without finding an unset bit, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through the range of numbers\n    for i in range(l, r + 1):\n        # Check if the bitwise AND operation between the given number and the number i is zero\n        if (n & i)!= 0:\n            # If the bitwise AND operation is not zero, then the bit is set and we need to return False\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes the number n, lower bound l, and upper bound r as input parameters.\n    The function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Initialize a boolean variable to keep track of whether all bits are set or not\n    all_bits_set = True\n\n    # Iterate over each bit in the range\n    for i in range(l, r+1):\n\n        # Check if the current bit is set or not\n        if (n & (1 << i))!= 0:\n\n            # If a bit is set, then all bits must be set as well\n            all_bits_set = False\n            break\n\n    # Return the boolean value indicating whether all bits are set or not\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integer parameters: n, l and r.\n    n is the number to be checked.\n    l is the lower limit of the range.\n    r is the upper limit of the range.\n    '''\n    # Initialize a variable to store the count of unset bits in the range.\n    unset_bits_count = 0\n    \n    # Loop through the range and count the number of unset bits.\n    for i in range(l, r+1):\n        # Check if all the bits in the current integer are set or unset.\n        if n & 1 == 0:\n            unset_bits_count += 1\n        # Shift the number to the right by 1 bit.\n        n >>= 1\n        \n    # Check if all the bits in the final integer are set or unset.\n    if n & 1 == 0:\n        unset_bits_count += 1\n        \n    # Return True if all bits are set, and False otherwise.\n    return unset_bits_count == 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Initialize two empty lists to store the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the array and add each element to the appropriate list\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n\n    # Sort the positive list in reverse order to get the relative order\n    pos_list.sort(reverse=True)\n\n    # Re-arrange the negative list such that it has the same length as the positive list, and the first n elements are all negative elements, and the remaining elements are all positive elements\n    for i in range(n):\n        neg_list.append(pos_list[i])\n\n    # Combine the negative and positive lists into a single array\n    result = neg_list + pos_list\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to store the negative and positive elements\n    neg = []\n    pos = []\n    # Loop through the array\n    for i in range(n):\n        # Check if the current element is negative or positive\n        if arr[i] < 0:\n            # If negative, add to negative list\n            neg.append(arr[i])\n        else:\n            # If positive, add to positive list\n            pos.append(arr[i])\n    # Loop through the negative and positive lists\n    for i in range(len(neg)):\n        # Check if the current element is positive or negative\n        if neg[i] < 0:\n            # If negative, add to positive list\n            pos.append(neg[i])\n        else:\n            # If positive, add to negative list\n            neg.append(neg[i])\n    # Concatenate the negative and positive lists\n    arr_new = neg + pos\n    # Return the final re-arranged array\n    return arr_new"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # First, separate the negative and positive elements into two lists\n    neg = [x for x in arr if x < 0]\n    pos = [x for x in arr if x >= 0]\n\n    # Now, sort the positive elements in descending order\n    pos.sort(reverse=True)\n\n    # Combine the negative and positive lists, preserving their relative order\n    result = neg + pos\n\n    # Finally, return the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a new list to store the positive and negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # iterate through the array and add positive and negative elements to separate lists\n    for num in arr:\n        if num >= 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    # sort the positive and negative arrays\n    pos_arr.sort()\n    neg_arr.sort(reverse=True)\n\n    # combine the positive and negative arrays into a single list and re-arrange the first n elements\n    result = []\n    for i in range(n):\n        if i < len(pos_arr):\n            result.append(pos_arr[i])\n        else:\n            result.append(neg_arr[i-len(pos_arr)])\n\n    # return the result list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    neg.sort(reverse=True)\n    pos.extend(neg)\n    return pos[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to keep track of negative and positive elements\n    neg = 0\n    pos = 0\n\n    # Iterate through the array and count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg += 1\n        else:\n            pos += 1\n\n    # Iterate through the array again and re-arrange the elements according to the given conditions\n    for i in range(n):\n        if i < neg:\n            print(\"Neg: \", end=\"\")\n        elif i < neg + pos:\n            print(\"Pos: \", end=\"\")\n        else:\n            print(\"Neg: \", end=\"\")\n\n        print(arr[i], end=\" \")"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # First, find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Create an empty array to store the negative elements\n    negative_arr = []\n    \n    # Iterate over the array and add the negative elements to the negative_arr array\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n    \n    # Sort the negative_arr array in descending order\n    negative_arr.sort(reverse=True)\n    \n    # Create an empty array to store the positive elements\n    positive_arr = []\n    \n    # Iterate over the array and add the positive elements to the positive_arr array\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_arr.append(arr[i])\n    \n    # Sort the positive_arr array in ascending order\n    positive_arr.sort()\n    \n    # Combine the negative and positive arrays into one array\n    final_arr = negative_arr + positive_arr\n    \n    # Shuffle the final_arr array using the Fisher-Yates algorithm\n    for i in range(len(final_arr)-1, 0, -1):\n        j = random.randint(0, i)\n        final_arr[i], final_arr[j] = final_arr[j], final_arr[i]\n    \n    # Return the final_arr array\n    return final_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    neg_index = 0\n    pos_index = n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n            if neg_count > 1:\n                arr[i], arr[neg_index] = arr[neg_index], arr[i]\n                neg_index += 1\n        else:\n            if neg_count > 0:\n                arr[i], arr[pos_index] = arr[pos_index], arr[i]\n                pos_index -= 1\n                neg_count = 0\n                neg_index = 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two pointers i and j to keep track of the first and last non-negative elements in the array\n    i = 0\n    j = n - 1\n    \n    # loop through the array from the first non-negative element to the last element\n    while j < len(arr):\n        # if the current element is negative, swap it with the element pointed by j and increment j\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        # if the current element is positive, increment j\n        else:\n            j += 1\n    \n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two empty lists to store negative and positive elements respectively\n    neg = []\n    pos = []\n\n    # iterate through the given array and add elements to the appropriate list\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n\n    # initialize two empty lists to store the first n negative elements and the rest of the elements\n    first_n = []\n    rest = []\n\n    # add the first n negative elements to the first_n list\n    first_n += neg[:n]\n\n    # add the rest of the elements to the rest list\n    rest += neg[n:]\n    rest += pos\n\n    # replace the elements of the original array with the new arranged elements\n    arr[:] = first_n + rest\n\n    # print the final arranged array\n    print(arr)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # iterate through the string and replace any blank spaces with the character\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        raise ValueError(\"n must be less than or equal to the length of the list.\")\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of the first n elements of the list\n    h = []\n    for i in range(n):\n        heapq.heappush(h, lst[i])\n    \n    # Traverse the list and add each element to the min-heap\n    for i in range(n, len(lst)):\n        heapq.heappushpop(h, lst[i])\n        \n    # Return the elements of the min-heap as the largest n numbers\n    return [heapq.heappop(h) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Using heapq module to sort list in descending order\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, float('-inf'))\n    \n    # Iterate through the list and update the min-heap\n    for num in lst:\n        if num > heapq.heappushpop(min_heap, num):\n            # If the new number is greater than the smallest number in the heap, replace it with the new number\n            heapq.heapreplace(min_heap, num)\n    \n    # Extract the n largest numbers from the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap from the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n    \n    # Extract the n largest items and return them as a list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculating the radius of the cylinder\n    r = r\n    # calculating the height of the cylinder\n    h = h\n    # calculating the lateral surface area of the cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    # returning the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * (3 * r ** 2) + 2 * (r ** 2 * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * r * h + 2 * r * r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14159 * (r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2) + 2*math.pi*r*h\n    print(\"The lateral surface area of the cylinder is:\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * (3.14159 * r * r) + (3.14159 * r * h) + (3.14159 * h * h)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to calculate lateral surface area of a cylinder\n    lateral_surface_area = 2*(r+h)*3.14159265359\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # The volume of a cube is equal to its side length squared"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the given number\n    even_bits = []\n\n    # Loop through all the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append it to the even_bits list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n\n    # Return the even_bits list\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the set bits\n    even_bits = []\n    \n    # Iterate through each bit of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, add it to the even_bits list\n            even_bits.append(i)\n    \n    # Convert the even_bits list to a number\n    even_bits_number = 0\n    for bit in even_bits:\n        even_bits_number |= (1 << bit)\n    \n    # Set all even bits in the original number to the same value as the even_bits_number\n    return n | even_bits_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    for i in range(32):\n        if n & (1 << i):\n            even_bits.append(i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize variables\n    odd_bit = 1\n    even_bit = 1\n    \n    # loop through all bits of the number\n    while odd_bit <= n:\n        # check if the current odd bit is even\n        if odd_bit % 2 == 0:\n            # set the corresponding even bit to 1\n            even_bit = even_bit | (1 << (odd_bit - 1))\n        # move to the next odd bit\n        odd_bit = odd_bit + 2\n        \n    return even_bit"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the updated number\n    new_number = []\n\n    # Iterate through each bit of the original number\n    for bit in bin(n)[2:]: \n        # If the bit is even, set it to 1, otherwise set it to 0\n        if int(bit) % 2 == 0:\n            new_number.append(1)\n        else:\n            new_number.append(0)\n\n    # Convert the list to an integer and return it\n    return int(''.join(map(str, new_number)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        n &= n - 1 # Clearing even bits by performing bitwise AND with 1 followed by binary representation of n - 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Get the binary representation of the number\n    binary_representation = bin(n)[2:]\n    # Iterate through each character in the binary representation\n    for i in range(len(binary_representation)):\n        # If the character is an even digit, set it to 1\n        if int(binary_representation[i]) % 2 == 0:\n            binary_representation = binary_representation[:i] + '1' + binary_representation[i+1:]\n    # Convert the binary representation back to an integer and return it\n    return int(binary_representation, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the operation\n    result = 0\n\n    # Iterate over all the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result |= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize count of even bits to 0\n    count = 0\n    # iterate through each bit in the binary representation of n\n    for i in range(32):\n        # extract the i-th bit of n\n        bit = n & (1 << i)\n        # if the bit is even, set it to 1\n        if bit > 0:\n            count += 1\n            n |= (1 << i)\n    # return the number with all even bits set to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the sum to 0\n    even_sum = 0\n    # Convert the given number to binary\n    binary_number = bin(n)[2:]\n    # Iterate over the binary number and set the even bits to 1\n    for i in range(len(binary_number)):\n        if binary_number[i] == '0' and (i % 2) == 0:\n            even_sum += (2 ** i)\n    # Return the updated number with all even bits set to 1\n    return even_sum"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each tuple\n    counts = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already a key in the dictionary\n        if tup in counts:\n            # If it is, increment its count by 1\n            counts[tup] += 1\n        else:\n            # If not, add the tuple as a key with a count of 1\n            counts[tup] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # create a dictionary with the unique tuples as keys and the count of their occurrences as values\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n        \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a list of unique tuples\n    unique_tuples = list(set(test_list))\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each unique tuple in the list\n    for tup in unique_tuples:\n        # Count the number of times the tuple occurs in the list\n        count = test_list.count(tup)\n        # Add the count to the count dictionary\n        count_dict[tup] = count\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use the Counter() function from the Counter module to count the occurrences of each tuple in the set\n    count_dict = Counter(unique_tuples)\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    unique_tuples = set(tuple(x) for x in test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Creating a dictionary to store the count of occurrences of each unique tuple\n    count_dict = {}\n\n    # Looping through the list of tuples\n    for tup in test_list:\n        # Checking if the tuple is already in the dictionary\n        if tup not in count_dict:\n            # If it's not, adding it to the dictionary with a count of 1\n            count_dict[tup] = 1\n        else:\n            # If it is, incrementing the count by 1\n            count_dict[tup] += 1\n\n    # Returning the dictionary with the count of occurrences of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = set()\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.add(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Counting the number of non-empty substrings\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring.strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    # Initialize a count variable\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is a vowel\n        if str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            # Loop through each possible starting point of the substring\n            for j in range(i, len(str)+1):\n                # Check if the substring is non-empty and not a vowel\n                if str[j-1:j].lower() not in ['a', 'e', 'i', 'o', 'u'] and str[j-1:j]!= '':\n                    # Increment the count variable\n                    count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def get_total_sequences_helper(current_element, remaining_elements, result):\n        if len(remaining_elements) == 0:\n            result[0] += 1\n            return\n        if current_element < 2 * remaining_elements[-1]:\n            get_total_sequences_helper(current_element, remaining_elements, result)\n        if current_element < remaining_elements[-1]:\n            get_total_sequences_helper(current_element + 1, remaining_elements, result)\n\n    total_sequences = 0\n    remaining_elements = list(range(m, n))\n    result = [0]\n    get_total_sequences_helper(0, remaining_elements, result)\n    total_sequences = result[0]\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the sequences\n    sequences = []\n    # Initialize a counter to keep track of the number of sequences found\n    sequence_count = 0\n    # Loop through all possible previous values\n    for i in range(m):\n        # Check if the previous value is greater than twice the current value\n        if m % (i + 1) > 0:\n            # Check if the next value is less than or equal to m\n            if i + 1 < m and n <= i + 1:\n                # Check if the next value is a multiple of the current value\n                if m % i == 0:\n                    # Add the sequence to the list of sequences and increment the counter\n                    sequences.append(i + 1)\n                    sequence_count += 1\n                # Check if the next value is greater than the current value and a multiple of twice the current value\n                elif m % (i + 1) > 0 and m % (i + 2) == 0:\n                    # Add the sequence to the list of sequences and increment the counter\n                    sequences.append(i + 2)\n                    sequence_count += 1\n    # Return the number of sequences found\n    return sequence_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-2*n, n)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    def count_sequences(m, n, seq):\n        if n == 0:\n            return 1\n        count = 0\n        for i in range(m):\n            if i >= 2 * seq[n - 1] and i <= m:\n                count += count_sequences(m, n - 1, seq + [i])\n        return count\n\n    return count_sequences(m, n, [0])"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def backtrack(m, n, curr, prev):\n        if n == 0:\n            return 1\n        count = 0\n        for i in range(curr, m):\n            if i >= 2 * prev and i <= m:\n                count += backtrack(m, n - 1, i, curr)\n        return count\n\n    return backtrack(m, n, 2 * prev, prev)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i % 2 == 0:\n            count += i - 1\n        else:\n            count += 2 * (i - 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        if i == 0 or i == n-1:\n            count += m\n        else:\n            for j in range(i+1, n):\n                if j == i+1:\n                    count += m - 2*i\n                elif j == n-1:\n                    count += m - 2*i + 1\n                else:\n                    count += m - 2*i + 2\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    count = 0\n    prev_element = 0\n\n    # Iterate over all possible elements\n    for i in range(m, n+1):\n        # Check if the element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2*prev_element and i <= m:\n            count += 1\n        prev_element = i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    \n    # Calculate the maximum value of the first element\n    max_first_element = m // 2\n    \n    # Calculate the maximum value of the second element\n    max_second_element = m // 2 - 1\n    \n    # Check all possible pairs of elements\n    for i in range(max_first_element + 1, max_second_element - n + 2):\n        for j in range(i + 1, min(m, i + n - 1) + 1):\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m + 1\n    elif n == 2:\n        return m * 2 + 1\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = m * 2 + 1\n        for i in range(3, n + 1):\n            dp[i] = 0\n            for j in range(i - 1, 1, -1):\n                if j - 1 >= 2 * m:\n                    if j - 2 >= 2 * m:\n                        dp[i] += dp[j - 2]\n                    else:\n                        dp[i] += dp[j - 2] * (m - j)\n                else:\n                    dp[i] += dp[j] * (m - j)\n        return dp[n]\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # make sure the lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2[-1:]\n    # return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list1 is less than or equal to 1, if so, return an empty list.\n    if len(list1) <= 1:\n        return []\n    # Remove the last element of list1 and append the elements of list2 to it.\n    list1[-1] = list2[-1] + list1[-1]\n    # Return the modified list.\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Set the length of the list to be the same as the second list\n    list1.extend(list2)\n    # Remove the last element from the first list\n    del list1[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the length of list1 is greater than the length of list2\n    if len(list1) > len(list2):\n        # Replace the last element of list1 with the elements of list2\n        list1[-1] = list2\n    else:\n        # Truncate list1 to the length of list2\n        list1 = list1[:len(list2)]\n        # Append the elements of list2 to list1\n        list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    # take the last element of the first list and split it into a list of characters\n    last_element = list1[-1]\n    last_element_list = list(last_element)\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = ''.join(list2)\n    \n    # convert the list1 back into a string and return it\n    return ''.join(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_count = 0\n    for char in str1:\n        total_count += 1\n    return total_count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the largest perfect square that is less than or equal to N\n    largest_perfect_square = int(math.sqrt(N))\n    largest_perfect_square *= largest_perfect_square\n\n    # Calculate the next perfect square greater than largest_perfect_square\n    next_square = largest_perfect_square + 1\n\n    # Check if the next perfect square is greater than N\n    if next_square > N:\n        # If it is, calculate the next perfect square less than or equal to N\n        next_square = int(math.ceil(N/math.sqrt(N)))**2\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # convert the square root to integer\n    sqrt_int = int(sqrt_N)\n    # calculate the difference between the square root and the integer part\n    diff = sqrt_N - sqrt_int\n    # add 1 to the integer part and multiply by the square of the integer part\n    next_sqrt = sqrt_int + 1 + diff**2\n    # return the next perfect square greater than N\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    sqrtN = math.sqrt(N)\n    intSqrtN = int(sqrtN)\n\n    if intSqrtN**2 == N:\n        return int(2 * sqrtN + 1)\n    else:\n        return int(intSqrtN**2 + sqrtN + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def next_prime(n):\n        while n < 2:\n            n += 1\n        while not is_prime(n):\n            n += 1\n        return n\n    \n    def is_square(n):\n        return int(math.sqrt(n)) ** 2 == n\n    \n    def next_square(n):\n        while n <= 0:\n            n += 1\n        while not is_square(n):\n            n += 1\n        return n\n    \n    def next_perfect_square(n):\n        if n > 0:\n            n += 1\n        while not is_square(n):\n            n = next_square(n)\n        return n\n    \n    return next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than the input number.\n    '''\n    # Initialize variables\n    x = N\n    count = 1\n    next_square = 0\n    \n    # Iterate until the next perfect square is found\n    while count < 1000:\n        # Calculate the square of the current number\n        square = x * x\n        \n        # Check if the square is greater than the input number\n        if square > N:\n            # Calculate the next perfect square\n            next_square = math.sqrt(x) + 1\n            \n            # Check if the next perfect square is greater than the input number\n            if next_square > N:\n                # Return the next perfect square\n                return next_square\n            \n            # Increment the count of iterations\n            count += 1\n        \n        # Increment the number to check\n        x += 1\n    \n    # If no next perfect square is found, return the input number\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    while True:\n        N = N + 1\n        sqrtN = math.sqrt(N)\n        if sqrtN == int(sqrtN):\n            return int(sqrtN)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(num):\n    \"\"\"\n    A function to check if a number is a perfect square or not.\n    \"\"\"\n    return num == int(num**0.5 + 0.5)**2\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    A function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        square = (N + 1)**2\n        if is_perfect_square(square):\n            return square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        print(\"Error: N should be a positive integer.\")\n        return None\n\n    # initialize a variable to keep track of the next perfect square greater than N\n    next_psq = None\n\n    # loop until next_psq is found\n    while True:\n        # find the next perfect square greater than N\n        psq = math.sqrt(2*N) + 1\n\n        # check if the next perfect square is greater than N\n        if psq > N:\n            # if it is, update next_psq\n            next_psq = psq\n            break\n\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    low = 0\n    high = N\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if mid * mid == N:\n            high = mid - 1\n        elif mid * mid < N:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return high + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    \n    i = int(math.sqrt(N)) + 1\n    j = i**2\n    while j < N:\n        i += 1\n        j = i**2\n        \n    return i**2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return None\n\n    # Initialize the maximum sum and the current subsequence sum\n    max_sum_so_far = arr[0] + arr[1]\n    current_sum = arr[0] + arr[1]\n\n    # Check if the first element is increasing\n    if arr[2] < arr[0]:\n        current_sum = arr[2] + arr[0]\n        max_sum_so_far = max(max_sum_so_far, current_sum)\n\n    # Check if the first element is decreasing\n    elif arr[2] > arr[0]:\n        current_sum = arr[2] + arr[0]\n        max_sum_so_far = max(max_sum_so_far, current_sum)\n\n    # Traverse the array from the third element\n    for i in range(2, n - 1):\n        if arr[i] < arr[i - 1]:\n            current_sum = arr[i] + arr[i - 1]\n            max_sum_so_far = max(max_sum_so_far, current_sum)\n        elif arr[i] > arr[i - 1]:\n            current_sum = arr[i] + arr[i - 1]\n            max_sum_so_far = max(max_sum_so_far, current_sum)\n\n    # Check if the last element is increasing or decreasing\n    if arr[n - 1] < arr[n - 2]:\n        current_sum = arr[n - 1] + arr[n - 2]\n        max_sum_so_far = max(max_sum_so_far, current_sum)\n    elif arr[n - 1] > arr[n - 2]:\n        current_sum = arr[n - 1] + arr[n - 2]\n        max_sum_so_far = max(max_sum_so_far, current_sum)\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or not\n    if not arr: \n        return 0\n    \n    # Initialize variables for the minimum and maximum sum of the subsequence\n    max_sum = arr[0]\n    min_sum = arr[0]\n    \n    # Traverse through the array and calculate the minimum and maximum sum of the subsequence\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i-1]: # If the current element is greater than the previous one, update the maximum sum\n            max_sum = max(max_sum + arr[i], arr[i])\n        elif arr[i] < arr[i-1]: # If the current element is less than the previous one, update the minimum sum\n            min_sum = min(min_sum + arr[i], arr[i])\n        else: # If the current element is equal to the previous one, it is a tie and we can ignore it\n    \n    return max_sum - min_sum # Return the maximum sum of the subsequence"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    def is_bitonic(arr):\n        \"\"\"\n        Check if a given array is bitonic or not.\n        \"\"\"\n        prev = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] >= prev:\n                return False\n            prev = arr[i]\n        return True\n\n    def bitonic_subsequence_sum(arr):\n        \"\"\"\n        Find the sum of a bitonic subsequence in an array.\n        \"\"\"\n        prev = arr[0]\n        result = 0\n        for i in range(1, len(arr)):\n            if arr[i] <= prev:\n                result += arr[i]\n            else:\n                break\n            prev = arr[i]\n        return result\n\n    def binary_search(arr, target):\n        \"\"\"\n        Perform binary search to find the index of a target element in the array.\n        \"\"\"\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def find_max_sum_in_bitonic_subsequence(arr):\n        \"\"\"\n        Find the maximum sum of a bitonic subsequence in an array.\n        \"\"\"\n        if not is_bitonic(arr):\n            return 0\n        left, right = 0, len(arr) - 1\n        max_sum = bitonic_subsequence_sum(arr)\n        while left < right:\n            mid = left + (right - left) // 2\n            if bitonic_subsequence_sum(arr[left:mid]) > max_sum:\n                max_sum = bitonic_subsequence_sum(arr[left:mid])\n                right = mid\n            else:\n                left = mid + 1\n        return max_sum\n\n    max_sum = find_max_sum_in_bitonic_subsequence(arr)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Check the first element of the array and update the variables accordingly\n    if arr[0] > arr[1]:\n        max_sum = curr_sum = arr[0]\n    elif arr[0] < arr[1]:\n        max_sum = curr_sum = arr[1]\n\n    # Loop through the array starting from the second element\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            curr_sum = arr[i]\n        elif arr[i] < arr[i-1]:\n            curr_sum = max(arr[i], curr_sum + arr[i])\n        elif arr[i] > arr[i+1]:\n            curr_sum = max(arr[i], curr_sum + arr[i])\n        else:\n            curr_sum = max(arr[i], curr_sum)\n\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    increasing = True\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(n):\n        if increasing:\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            current_sum -= arr[i]\n            if current_sum < max_sum:\n                max_sum = current_sum\n        increasing = not increasing\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * 2 for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = arr[i]\n        dp[i][1] = dp[i][0]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][0] = max(dp[i][0], dp[j][0] + arr[i])\n            elif arr[i] < arr[j]:\n                dp[i][1] = max(dp[i][1], dp[j][1] + arr[i])\n\n    return max(dp[n-1][0], dp[n-1][1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is increasing, add it to the current sum\n        if i == 0 or arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        # If the element is decreasing, subtract it from the current sum\n        else:\n            curr_sum -= arr[i-1]\n\n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill in the first row of the dp table\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            dp[i][i] = arr[i]\n        elif arr[i] < arr[i - 1]:\n            dp[i][i] = arr[i]\n        else:\n            dp[i][i] = arr[i - 1] + arr[i]\n\n    # Fill in the rest of the dp table\n    for len_ in range(2, n + 1):\n        for i in range(n - len_ + 1):\n            j = i + len_ - 1\n            if len_ == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + arr[i] + arr[j]\n\n    return dp[0][n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    # If the array has only one element, it is a bitonic subsequence\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    # If the array has more than two elements, we need to find the maximum sum of a bitonic subsequence in the first part of the array\n    else:\n        max_sum_1 = max_sum(arr[1:])\n        if arr[0] < arr[1]:\n            max_sum_2 = max_sum(arr[1:n-1])\n        else:\n            max_sum_2 = max_sum(arr[1:n-1])\n        return max(max_sum_1, max_sum_2) + arr[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Error: Input number should be non-negative.\"\n    elif number == 0:\n        return 0\n    else:\n        x0 = 1\n        x1 = number / 2\n        iteration = 0\n        while abs(x1 - x0) > 1e-10:\n            x0 = x1\n            iteration += 1\n            x1 = (x0 + number / x0) / 2\n        return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize some variables\n    x0 = 1.0\n    x1 = number / x0\n    diff = abs(x1 - x0)\n\n    # Iterate until the difference between the two approximations is below a threshold\n    while diff > 0.00001:\n        x2 = (x0 + x1) / 2\n        diff = abs(x2 - x1)\n        x0 = x1\n        x1 = x2\n\n    # Return the last approximation\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 0.5\n    y = (x + number/x) / 2\n    while abs(y - x) > 10e-6:\n        x = y\n        y = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-6\n    guess = 1.0\n    while True:\n        next_guess = guess - (guess**2 - number) / (2*guess)\n        if abs(next_guess - guess) < epsilon:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # Convert the input to a float to avoid integer division\n    float_number = float(number)\n\n    # Set initial guesses for the root\n    guess = float_number / 2.0\n    sqrt_guess = guess\n\n    # Set a tolerance value\n    tolerance = 0.00001\n\n    # Compute the square root using the babylonian method\n    while True:\n        next_guess = (guess + float_number / guess) / 2.0\n        if abs(next_guess - sqrt_guess) < tolerance:\n            break\n        sqrt_guess = next_guess\n        guess = next_guess\n\n    return sqrt_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n    - number (float): the number whose square root we want to compute.\n\n    Returns:\n    - float: the square root of the input number.\n\n    Example:\n    >>> babylonian_squareroot(9)\n    3.0\n    '''\n    # initial guess for the root\n    x0 = number / 2\n\n    # iterate until the difference between the previous and current guesses is less than a tolerance\n    while True:\n        # compute the next guess\n        x1 = (x0 + number / x0) / 2\n\n        # check if the difference between the previous and current guesses is less than a tolerance\n        if abs(x1 - x0) < 1e-10:\n            return x1\n\n        # update the guess for the next iteration\n        x0 = x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        guess = (number + number // number) // 2\n        while abs(guess ** 2 - number) > 0.00001:\n            guess = (number + guess) // 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 0\n    while True:\n        x = (number + i*i) / 2\n        if abs(x-i*i) < 0.00001:\n            return i*i\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Error: Invalid input. Please enter a positive number.\"\n    else:\n        guess = 1.0\n        tolerance = 1e-6\n        iterations = 0\n        \n        while abs(guess*guess - number) > tolerance:\n            iterations += 1\n            guess = (guess + number/guess) / 2\n            \n        return \"The square root of {} is approximately {} and it has converged in {} iterations.\".format(number, guess, iterations)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a table to store lengths of longest palindromic subsequences for all prefixes of the string\n    table = [[0] * len(str) for _ in range(len(str)+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    n = len(string)\n\n    # create a table to store the length of the longest palindromic subsequence ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # base case: if the string is empty, the length of the longest palindromic subsequence is 0\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill in the table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # find the length of the longest palindromic subsequence\n    max_length = dp[0][n-1]\n\n    # create a list to store the indices of the longest palindromic subsequence\n    indices = []\n    i = j = 0\n\n    while i < n and j < n:\n        if string[i] == string[j]:\n            if dp[i+1][j-1] == dp[i][j]:\n                i += 1\n                j -= 1\n                if max_length < dp[i][j]:\n                    max_length = dp[i][j]\n                    indices = [i, j]\n            else:\n                i += 1\n        else:\n            if dp[i+1][j] > dp[i][j-1]:\n                i += 1\n            else:\n                j -= 1\n\n    return max_length, indices"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a table to store the length of the longest palindromic subsequence ending at the i-th index\n    table = [[0] * n for i in range(n)] \n\n    # Fill the table in bottom-up manner\n    for i in range(n): \n        for j in range(i, n): \n            # If the characters at i and j are same, then LPS of length 2 or more will be centered at i and j\n            if i == j: \n                table[i][j] = 1\n            # If the characters at i and j are different, then LPS of length 2 will be centered at i+1 and j+1\n            else: \n                if str[i] == str[j]: \n                    table[i][j] = table[i+1][j-1] + 2\n                else: \n                    table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D array to store the length of LPS for all prefixes of length i\n    lps_array = [[0] * n for _ in range(n)]\n\n    # Create a 2D array to store the longest palindromic subsequence starting from index i\n    longest_palindrome = [[0] * n for _ in range(n)]\n\n    # Initialize LPS for empty string and subsequences of length 1\n    for i in range(n):\n        lps_array[i][i] = 1\n        longest_palindrome[i][i] = i\n\n    # Fill LPS array for subsequences of length 2 and more\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                lps_array[i][j] = lps_array[i + 1][j - 1] + 2\n                longest_palindrome[i][j] = length\n            else:\n                lps_array[i][j] = max(lps_array[i + 1][j], lps_array[i][j - 1])\n                if lps_array[i][j] > longest_palindrome[i][j]:\n                    longest_palindrome[i][j] = longest_palindrome[i][j - 1]\n\n    return longest_palindrome[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n\n    # Create a 2D table to store lengths of longest palindromic subsequences ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Base case: all characters are palindromes of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if s[j] == s[i]:\n                # If current characters match, extend the palindrome of length 2\n                table[j][i] = table[j+1][i-1] + 2\n            else:\n                # If current characters don't match, take the maximum of extending palindrome of length 1 to the left or right of the current index\n                table[j][i] = max(table[j][i-1], table[j+1][i])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize variables\n    n = len(str)\n    max_len = 1\n    start = 0\n    \n    # Loop through the string\n    for i in range(n):\n        \n        # Calculate the start and end indices of the current substring\n        start_i = i\n        end_i = i\n        \n        # Check for palindromes in the substring\n        while (end_i < n and str[start_i] == str[end_i]):\n            max_len = max(max_len, end_i - start_i + 1)\n            start_i += 1\n            end_i += 1\n        \n        # Calculate the start and end indices of the next longest palindrome substring\n        start_j = i\n        end_j = i\n        \n        # Check for palindromes in the substring\n        while (end_j < n and str[start_j] == str[end_j]):\n            start_j += 1\n            end_j += 1\n        \n        # Check if the current substring is longer than the previous longest palindrome substring\n        if (end_j - start_j + 1 > max_len):\n            max_len = end_j - start_j + 1\n            start = start_j\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # create a 2D table to store the length of longest palindromic subsequence for all prefixes of the given string\n    table = [[0] * len(str) for i in range(len(str)+1)]\n\n    # fill the table starting from the first character of the string\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # fill the table for all prefixes except for the first one\n    for l in range(2, len(str)+1):\n        for i in range(len(str) - l + 1):\n            j = i + l - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    # return the length of the longest palindromic subsequence\n    return table[0][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a dictionary to store the lengths of palindromic subsequences for each character in the string.\n    dp = {} \n    n = len(str) \n    for i in range(n): \n        dp[str[i]] = 1 \n  \n    # Find the length of the longest palindromic subsequence for all characters in the string. \n    for i in range(1, n): \n        for j in range(i): \n            if str[i] == str[j]: \n                dp[str[i]] = max(dp[str[i]], 2 + dp.get(str[j], 0)) \n  \n    return max(dp.values()) "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D array to store the length of longest palindromic subsequence for all possible prefixes\n    # of the given string\n    dp = [[0] * n for _ in range(n)]\n    # Initialize all values of dp[i][j] as 1 (for all i, j) since the longest palindromic subsequence\n    # of empty string is an empty string itself\n    for i in range(n):\n        dp[i][i] = 1\n    # Initialize the values of dp[i][j] for i < j as 0 (for all i, j) since the longest palindromic\n    # subsequence of a single character is a single character itself\n    for j in range(1, n):\n        dp[0][j] = 0\n    # Fill the dp array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # Return the length of the longest palindromic subsequence\n    return dp[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the length of the longest palindromic subsequence for substrings of length 1 to n\n    n = len(str)\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize table[i][j] to -1, where i and j are indices of the current substring\n    for i in range(n):\n        table[i][i] = 1\n\n    # Iterate over all possible substrings of length 2 to n\n    for length in range(2, n+1):\n\n        # Iterate over all possible starting points for the current substring\n        for i in range(n-length+1):\n\n            # Check if the substring is a palindrome\n            if str[i] == str[i+length-1]:\n                table[i][i+length-1] = 2\n\n            # Check if the substring is a longer palindrome\n            else:\n                table[i][i+length-1] = table[i+1][i+length-2] + 2\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_harmonic = 0\n    for i in range(n-1):\n        sum_harmonic += 1/i\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 1\n    for i in range(2, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return 1 / (1 / n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic = 0\n    for i in range(1, n):\n        sum_of_harmonic += 1 / i\n    return sum_of_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # Initialize variables\n    numerator = 1\n    denominator = 1\n    harmonic_sum = 0\n    \n    # Calculate the harmonic sum\n    for i in range(n-1):\n        harmonic_sum += (1/i)\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 1\n    for i in range(2, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the count of each number in the first array\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # create a set to store the numbers that are present in both arrays\n    intersection = set()\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.add(num)\n            count_dict[num] -= 1\n    \n    # return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the frequency of elements in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create a new array to store the intersection of elements in array_nums1 and array_nums2\n    intersection_array = []\n    \n    # loop through array_nums2 and check if each element is present in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            # if it is, add it to the intersection array and decrement the frequency in the dictionary\n            intersection_array.append(num)\n            freq_dict[num] -= 1\n    \n    # return the intersection array\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in the second array\n    freq_dict = {}\n    for num in array_nums2:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the first array and check if each element is present in the second array and its frequency is greater than 0\n    intersection = []\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersect_set = set1.intersection(set2)\n    return list(intersect_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays and returns the intersection of those arrays.\n    '''\n    # Create a set from the first array\n    set_nums1 = set(array_nums1)\n\n    # Loop through the second array and remove elements from the set as they are found\n    intersection = []\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n            set_nums1.remove(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Create a set to store unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate over the unique elements of array_nums1 and check if they are present in array_nums2\n    for num in set_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the elements of array_nums1 and their frequency\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n    \n    # Iterate through the elements of array_nums2\n    for num in array_nums2:\n        # If the element is present in the frequency dictionary of array_nums1, add it to the intersection list\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the unique elements from array_nums1\n    set_nums1 = set(array_nums1)\n    \n    # Create an empty set to store the intersection of the two sets\n    intersection = set()\n    \n    # Loop through each element in array_nums2\n    for num in array_nums2:\n        # If the element is present in the set created above, add it to the intersection set\n        if num in set_nums1:\n            intersection.add(num)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result_list = []\n    for i in range(len(list)):\n        result_list.insert(i, element)\n    return result_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = [element]\n    for i in range(len(list)):\n        result.insert(0,list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list + [element]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(1,len(list)):\n        list[i] = [element] + list[i]\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            polar_num = (r, theta)\n            print(polar_num)\n        else:\n            print(num, \"is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(\"Magnitude:\", mag)\n        print(\"Phase:\", phase)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n            angle = cmath.phase(num)\n            print(f\"{num} in polar coordinates: magnitude={magnitude}, angle={angle}\")\n        else:\n            print(f\"{num} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        if isinstance(num, complex):\n            real, imag = num.real, num.imag\n            angle = cmath.phase(num)\n            magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n            print(f\"{num} in polar coordinates is {angle:.2f} degrees with magnitude of {magnitude:.2f}\")\n        else:\n            print(f\"Cannot convert {num} to polar coordinates.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n\n    for number in complex_numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        print(f\"The polar coordinate of {number} is r = {r:.2f} and theta = {theta:.2f} degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_num = complex(magnitude, angle)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num1, num2) for num1, num2 in numbers]\n    polar_coordinates = [(cmath.phase(num), abs(num)) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:  \n        # Convert the complex number to polar coordinates  \n        r = cmath.sqrt(number.real**2 + number.imag**2)  \n        theta = cmath.phase(number)  \n  \n        # Print the polar coordinates  \n        print(r, theta)  \n  \n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # add the polar coordinates to the result list\n        result.append([r, theta])\n    \n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            for k in combinations_with_replacement(l[i:j], n-1):\n                result.append((l[i],) + k + (l[j],))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if n == 2:\n                combos.append((l[i], l[j]))\n            elif n == 3:\n                combos.append((l[i], l[j], l[i+1]))\n            elif n == 4:\n                combos.append((l[i], l[j], l[i+1], l[j+1]))\n            elif n == 5:\n                combos.append((l[i], l[j], l[i+1], l[j+1], l[i+2]))\n            elif n == 6:\n                combos.append((l[i], l[j], l[i+1], l[j+1], l[i+2], l[j+2]))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, n+1):\n        for combo in combinations_with_replacement(l, i):\n            color_combinations.append(tuple(combo))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # initialize an empty list to hold the combinations\n    combinations = []\n\n    # use itertools.combinations_with_replacement to generate all combinations of the list with length n\n    for combination in combinations_with_replacement(l, n):\n        # convert the combination to a tuple and append it to the combinations list\n        combinations.append(tuple(combination))\n\n    # return the combinations list\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # create a set of colors to use for each combination\n    colors = set(['red', 'blue', 'green', 'yellow'])\n\n    # generate all possible combinations of colors for each element in the list\n    combinations = list(combinations_with_replacement(colors, len(l)))\n\n    # create a list of tuples containing the combination of colors and the element from the list\n    result = []\n    for combination in combinations:\n        for element in l:\n            if combination.issubset(set(element)):\n                result.append((combination, element))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a list of tuples with the original list and its length\n    color_list = [(i, len(i)) for i in l]\n    # use combinations_with_replacement function from itertools to generate all combinations with repetition\n    color_combinations = list(combinations_with_replacement(color_list, n))\n    # create a list of tuples with the length of the combination and the combination itself\n    color_combination_tuples = [(len(c), c) for c in color_combinations]\n    # return the list of tuples\n    return color_combination_tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j == len(l):\n                result.append((l[i],))\n            else:\n                result.append((l[i],) + (l[j],) + combinations_colors(l[j+1:], n-2))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Using itertools.combinations_with_replacement function\n    for i in range(len(l)-n+1):\n        yield tuple(l[j] for j in range(i, i+n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    i = 2\n\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n\n    if n > 1:\n        count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n            \n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple\n    containing the elements from the first tuple that are greater than or\n    equal to the corresponding elements from the second tuple.\n    If there is a tie between two elements, the one from the first tuple is returned.\n    \"\"\"\n    max_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        max_tup += tuple(test_tup1[len(test_tup2):])\n    elif len(test_tup2) > len(test_tup1):\n        max_tup += tuple(test_tup2[len(test_tup1):])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        # If not, return an error message\n        return \"The two tuples must have the same length.\"\n    \n    # Initialize a list to hold the maximum elements of the two tuples\n    max_elements = []\n    \n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is greater than any of the current maximum elements\n        if element > max_elements and element not in test_tup2:\n            # If it is, add it to the list of maximum elements\n            max_elements.append(element)\n    \n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # Check if the element is greater than any of the current maximum elements\n        if element > max_elements and element not in test_tup1:\n            # If it is, add it to the list of maximum elements\n            max_elements.append(element)\n    \n    # Return the list of maximum elements\n    return max_elements"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum element from each tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Initialize max_val to the first element of each tuple\n    max_val = (test_tup1[0], test_tup2[0])\n    # Loop through the remaining elements of each tuple\n    for i in range(1, len(test_tup1)):\n        # Compare the current element to the maximum value\n        if test_tup1[i] > max_val[0]:\n            max_val = (test_tup1[i], max_val[1])\n        if test_tup2[i] > max_val[1]:\n            max_val = (max_val[0], test_tup2[i])\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # first, check if the first tuple has a higher value\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        # if both tuples have the same length, check if the first element is higher\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Compare the maximum values and return the tuple with the highest value\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_tuple[i]:\n            max_tuple = test_tup1\n        elif test_tup2[i] > max_tuple[i]:\n            max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tup = test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2 # first prime number\n    i = 3 # next number to check\n    count = 0 # counter for primes\n    \n    while count < n:\n        # check if number is prime\n        if all(p % i!= 0 for i in range(2, int(p**0.5) + 1)):\n            count += 1\n        p += 1\n        i += 2\n    \n    return p - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the count of prime numbers and the maximum prime number\n    count = 0\n    max_prime = 1\n\n    # Generate the first n prime numbers using the Sieve of Eratosthenes algorithm\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Count the prime numbers and find the maximum prime number\n    for i in range(n+1):\n        if primes[i]:\n            count += 1\n            if count == i+1:\n                max_prime = i\n\n    # Return the maximum prime number\n    return max_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sieve_of_eratosthenes(limit):\n        \"\"\"\n        Helper function to generate all prime numbers up to a given limit.\n        \"\"\"\n        primes = [True] * (limit+1)\n        primes[0] = primes[1] = False\n        for p in range(2, int(limit**0.5)+1):\n            if primes[p]:\n                for i in range(p*p, limit+1, p):\n                    primes[i] = False\n        return [i for i in range(2, limit+1) if primes[i]]\n\n    def newman_shanks_williams(n):\n        \"\"\"\n        Recursive function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if n == 1:\n            return 2\n        primes = sieve_of_eratosthenes(n)\n        for prime in primes:\n            if is_prime(prime + prime + 2):\n                return prime + prime + 2\n        return None\n\n    if n <= 1:\n        return None\n    return newman_shanks_williams(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        for i in range(5, 1000, 2):\n            j = 0\n            while True:\n                k = 2\n                while k * k <= i:\n                    j += 1\n                    k += 1\n                if j == n:\n                    return i\n                i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables to keep track of current prime number and count\n    current_prime = 3\n    count = 0\n\n    # Loop until the count reaches n\n    while count < n:\n        # Check if the current prime is a newman prime\n        if is_newman_prime(current_prime):\n            # If it is, increment the count and print the prime\n            count += 1\n            print(current_prime)\n        # If the current prime is not a newman prime, increment it\n        else:\n            current_prime += 2\n\n    # If the count reaches n without finding a newman prime, print \"No newman prime found\"\n    if count == n:\n        print(\"No newman prime found\")\n\n\ndef is_newman_prime(num):\n    \"\"\"\n    Determine if a given number is a newman prime number.\n    \"\"\"\n    # Initialize variables to keep track of prime factors and count\n    prime_factors = []\n    count = 0\n\n    # Loop through the number and count prime factors\n    for i in range(2, num + 1):\n        while num % i == 0:\n            prime_factors.append(i)\n            num //= i\n\n    # Check if the number has any prime factors that are not consecutive\n    if prime_factors!= sorted(prime_factors):\n        return False\n    # Check if the number has more than two consecutive prime factors\n    elif len(prime_factors) > 2:\n        return False\n    # Otherwise, return True\n    else:\n        return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    a = 2\n    prime_count = 0\n    prime = 2\n    \n    # Check if prime number is already known\n    if prime in known_primes:\n        return known_primes[prime]\n    \n    # Check if prime number is prime\n    while prime_count < n:\n        if is_prime(prime):\n            prime_count += 1\n        a += 1\n        prime = a * (a - 1) // 2\n    \n    # Save the result in the known_primes dictionary\n    known_primes[prime] = n\n    return n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # define a function to find the nth newman\u2013shanks\u2013williams prime number\n    def nth_prime(n):\n        current_prime = 2\n        primes = []\n        while len(primes) < n:\n            if is_prime(current_prime):\n                primes.append(current_prime)\n            current_prime += 1\n        return primes[-1]\n\n    # find the nth newman\u2013shanks\u2013williams prime number\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 2\n    flag = True\n    \n    # Check if n is 1 or less\n    if n <= 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Check if n is odd\n    elif n % 2 == 1:\n        return \"Invalid input. Please enter an even number.\"\n    \n    # Check if n is greater than 1\n    elif n > 1:\n        # Loop through all numbers from 3 to n-1\n        while count < n:\n            # Check if num is prime\n            if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n                count += 1\n            num += 1\n        \n        return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        # Check if i is a newman prime\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)) and i>1:\n            # Check if i satisfies n\n            if n == 0:\n                return i\n            n -= 1\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for sum and count of primes\n    total = 0\n    count = 0\n    \n    # Loop through each number starting from 2\n    for i in range(2, n+1):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the sum and increment the count\n        if is_prime:\n            total += i\n            count += 1\n    \n    # Return the sum of the first n prime numbers\n    return total"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same number of elements.')\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # perform element-wise division operation on tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of two tuples should be equal.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i] // test_tup2[i] + 1,)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division operation on the two tuples\n    result_tup = tuple([a / b for a, b in zip(test_tup1, test_tup2)])\n    \n    # Print the result tuple\n    print(\"The result tuple is:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples should have equal lengths.\")\n    # Perform element-wise division of the tuples\n    result_tup = [x / y for x, y in zip(test_tup1, test_tup2)]\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the given tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have unequal lengths.\"\n    # perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    # Get the length of the first part of the list\n    first_part_length = len(lst[:L])\n    # Create the first part of the list\n    first_part = lst[:L]\n    # Create the second part of the list\n    second_part = lst[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) % L!= 0:\n        raise ValueError(\"List length must be divisible by L\")\n    n = len(list1)\n    mid = n // 2\n    list1_part1 = list1[:mid]\n    list1_part2 = list1[mid:]\n    list2_part1 = list1_part2[L:]\n    list2_part2 = list1_part2[:L]\n    return (list1_part1, list2_part1), (list1_part2, list2_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts of equal length.\n    '''\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return the entire list as the first part\n    if L > len(list1):\n        return (list1, list1)\n    else:\n        # Split the list into two parts where the length of the first part is L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part of the list is L, and return the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    if L > n:\n        raise ValueError(\"Length of L should be less than or equal to the length of the list.\")\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a new list with the first L elements from list1\n    first_part = list1[:L]\n    # create a new list with the last L-1 elements from list1\n    second_part = list1[L-1:]\n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    num_elements = len(list1)\n    if L <= 0 or L > num_elements:\n        raise ValueError('L must be a positive integer less than or equal to the length of the list.')\n    mid_idx = num_elements // 2\n    first_part = list1[:mid_idx]\n    second_part = list1[mid_idx:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L > length:\n        raise ValueError(\"Length of L is greater than the length of the list\")\n    midpoint = length // 2\n    first_part = list1[:midpoint]\n    second_part = list1[midpoint:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than the length of the list\n    if L >= len(list1):\n        print(\"Error: L should be less than the length of the list\")\n        return None\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog's age in dog's years\n    dog_age_years = 10 * (h_age - 1)\n\n    # Return the dog's age in dog's years\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 12 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (365 * h_age) + (11 * h_age * h_age) - (17 * h_age * h_age * h_age)\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(height):\n    \"\"\"\n    Calculate a dog's age in dog's years based on their height in meters.\n\n    Args:\n        height (float): The dog's height in meters.\n\n    Returns:\n        int: The dog's age in dog's years.\n    \"\"\"\n    return int(height * 7)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    # Convert human age in hours to dog years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = 7 * (h_age // 7)\n    if h_age % 7!= 0:\n        dog_age += 1\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 0\n    if h_age > 0 and h_age < 10:\n        years = 7\n    elif h_age >= 10 and h_age < 25:\n        years = 6\n    elif h_age >= 25 and h_age < 50:\n        years = 5\n    else:\n        years = 4\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Split the input list into smaller lists of length step\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step > 0:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        raise ValueError(\"step must be a positive integer\")"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # check if the step is valid\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    # create an empty list to store the resulting lists\n    result = []\n    \n    # loop through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a copy of the input list to avoid modifying the original list\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n        \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S[::step] # create a new list with every nth element\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the list into chunks\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Use a loop to iterate over the list\n    result = []\n    for i in range(0, len(S), step):\n        # Append the current list to the result list\n        result.append(S[i:i+step])\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l * l / 2\n    print(\"Lateral surface area of the cube:\", surface_area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    # Calculate the surface area of the cube\n    surface_area = l**2 * 6\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (2*n-1)*(n+1)*n/2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n+1, 2):\n        odd_numbers.append(i)\n    squares = [i**2 for i in odd_numbers]\n    return sum(squares)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):  \n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate square of current odd natural number\n        square = i**2\n        # add square to sum variable\n        sum += square\n    # return sum of squares of odd natural numbers\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    total = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the total\n        total += i*i\n        \n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return 0\n    else:\n        sum = 0\n        i = 1\n        while i <= n:\n            sum += i**2\n            i += 2\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 2\n        i += 1\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return 10 * (n - 1) + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(1, n+1):\n        star_num *= 2\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    elif n == 3:\n        return '***'\n    else:\n        result = ''\n        for i in range(1, n+1):\n            result += find_star_num(i)\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize variables\n    num = 1\n    count = 1\n\n    # Iterate until count is equal to n\n    while count <= n:\n        # Print the current count\n        print(count)\n\n        # Update count and num\n        count += 1\n        num *= 2\n\n    # Return the final result\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the first two star numbers\n    first_star = 1\n    second_star = 1\n\n    # Loop to generate the remaining star numbers\n    for i in range(3, n+1):\n        # Calculate the next star number as the sum of the previous two\n        next_star = first_star + second_star\n        # Update the first and second star numbers for the next iteration\n        first_star = second_star\n        second_star = next_star\n\n    # Return then'th star number\n    return first_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    stars = \"*\" * n\n    print(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        star_num = \"\"\n        for i in range(1, n+1):\n            star_num += \"*\"\n        return star_num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    if k.isalpha():\n        ascii_value = ord(k)\n        return ascii_value\n    else:\n        print(\"Invalid character\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74,\n        'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85,\n        'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102,\n        'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112,\n        'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n    return ascii_value_dict.get(k.upper(), -1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    This function takes a character k and returns its ascii value.\n    \"\"\"\n    # convert character to its ascii value using ord() function\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                even_count += 1\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_positions = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_positions += arr[i]\n    return sum_even_at_even_positions"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and even_index % 2 == 0:\n            even_sum += arr[i]\n        if arr[i] % 2 == 0:\n            even_index += 1\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    # Initialize variables\n    result = 0\n    num = 2\n\n    # Iterate through the first n even natural numbers\n    while num <= n:\n        # Check if the number is even\n        if num % 2 == 0:\n            # Add the number raised to the fifth power to the result\n            result += num ** 5\n\n        # Increment the number\n        num += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        if i**5 % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n, 2):\n        # add the current even number raised to the fifth power to the sum\n        sum += i**5\n    \n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable\n    sum = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n\n        # check if the number is even\n        if i % 2 == 0:\n\n            # calculate the sum of the number raised to the fifth power\n            sum += i**5\n\n    # return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize sum to zero\n    sum_of_powers = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the power of the number and add it to the sum of powers\n        sum_of_powers += i ** 5\n        \n    # Return the sum of powers\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize a variable to store the sum of even numbers raised to the fifth power\n    even_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the even number raised to the fifth power to the even_sum\n        even_sum += i ** 5\n        \n    # Return the even_sum\n    return even_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Append the rear element of the tuple to the list\n        rear_list.append(tup[-1])\n    # Return the list of rear elements\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Check if the input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: input tuples must have equal length.\")\n        return\n\n    # Iterate through each index in the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element at index i in the first tuple from the element at index i in the second tuple\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            raise ValueError(\"The elements of the first tuple must be greater than or equal to the elements of the second tuple with the same index.\")\n    \n    return [(tup1[i] - tup2[i]) for i in range(len(tup1))]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup.append(test_tup1[i] - test_tup2[i])\n        else:\n            result_tup.append(0)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n\n    # initialize the result tuple\n    result_tup = []\n\n    # iterate through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    sum = 0\n    i = 0\n    j = 0\n    \n    # Calculate sum of even index binomial coefficients\n    while j <= n:\n        sum += math.comb(n, j)\n        i += 1\n        j += 2\n        \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize a variable to keep track of the sum of even index binomial coefficients\n    even_binomial_sum = 0\n\n    # Loop through all integers from 0 to n\n    for i in range(n+1):\n\n        # Calculate the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n,i)\n\n        # Check if the index i is even\n        if i % 2 == 0:\n\n            # Add the binomial coefficient to the sum of even index binomial coefficients\n            even_binomial_sum += binomial_coeff\n\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0 \n    for i in range(0, n+1): \n        sum += (-1)**(i+1)*math.factorial(n)/(math.factorial(i)*math.factorial(n-i)) \n    return sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # iterate from 0 to n-1\n    for i in range(n):\n        # if i is even, add the binomial coefficient to sum\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n\n    # return sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum of even binomial coefficients to 0\n    even_binomial_coeff_sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1):\n        term = math.factorial(n) // (math.factorial(i-2) * math.factorial(n-i+2))\n        if i % 2 == 0:\n            even_binomial_coeff_sum += term\n\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients\n    even_binomial_sum = 0\n    \n    # Loop through each index i from 0 to n-1\n    for i in range(n):\n        # Calculate the even index binomial coefficient using math.comb() function\n        even_binomial = math.comb(n, i)\n        \n        # Check if the even index binomial coefficient is even\n        if i % 2 == 0:\n            # If the even index binomial coefficient is even, add it to the sum\n            even_binomial_sum += even_binomial\n    \n    # Return the sum of even index binomial coefficients\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs += binomial_coeff\n    \n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # calculate the sum of even index binomial coefficients\n    sum_even_index_coeff = 0\n    for i in range(0, n+1, 2):\n        sum_even_index_coeff += math.comb(n, i)\n\n    return sum_even_index_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of the even index binomial coefficients.\n    '''\n    # Using the formula for even index binomial coefficient\n    coeff = (1 + math.sqrt(5)) / 2\n    sum_even = 0\n    for i in range(0, n, 2):\n        sum_even += int((coeff ** i) / math.factorial(i))\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 1/3*3.14159*(r**2)*(h)\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    \"\"\"\n    # Calculating the volume of the cylinder using the formula V = (1/3)\u03c0r\u00b2h\n    V = (1/3) * 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14159 * (r ** 2))\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*pi*(r**3)+(1/3)*pi*(h**3)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    area = 3.14159 * r**2 # using the formula for the area of a circle\n    volume = area * h # multiplying the area by the height to get the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder\n    volume = (1/3) * (3.14159 * r**2 * h)\n    \n    # Return the volume of the cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (1/3) * pi * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    # loop through the dictionary and add filtered entries to the new dictionary\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # filter the dictionary to include only entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create an empty list to store the filtered values\n    filtered_dict = []\n    \n    # Loop through the dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the key-value pair to the filtered dictionary\n            filtered_dict.append((key, value))\n    \n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1 and test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            if count == 2:\n                return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, element in enumerate(test_tup):\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the starting index of the number\n    i = 1\n    # initialize the sum of the decagonal numbers\n    sum_decagonal = 0\n\n    # loop through the number of times specified by n\n    for i in range(1, n+1):\n        # add the current index to the sum of the decagonal numbers\n        sum_decagonal += i\n\n    # return the sum of the decagonal numbers\n    return sum_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal = 0\n\n    for i in range(n):\n        decagonal += (2*i*i + 1)\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 22\n    elif n == 5:\n        return 35\n    elif n == 6:\n        return 51\n    \n    # recursive case\n    else:\n        return 5 * is_num_decagonal(n-1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        i = 1\n        while i <= n:\n            decagonal = i*(i+1) // 2\n            if decagonal == n:\n                return decagonal\n            i += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (5 * n * n) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) ** 2 - (10 * n) + 12\n\nn = int(input(\"Enter a number: \"))\nif n % 2 == 0:\n    print(is_num_decagonal(n))\nelse:\n    print(is_num_decagonal(n - 1))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize variables to keep track of row, column, and value\n    row = 1\n    col = 1\n    value = 1\n\n    # Check if n is less than or equal to the number of rows\n    while row <= n:\n        # Check if n is less than or equal to the number of columns\n        while col <= n:\n            # Check if the current value is equal to n\n            if value == n:\n                return True\n            # Move to the next value in the sequence\n            value += 1\n            # Move to the next row and column\n            row += 1\n            col += 1\n\n        # Move to the next row\n        row += 1\n        # Reset the column count\n        col = 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if the number is a decagonal number,\n    and False otherwise. A decagonal number is a number in which each digit of its integer part \n    (excluding the last digit) is the sum of the corresponding digits of the integer part \n    of the n-th decimal number. For example, the first decagonal number is 14, which is written \n    1^3 + 4^3 = 14. The next decagonal number is 28, which is written 2^3 + 8^3 = 28.\n    '''\n    if n < 1:\n        return False\n    digit_sum = 0\n    i = 1\n    while i <= n:\n        digit_sum += int(str(n)[-i])\n        i += 1\n    return digit_sum == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (5 * (n**2) + 5 * n + 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum of squares of first n odd numbers\n    odd_squares = 0\n    for i in range(1, n+1):\n        odd_squares += i**2\n    \n    # Initialize the sum of cubes of first n odd numbers\n    odd_cubes = 0\n    for i in range(1, n+1):\n        odd_cubes += i**3\n    \n    # Find the square root of the sum of squares of odd numbers\n    sqrt_sum_of_squares = round(odd_squares**(1/2))\n    \n    # Find the cube root of the sum of cubes of odd numbers\n    cube_sum_of_cubes = round(odd_cubes**(1/3))\n    \n    # Calculate the nth decagonal number\n    nth_decagonal = (2*cube_sum_of_cubes + 1)**2 - (2*sqrt_sum_of_squares + 1)**2\n    \n    return nth_decagonal"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for elem in test_list:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    if unique:\n        print(f\"The list {test_list} is all unique\")\n    else:\n        print(f\"The list {test_list} is not all unique\")"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments, nums1 and nums2, and returns a new list that contains\n    the element-wise difference between the two input lists.\n    '''\n    # Create an empty list to store the differences\n    differences = []\n    # Iterate through each element in both lists\n    for i in range(len(nums1)):\n        # Subtract the elements and append the result to the differences list\n        differences.append(nums1[i] - nums2[i])\n    # Return the differences list\n    return differences"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    \n    # Find the frequency of each digit in the integer\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    count = {}\n    for i in str(n):\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    for i in range(10):\n        if count[str(i)] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n\n    # count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > n // 10:\n            return False\n\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = set(str(n))\n    for digit in digits:\n        freq = n.count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string and split it into individual digits\n    digits = [int(d) for d in str(n)]\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through the digits and update the frequency in the dictionary\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    # Loop through the digits and check if the frequency is greater than the digit itself\n    for d in digits:\n        if freq[d] > d:\n            return False\n    \n    # If no error is found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit in the input integer\n    freq = {}\n    # iterate over each digit in the input integer\n    for digit in str(n):\n        # update the frequency of the digit in the dictionary\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # iterate over the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        # if the frequency is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n    \n    # otherwise, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Counting the frequency of each digit\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n\n    # Checking whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 1 and freq[i]!= i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert the integer into a list of digits\n    digits = list(str(n))\n\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n\n    # iterate through the list of digits and update the frequency of each digit in the dictionary\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # iterate through the dictionary and check whether the frequency of the digits is less than or equal to the digits themselves\n    for digit, freq_digit in freq.items():\n        if freq_digit > digit:\n            return False\n\n    # if all digits pass the validation, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all the items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\b\\1{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b(?:(?!\\1b)[^b]*)?'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(?:b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\w*[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[b]{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'\\ba\\b\\1{2,3}\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # repeat the array k times and calculate the sum of each subarray\n    for i in range(k):\n        current_sum += a[i]\n\n    # check if the current sum is greater than the maximum sum\n    max_sum = max(max_sum, current_sum)\n\n    # repeat the process for the remaining n-k elements\n    for i in range(n-k):\n        current_sum = current_sum - a[i] + a[i+k]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    \n    modified_array = []\n    for i in range(n):\n        if i < k-1:\n            modified_array.append(a[i])\n        else:\n            modified_array.append(a[i]*k)\n    \n    max_sum = max(modified_array)\n    max_subarray_sum = max_sum\n    for i in range(n-k+1):\n        current_sum = 0\n        for j in range(k):\n            current_sum += modified_array[i+j]\n        if current_sum > max_subarray_sum:\n            max_subarray_sum = current_sum\n    \n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n    \n    # iterate through the array using a sliding window approach\n    for i in range(n-k+1):\n        # calculate the sum of the first k elements\n        window_sum = sum(a[i:i+k])\n        \n        # check if the window sum is greater than the current maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = k * a[0]\n\n    for i in range(1, n):\n        current_sum += a[i]\n        repeated_sum += k * a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if i >= k:\n            current_sum -= a[i - k]\n            repeated_sum -= k * a[i - k]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first n elements in the array\n    first_sum = sum(a[:n])\n\n    # Initialize variables for the maximum sum, current sum, and the current subarray sum\n    max_sum = first_sum\n    current_sum = first_sum\n    current_subarray_sum = first_sum\n\n    # Loop through the array, updating the maximum sum, current sum, and current subarray sum\n    for i in range(n, len(a)):\n        current_sum = current_sum + a[i] - a[i - n]\n        current_subarray_sum = current_sum - (i - n) * a[i]\n\n        if current_subarray_sum > max_sum:\n            max_sum = current_subarray_sum\n\n    # If the maximum sum is not the same as the sum of the original array, repeat the array k times\n    if max_sum!= first_sum:\n        return max_sub_array_sum_repeated(a, n, k)\n    else:\n        return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a new array with k copies of the original array\n    new_array = [a] * k\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    # Iterate over each index in the new array\n    for i in range(n):\n        # Compute the sum of the current index and the sum of the current index and all previous indices in the new array\n        sum_current = a[i] + sum(new_array[j] for j in range(i+1))\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if sum_current > max_sum:\n            max_sum = sum_current\n        # Append the sum of the current index and all previous indices in the new array to the new array\n        new_array.append(sum_current)\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum and the current sum as 0\n    max_sum = 0\n    curr_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is the same as the previous element, add the difference between the current element and the previous element to the current sum\n        if i > 0 and a[i] == a[i - 1]:\n            curr_sum += a[i] - a[i - 1]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the number of times the current element is repeated is greater than k, update the current sum to 0\n        if i >= k:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the array with the given values\n    arr = a * k\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Initialize the maximum subarray sum\n    max_sum = arr[0]\n    \n    # Initialize the index of the maximum subarray\n    max_sum_index = 0\n    \n    # Loop through the sorted array\n    for i in range(k):\n        # Find the sum of the current subarray\n        sub_sum = 0\n        for j in range(n):\n            sub_sum += arr[i+j]\n        \n        # If the sum is greater than the maximum subarray sum, update the maximum subarray sum and its index\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_sum_index = i\n            \n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Modify the array by repeating the elements k times\n    modified_array = [0] * (n * k)\n    for i in range(n):\n        for j in range(k):\n            modified_array[i * k + j] = a[i]\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k * n):\n        current_sum += modified_array[i]\n        max_sum = max(max_sum, current_sum)\n        current_sum -= modified_array[i - k]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # create a copy of the input array to avoid modifying the original one\n    a = list(a)\n    # initialize the largest sum and its index\n    max_sum = a[0]\n    max_sum_index = 0\n    \n    # repeat the input array k times and calculate the sum of each repeat\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n        # update the maximum sum and its index if the sum is greater than the current maximum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_index = i\n            \n    return max_sum, max_sum_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    num = 2\n    while num <= n:\n        sum_of_squares += num*num\n        num += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize sum variable\n    sum_of_squares = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add square of i to sum_of_squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    total = 0\n    while count < n:\n        total += count**2\n        count += 1\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i**2\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for sublist in list1:\n        # Get the length of the current sublist\n        length = len(sublist)\n        \n        # If the length is greater than the current max length, update max_length and max_list\n        if length > max_length:\n            max_length = length\n            max_list = sublist\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), key=len)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # function to count number of ways to paint fence with n posts and k colors\n    def count_ways(n, k):\n        # base cases\n        if n == 0:\n            return 1\n        if k == 0:\n            return 0\n        if k == 1:\n            return n\n        \n        # recursive case\n        return count_ways(n-1, k) + count_ways(n-1, k-1)\n    \n    # count number of ways to paint fence with n posts and k colors using recursion\n    return count_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1 and k == 1:\n        return 1\n    dp = [[0]*(k+1) for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 1 and j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0]*n\n    ways = 1\n    \n    for i in range(n):\n        fence[i] = i+1\n    \n    for i in range(n):\n        for j in range(i, n):\n            if fence[j] == 0:\n                fence[j] = k - fence[i]\n                if fence[i] == fence[j]:\n                    ways *= 2\n                fence[j] = 0\n    \n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # create a dictionary to store the number of ways for each color\n    ways = {}\n    # loop through all the colors and initialize the dictionary with 0 ways for each color\n    for i in range(k):\n        ways[i] = 0\n\n    # loop through all the possible ways of painting the fence\n    for i in range(n):\n        # loop through all the remaining colors except the current one\n        for j in range(k):\n            if j!= i:\n                # if the current color is already used in the current way, increment the number of ways\n                if ways[j] > 0:\n                    ways[i] += ways[j]\n\n    # return the number of ways of painting the fence\n    return ways[i]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # initializing a dictionary to store the number of ways to paint the fence\n    ways = {}\n    # initializing the first post as white\n    ways[1] = 1\n    # initializing the other posts as black\n    ways[2:n] = [0 for _ in range(2, n)]\n    # using recursion to find out the number of ways to paint the fence\n    def helper(cur_color, color_count):\n        # base case: if the current color is the last one in the fence\n        if color_count == k:\n            return ways[cur_color]\n        # if the current color is already present in the fence, then we cannot paint it\n        elif ways[cur_color] > 0:\n            return 0\n        # if the current color is not present in the fence, then we can paint it either by painting all the previous colors or not painting it at all\n        else:\n            return ways[cur_color] + helper(cur_color + 1, color_count + 1) + helper(cur_color + 1, color_count)\n    # calling the helper function to find out the number of ways\n    return helper(1, 2)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the number of ways to 0\n    count = 0\n\n    # Loop through all possible colors\n    for i in range(k):\n        # Create a list of colors that are not i\n        j = set(range(k))\n        j.remove(i)\n        # Create a list of fence posts with the same color as i and adjacent colors not equal to i\n        fence_posts = [i]\n        for j in range(n):\n            color = fence_posts[-1]\n            if color in j:\n                color = j.pop()\n            fence_posts.append(color)\n\n        # Count the number of ways to paint the fence with the current color and adjacent colors\n        ways = 1\n        for j in range(n):\n            if fence_posts[j] == fence_posts[j-1]:\n                ways *= 2\n        count += ways\n\n    # Return the number of ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # If the number of colors is less than 2, we can't paint the fence\n    if k < 2:\n        return 0\n\n    # If there is only one post, we can paint it in any color\n    if n == 1:\n        return k\n\n    # Create a boolean matrix to store the number of ways to paint the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # First row and first column will always be 1\n    ways[1][1] = 1\n\n    # Fill the matrix using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            if j == 2 or i == 2:\n                ways[i][j] = ways[i - 1][j]\n            elif ways[i - 1][j] == ways[i - 2][j - 1] and ways[i][j - 1] == ways[i - 1][j - 1]:\n                ways[i][j] = ways[i - 2][j] + ways[i][j - 1]\n            elif ways[i - 1][j] == ways[i - 1][j - 1]:\n                ways[i][j] = ways[i - 1][j]\n\n    # Return the number of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, min(i+2, n)+1):\n            count += 1\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the number of ways to paint the fence to 1\n    num_ways = 1\n\n    # Loop through all the possible pairs of colors and check if they are adjacent to each other\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Check if the two colors are the same\n            if i!= j and abs(i - j) == k:\n                # If they are, multiply the number of ways to paint the fence by 2 (since we can paint the fence with 2 adjacent posts having the same color)\n                num_ways *= 2\n    \n    return num_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a 2D list to store the number of ways for each color and fence size\n    fence_ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Base cases: \n    # There is only one way to paint a fence of size 1 with k colors\n    fence_ways[1][1] = 1\n    \n    # If there are more than 2 posts in the fence, there is no way to paint a fence with k colors\n    if n > 2:\n        return 0\n    \n    # If there is only one post in the fence, there is only one way to paint it with k colors\n    if n == 1:\n        fence_ways[1][k] = 1\n        return fence_ways[1][k]\n    \n    # For fence sizes greater than 1, we can consider all the ways to paint fence of size n-1 with k-1 colors\n    for i in range(k):\n        fence_ways[i+1][i] = fence_ways[i][i]\n        fence_ways[i+1][i+1] = fence_ways[i+1][i]\n        \n    # For fence sizes greater than 2, we can consider all the ways to paint fence of size n-2 with k colors\n    if n > 2:\n        for i in range(k):\n            for j in range(i+2, k+1):\n                fence_ways[i+1][j] = (fence_ways[i+1][j] + fence_ways[i+2][j-1] + fence_ways[i][j-2]) % 1000000007\n                \n    # Return the total number of ways for the given fence size and k colors\n    return fence_ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as arguments and returns the quotient of n divided by m rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient by dividing the first number by the second number\n    quotient = n // m\n    \n    # Round the quotient to the nearest integer using the floor division operator //\n    quotient = quotient // 1\n    \n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Calculate the quotient and store it in the variable quotient\n    quotient = int(n/m)\n\n    # Return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    # calculate the quotient\n    quotient = n // m\n    \n    # round down the quotient to the nearest integer\n    quotient = quotient - quotient % 2\n    \n    # return the rounded quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is 0 or n is 0\n    if m == 0 or n == 0:\n        return \"Cannot divide by zero\"\n    \n    # find the quotient using the formula: quotient = floor((n/m)*100)/100\n    quotient = n // m\n    \n    # check if quotient is negative and adjust it accordingly\n    if n < 0 and m > 0:\n        quotient = -quotient\n    \n    # return the quotient rounded down to the nearest integer\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the cotangent of 135 degrees\n    cot135 = (math.sqrt(3) + 1) / 2\n\n    # Calculate the length of the third side\n    third_side = s * cot135\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the length of two sides of a right angled triangle as input \n    and returns the length of the third side.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w*w+h*h)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = w/2\n    c = a\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two parameters, w and h, which represent the length and width of the triangle.\n    It then calculates the length of the third side of the right angled triangle and returns it.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the cotangent of half the semi-perimeter\n    cot_half_s = 1 / math.tan(math.pi / 4 + math.atan(s / 2))\n    \n    # Calculate the length of the third side\n    third_side = h * cot_half_s\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the length of the first side\n    s = math.sqrt(w**2 + h**2)\n    # finding the length of the third side\n    third_side = math.sqrt((w**2 + s**2)**2 - (w**2 + h**2)**2)\n    # printing the result\n    print(\"The third side of the right angled triangle is:\", third_side)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize max_val with the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]  # update max_val if a larger element is found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize the maximum value to be the first element in the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list and compare each element with the current maximum\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if isinstance(listval, list):\n        max_val = max(listval, key=lambda x: x)\n    elif isinstance(listval, str):\n        max_val = max(listval)\n    else:\n        raise TypeError(\"Input should be a list or a string\")\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize variables for max value and current value\n    max_val = None\n    curr_val = None\n    \n    # Loop through the list\n    for item in listval:\n        # If current value is greater than max value, update max value\n        if curr_val is None or curr_val < item:\n            max_val = curr_val\n            curr_val = item\n        # If current value is same as max value, update current value\n        elif curr_val == item:\n            curr_val = item\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value to the first value of the list\n    max_val = listval[0]\n    # iterate over the rest of the list\n    for val in listval[1:]:\n        # if the current value is greater than the maximum value, update it\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(12))  # Output: 30"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Count the number of inversions\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as an argument and returns the number of inversions in the array.\n\n    An inversion is a tuple of two elements where the second element is greater than the first element.\n    For example, (3, 2) and (2, 3) are inversions.\n\n    The time complexity of this function is O(n log n), where n is the length of the input array.\n    '''\n\n    # Helper function to merge two sorted arrays\n    def merge_sorted_arrays(arr1, arr2):\n        merged_arr = []\n        i = j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                merged_arr.append(arr1[i])\n                i += 1\n            elif arr1[i] > arr2[j]:\n                merged_arr.append(arr2[j])\n                j += 1\n            else:\n                merged_arr.append(arr1[i])\n                i += 1\n                j += 1\n        merged_arr += arr1[i:]\n        merged_arr += arr2[j:]\n        return merged_arr\n\n    # Divide the array into two halves recursively until the array has only two elements\n    if len(arr) <= 2:\n        return 0\n    mid = len(arr) // 2\n    inv_count_left = get_Inv_Count(arr[:mid])\n    inv_count_right = get_Inv_Count(arr[mid:])\n    inv_count_merged = get_Inv_Count(arr[mid:][::-1]) + get_Inv_Count(arr[:mid][::-1])\n\n    return inv_count_left + inv_count_right - inv_count_merged\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j): \n        arr[i], arr[j] = arr[j], arr[i] \n    # Main function to count inversions in the array\n    def count_inv(arr, l, r): \n        if l == r: \n            return 0 \n        elif l > r: \n            return 0 \n        else: \n            i = l # Index of the pivot element \n            j = r # Index of the last element of the subarray \n            inv_count = 0 # Count of inversions \n            # Divide the array into two subarrays such that the pivot element is on the left side of the first subarray \n            while i < j: \n                while i < j and arr[i] <= arr[l]: \n                    i += 1 \n                while i < j and arr[j] >= arr[l]: \n                    j -= 1 \n                if i < j: \n                    swap(arr, i, j) \n                    inv_count += j - i + 1 # Count of inversions in the left subarray \n            # Recursively count inversions in the left subarray and the right subarray \n            left_inv = count_inv(arr, l, i-1) \n            right_inv = count_inv(arr, j+1, r) \n            return left_inv + right_inv + inv_count \n    return count_inv(arr, 0, n-1) "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Initialize inversion count\n    inv_count = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Initialize the left and right indices for the current sub-array\n        left = 0\n        right = i\n        \n        # Sort the sub-array using the merge sort algorithm\n        while left < right:\n            # Find the middle index of the left and right sub-arrays\n            mid = (left + right) // 2\n            \n            # Count the number of inversions in the left sub-array\n            left_inv = 0\n            for j in range(left, mid):\n                if arr[j] > arr[mid]:\n                    left_inv += 1\n            \n            # Count the number of inversions in the right sub-array\n            right_inv = 0\n            for j in range(mid+1, right+1):\n                if arr[mid] > arr[j]:\n                    right_inv += 1\n            \n            # Merge the left and right sub-arrays\n            inv_count += left_inv + right_inv\n            \n            # Update the left and right indices for the next iteration\n            left = mid + 1\n            right = right + left_inv - right_inv\n    \n    # Return the inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    # Initialize count variable to 0\n    count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Iterate through the remaining unsorted part of the array\n        for j in range(i+1, len(arr)):\n            # If the two elements are in the wrong order, increment the count\n            if arr[i] > arr[j]:\n                count += 1\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    # Create two empty lists to store the even and odd elements of the array\n    evens = []\n    odds = []\n\n    # Iterate through the array\n    for num in arr: \n        # If the number is even, add it to the even list\n        if num % 2 == 0: \n            evens.append(num) \n        # If the number is odd, add it to the odd list\n        else: \n            odds.append(num) \n\n    # Sort the even list in ascending order\n    evens.sort() \n\n    # Initialize the count variable to zero\n    inv_count = 0\n\n    # Iterate through the odd list\n    for num in odds: \n        # Find the index of the number in the even list\n        index = bisect.bisect_left(evens, num) \n\n        # If the number is greater than the element at the index, increment the count\n        if index < len(evens) and evens[index] > num: \n            inv_count += len(evens) - index\n\n        # Remove the number from the even list since it has been used\n        evens = evens[:index] + evens[index+1:]\n\n    # Return the final count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize count to 0\n    count = 0\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # Check if the left side of the current element is sorted\n        if arr[i] > arr[0]:\n            # Calculate the number of inversions\n            count += (len(arr) - i)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    for i in range(n//2):\n        # Find the maximum element in the left half\n        max_left = arr[i]\n        for j in range(i+1, n//2):\n            if arr[j] > max_left:\n                max_left = arr[j]\n        # Find the maximum element in the right half\n        max_right = arr[n//2-i-1]\n        for j in range(n//2-i, n//2):\n            if arr[j] > max_right:\n                max_right = arr[j]\n        # Swap the maximum elements\n        arr[i], arr[n//2-i-1] = max_left, max_right\n        # Count the number of inversions\n        inv_count += (n//2-i-1) * (n//2-i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Divide the array into two halves\n    mid = n // 2\n    # Recursively count inversions in each half\n    inv_left = get_Inv_Count(arr[:mid])\n    inv_right = get_Inv_Count(arr[mid:])\n    # Count inversions using two pointers\n    i, j = 0, mid\n    inv_count = 0\n    while i < mid and j < n:\n        if arr[i] < arr[j]:\n            inv_count += mid - i\n            i += 1\n        else:\n            j += 1\n    while i < mid:\n        inv_count += mid - i\n        i += 1\n    while j < n:\n        inv_count += n - j\n        j += 1\n    return inv_left + inv_right + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function counts inversions in an array by sorting it and counting the number of swaps.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array using merge sort\n    arr = merge_sort(arr)\n    \n    # Count the number of inversions using two pointers\n    left = 0\n    right = n-1\n    \n    while left < right:\n        # Find the mid index\n        mid = (left + right) // 2\n        \n        # Count the number of inversions in the left half of the array\n        inv_count += count_inversions(arr[:mid])\n        \n        # Move the pointers towards each other\n        left = mid + 1\n        right = n-1\n    \n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        list1: a nested list structure\n\n    Returns:\n        A flattened list structure without any nested lists.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list and returns a flattened version of the list.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for item in list1:\n        if type(item) == list:\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    dp = defaultdict(int)\n    for item in stdata:\n        dp[item[0]] += item[1]\n        if dp[item[0]] > max_agg:\n            max_agg = dp[item[0]]\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the total sales for each customer\n    customer_sales = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for customer, sale in stdata:\n        # Add the sale to the total sales for the customer\n        customer_sales[customer] += sale\n    \n    # Initialize a variable to store the maximum aggregate\n    max_aggr = 0\n    \n    # Iterate over the total sales for each customer\n    for sales in customer_sales.values():\n        # Update the maximum aggregate if the current sale is greater than the current max\n        if sales > max_aggr:\n            max_aggr = sales\n    \n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each student\n    max_dict = defaultdict(int)\n\n    # loop through each tuple in the list of tuples\n    for s, a in stdata:\n        # add the aggregate to the corresponding student's maximum aggregate\n        max_dict[s] += a\n\n    # find the maximum aggregate in the defaultdict\n    max_aggr = max(max_dict.values())\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the given list of tuples.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for item, freq_item in stdata:\n        freq[item] += freq_item\n\n    # Find the maximum aggregate from the frequency dictionary\n    max_aggregate = max(freq.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n\n    Parameters:\n    stdata (list of tuples): a list of tuples where each tuple contains the name of a store and the amount of cash\n    purchased by customers at that store.\n\n    Returns:\n    float: the maximum aggregate purchased by customers at all stores.\n\n    Example:\n    stdata = [('store1', 50), ('store2', 100), ('store3', 75), ('store4', 150)]\n    max_aggregate(stdata) # returns 200.0\n    '''\n\n    # create a dictionary to store the total sales per store\n    total_sales = defaultdict(int)\n\n    # iterate through the list of tuples and update the total sales per store\n    for store, amount in stdata:\n        total_sales[store] += amount\n\n    # calculate the maximum aggregate by iterating through the dictionary\n    max_agg = 0\n    for amount in total_sales.values():\n        if amount > max_agg:\n            max_agg = amount\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the total sales and the corresponding transaction dates\n    transactions = defaultdict(int)\n\n    # loop through the list of tuples and add the total sales and the transaction dates to the defaultdict\n    for item in stdata:\n        transactions[item[0]] += item[1]\n\n    # find the maximum value in the defaultdict\n    max_value = max(transactions.values())\n\n    # loop through the list of tuples again to find the corresponding transactions\n    max_transactions = []\n    for item in stdata:\n        if transactions[item[0]] == max_value:\n            max_transactions.append(item)\n\n    # return the maximum aggregate and the corresponding transactions\n    return max_value, max_transactions"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_ag = defaultdict(int)\n    max_sum = 0\n    for st, price in stdata:\n        max_ag[st] += price\n        max_sum = max(max_sum, max(max_ag.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum and count of each item\n    item_dict = defaultdict(lambda: (0, 0))\n\n    # iterate through the list of tuples\n    for item, price in stdata:\n        # update the count and sum of the item\n        item_dict[item] = (item_dict[item][0] + price, item_dict[item][1] + 1)\n\n    # calculate the maximum aggregate\n    max_aggregate = 0\n    for item_count in item_dict.values():\n        # calculate the aggregate of the item\n        aggregate = item_count[0] / item_count[1]\n        if aggregate > max_aggregate:\n            max_aggregate = aggregate\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int) # create a defaultdict to store the aggregate count for each item\n\n    # iterate through the list of tuples\n    for item, price in stdata:\n        d[item] += price # increment the aggregate count for the current item\n\n    # calculate the maximum aggregate count from the defaultdict\n    max_count = max(d.values())\n\n    # iterate through the list of tuples again to find the items that have the maximum aggregate count\n    max_items = [item for item, count in d.items() if count == max_count]\n\n    # return the maximum aggregate count and the list of items that have it\n    return max_count, max_items"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for num in item:\n            max_dict[num] += 1\n    max_num = 0\n    for num, count in max_dict.items():\n        if count > max_num:\n            max_num = count\n    return max_num"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        for j in range(2**n): \n            if sum(i) == sum(j): \n                count += 1 \n    return count "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2 ** n):\n        binary_seq = bin(i)[2:]  # convert integer to binary string without '0b' prefix\n        first_n_bits = binary_seq[:n]  # first n bits\n        last_n_bits = binary_seq[-n:]  # last n bits\n        if int(first_n_bits) == int(last_n_bits):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        count += i & ((1<<n)-1)\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n+1):\n        sum1 = 0\n        for j in range(n):\n            sum1 += i % 2\n            i //= 2\n        sum2 = 0\n        for j in range(n):\n            sum2 += i % 2\n            i //= 2\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        if (i & ((i-1) >> 1)) == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0:\n            count += 1\n    for i in range(2**n, 2**2*n):\n        if i % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i ^ j == (2**n - 1) - (i | j):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count and list of sequences\n    count = 0\n    seq_list = []\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n\n        # convert binary number to list of bits\n        bits = bin(i)[2:].zfill(n*2)\n\n        # calculate sum of first n bits and last n bits\n        first_sum = sum(int(bits[i:i+n]) for i in range(n))\n        last_sum = sum(int(bits[i:i+n]) for i in range(n, len(bits), n))\n\n        # if sums are same, add to count and add sequence to list\n        if first_sum == last_sum:\n            count += 1\n            seq_list.append(bits)\n\n    # return count and list of sequences\n    return count, seq_list"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        if sum(int(bit) for bit in seq[:n]) == sum(int(bit) for bit in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                sum1 += j\n        for j in range(n):\n            if (i >> (n-j-1)) & 1:\n                sum2 += j\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for v in d.values():\n            max_depth = max(max_depth, dict_depth(v))\n        return max_depth + 1\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # If the dictionary is empty, return 0\n    if not d:\n        return 0\n    \n    # Initialize the depth variable to 1\n    depth = 1\n    \n    # Recursively iterate over each value in the dictionary\n    for value in d.values():\n        # If the value is another dictionary, increase the depth by 1\n        if isinstance(value, dict):\n            depth += 1\n        \n        # If the value is not a dictionary, increase the depth by 1\n        else:\n            depth += 1\n            \n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth of the dictionary\n    depth = 0\n    # Recursively check each key in the dictionary\n    for key in d.keys():\n        # If the value is a dictionary, increment the depth by 1\n        if isinstance(d[key], dict):\n            depth += 1\n        # If the value is a list, iterate through each element and increment the depth by 1 if the element is a dictionary\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while True:\n        if isinstance(d, dict):\n            depth += 1\n            for v in d.values():\n                if isinstance(v, dict):\n                    d = v\n                else:\n                    break\n        else:\n            break\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Base case: if the dictionary is empty or has only one key-value pair, then its depth is 1\n    if not d or len(d) == 1:\n        return 1\n    \n    # Recursive case: compute the depth of the keys and values of the dictionary and add 1 to the depth of the dictionary\n    depth_keys = 0\n    depth_values = 0\n    for key in d:\n        depth_keys += 1\n        if isinstance(d[key], dict):\n            depth_values += dict_depth(d[key])\n    \n    return 1 + max(depth_keys, depth_values)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, number of rotations and an index as input\n    and returns the element at the given index after the number of rotations specified in the ranges list.\n    The index starts from 0.\n    \"\"\"\n    # Find the rotation factor using the formula for rotations.\n    rotation_factor = 1\n    for i in range(rotations):\n        rotation_factor *= ranges[i]\n\n    # Find the element at the given index after the specified number of rotations.\n    element_at_given_index = (index * rotation_factor) % (len(arr) * rotation_factor)\n\n    # Find the index of the element at the given index after the specified number of rotations.\n    element_index_after_rotation = element_at_given_index // rotation_factor\n\n    # Return the element at the given index after the specified number of rotations.\n    return arr[element_index_after_rotation]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotating the array by the given number of rotations.\n    It takes four arguments:\n    arr: The input array of integers.\n    ranges: A list of tuples containing the indices of the elements that need to be rotated.\n    rotations: The number of rotations to be applied to the array.\n    index: The index of the element that needs to be found after the rotations.\n    \"\"\"\n    # Get the length of the array\n    n = len(arr)\n\n    # Initialize the result variable\n    result = -1\n\n    # Loop through the ranges\n    for i in range(len(ranges)):\n        # Get the start and end indices of the current range\n        start = ranges[i][0]\n        end = ranges[i][1]\n\n        # Check if the current range contains the index\n        if start <= index <= end:\n            # Calculate the distance between the start and end indices\n            diff = end - start\n\n            # Calculate the index after rotating the array by the number of rotations\n            rotated_index = (index - start + diff) % diff + start\n\n            # If the rotated index is the same as the index we are looking for, return the value of the current element\n            if rotated_index == index:\n                result = arr[start]\n                break\n\n    # If the result variable is still -1, return None\n    if result == -1:\n        return None\n\n    # If the result variable is not None, return the value of the current element\n    else:\n        return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = arr[0:index] + arr[index:] + [arr[0]] * (rotations - 1)\n    temp = arr[index]\n\n    for i in range(rotations):\n        for j in range(len(rotated_arr)):\n            if rotated_arr[j] == temp:\n                rotated_arr.remove(temp)\n                temp = rotated_arr[0]\n                break\n\n    for i in range(len(rotated_arr)):\n        if rotated_arr[i] == arr[index]:\n            return rotated_arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): list of integers.\n    ranges (list): list of integers representing the range of each element.\n    rotations (int): number of rotations.\n    index (int): index of the element to be found.\n\n    Returns:\n    int: element at the given index after rotations.\n\n    \"\"\"\n\n    # Store the element at index 0 in a variable\n    element = arr[0]\n\n    # Traverse through the array and find the element at index index\n    for i in range(1, len(arr)):\n        if i == index:\n            break\n\n        # Update the element variable with the element at index i after rotations\n        element = (arr[i] + element - 1) % (2 * ranges[i - 1]) + 1\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, number of rotations and an index as input.\n    The function finds the element at the given index after the number of rotations.\n    \"\"\"\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Calculate the index of the element to be found after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Check if the element is at the starting point\n    if new_index == 0:\n        result.append(arr[0])\n        return result\n\n    # Check if the element is at the ending point\n    if new_index == len(arr) - 1:\n        result.append(arr[-1])\n        return result\n\n    # Find the element at the starting point\n    if ranges[0] == 1:\n        temp = arr[0]\n        for i in range(1, ranges[0]):\n            temp += arr[i]\n        result.append(temp)\n\n    # Find the element at the ending point\n    if ranges[-1] == 1:\n        temp = arr[-1]\n        for i in range(1, ranges[-1]):\n            temp += arr[-1 - i]\n        result.append(temp)\n\n    # Find the element at the middle point\n    if ranges[0] + ranges[-1] == 2:\n        temp = arr[0]\n        for i in range(1, ranges[0]):\n            temp += arr[i]\n        temp += arr[-1]\n        for i in range(1, ranges[-1]):\n            temp += arr[-1 - i]\n        result.append(temp)\n\n    # If the element is not at any of the above points, find it using the formula\n    if len(ranges) == 1:\n        if new_index == index:\n            result.append(arr[index])\n            return result\n        else:\n            return \"Element not found\"\n\n    if ranges[0] + ranges[-1] == 1:\n        if new_index == index:\n            result.append(arr[index])\n            return result\n        else:\n            return \"Element not found\"\n\n    if ranges[0] == 1 and ranges[-1] == 1:\n        if new_index == index:\n            result.append(arr[index])\n            return result\n        else:\n            return \"Element not found\"\n\n    if ranges[0] == 1 or ranges[-1] == 1:\n        temp = 0\n        for i in range(ranges[0]):\n            temp += arr[i]\n        temp += arr[index]\n        for i in range(ranges[-1]):\n            temp += arr[-1 - i]\n        if temp == arr[index]:\n            result.append(arr[index])\n            return result\n        else:\n            return \"Element not found\"\n\n    return \"Element not found\"\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations and an index as input and returns the element at the given index after rotations.\n    \"\"\"\n    # Finding the element at the given index after rotations\n    for i in range(rotations):\n        if i < len(ranges):\n            index = (index - 1) % len(arr)\n        else:\n            index = (index + 1) % len(arr)\n        arr.insert(index, arr.pop(0))\n    # Returning the element at the given index after rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the current element at the given index\n    current_element = arr[index]\n\n    # Iterate through the rotations and find the element after each rotation\n    for i in range(rotations):\n        # Find the last element in the range\n        last_element = arr[ranges[i][1]]\n\n        # Find the element at the new index after the rotation\n        new_index = last_element - ranges[i][0]\n        new_index = new_index % len(arr)\n        new_element = arr[new_index]\n\n        # If the element is equal to the current element, return it\n        if new_element == current_element:\n            return new_element\n\n    # If the element was not found after all rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array of numbers and a list of ranges and rotations, as well as an index, and returns the element at the specified index after rotations.\n    '''\n    # Initialize the count and element variables\n    count = 0\n    element = None\n    \n    # Iterate through the array and check for the element at the given index\n    for i in range(len(arr)):\n        if i == index:\n            element = arr[i]\n            count += 1\n        if count == rotations:\n            element = arr[i]\n            break\n    \n    # Iterate through the array again and check if the element is within the given ranges\n    for i in range(len(arr)):\n        if arr[i] >= ranges[0] and arr[i] <= ranges[1]:\n            if count == rotations:\n                element = arr[i]\n                break\n    \n    # Return the element at the specified index after rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, and a number of rotations as input and returns the element at the given index after rotating the array.\n\n    Parameters:\n    arr (list): A list of integers representing the array to be rotated.\n    ranges (list): A list of lists, where each inner list contains the lower and upper bounds of the ranges.\n    rotations (int): The number of rotations required to find the element at the given index.\n\n    Returns:\n    int: The element at the given index after rotating the array.\n    '''\n\n    # Initialize the current range of the array to be rotated\n    current_range = [0, len(arr) - 1]\n\n    # Iterate through the rotations required to find the element at the given index\n    for i in range(rotations):\n        # Find the element at the current index after the rotation\n        element = arr[ranges[i][0]:ranges[i][1]+1:ranges[i][2]]\n\n        # Find the index of the element in the current range of the array\n        if element[0] == element[index]:\n            current_range[0] = max(current_range[0], ranges[i][0] + (index - element.index(element[0])) // element[2])\n        elif element[-1] == element[index]:\n            current_range[1] = min(current_range[1], ranges[i][1] - (element[0] - element.index(element[-1])) // element[2])\n\n    # Return the element at the given index after rotating the array\n    return arr[current_range[0]:current_range[1]+1:current_range[2]]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array 'arr', a list of tuples 'ranges', a list of integers 'rotations', and an integer 'index'.\n    The function returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Define a helper function to rotate an array by k positions\n    def rotate_array(arr, k):\n        n = len(arr)\n        for i in range(k):\n            arr.insert(0, arr.pop(n-1))\n        return arr\n    \n    # Initialize the current element to the element at the given index\n    current_element = arr[index]\n    \n    # Apply each rotation to the current element to find its new position\n    for rotation in rotations:\n        k = rotation % len(ranges)\n        current_element = rotate_array(current_element, k)\n        index += k\n    \n    # Find the element at the new index by traversing the array from the new index\n    for i in range(index, len(arr)):\n        current_element = arr[i]\n        if current_element == arr[index]:\n            return current_element\n    \n    # If the element is not found in the array, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*[a-z]'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'\\bp\\w+\\b')\n    # Find all words in the list that match the pattern\n    matches = re.findall(pattern,''.join(words))\n    # Return the two words\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(r'^p', word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p')\n    # Loop through the list of words and check if each one matches the pattern\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            # If a match is found, return the two words and break the loop\n            return words[i:i+2]\n    # If no match is found, return an empty list\n    return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    for word in words:\n        if re.search(pattern, word):\n            return (word, word)\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regex pattern for matching words starting with 'p'\n    pattern = r'^p'\n    # Iterate over list of words and check if each word matches the pattern\n    for word in words:\n        if re.match(pattern, word):\n            # Return two words starting with 'p'\n            return word, words.pop(words.index(word))\n    # If no words starting with 'p' are found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Create a regular expression pattern for matching words starting with 'p'\n    pattern = re.compile(\"^p.*\")\n    \n    # Iterate over the list of words\n    for word in words:\n        # Match the pattern with the current word\n        match = re.match(pattern, word)\n        \n        # If the match is successful, return the two words\n        if match:\n            return match.group(), match.group(1)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    subseq = []\n    for i in range(n):\n        if a[i] < a[index]:\n            # Update subsequence if the current element is smaller than the kth element\n            if i > k and a[i] < a[k]:\n                subseq = [a[i]]\n            elif i > k:\n                subseq.append(a[i])\n            else:\n                subseq = [a[i]]\n        else:\n            # Find the maximum sum of increasing subsequence from prefix until i-1\n            max_sum_i_minus_one = max_sum_increasing_subseq(a, i, index, k)\n            # Update maximum sum of increasing subsequence if the current element is greater than the kth element\n            max_sum_i = max(max_sum_i_minus_one + a[i], max_sum_i_minus_one)\n            max_sum = max(max_sum, max_sum_i)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if k < index:\n        return 0\n\n    if index == 0:\n        if a[index] > a[k]:\n            return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        if a[index] > a[k]:\n            return a[index] + max_sum_increasing_subseq(a, n, index-1, k)\n        elif a[index] <= a[k]:\n            return max_sum_increasing_subseq(a, n, index-1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_sum_index = -1\n    for j in range(index, n):\n        current_sum += a[j]\n        if current_sum > a[k] and j > index and j < k:\n            current_sum_index = j\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = current_sum_index\n    return max_sum, max_sum_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes an array a of size n and the index i of the given kth element as input.\n    The function returns the maximum sum of increasing subsequence from prefix until i and also including the given kth element.\n    \"\"\"\n\n    if k > n:\n        return 0\n\n    if index == k:\n        return a[index]\n\n    if index == 0:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n\n    # Find the maximum sum of increasing subsequence from prefix until index\n    max_sum_left = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    # Find the maximum sum of increasing subsequence from prefix until index + 1\n    max_sum_right = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Find the maximum sum of increasing subsequence from prefix until i and also including the given kth element\n    max_sum_i = max(max_sum_left + a[index], max_sum_right + a[index])\n\n    return max_sum_i\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    current_sum = 0\n    subseq = [0] * n\n\n    for i in range(n):\n        if i < k:\n            subseq[i] = a[i]\n        elif i == k:\n            subseq[i] = a[i] + a[k] - a[i-1]\n        else:\n            subseq[i] = max(a[i], a[i] + subseq[i-1])\n\n        current_sum += subseq[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n\n    if index == n:\n        return a[n-1]\n\n    if k > index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))\n\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index, k+1)\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index, k+1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if index == n:\n        return 0\n    \n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index, n):\n        if i < k:\n            dp[i] = max(dp[i], a[i] + dp[k-1])\n        else:\n            dp[i] = max(dp[i], a[i] + dp[i-k])\n            \n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a max_sum variable with initial value of negative infinity\n    max_sum = float('-inf')\n\n    # Initialize a window with size k and initialize sum as 0\n    window = []\n    sum = 0\n\n    # Iterate over the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than kth element in the window, remove the first element of the window\n        if i > index and a[i] > a[window[0]]:\n            sum -= a[window[0]]\n            window.pop(0)\n\n        # Add the current element to the window\n        window.append(i)\n\n        # If the window size is greater than k, calculate the sum of the window and compare it with max_sum\n        if len(window) > k:\n            sum += a[window[-1]]\n            if sum > max_sum:\n                max_sum = sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum as 0 and initialize a list to store the sum of increasing subsequence from prefix until ith index\n    max_sum = 0\n    sum_lst = [0] * n\n\n    # Iterate over the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than or equal to the kth element, update the sum of increasing subsequence from prefix until i-1 and k-1\n        if a[i] >= a[k-1]:\n            sum_lst[i] = sum_lst[i-1] + a[i] - a[k-1]\n        else:\n            # Otherwise, update the sum of increasing subsequence from prefix until i-1 and k\n            sum_lst[i] = sum_lst[i-1] + a[i]\n\n        # Update the maximum sum if the sum of increasing subsequence from prefix until i exceeds the current maximum sum\n        max_sum = max(max_sum, sum_lst[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [[0] * n for _ in range(n + 1)]\n    max_sum = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i][j] = dp[i - 1][j] + a[i] - a[j]\n                if dp[i][j] > max_sum:\n                    max_sum = dp[i][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    if k > index:\n        return max_sum + a[k] - a[index]\n    else:\n        return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if tuplex is a tuple\n    if type(tuplex)!= tuple:\n        print(\"Error: tuplex must be a tuple!\")\n        return\n    \n    # Create a copy of the tuplex\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(tuplex)\n    \n    # Create a new colon of size m*n\n    new_colon = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            if i*n+j >= length:\n                break\n            else:\n                col.append(tuplex[i*n+j])\n        new_colon.append(col)\n    \n    # Return the new colon\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    colon = deepcopy(tuplex)\n    \n    # Fill the colon with the values from the input tuple\n    for i in range(len(colon)):\n        if i % n == 0:\n            colon[i] = m\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[i],)\n    for j in range(n-1):\n        new_tuplex = new_tuplex + (new_tuplex[j],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return ()\n    elif m==1:\n        return (tuplex[0],)\n    elif m>1:\n        return (tuplex[0], *colon_tuplex(deepcopy(tuplex[1:]), m-1, n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple (tuplex) and returns a tuple (colon) of the same size as the input tuple where each element is a colon of the corresponding element in the input tuple.\n    '''\n    # Create a copy of the input tuple\n    copy_tuplex = deepcopy(tuplex)\n    \n    # Get the length of the input tuple\n    length = len(tuplex)\n    \n    # Get the index of the first element in the colon\n    colon_start = 0\n    \n    # Loop through the elements of the input tuple\n    for i in range(length):\n        # Get the current element\n        current_element = copy_tuplex[i]\n        \n        # Get the index of the next element to be colonized\n        next_element_index = (colon_start + n - 1) % length\n        \n        # Colonize the current element with the next element\n        current_element = (current_element, copy_tuplex[next_element_index])\n        \n        # Replace the current element in the input tuple with the colonized element\n        copy_tuplex[i] = current_element\n        \n        # Move the start index of the colon to the next element\n        colon_start = (colon_start + m) % length\n    \n    # Return the colonized tuple\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(len(tuplex)):\n        colon.append(deepcopy(tuplex[i][:m]))\n        colon[-1].append(tuplex[i][m:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[0], new_tuplex[n-i-1])\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is a tuple and if it has at least two elements\n    if not isinstance(tuplex, tuple) or len(tuplex) < 2:\n        return \"Error: Input is not a tuple or does not have at least two elements.\"\n    \n    # Check if the input tuple has at least m elements\n    if len(tuplex) < m:\n        return \"Error: Input tuple does not have enough elements.\"\n    \n    # Create a copy of the input tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get a list of the first m elements of the new tuple\n    first_m_elements = list(new_tuplex[:m])\n    \n    # Get a list of the last n elements of the new tuple\n    last_n_elements = list(new_tuplex[-n:])\n    \n    # Get the colon of the new tuple\n    colon = tuple(first_m_elements + last_n_elements)\n    \n    # Return the colon of the new tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n    # get the number of elements in the original tuple\n    num_elems = len(new_tuplex)\n    # calculate the number of columns in the colon\n    num_cols = m\n    # calculate the number of rows in the colon\n    num_rows = n\n    # calculate the number of elements in the colon\n    num_elems_in_colon = num_rows * num_cols\n    # check if the number of elements in the tuple is equal to the number of elements in the colon\n    if num_elems == num_elems_in_colon:\n        # get the indices of the first element in each row\n        row_indices = [i*num_cols for i in range(num_rows)]\n        # create a list of empty lists to hold the colon elements\n        colon_elems = [[None for j in range(num_cols)] for i in range(num_rows)]\n        # fill in the colon elements\n        for i in range(num_rows):\n            for j in range(num_cols):\n                # get the index of the first element in the row\n                first_elem_idx = row_indices[i] + j\n                # set the colon element at the current row and column\n                colon_elems[i][j] = new_tuplex[first_elem_idx]\n        # return the colon elements as a tuple\n        return tuple(colon_elems)\n    else:\n        # if the number of elements is not equal to the number of elements in the colon, return None\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize a list to store the colon\n    colon = []\n\n    # Iterate through the rows of the tuple\n    for i in range(m):\n        # Iterate through the columns of the tuple\n        for j in range(n):\n            # Add the element at (i,j) to the colon\n            colon.append(tuplex[i][j])\n\n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to store the largest product of each list\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Loop through the first list\n    for num in nums1:\n        # Calculate the product of the current number and the largest product of the second list\n        product = num * largest_product2\n        # If the product is larger than the current largest product, update the variable\n        if product > largest_product1:\n            largest_product1 = product\n        # If the product is larger than the largest product of the first list, update the variable\n        if product > largest_product2:\n            largest_product2 = product\n        # If we have found the specified number of largest products, break out of the loop\n        if N == 2:\n            break\n    \n    # Return the largest product of the two lists\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    # Initialize the largest products to be 0\n    largest_product1 = 0\n    largest_product2 = 0\n    \n    # Iterate through the first N elements of each list\n    for i in range(N):\n        # Calculate the product of the first N elements of each list\n        product1 = nums1[i] * nums2[i]\n        \n        # Update the largest product if necessary\n        if product1 > largest_product1:\n            largest_product1 = product1\n        \n        # Calculate the product of the last N elements of each list\n        product2 = nums1[-i-1] * nums2[-i-1]\n        \n        # Update the largest product if necessary\n        if product2 > largest_product2:\n            largest_product2 = product2\n    \n    # Return the two largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Calculate the product of the largest N factors from each list\n    for i in range(N):\n        result[i] = nums1[i] * nums2[i]\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables for the largest products\n    largest_product1 = nums1[0]\n    largest_product2 = nums2[0]\n\n    # find the specified number of largest products\n    for i in range(N):\n        largest_product1 *= nums1[i]\n        largest_product2 *= nums2[i]\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two lists to hold the products of the factors\n    products1 = []\n    products2 = []\n    # Initialize two variables to keep track of the maximum product found so far\n    max_product1 = 0\n    max_product2 = 0\n    # Loop through each factor to find the N largest products\n    for i in range(min(len(nums1), len(nums2))):\n        # Calculate the product of the current factor in both lists\n        product1 = nums1[i] * nums2[i]\n        product2 = nums2[i] * nums1[i]\n        # Add the product to the appropriate list\n        if product1 > max_product1:\n            max_product1 = product1\n            products1 = [product1]\n        else:\n            products1.append(product1)\n        if product2 > max_product2:\n            max_product2 = product2\n            products2 = [product2]\n        else:\n            products2.append(product2)\n        # If we have found the desired number of products, stop looping\n        if len(products1) == N or len(products2) == N:\n            break\n    # Return the products and their respective indices\n    return products1, products2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # create a dictionary to store the largest products found so far\n    max_products = {}\n    \n    # iterate over the indices of the list\n    for i in range(len(nums1)):\n        \n        # calculate the product of the two lists using the i-th factor from each list\n        product = nums1[i] * nums2[i]\n        \n        # check if the product is already in the dictionary\n        if product in max_products:\n            \n            # if it is, update the count of this product\n            max_products[product] += 1\n            \n        # if the product is not in the dictionary, add it with a count of 1\n        else:\n            max_products[product] = 1\n        \n        # if the number of products found so far exceeds the desired number, break out of the loop\n        if len(max_products) >= N:\n            break\n    \n    # return a list of the products found\n    return list(max_products.keys())"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product1 = max_product2 = float('-inf')\n    for i in range(N):\n        temp1 = nums1[i] * nums2[i]\n        if temp1 > max_product1:\n            max_product1 = temp1\n        temp2 = nums1[i] * nums2[-i-1]\n        if temp2 > max_product2:\n            max_product2 = temp2\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum product of any two elements in the lists\n    max_product = max(nums1[0] * nums2[0], nums1[1] * nums2[1])\n\n    # Iterate through the remaining products until we have found the desired number of products\n    for i in range(2, N):\n        # Find the maximum product of any two elements in the remaining lists\n        max_product = max(max_product, nums1[i] * nums2[i], nums1[i-1] * nums2[i-1])\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    result = []\n    \n    # Find the product of the first N elements in the first list\n    product1 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n    \n    # Find the product of the first N elements in the second list\n    product2 = 1\n    for i in range(N):\n        product2 *= nums2[i]\n        \n    # Find the maximum product\n    max_product = max(product1, product2)\n    \n    # Add the largest product to the result list\n    result.append(max_product)\n    \n    # Find the product of the remaining elements in the first list\n    product1 = 1\n    for i in range(N, len(nums1)):\n        product1 *= nums1[i]\n        \n    # Find the product of the remaining elements in the second list\n    product2 = 1\n    for i in range(N, len(nums2)):\n        product2 *= nums2[i]\n        \n    # Add the second largest product to the result list\n    max_product = max(product1, product2)\n    result.append(max_product)\n    \n    # Repeat the process until we have found the required number of products\n    while len(result) < N:\n        # Find the product of the remaining elements in the first list\n        product1 = 1\n        for i in range(N, len(nums1)):\n            product1 *= nums1[i]\n            \n        # Find the product of the remaining elements in the second list\n        product2 = 1\n        for i in range(N, len(nums2)):\n            product2 *= nums2[i]\n            \n        # Add the maximum of the two products to the result list\n        max_product = max(product1, product2)\n        result.append(max_product)\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the two largest products found so far\n    max_product1 = max_product2 = float('-inf')\n\n    # Loop through the first N elements of the sorted lists\n    for i in range(N):\n        # Calculate the product of the i-th largest element of nums1 and nums2\n        product1 = nums1[i] * nums2[i]\n\n        # Update the maximum product found so far\n        if product1 > max_product1:\n            max_product1 = product1\n\n        # Calculate the product of the (N-i)-th largest element of nums1 and nums2\n        product2 = nums1[N-i-1] * nums2[N-i-1]\n\n        # Update the maximum product found so far\n        if product2 > max_product2:\n            max_product2 = product2\n\n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"The maximum number is:\", a)\n    else:\n        print(\"The maximum number is:\", b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two parameters a and b, and returns the larger of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple of characters\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple of characters\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \", \"\")\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the number of unset bits\n    unset_bits = 0\n\n    # Count the number of unset bits in the binary representation of n\n    while n!= 0:\n        unset_bits += n & 1\n        n >>= 1\n\n    # Set the left most unset bit by shifting left by the number of unset bits\n    return n << unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        An integer where the left most unset bit is set to 1 and the other bits are unchanged.\n    \"\"\"\n    # Convert the integer to binary string.\n    binary_string = bin(n)[2:]\n\n    # Iterate over the binary string from left to right, checking for unset bits.\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            # Set the left most unset bit to 1 and the rest to 0.\n            binary_string = binary_string[:i] + '1' + binary_string[i+1:]\n            break\n\n    # Convert the binary string back to an integer.\n    return int(binary_string, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    unset_bits = bin(n)[2:]\n    for i in range(len(unset_bits)):\n        if unset_bits[i] == '0':\n            unset_bits = unset_bits[:i] + '1' + unset_bits[i+1:]\n            break\n\n    return int(unset_bits, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n    \"\"\"\n    # Initialize a variable to keep track of the index of the leftmost unset bit\n    left_most_unset_index = -1\n\n    # Iterate over each bit in the binary representation of the number\n    for i in range(32):\n        # If the current bit is 0, then this is the leftmost unset bit\n        if (n & (1 << i)) == 0:\n            left_most_unset_index = i\n            break\n\n    # Set the leftmost unset bit of the number\n    n |= (1 << left_most_unset_index)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the left most unset bit to -1\n    bit = -1\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the bit is set in the binary representation of n\n        if (n >> i) & 1 == 1:\n            # If the bit is set, set the left most unset bit to the current bit\n            bit = i\n            # Exit the loop since the bit is already set\n            break\n    # If the bit is still -1 after looping through all bits, set the left most unset bit to 32\n    if bit == -1:\n        bit = 32\n    # Set the left most unset bit of n to the current bit\n    n = n & ~(1 << bit)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a binary number.\n    \"\"\"\n    # Initialize the variable to keep track of the leftmost unset bit\n    left_most_unset_bit = 0\n    \n    # Iterate through the binary representation of the number n\n    for i in range(8):\n        # Check if the bit is set to 1\n        if (n & (1 << i)):\n            # If it is, check if it is the leftmost unset bit\n            if not left_most_unset_bit:\n                left_most_unset_bit = i\n            # If it is not the leftmost unset bit, shift the number to the left and continue iterating\n            else:\n                n <<= 1\n                continue\n    \n    # If no unset bit is found, return the original number unchanged\n    if not left_most_unset_bit:\n        return n\n    \n    # Otherwise, set the leftmost unset bit to 1 and return the modified number\n    else:\n        n |= (1 << left_most_unset_bit)\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer.\n    '''\n    while n & (n-1) == 0:\n        n &= n-1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while (n & bit) == 0:\n        bit <<= 1\n\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while n & bit == 0:\n        bit <<= 1\n    return n | bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index of the leftmost unset bit\n    index = 0\n\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]: \n        # If the bit is already set, skip it and move on to the next bit\n        if bit == '1': \n            continue\n\n        # Set the leftmost unset bit to the current index and return n\n        n = n | (1 << index)\n        return n\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    V = math.pi * r * r * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    v = (1/3) * math.pi * r**2 * h\n    # return the volume of the cone\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone, respectively.\n    The function calculates the volume of the cone using the formula V = (1/3) * pi * r^2 * h.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone, respectively.\n    It returns the volume of the cone as a float.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 2\n        while i <= n:\n            if i >= 2**i:\n                return i\n            i *= 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Set a variable to keep track of the highest power of 2 less than or equal to n\n    highest = 0\n    \n    # Loop through each bit of n\n    for i in range(32): \n        # If the current bit is set to 1\n        if n & (1 << i): \n            # Update the highest power of 2\n            highest = i\n            \n    # Return the highest power of 2 less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 to 0\n    highest_power_of_2 = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a power of 2\n        if i == 2**highest_power_of_2:\n            highest_power_of_2 += 1\n\n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power to 1\n    power = 1\n    \n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return power\n    \n    # While n is not a power of 2, check the next higher power of 2\n    while n > 1:\n        power += 1\n        n >>= 1\n        \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    power = 1\n    while power * 2 <= n: \n        power *= 2\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 << (32 - n.bit_length())"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        while i < n:\n            i <<= 1\n        return i - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 variable to 1\n    highest_power_of_2 = 1\n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the current number is a power of 2\n        if i == 2**highest_power_of_2:\n            # If it is, update the highest power of 2 to the current power of 2\n            highest_power_of_2 += 1\n        else:\n            # If it's not a power of 2, reset the highest power of 2 to 1\n            highest_power_of_2 = 1\n            # And keep looking for a power of 2\n            break\n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            next = prev_prev + prev\n            prev_prev = prev\n            prev = next\n        return next"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1)\n        lucas = lucas + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1)\n        return lucas + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # If n is 0 or 1, return 0 or 1 respectively\n    if n == 0 or n == 1:\n        return 0 if n == 0 else 1\n\n    # Initialize the first two lucas numbers as 2 and 1\n    lucas_prev = 2\n    lucas_next = 1\n\n    # Calculate and return the nth lucas number\n    for i in range(2, n + 1):\n        lucas_next = lucas_prev + lucas_next\n        lucas_prev = lucas_next\n\n    return lucas_next"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = 0\n    prev_lucas = 0\n    next_lucas = 1\n    for i in range(n):\n        lucas = prev_lucas + next_lucas\n        prev_lucas = next_lucas\n        next_lucas = lucas\n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_sequence = [2, 1]\n    for i in range(2, n):\n        lucas_sequence.append(lucas_sequence[i-1] + lucas_sequence[i-2])\n    return lucas_sequence[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): a list of elements to apply the format string to\n    string (str): a format string to apply to each element in the list\n\n    Returns:\n    list: the list with the elements formatted according to the format string\n    \"\"\"\n    # Loop through each element in the list and apply the format string to it\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    list_ (list): A list of elements.\n    string (str): A format string with placeholders for the elements of the list.\n\n    Returns:\n    list: A new list with the elements of `list_` formatted using `string`.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # initialize empty dictionary\n    output_dict = {}\n    \n    # loop through each list in the input\n    for i in range(len(l1)):\n        # create a new sub-dictionary with keys l1[i] and l2[i]\n        sub_dict = {l1[i]: l2[i]}\n        \n        # loop through each element in l3[i]\n        for j in range(len(l3[i])):\n            # append each element to the sub-dictionary\n            sub_dict[l3[i][j]] = l3[i][j]\n        \n        # append the sub-dictionary to the main dictionary\n        output_dict[l1[i]] = sub_dict\n        \n    # return the final dictionary\n    return output_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        temp_dict = {}\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                temp_dict[l3[k]] = l2[j][l3[k]]\n        result[l1[i]] = temp_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError('All lists must have the same length.')\n    else:\n        nested_dict = {}\n        for i in range(len(l1)):\n            nested_dict[l1[i]] = {l2[i]: l3[i]}\n        return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {\n        'list1': l1,\n        'list2': l2,\n        'list3': l3\n    }"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    \n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]].append(l3[i])\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final result\n    result = {}\n    # Iterate through the three lists\n    for i in range(len(l1)):\n        # Get the current list element\n        elem = l1[i]\n        # Check if it is a dictionary\n        if isinstance(elem, dict):\n            # Update the result with the nested dictionary\n            result.update(elem)\n        else:\n            # Create a new dictionary to store the current element\n            nested_dict = {}\n            # Iterate through the list element and add it to the nested dictionary\n            for j in range(len(elem)):\n                nested_dict[l2[j]] = elem[j]\n            # Update the result with the nested dictionary\n            result[l3[i]] = nested_dict\n    # Return the final result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if key in result:\n            if isinstance(result[key], list):\n                result[key].append(value)\n            else:\n                result[key] = [result[key], value]\n        else:\n            result[key] = value\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l2[i]\n        if key in result:\n            if isinstance(result[key], list):\n                result[key].append(value)\n            else:\n                result[key] = [result[key], value]\n        else:\n            result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        item = {l1[i]: l2[i]}\n        item.update({l3[i]: l2[i]})\n        result.append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: a list\n    - l2: another list\n    - l3: and another list\n\n    Returns:\n    - a nested dictionary with the lists as keys and their elements as values.\n    '''\n    \n    # initialize an empty dictionary\n    result = {}\n    \n    # iterate over each list and add its elements to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # If n is 1 or 2, return 1\n    if n == 1 or n == 2:\n        return 1\n    \n    # Calculate f(n/2)\n    half = n//2\n    left_sum = get_max_sum(half)\n    \n    # Calculate f(n/3)\n    third = n//3\n    if third == 0:\n        third = 1\n    left_sum += get_max_sum(third)\n    \n    # Calculate f(n/4)\n    fourth = n//4\n    if fourth == 0:\n        fourth = 1\n    left_sum += get_max_sum(fourth)\n    \n    # Calculate f(n/5)\n    fifth = n//5\n    if fifth == 0:\n        fifth = 1\n    left_sum += get_max_sum(fifth)\n    \n    # Calculate f(n)\n    right_sum = n\n    \n    # Find the maximum sum\n    max_sum = max(left_sum, right_sum)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1, the maximum sum is n\n    if n == 1:\n        return n\n    \n    # Recursive case: compute the maximum sum using the given equation and the maximum sum of n/2, n/3, n/4, n/5\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n < 1:\n        return 0\n    \n    # If n is even, we can split it into 2 sub-problems and find the maximum sum possible using the given equation\n    if n % 2 == 0:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n    \n    # If n is odd, we can split it into 4 sub-problems and find the maximum sum possible using the given equation\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n + get_max_sum(n-1)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        max_sum = 0\n        for i in range(1, n//2+1):\n            max_sum += i\n        for i in range(1, n//3+1):\n            max_sum += i\n        for i in range(1, n//4+1):\n            max_sum += i\n        for i in range(1, n//5+1):\n            max_sum += i\n        return max_sum + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize variables\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        f1 = get_max_sum(n//2) + n\n        f2 = get_max_sum(n//3) + n\n        f3 = get_max_sum(n//4) + n\n        f4 = get_max_sum(n//5) + n\n        return max(f1, f2, f3, f4)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nn = int(input(\"Enter the value of n: \"))\nresult = get_max_sum(n)\nprint(\"The maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) for\", n, \"is:\", result)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n < 2:\n            return n\n        else:\n            return max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n\n    return helper(n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the length of the tuple is greater than 1\n    if len(test_tup) > 1:\n        # Create a dictionary to store the elements of the tuple\n        d = {}\n        # Iterate through the elements of the tuple\n        for i in test_tup:\n            # If the element is already present in the dictionary, return False\n            if i in d:\n                return False\n            # If the element is not present in the dictionary, add it to it\n            else:\n                d[i] = True\n    # If the length of the tuple is 1 or 0, return True\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = list(set(test_tup))\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Initialize a variable to store the first non-repeating character found in the string\n    first_non_repeating_char = None\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, update its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary yet, add it to the dictionary and its frequency to 1\n        else:\n            freq[char] = 1\n\n        # If the first non-repeating character is not None and its frequency is less than the current character's frequency,\n        # update the first non-repeating character to the current character\n        if first_non_repeating_char is not None and freq[first_non_repeating_char] < freq[char]:\n            first_non_repeating_char = char\n\n    # Return the first non-repeating character found in the string\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the characters and their frequency\n    freq = {}\n    \n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the dictionary to find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate through the string again, starting from the first non-repeated character\n    first_non_repeating = None\n    for char in str1:\n        if char_freq[char] == 1:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of characters\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Loop through each character in the string again and find the first non-repeating character\n    for char in str1:\n        # If the character is not in the dictionary, it is the first non-repeating character\n        if char not in freq:\n            return char\n\n    # If the loop completes without finding a non-repeating character, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # Initialize the first non-repeating character to be None\n    first_non_repeating = None\n    \n    # Iterate through the dictionary and find the first non-repeating character\n    for char, count in char_count.items():\n        # If the count is 1 and the first non-repeating character is None, set it to the current character\n        if count == 1 and first_non_repeating is None:\n            first_non_repeating = char\n    \n    # Return the first non-repeating character\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeated character.\n    '''\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            char_set.remove(char)\n        else:\n            char_set.add(char)\n    return ''.join(char_set)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        median = nums[len(nums)//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        median = a\n    elif b > a and b > c:\n        median = b\n    else:\n        median = c\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    num_list = [a, b, c]\n    num_list.sort()\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list) // 2] + num_list[len(num_list) // 2 - 1]) / 2\n    else:\n        median = num_list[len(num_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    a_sorted = sorted([a, b, c])\n    # Calculate the middle index of the sorted list\n    mid_index = len(a_sorted) // 2\n    # If the length of the sorted list is even,\n    # take the average of the middle two numbers\n    if len(a_sorted) % 2 == 0:\n        median = (a_sorted[mid_index-1] + a_sorted[mid_index]) / 2\n    else:\n        median = a_sorted[mid_index]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    if a < b and a < c:\n        if b < c:\n            return a\n        else:\n            return c\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])\n    # Find the middle element of the sorted list\n    mid = len(a) // 2\n    # Check if the middle element is odd or even\n    if len(a) % 2 == 0:\n        # Return the average of the middle two elements\n        return (a[mid] + a[mid-1]) / 2\n    else:\n        # Return the middle element\n        return a[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Get the length of the sorted list\n    length = len(sorted_numbers)\n\n    # If the length of the sorted list is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[length // 2]\n    # If the length of the sorted list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > a:\n        if b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return c\n        else:\n            return a"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(numbers)\n\n    # If the list has an odd number of elements, the median is the middle number\n    if n % 2 == 1:\n        median = numbers[n // 2]\n    # If the list has an even number of elements, the median is the average of the two middle numbers\n    else:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Calculate the length of the sorted list\n    length = len(sorted_list)\n    # Calculate the index of the middle number\n    middle_index = length // 2\n    # If the length of the list is odd, the middle number is the average of the two middle numbers\n    if length % 2 == 1:\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    # If the length of the list is even, the middle number is the middle number\n    else:\n        median = sorted_list[middle_index]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        num_digits = [int(digit) for digit in num_str]\n        digit_sum += sum(num_digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            # convert integer to string to sum up digits\n            str_num = str(num)\n            for digit in str_num:\n                sum += int(digit)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of digits\n        total_digits = sum(digits)\n        # Print the sum of digits for each number\n        print(\"The sum of digits for number {} is {}\".format(num, total_digits))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum += sum(digits)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # check if the inputs are tuples\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"The inputs must be tuples\")\n\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # loop through each element in the tuples\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # initialize variables for storing the result and carry\n    result = 0\n    carry = 0\n\n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # calculate the sum of the current element and the carry\n        temp = test_tup1[i] ^ test_tup2[i] ^ carry\n\n        # update the result and carry\n        result = result ^ temp\n        carry = temp & test_tup1[i]\n\n    # return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n\n    # Initialize the result tuple with zeros\n    result = (0, 0)\n\n    # Loop through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the corresponding elements\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result = ()\n    \n    # iterate through the tuples and perform bitwise xor\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] ^ test_tup2[i],)\n    \n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # create an empty list to store the resultant tuple\n    result = []\n    # iterate over each element in the first tuple\n    for elem1 in test_tup1:\n        # iterate over each element in the second tuple\n        for elem2 in test_tup2:\n            # perform the bitwise xor operation between the elements\n            xor_result = elem1 ^ elem2\n            # add the xor result to the result list\n            result.append(xor_result)\n    # return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Append the bitwise xor operation to the result list\n        result.append(test_tup1[i] ^ test_tup2[i])\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Creating a set to store unique tuples\n    unique_tuples = set()\n\n    # Looping through the list\n    for tup in test_list:\n        # Adding the tuple to the set only if it is not already present in the set\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # Returning the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    unique_tuples = set()\n\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        tup_freq = tup[0] in freq\n        if not tup_freq:\n            freq[tup[0]] = 1\n        else:\n            freq[tup[0]] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the set\n        if tup not in unique_tuples:\n            # Add the tuple to the set\n            unique_tuples.add(tup)\n\n    # Return the size of the set (i.e., the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row_sum = []\n        for j in range(len(test_tup1[i])):\n            row_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(row_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the resultant tuple with zeros\n    result = ([0] * len(test_tup1[0]))\n    # Loop through each element of the outer tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the inner tuple\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements of the inner tuple and outer tuple and store the result in the resultant tuple\n            result[j] += test_tup1[i][j] + test_tup2[i][j]\n    # Return the resultant tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Loop through each tuple element and add the corresponding elements\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup1[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], (test_tup2[i],)))\n        elif isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples((test_tup1[i],), test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for tup1 in test_tup1:\n        result.append([tup1[i] + tup2[i] for i in range(len(tup1))])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check if an element exists in a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    if element in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two parameters - a tuple and a sub-tuple.\n    It checks whether the element present in the tuple exists in the sub-tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element found in the tuple.\")\n    else:\n        print(\"Element not found in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the number is even.\"\n    else: \n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is even\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is even.\")\n    else: \n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n\n    # Check if x is a number\n    if not isinstance(x, (int, float)):\n        raise TypeError(\"Input must be a number\")\n\n    # Calculate the parity of x\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns whether its parity is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Calculate the parity of x using the modulus operator\n    parity = x % 2\n    \n    # Check if parity is odd\n    if parity == 1:\n        print(f\"{x} is odd.\")\n    else:\n        print(f\"{x} is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, 'is even.')\n    else:\n        print(x, 'is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(x,\"is even\")\n        return False\n    else:\n        print(x,\"is odd\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    n_str = str(n)\n    # create a list of the digits of the number\n    digits = [int(d) for d in n_str]\n    # reverse the list of digits\n    digits.reverse()\n    # reverse the digits of the original number\n    n_digits = [int(d) for d in str(n)]\n    n_digits.reverse()\n    # calculate the sum of the digits of the original number and the reversed digits\n    reversed_sum = sum(n_digits)\n    # calculate the maximum value of the digits that can be rearranged\n    max_value = sum(range(10))\n    # loop through the digits and find the next bigger digit\n    for i in range(len(digits)):\n        # if the current digit is greater than the maximum value, move on to the next digit\n        if digits[i] > max_value:\n            continue\n        # calculate the next digit by rearranging the digits of the original number\n        next_digit = n_digits[i] - digits[i]\n        # check if the next digit is within the range of the digits that can be rearranged\n        if next_digit < 0 or next_digit >= max_value:\n            continue\n        # if the next digit is within the range, add it to the list of digits and exit the loop\n        digits.append(next_digit)\n        break\n    # convert the list of digits back to a string and return it as an integer\n    return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    result = 0\n    for digit in digits:\n        result *= 10\n        result += digit\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize variables for tracking digits and their positions\n    digit_counts = [0] * 10\n    digit_positions = [-1] * 10\n    # Count the digits in the number\n    for digit in num_str:\n        digit_counts[int(digit)] += 1\n    # Rearrange the digits such that the largest digit is first, followed by the next largest, and so on\n    for i in range(10):\n        if digit_counts[i] > 0:\n            # Find the next digit that satisfies the condition\n            for j in range(i+1, 10):\n                if digit_counts[j] > 0 and digit_counts[j] == digit_counts[i]:\n                    digit_positions[i] = j\n                    break\n            else:\n                # No such digit exists, so the largest digit is first\n                digit_positions[i] = i\n    # Construct the new number by rearranging the digits and counting digits from 0\n    new_num = 0\n    for i in range(10):\n        if digit_positions[i]!= -1:\n            new_num += digit_counts[i] * (digit_positions[i]+1)\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # get the digits of the input number\n    digits = [int(d) for d in str(n)]\n\n    # find the index of the largest digit\n    index = digits.index(max(digits))\n\n    # find the largest power of 10 that is smaller than the maximum digit\n    power = 1\n    while power < max(digits):\n        power *= 10\n\n    # find the new number by shifting the digits of the original number to the right by the power of 10 and then adding 1\n    new_number = n + (digits[index] - 1) * power\n\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the result string\n    result = ''\n    # Loop through the digits of the given number in reverse order\n    for i in range(len(num_str)-1, -1, -1):\n        # Add the current digit to the result string\n        result += num_str[i]\n    # Convert the result string to an integer\n    result = int(result)\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_digits = max(str(n))\n    digits = []\n    for i in range(max_digits):\n        digits.append(str(n) if i < len(str(n)) else '0')\n    digits = ''.join(digits)\n    return int(digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    min_digits = min(digits)\n    max_digits = max(digits)\n\n    # Find the maximum possible digit that can be moved to the end\n    max_digit = max_digits\n    while max_digit >= min_digits:\n        if max_digit + 1 not in digits:\n            break\n        max_digit -= 1\n\n    # Move the max_digit to the end of the digits list\n    digits.remove(max_digit)\n    digits.append(max_digit)\n\n    # Convert the digits list back to a number\n    next_bigger = int(''.join(map(str, digits)))\n\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a list of digits\n    num_list = list(str(n))\n    \n    # Find the largest digit\n    max_digit = max(num_list)\n    \n    # Loop through each digit in the number\n    for digit in num_list:\n        # If the digit is equal to the largest digit, increment it by 1\n        if digit == max_digit:\n            digit = str(int(digit) + 1)\n        # Otherwise, decrement it by 1\n        else:\n            digit = str(int(digit) - 1)\n        \n        # Update the list with the modified digits\n        num_list[num_list.index(digit)] = digit\n    \n    # Convert the list of digits back to a string and return it\n    return int( ''.join(num_list) )"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a string\n    num_str = str(n)\n    # convert the string to a list of characters\n    char_list = list(num_str)\n    # reverse the list of characters\n    char_list.reverse()\n    # convert the list of characters back to a string\n    new_num_str = ''.join(char_list)\n    # convert the new string to an integer\n    new_num = int(new_num_str)\n    # check if the new integer is greater than the input number\n    if new_num > n:\n        # if it is, return the new integer\n        return new_num\n    else:\n        # if it is not, loop through the digits of the input number\n        for digit in range(len(num_str)):\n            # convert the current digit to an integer\n            digit_int = int(num_str[digit])\n            # subtract 1 from the digit to create the next bigger number\n            new_digit_int = digit_int - 1\n            # create a string representation of the new digit\n            new_digit_str = str(new_digit_int)\n            # create a new list of characters from the new digit\n            new_digit_list = list(new_digit_str)\n            # reverse the list of characters\n            new_digit_list.reverse()\n            # convert the list of characters back to a string\n            new_digit_str = ''.join(new_digit_list)\n            # add the new digit to the end of the current digit\n            new_num_str = num_str[:digit] + new_digit_str + num_str[digit+1:]\n            # convert the new string to an integer\n            new_num = int(new_num_str)\n            # check if the new integer is greater than the input number\n            if new_num > n:\n                # if it is, return the new integer\n                return new_num\n        # if no valid new integer is found, return the input number\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize a dictionary to store the digits of the given number\n    digits = {str(x): x for x in range(10)}\n\n    # loop through all possible digits in the range of 1 to 9\n    for digit in digits:\n        # loop through all possible positions in the number (0 to 9)\n        for i in range(len(str(n))):\n            # check if the current position and digit match and if the position is smaller than the length of the string\n            if str(n)[i] == digit and i < len(str(n)):\n                # swap the digits in the string at the positions before and after the current position\n                str(n)[i], str(n)[i+1] = str(n)[i+1], str(n)[i]\n                # break out of the inner loop as we've already swapped two digits\n                break\n        # if we've swapped all the digits, break out of the outer loop and return the modified number\n        if str(n) == str(int(str(n))):\n            return int(str(n))\n\n    # if we've exhausted all possibilities, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples with each tuple containing a tuple of (num1, num2)\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Create a min-heap of size k\n    min_heap = []\n\n    # Iterate through the list of pairs\n    for num1, num2 in pairs:\n        # Remove the smallest pair from the heap (if any)\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, num2))\n        else:\n            # If the heap is full and the new pair is smaller than the smallest pair in the heap, remove the smallest pair from the heap\n            if num1 > min_heap[0][0] or (num1 == min_heap[0][0] and num2 > min_heap[0][1]):\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1, num2))\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap of size k\n    min_heap = []\n\n    # iterate over the nums1 and nums2 arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # compare the current pair with the smallest element in the min heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    # create a list to store the k smallest pairs\n    k_smallest_pairs = []\n\n    # iterate over the min heap and add the elements to the k_smallest_pairs list\n    for i in range(k):\n        k_smallest_pairs.append(heapq.heappop(min_heap))\n\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the priority queue with the smallest element from each array\n    pq = [(nums1[0], nums2[0])]\n\n    # Initialize variables to keep track of the number of pairs found and the smallest element from each array\n    count = 0\n    min1 = nums1[0]\n    min2 = nums2[0]\n\n    # Iterate through the remaining elements in the arrays\n    for i in range(1, len(nums1)):\n        for j in range(1, len(nums2)):\n            # If the current elements from the arrays are greater than the smallest elements from the arrays, swap them and update the priority queue\n            if nums1[i] > min1:\n                nums1[i], min1 = min1, nums1[i]\n            if nums2[j] > min2:\n                nums2[j], min2 = min2, nums2[j]\n\n            # If the size of the priority queue is less than k, add the current element to the priority queue\n            if len(pq) < k:\n                pq.append((nums1[i], nums2[j]))\n\n            # If the size of the priority queue is equal to k, compare the elements at the top of the priority queue with the current element and update the count and the smallest element from each array if necessary\n            elif len(pq) == k:\n                if pq[0][0] > nums1[i]:\n                    pq[0] = (nums1[i], pq[0][1])\n                if pq[0][1] > nums2[j]:\n                    pq[0] = (pq[0][0], nums2[j])\n\n                if pq[0][0] == nums1[i] and pq[0][1] == nums2[j]:\n                    count += 1\n\n                    # If the current element is smaller than the smallest element from the arrays, update the count and the smallest element from each array\n                    if pq[0][0] < min1:\n                        min1 = pq[0][0]\n                        min2 = pq[0][1]\n\n                    # If the current element is smaller than the smallest element from the priority queue, update the priority queue\n                    elif pq[0][0] < pq[0][1]:\n                        pq[0] = (pq[0][0], pq[0][1])\n\n                    # If the current element is smaller than both the smallest elements from the arrays and the priority queue, remove the smallest element from the priority queue and add the current element to the priority queue\n                    elif pq[0][0] == pq[0][1]:\n                        heapq.heappop(pq)\n                        heapq.heappush(pq, (nums1[i], nums2[j]))\n\n    # Return the count and the smallest element from each array\n    return count, min1, min2"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    \n    for num in nums1:\n        heapq.heappush(min_heap, (-num, 1))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    for num in nums2:\n        if not min_heap:\n            break\n        if min_heap[0][0] > num:\n            heapq.heappop(min_heap)\n        else:\n            pair = (-min_heap[0][0], 1)\n            heapq.heappush(min_heap, (-min_heap[0][0] + num, 1))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            yield pair\n    \n    if min_heap:\n        pair = (-min_heap[0][0], 1)\n        yield pair"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            if len(pairs) == k:\n                break\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    res = []\n\n    # Build max heap of smallest pairs\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], (i, j))\n            heapq.heappush(heap, pair)\n\n            # Keep k smallest pairs\n            if len(heap) > k:\n                pair_val, pair_idx = heapq.heappop(heap)\n                res.append(pair_idx)\n\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: list of integers\n    nums2: list of integers\n    k: integer\n\n    Returns:\n    A list of tuples, where each tuple contains the indices of two elements from the two arrays that form the smallest pair.\n\n    Examples:\n    >>> k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)\n    [(0, 1), (1, 0), (2, 0)]\n\n    \"\"\"\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (nums1[i], i))\n\n    # Initialize two pointers for each array\n    i, j = 0, 0\n\n    # Initialize the result list\n    result = []\n\n    while min_heap and i < len(nums1) and j < len(nums2):\n        # Get the minimum elements from the two arrays and update the min heap\n        x, idx1 = heapq.heappop(min_heap)\n        y, idx2 = heapq.heappop(min_heap)\n        if x + y < nums1[idx1] + nums2[idx2]:\n            heapq.heappush(min_heap, (x + y, idx1))\n            result.append((idx1, idx2))\n\n        # Move the pointer to the next smallest element in the first array\n        if x + y <= nums1[idx1] + nums2[idx2]:\n            i += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap for nums1\n    min_heap1 = []\n    for num in nums1:\n        heapq.heappush(min_heap1, num)\n\n    # create a min heap for nums2\n    min_heap2 = []\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n\n    # initialize the result list and a boolean variable to keep track of whether there are at least k pairs\n    result = []\n    count = 0\n\n    # loop through k times\n    while k > 0:\n\n        # if there are less than k elements in the min heap for nums1, the element at the top of the heap is the next smallest element\n        if len(min_heap1) < k:\n            top1 = heapq.heappop(min_heap1)\n            top2 = heapq.heappop(min_heap2)\n            result.append((top1, top2))\n            count += 1\n\n        # if there are less than k elements in the min heap for nums2, the element at the top of the heap is the next smallest element\n        elif len(min_heap2) < k:\n            top1 = heapq.heappop(min_heap1)\n            top2 = heapq.heappop(min_heap2)\n            result.append((top1, top2))\n            count += 1\n\n        # if there are exactly k elements in both min heaps, compare the elements at the top of both heaps and add the pair with the smaller element to the result list\n        else:\n            top1 = heapq.heappop(min_heap1)\n            top2 = heapq.heappop(min_heap2)\n            if top1 < top2:\n                result.append((top1, top2))\n                count += 1\n            else:\n                result.append((top2, top1))\n                count += 1\n                heapq.heappush(min_heap2, top1)\n\n    return result, count\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n            elif nums1[i] + nums2[j] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n    result = []\n    for i in range(len(heap)):\n        result.append(heap[i][1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        # Add all the elements of the second array to the min heap\n        for num2 in nums2:\n            heapq.heappush(min_heap, (-num1-num2, (num1, num2)))\n            # If the size of the heap is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Get the k smallest pairs from the heap\n    result = []\n    while min_heap:\n        pair_score, pair = heapq.heappop(min_heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize minimum product and variables\n    min_product = float('inf')\n    a, b = None, None\n    \n    # Loop through the list of tuples\n    for tup in list1:\n        \n        # Calculate the product of the two elements and update the minimum product if necessary\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n            a, b = tup\n    \n    # Return the minimum product and the pairs of elements that formed it\n    return min_product, a, b"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product and minimum value\n    min_product = float('inf')\n    min_value = float('inf')\n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # check if the product is less than the current minimum product\n            if product < min_product:\n                # if yes, update minimum product and minimum value\n                min_product = product\n                min_value = list1[i][0] * list1[j][1]\n    # return the minimum product and minimum value\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    count = 0\n    \n    # Iterate over all tuples in the list\n    for i in range(len(list1)):\n        # Iterate over all tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare to the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                count = 1\n            elif product == min_product:\n                count += 1\n    \n    # Return the minimum product and the count of tuples with that product\n    return (min_product, count)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    list1.sort()\n    n = len(list1)\n    min_product = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples within it.\n    \"\"\"\n    # Initialize variables for the minimum product and the product of pairs of tuples\n    min_prod = float('inf')\n    prod = 1\n\n    # Iterate through the list of tuples\n    for i in range(len(lst)):\n        # Iterate through the list of tuples starting from the next index\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the current pair of tuples\n            prod *= lst[i][j]\n\n            # Check if the product is less than the minimum product\n            if prod < min_prod:\n                min_prod = prod\n\n    # Return the minimum product\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of pairs of tuples in the list.\n\n    Input:\n    list1: list of tuples\n\n    Output:\n    float: minimum product of pairs of tuples in the list\n\n    Example:\n    >>> min_product_tuple([(1, 2), (3, 4), (5, 6)])\n    6\n    '''\n\n    # Find the minimum product of two tuples\n    def min_product_tuple_helper(a, b):\n        if type(a) == tuple and type(b) == tuple:\n            return (a[0] * b[1]) - (a[1] * b[0])\n        else:\n            return float('inf')\n\n    # Combine all the tuples in the list into a single list of tuples\n    combined_list = []\n    for tup in list1:\n        combined_list.append(tup)\n        combined_list.append((tup[1], tup[0]))\n\n    # Calculate the minimum product of pairs of tuples using the min_product_tuple_helper function\n    min_product = float('inf')\n    for i in range(0, len(combined_list), 2):\n        product = min_product_tuple_helper(combined_list[i], combined_list[i+1])\n        min_product = min(min_product, product)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: (x[0], x[1]))\n    list2 = [x for x in list1 if x[0] > x[1]]\n    list2.sort(key=lambda x: x[0])\n    result = []\n    for i in range(len(list1) - 1):\n        if list2[0][0] == list1[i][0]:\n            result.append(list1[i][0] * list1[i][1] * list2[0][1])\n    if len(result) == 0:\n        return None\n    return min(result)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(lst):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not lst:\n        raise ValueError('The list is empty.')\n\n    min_value = lst[0]\n    for val in lst[1:]:\n        if val < min_value:\n            min_value = val\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of values and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Iterate through the list and update the minimum value as needed\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(lst):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    return min(lst)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize variables\n    min_val = float('inf')\n\n    # Iterate over each element of the list\n    for element in listval:\n\n        # Check if the current element is smaller than the minimum value\n        if element < min_val:\n            min_val = element\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value\n    min_val = listval[0]\n    # loop through the list and compare each value to the minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Find the minimum value in the list\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with an underscore\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscores as delimiter\n    words = re.findall(r'_\\w', word)\n    \n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    \n    # Join the camel case words with underscores\n    camel_word = '_'.join(camel_words)\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, word.split('_')))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # split the word into words separated by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # capitalize the first letter of each word\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n\n    Example:\n    snake_to_camel(\"snake_case_string\")\n    Output: \"snakeCaseString\"\n    '''\n\n    # remove leading and trailing underscores\n    word = word.strip('_')\n\n    # split the word into words based on underscores\n    words = word.split('_')\n\n    # capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # join the words back into a camel case string\n    camel_case_string = ''.join(words)\n\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Remove underscores from the beginning and end of the string\n    word = re.sub('^(_*)', '', word)\n    word = re.sub('(_*)$', '', word)\n    # Convert the rest of the string to camel case\n    return word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string by underscores\n    words = re.findall(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])', word)\n    # Convert each word to camel case\n    camel_case_words = [word.title() for word in words]\n    # Join the camel case words with underscores\n    camel_case_word = '_'.join(camel_case_words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to snake case and split it into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first letter of each word to uppercase and the rest to lowercase\n    camel_case_word = words[0].capitalize()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].lower()\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in re.findall('[a-z][A-Z]*', word))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Initialize a new list to hold the camel case words\n    camel_words = []\n    \n    # Iterate through the list of words\n    for i in range(len(words)):\n        \n        # If the current word is the first word, capitalize it and add it to the camel case list\n        if i == 0:\n            camel_words.append(words[i].capitalize())\n        \n        # If the current word is not the first word, capitalize the first letter and add it to the camel case list\n        else:\n            camel_words.append(words[i].capitalize())\n    \n    # Join the camel case words into a single string and return it\n    return ''.join(camel_words)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all odd numbers from it.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n\n    Args:\n    - l (list): The list to remove odd numbers from.\n\n    Returns:\n    - list: The list with odd numbers removed.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1) or n <= 0:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return \"The given index n is out of bounds.\"\n    else:\n        return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise ValueError('Input must be a list')\n    elif n < 1:\n        raise ValueError('Index must be a positive integer')\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and the index n of the element to extract\n    as arguments and returns the nth element of the list.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as an argument and returns the nth element of that list.\n    '''\n    # Initialize a variable to keep track of the count of elements in the list\n    count = 0\n    # Iterate through the list and count the number of elements in the list\n    for item in list1:\n        count += 1\n    # Check if the nth element is in the list\n    if n <= count:\n        return list1[n-1][1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input and\n    returns the nth element from the list of tuples. If the index n is not\n    within the range of the list, it returns None.\n    '''\n    try:\n        return lst[n-1][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Iterate through the list of tuples\n    for i, tup in enumerate(list1):\n        # If the index is equal to the nth element, return the element\n        if i == n-1:\n            return tup[1]\n    # If the nth element is not found, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # if list is empty\n    if not list1:\n        return None\n    \n    # if nth element exists\n    if n <= len(list1):\n        return list1[n-1][0]\n    \n    # if nth element does not exist\n    else:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set of values in the first list\n    set1 = set(list1)\n    # create a set of values in the second list\n    set2 = set(list2)\n    # check if there are any common values between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns a boolean value indicating whether any value in the first sequence exists in the second sequence or not.\n    '''\n    # convert the input sequences to sets to remove any duplicate elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there are any values that exist in both sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks if there are any common values in them.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there are any overlapping values, otherwise returns False.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_product = float('inf')\n    min_pair = (float('inf'), float('inf'))\n\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair = (arr[i], min_product)\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_pair = (max_product, arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the maximum and minimum product\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    # Loop through the array and update the maximum and minimum product as required\n    for i in range(2, len(arr)):\n        temp = max_product\n        max_product = max(max_product, min_product * arr[i])\n        min_product = min(min_product, temp * arr[i])\n    \n    # Return the pair with the highest product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[len(arr)-1] * arr[0]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns a tuple containing the pair of integers with the highest product.\n    \"\"\"\n    # Use two pointers to find the pair with the highest product\n    left = 0\n    right = len(arr) - 1\n    max_product = arr[left] * arr[right]\n    \n    while left < right:\n        # Calculate the product of the current subarray and the two pointers\n        current_product = arr[left] * arr[right]\n        \n        # Update the max_product if the current product is greater than the max\n        if current_product > max_product:\n            max_product = current_product\n        \n        # Move the left pointer to the right if the current product is less than the previous product\n        if current_product < max_product:\n            left += 1\n        \n        # Move the right pointer to the left if the current product is greater than the previous product\n        if current_product > max_product:\n            right -= 1\n            \n    # Return the pair of integers with the highest product\n    return (arr[left], arr[right])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # initialize two variables to store the highest and second highest products\n    highest = arr[len(arr) - 1] * arr[len(arr) - 2]\n    second_highest = arr[len(arr) - 1]\n    \n    # loop through the array from second to last element\n    for i in range(len(arr) - 2, -1, -1):\n        # calculate the current product\n        current_product = arr[i] * arr[i + 1]\n        # update the variables if the current product is greater than the highest product\n        if current_product > highest:\n            second_highest = highest\n            highest = current_product\n        # update the second highest product if the current product is greater than the second highest product\n        elif current_product > second_highest:\n            second_highest = current_product\n    \n    return highest, second_highest"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair of integers that have the highest \n    product.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize variables to keep track of the highest and lowest values seen so far\n    max1, max2 = arr[0], arr[1]\n    min1, min2 = arr[0], arr[1]\n\n    # loop through the array and update the maximum and minimum values seen so far\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    # return the pair with the highest product\n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Initialize variables to store the maximum product and the indices of the maximum product\n    max_product = arr[0]\n    max_product_index = 0\n    max_product_neg_index = 0\n    \n    # Iterate over the array and update the variables as necessary\n    for i in range(1, len(arr)):\n        # Update the maximum product if the current element is larger\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_index = i\n            max_product_neg_index = 0\n        # Update the maximum negative product if the current element is larger than the negative of the maximum product\n        elif arr[i] > max_product_neg_index * -1:\n            max_product_neg_index = i\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = ()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                if len(common_tuple) == 0:\n                    common_tuple = Input[i]\n                elif common_tuple[0] > Input[i][0]:\n                    common_tuple = Input[i]\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Find the set of common elements in the tuples\n    common_set = set(Input[0])\n    for tuple in Input[1:]:\n        common_set.intersection_update(set(tuple))\n    common_list = list(common_set)\n\n    # Find the first element of the common elements in the first tuple\n    first_element = None\n    for element in common_list:\n        for tuple in Input:\n            if tuple[0] == element:\n                if first_element is None:\n                    first_element = element\n                else:\n                    return \"There are more than one common element in the first tuple.\"\n\n    return first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for item in Input:\n        common_elements.append(item[0])\n    return list(set(common_elements))\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n\n    for i in Input:\n        if i[0] in common_first_element:\n            pass\n        else:\n            common_first_element.append(i[0])\n\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for i in Input:\n        if i[0] not in first_element:\n            first_element.append(i[0])\n    return first_element\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_elements = []\n    for i in Input:\n        if len(common_first_elements) == 0:\n            common_first_elements.append(i[0])\n        else:\n            for j in common_first_elements:\n                if i[0] == j:\n                    break\n            else:\n                common_first_elements.append(i[0])\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        else:\n            if item[0] == common_element:\n                common_element = item[0]\n            else:\n                return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element == None:\n            common_element = item[0]\n        elif item[0] == common_element:\n            continue\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        \n        # If the first element is in the dictionary, increment its count\n        if first_element in count_dict:\n            count_dict[first_element] += 1\n        # If the first element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[first_element] = 1\n    \n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through the count dictionary and find the common elements\n    for key, value in count_dict.items():\n        if value == max(count_dict.values()):\n            common_elements.append(key)\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialising max length variable\n    max_length = 0\n    # finding length of the list\n    length = len(lst)\n    # loop through the list\n    for i in range(length):\n        # finding length of the current element\n        current_length = len(str(lst[i]))\n        # updating max length variable\n        if current_length > max_length:\n            max_length = current_length\n    # finding element of the list having maximum length\n    max_element = lst[lst.index(max(lst, key=len))]\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = '' \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\n    return \"List is empty or all elements are of same length.\""
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxLength = 0\n    maxLengthElement = ''\n    for i in range(len(lst)):\n        if len(str(lst[i])) > maxLength:\n            maxLength = len(str(lst[i]))\n            maxLengthElement = lst[i]\n    return maxLengthElement"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculate the total sum of the rounded list\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list\n    final_result = total_sum * len(list1)\n\n    # Print the final result\n    print(final_result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Initialize the total sum and length variables\n    total_sum = 0\n    length = len(list1)\n\n    # Loop through the list and round each number\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Loop through the list again and add up the rounded numbers\n    for num in list1:\n        total_sum += num\n\n    # Multiply the total sum by the length of the list and print the result\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        if isinstance(i, (int, float)):\n            total_sum += round(i)\n        else:\n            print(f'{i} is not a number, skipping...')\n    print(f'The total sum is: {total_sum} and the length of the list is: {len(list1)}')\n    print(f'The product of the total sum and the length of the list is: {total_sum * len(list1)}')"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Initialize sum and length variables\n    total_sum = 0\n    length = len(list1)\n\n    # Loop through list and round each number\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Loop through list again and calculate total sum\n    for i in range(len(list1)):\n        total_sum += list1[i]\n\n    # Print total sum multiplied by length of list\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_cube += i*i*i\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i*i*i\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the cube sum of the first n even natural numbers.\n    '''\n    total = 0\n    i = 2\n    while i <= n:\n        total += i**3\n        i += 2\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=''):\n    '''\n    This function concatenates each element of the input tuple using the specified delimiter.\n\n    Args:\n        test_tup (tuple): The input tuple to concatenate.\n        delimiter (str): The delimiter to use when concatenating the elements.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        ValueError: If the delimiter is not a string.\n    '''\n\n    if not isinstance(delimiter, str):\n        raise ValueError(\"Delimiter must be a string.\")\n\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup)-1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=''):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n    avg = sum/n  \n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize variables for sum and count of cubes\n    sum_of_cubes = 0\n    count = 0\n\n    # calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum_cubes = 0\n    for i in range(1, n+1):\n        count += 1\n        sum_cubes += i**3\n    average = sum_cubes / count\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    average = sum / n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for i in test_tuple:\n        rear_tuple.append(i[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(len(string) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 0:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    # Loop through the input list and append odd numbers to the new list\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    # Return the new list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Define the replacement pattern to convert the date to dd-mm-yyyy format\n    replacement = r'\\3-\\2-\\1'\n    # Use the re.sub() function to replace the date in the input string with the new format\n    new_dt = re.sub(pattern, replacement, dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    mm_dd_yyyy = r'^(\\d{2})-(\\d{2})-(\\d{4})$'\n\n    if re.match(yyyy_mm_dd, dt):\n        day, month, year = map(int, dt.split('-'))\n        return f\"{day}-{month:02d}-{year:04d}\"\n    elif re.match(mm_dd_yyyy, dt):\n        day, month, year = map(int, dt.split('-'))\n        return f\"{day:02d}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern in the input string\n    match = re.match(pattern, dt)\n\n    # If match is found, split the string into parts and reverse the order of month and day\n    if match:\n        parts = match.group().split('-')\n        parts = parts[::-1]\n        new_date = '-'.join(parts)\n        return new_date\n\n    # If no match is found, return the input string as it is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = re.compile(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})')\n    matches = regex.match(dt)\n    if matches:\n        year = int(matches.group('year'))\n        month = int(matches.group('month'))\n        day = int(matches.group('day'))\n        return f\"{day:02d}-{month:02d}-{year:04d}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match yyyy-mm-dd format\n    regex = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.search() function to find the first occurrence of the regex in the string\n    match = re.search(regex, dt)\n    # If match is not None, use replace() function to replace the matched substring with the desired format\n    if match:\n        return dt.replace(match.group(), match.group().replace('-', '').replace('-', ''))\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define regex pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match pattern in date string\n    match = re.match(pattern, dt)\n\n    # check if match was successful\n    if match:\n        # extract year, month and day from match object\n        year, month, day = match.groups()\n\n        # convert date format from yyyy-mm-dd to dd-mm-yyyy\n        new_dt = f'{day}-{month}-{year}'\n\n        # return new date string\n        return new_dt\n    else:\n        # if pattern not matched, return original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r\"(\\d{2})-(\\d{2})-(\\d{4})\", r\"\\3-\\2-\\1\", dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match pattern in the input date string\n    match = re.match(pattern, dt)\n    \n    # if match found, extract groups and convert to dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    \n    # otherwise, return the input date string as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    matches = re.findall(pattern, dt)\n    if len(matches) > 0:\n        return '{}-{}-{}'.format(matches[0][2], matches[0][1], matches[0][0])\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    # check if there are matches\n    if matches:\n        # extract the year, month, and day from the matches\n        year, month, day = matches[0]\n        # format the date as dd-mm-yyyy\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        # if no matches are found, return the input string as is\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Calculate the largest gap\n    gap = n // 2\n\n    # While the gap is not zero\n    while gap > 0:\n        # Perform a single pass over the array with gap as the step\n        for i in range(gap, n):\n            # The current element is stored in temp\n            temp = my_list[i]\n\n            # Shift elements to the right until the correct position is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # Insert the current element at its correct position\n            my_list[j] = temp\n\n        # Decrease the gap for the next iteration\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Insertion sort on smallest arrays\n    for gap in range(n//2):\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n    # Bubble sort for larger arrays\n    for gap in range(n//2, 0, -1):\n        for i in range(gap):\n            if my_list[i] > my_list[i+gap]:\n                my_list[i], my_list[i+gap] = my_list[i+gap], my_list[i]"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j-h]:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h//3\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Step 1: Find the length of the array\n    n = len(my_list)\n    \n    # Step 2: Find the largest gap (array length / 2)\n    gap = n // 2\n    \n    # Step 3: Sort the array\n    while gap > 0:\n        for i in range(gap, n):\n            # Step 4: Swap adjacent elements if they are not in order\n            # while swapping, keep track of the index where the swapping happened\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n                \n        # Step 5: Reduce the gap by a factor of two\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest element in the array\n    largest = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > largest:\n            largest = my_list[i]\n    \n    # Divide the array into sub-arrays of size 'largest'\n    for gap in range(largest//2, 0, -1):\n        for i in range(len(my_list) - gap):\n            # Insert the current element in its correct position\n            temp = my_list[i+gap]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # get the length of the array\n    n = len(my_list)\n\n    # define the gap\n    gap = n // 2\n\n    # iterate over the array using the gap value\n    while gap > 0:\n        # iterate over the array with the gap value\n        for i in range(gap, n):\n            # swap adjacent elements if they are in the wrong order\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # decrease the gap value\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize variables for the and tuple\n    and_tuple = (0, 0)\n\n    # Loop through the elements of the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Perform the elementwise and operation and assign it to the and tuple\n        and_tuple[i] = elem1 & elem2\n\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(map(lambda x, y: x & y, test_tup1, test_tup2)))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new tuple of equal length as the result\n    result_tup = ()\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from the tuples and perform the AND operation\n        and_val = test_tup1[i] & test_tup2[i]\n        # Append the AND result to the result tuple\n        result_tup += (and_val,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Extracting the elementwise and tuples from the given two tuples\n    tup1_and = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    tup2_and = tuple(map(lambda x, y: x and y, test_tup2, test_tup1))\n\n    # Returning the elementwise and tuples\n    return tup1_and, tup2_and"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples have different lengths.\"\n\n    # extract the elementwise and tuples\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    x1 = (-b + c ** 0.5) / (2 * a)\n    x2 = (-b - c ** 0.5) / (2 * a)\n\n    return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"The directrix of the parabola is: \", root1)\n        print(\"The directrix of the parabola is: \", root2)\n    elif discriminant == 0:\n        root = (-b) / (2*a)\n        print(\"The directrix of the parabola is: \", root)\n    else:\n        print(\"The discriminant is negative.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the quadratic formula\n    discriminant = b**2 - 4*a*c\n    # check if the discriminant is positive or negative\n    if discriminant > 0:\n        # calculate the roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the determinant\n    determinant = (b**2) - (4*a*c)\n\n    # check if the determinant is positive\n    if determinant > 0:\n        # calculate the root of the determinant\n        root = (-b + (determinant**0.5)) / (2*a)\n\n        # print the result\n        print(\"The directrix is:\", root)\n    else:\n        # calculate the root of the determinant\n        root = (-b - (determinant**0.5)) / (2*a)\n\n        # print the result\n        print(\"The directrix is:\", root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    print(\"The directrix of the parabola is: \", root1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there is no real solution\n    if disc < 0:\n        return \"There is no real solution.\"\n    \n    # If the discriminant is zero, there is one real solution\n    elif disc == 0:\n        x = -b/(2*a)\n        return f\"The directrix is x = {x:.2f}\"\n    \n    # If the discriminant is positive, there are two real solutions\n    else:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return f\"The directrix is x = {x1:.2f} and x = {x2:.2f}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Check if the equation of the parabola is ax^2 + bx + c = 0\n    if a**2 + b**2 - 4*a*b*c == 0:\n        # Find the two real roots of the equation\n        discriminant = b**2 - 4*a*c\n        root1 = (-b + math.sqrt(discriminant))/(2*a)\n        root2 = (-b - math.sqrt(discriminant))/(2*a)\n        # Find the midpoint of the two roots\n        midpoint = (root1 + root2)/2\n        # Calculate the directrix as the midpoint of the two roots\n        directrix = midpoint\n        return directrix\n    else:\n        print(\"The equation of the parabola is not in the form ax^2 + bx + c = 0.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the equation of the parabola\n    equation = b**2 - 4*a*c\n    \n    # If the equation is not quadratic, return None\n    if not (a!= 0 and b!= 0):\n        return None\n    \n    # Find the root of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # If both roots are real, return the directrix\n    if not (-c < root1 < c) and not (-c < root2 < c):\n        return None\n    \n    # If one of the roots is real, return the greater of the two roots\n    if not (-c < root1 < c):\n        return root2\n    else:\n        return root1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + math.sqrt(discriminant))/(2*a)\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return (-b - math.sqrt(discriminant))/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # Calculate the determinant of the quadratic equation\n    det = b**2 - 4*a*c\n\n    # Check if the quadratic equation has a real root\n    if det < 0:\n        return \"The quadratic equation has no real roots.\"\n    elif det == 0:\n        return \"The quadratic equation has a single real root.\"\n    else:\n        # Calculate the directrix\n        x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        return f\"The directrix is x = {x:.2f}\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of elements in list1\n    set1 = set(list1)\n\n    # Iterate through list2 and check if each element is present in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If we reach here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes the base1, base2 and height of a trapezium as input and returns the median length of the trapezium.\n    '''\n    area = 0.5 * base1 * height\n    base_diff = base1 - base2\n\n    if base_diff > 0:\n        return 0.5 * height * (base1 + base2) / area\n    else:\n        return 0.5 * height * (base1 + base2) / area * -1"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium's sides\n    side1 = base1 + base2\n    side2 = 2 * height\n    # Calculate the lengths of the trapezium's base\n    base = base1 + base2 + 2 * height\n    # Calculate the lengths of the trapezium's top\n    top = 0.5 * height\n    # Calculate the lengths of the trapezium's bottom\n    bottom = height - 0.5 * height\n    # Calculate the area of the trapezium\n    area = 0.5 * base * height\n    # Calculate the length of the trapezium's left half\n    left_half = (side1 * top + side2 * bottom) / area\n    # Calculate the length of the trapezium's right half\n    right_half = (side1 * bottom + side2 * top) / area\n    # Return the length of the trapezium's left half or right half, whichever is greater\n    return max(left_half, right_half)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5*base1*base2 + 0.5*base2*height + 0.5*base1*height + height*height\n    median_1 = area - 0.5*(base1*base2 + base2*height + base1*height + height*height)\n    median_2 = area - 0.5*(base2*base1 + base1*height + base2*height + height*height)\n    median_3 = area - 0.5*(base1*base2 + base1*base1 + base1*height + base1*height + height*height + height*height)\n\n    median = (median_1 + median_2 + median_3)/3\n\n    return round(median,2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the formula:\n    M = 0.5 * (b1 + b2) * h\n    \n    where b1 and b2 are the lengths of the bases of the trapezium and h is the height of the trapezium.\n    \n    The function takes in the lengths of the bases of the trapezium and the height of the trapezium as parameters.\n    The function returns the median length of the trapezium as a float.\n    '''\n    \n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2) * height\n    \n    # Sort the bases in ascending order\n    sorted_bases = sorted([base1, base2])\n    \n    # Calculate the sum of the bases\n    sum_bases = sorted_bases[0] + sorted_bases[1]\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * trapezium_length\n    \n    # Check if the sum of the bases is equal to the median length\n    if sum_bases == median_length:\n        # If the sum is equal to the median, then return the median length\n        return median_length\n    else:\n        # If the sum is less than the median, then add the difference between the sum and the median to the median length\n        difference_sum = sum_bases - median_length\n        if difference_sum < 0:\n            # If the difference between the sum and the median is negative, then add the difference to the first base\n            median_length += sorted_bases[0]\n        else:\n            # If the difference between the sum and the median is positive, then add the difference to the second base\n            median_length += sorted_bases[1]\n            \n        # Return the median length\n        return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the first half of the trapezium\n    half1 = area / (base1 + base2)\n\n    # Calculate the length of the second half of the trapezium\n    half2 = (area - half1) / 2\n\n    # Calculate the length of the trapezium\n    trapezium = half1 + half2\n\n    # Calculate the median length of the trapezium\n    median = trapezium\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    semi_perimeter = 0.5 * (base1 + base2)\n    median_length = 2 * height / semi_perimeter\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #calculate the areas of the trapezium\n    area1 = 0.5*base1*height\n    area2 = 0.5*base2*height\n\n    #calculate the length of the trapezium\n    length = (area1 + area2)/2\n\n    #calculate the area of the semi-perimeter\n    area_semi_perimeter = (base1 + base2)/2\n\n    #calculate the area of the trapezium using the semi-perimeter\n    area_trapezium = math.sqrt(length**2 + area_semi_perimeter**2)\n\n    #calculate the area of the semi-perimeter\n    area_semi_perimeter = area_semi_perimeter*2\n\n    #calculate the median length\n    median_length = area_trapezium/area_semi_perimeter\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the sum of the first half of the trapezium\n    first_half_sum = 0\n    for i in range(height):\n        first_half_sum += i * base1 + i * base2\n\n    # Calculate the sum of the second half of the trapezium\n    second_half_sum = 0\n    for i in range(height):\n        second_half_sum += (height - i - 1) * base1 + (height - i - 1) * base2\n\n    # Calculate the average of the two halves\n    average = (first_half_sum + second_half_sum) / area\n\n    # Calculate the median\n    median = math.sqrt(average)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    :param base1: the length of the first base of the trapezium\n    :type base1: int\n    :param base2: the length of the second base of the trapezium\n    :type base2: int\n    :param height: the height of the trapezium\n    :type height: int\n    :return: the median length of the trapezium\n    :rtype: int\n    \"\"\"\n    # Calculate the lengths of the two sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n\n    # Calculate the length of the base of the left trapezium\n    left_base = min(side1, side2)\n\n    # Calculate the length of the base of the right trapezium\n    right_base = max(side1, side2)\n\n    # Calculate the length of the trapezium\n    trapezium = 0.5 * height * (left_base + right_base)\n\n    # Calculate the median of the trapezium\n    median = trapezium * 1.5\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    trapezium_length = 2 * math.sqrt(area)\n    return trapezium_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"The number {number} is greater than {element}.\")\n            return\n    print(f\"The number {number} is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    greater = False\n    for elem in arr:\n        if elem > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1}b+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\1*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b+)')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1}b+')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string and get the last character\n    last_char = str(n)[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function finds the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the given number to a string\n    numStr = str(n)\n    # Use slicing to get the last digit of the string\n    lastDigit = numStr[-1]\n    # Return the last digit of the string\n    return lastDigit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of the input number.\n    \"\"\"\n    # Convert the given number to a string\n    num = str(n)\n    # Find the length of the string\n    length = len(num)\n    # Return the last digit of the number\n    return num[-1]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of integers as input and returns a list of negative integers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store the negative numbers\n    neg_list = []\n    \n    # Iterate through the list\n    for num in list1:\n        # If the number is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    \n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters from a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_chars = ''\n    \n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is even, add it to the even_chars string\n        if char % 2 == 0:\n            even_chars += char\n        # if the character is odd, do nothing\n        else:\n            continue\n    \n    # return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the odd characters\n    odd_str = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the odd_str\n        if char % 2!= 0:\n            odd_str += char\n    # return the final odd_str\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the list\n    for char in char_list:\n        # Check if the character is odd (i.e., not divisible by 2)\n        if char % 2 == 1:\n            # If the character is odd, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = ''\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is odd, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] or test_list[j] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize a counter variable to store the number of bidirectional pairs\n    count = 0\n\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Check if the element is the last element in the list\n        if i == len(test_list) - 1:\n            # If it is the last element, continue the loop\n            continue\n\n        # Check if the current element and the next element are opposite in the list\n        if test_list[i] == test_list[i+1]:\n            # If they are, increment the counter variable\n            count += 1\n\n    # Return the final count of bidirectional pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list or (test_list[i][0], test_list[j][1]) in test_list or (test_list[i][1], test_list[j][0]) in test_list or (test_list[i][1], test_list[j][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate through the list and add the multiple integers to the result\n    for num in L:\n        result += str(num)\n    \n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        single_int = multiple_to_single(L[1:])\n        return L[0] + single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for num in L:\n        single_number *= num\n    return single_number"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b[A-Za-z]+\\b', text)\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        match = re.search(r'\\b(' + re.escape(adverb) + r')\\b', text, flags=re.IGNORECASE)\n        if match:\n            adverb_positions.append((match.start(), match.end()))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern for finding adverbs\n    pattern = r'\\b\\w*?[a-zA-Z]+[a-zA-Z]*?\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?[a-zA-Z]+\\b\\w*?["
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find the first adverb and their positions in a given sentence.\n    The function takes a string as input and returns a list containing tuples of the adverb and its position in the sentence.\n    '''\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n\n    # Use regular expression to find all adverbs in the sentence\n    matches = re.findall(r'\\b\\w*ing\\b|\\b\\w*ly\\b|\\b\\w*ever\\b', text)\n\n    # Iterate through all matches and add them to the list of adverbs\n    for match in matches:\n        # Check if the match is an adverb\n        if match.lower() in ['ing', 'ly', 'ever']:\n            # Add the adverb to the list of adverbs and its position in the sentence\n            adverbs.append((match.lower(), text.lower().find(match.lower())))\n\n    # Return the list of adverbs and their positions in the sentence\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(because|but|however|if|since|so|though|when|wherever|while|why|with)\\b')\n\n    # Find all matches for the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store adverb positions\n    positions = []\n\n    # Iterate through the matches and extract the positions\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the positions of the adverbs\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Match all words that start with a vowel (a, e, i, o, u) or a consonant (b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y, z)\n    vowels = re.compile(r'[aeiouAEIOU][^aeiouAEIOU]*')\n    # Match all words that start with a consonant\n    consonants = re.compile(r'[^aeiouAEIOU][^aeiouAEIOU]*')\n    # Match all adverbs that start with a consonant and end with a vowel (e.g., well, better)\n    adverbs = re.compile(r'^[^aeiouAEIOU]+[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]*[^aeiouAEIOU]$')\n    # Find all matches for vowels, consonants, and adverbs in the given sentence\n    matches = vowels.finditer(text) + consonants.finditer(text) + adverbs.finditer(text)\n    # Initialize a list to store the adverb positions\n    adverb_positions = []\n    # Iterate through all matches and find the first adverb and its positions\n    for match in matches:\n        # Check if the match is an adverb\n        if adverbs.match(match.group()):\n            # Store the adverb position in the list\n            adverb_positions.append((match.start(), match.end()))\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b[A-Z][a-z]*[A-Z]\\b', text.lower())\n\n    # Initialize an empty dictionary to store the positions of each adverb\n    position_dict = {}\n\n    # Iterate over the adverbs and add their positions to the dictionary\n    for i, adverb in enumerate(adverbs):\n        position_dict[adverb] = i + 1\n\n    # Find the position of the first adverb in the sentence\n    first_adverb = adverbs[0]\n    position = position_dict[first_adverb]\n\n    # Return the first adverb and its position\n    return first_adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # remove all punctuation marks from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # tokenize the sentence into words\n    words = text.split()\n    # create an empty list to store the adverbs and their positions\n    adverbs = []\n    # loop through each word in the sentence\n    for i, word in enumerate(words):\n        # check if the word is an adverb\n        if word.endswith('ing') or word.endswith('ed') or word.endswith('ing'):\n            # check if this is the first adverb found\n            if not adverbs:\n                # add the position of the adverb to the list\n                adverbs.append(i)\n            # break out of the loop\n            break\n    # return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expressions for identifying adverbs and their positions in a sentence\n    adverb_pattern = r'\\b[a-z]*(able|ad|ag|ally|although|an|and|any|are|aren|as|at|be|being|between|both|but|by|can|did|do|does|each|few|for|from|had|has|have|having|he|he'd|he'll|he's|her|here|here's|hers|herself|him|himself|his|how|i|i'd|i'll|i'm|i've|if|in|into|is|it|it'd|it'll|it's|its|itself|just|ll|ma|mightn't|more|most|mustn't|my|myself|no|nor|not|of|off|on|once|only|or|other|our|ours|ourselves|out|over|own|re|s|same|shan't|she|she'd|she'll|she's|should|should've|so|some|such|t|t's|than|that|that'll|that's|the|their|theirs|them|themselves|then|there|there's|these|they|they'd|they'll|they're|they've|this|those|through|to|too|under|up|very|was|wasn't|we|we'd|we'll|we're|we've|were|weren't|what|what's|when|when's|where|where's|which|while|who|who's|whom|why|why's|with|won't|would|wouldn't|y|you|you'd|you'll|you're|you've|your|yours|yourself|yourselves)\\b'\n    pos_pattern = r'\\b[a-z]*(noun|verb|adverb|preposition|postposition)\\b'\n\n    # Use regular expressions to find all adverbs and their positions in the sentence\n    adverbs = re.findall(adverb_pattern, text)\n    pos = re.findall(pos_pattern, text)\n\n    # Sort the adverbs and their positions alphabetically\n    adverbs = sorted(adverbs)\n    pos = sorted(pos)\n\n    # Find the positions of the first adverb in the sentence\n    adverb_pos = []\n    for i in range(len(adverbs)):\n        if i == 0:\n            adverb_pos.append(i+1)\n        else:\n            if adverbs[i]!= adverbs[i-1]:\n                adverb_pos.append(i+1)\n\n    # Create a dictionary with the adverb positions as keys and the corresponding positions in the sentence as values\n    adverb_dict = {}\n    for i in range(len(adverb_pos)):\n        adverb_dict[adverb_pos[i]] = pos[i]\n\n    return adverb_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = re.findall(r'\\b\\w*adv[a-z]+\\w*\\b', text.lower())\n    positions = [text.lower().find(adv) for adv in adverbs]\n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes in a sentence and returns the first adverb and its position(s) in the sentence.\n    '''\n    \n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:also|also\\s+|also\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+|also\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Finding the surface area of a cube using the formula S = 6 * (l * l * l)\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize two arrays to store positive and negative numbers\n    positive_arr = array('i')\n    negative_arr = array('i')\n\n    # Iterate through the array and count positive and negative numbers\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n        else:\n            negative_arr.append(num)\n\n    # Calculate the ration of positive and negative numbers\n    pos_count = positive_arr.count(0)\n    neg_count = negative_arr.count(0)\n    pos_ratio = (pos_count / (pos_count + neg_count)) * 100\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    count_negative = 0\n    count_zero = 0\n\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n        elif num < 0:\n            count_negative += 1\n        else:\n            count_zero += 1\n\n    total = len(nums)\n    ratio_positive = (count_positive / total) * 100\n    ratio_negative = (count_negative / total) * 100\n    ratio_zero = (count_zero / total) * 100\n\n    print(\"Positive Ratio: {:.2f}%\".format(ratio_positive))\n    print(\"Negative Ratio: {:.2f}%\".format(ratio_negative))\n    print(\"Zero Ratio: {:.2f}%\".format(ratio_zero))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_arr = array('i', nums)\n    count = 0\n    for num in num_arr:\n        if num > 0:\n            count += 1\n    return count / len(num_arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negative_count = 0\n    total = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negative_count += 1\n\n    if total == 0:\n        print('No positive numbers in the array.')\n    elif total == 1:\n        print('The array has only one positive number.')\n    else:\n        positive_ratio = positives.count(0) / total\n        print(f'The ration of positive numbers in the array is: {positive_ratio:.2f}')"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    positive_ratio = positive_count / len(arr)\n    negative_ratio = negative_count / len(arr)\n    zero_ratio = zero_count / len(arr)\n    print(\"Positive Ratio: {:.2f}%\".format(positive_ratio * 100))\n    print(\"Negative Ratio: {:.2f}%\".format(negative_ratio * 100))\n    print(\"Zero Ratio: {:.2f}%\".format(zero_ratio * 100))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = len(nums)\n\n    for num in nums:\n        if num > 0:\n            count += 1\n\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    negative_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n    \n    if len(positive_nums) == 0:\n        return 0.0\n    else:\n        return len(positive_nums) / (len(positive_nums) + len(negative_nums))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n            \n    if positive_count == 0:\n        return 0\n    else:\n        return positive_count / (positive_count + negative_count + zero_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number found in it.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0] # Assume the first element is the largest negative number\n    \n    for num in list1: # Loop through each element in the list\n        if num < 0 and num > largest: # If the number is negative and greater than the current largest negative number\n            largest = num # Update the largest negative number to the current number\n    \n    return largest # Return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_num:\n                largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize a new empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # iterate over each tuple in the tuple list\n    for tup in test_list:\n        # trim each tuple by k using slicing\n        trimmed_tup = tup[K:]\n        # append the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tup)\n    \n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(K):\n            new_tup += (tup[i],)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][i:i+K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) <= K:\n            test_list[i] = ()\n        else:\n            test_list[i] = test_list[i][:K], test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:]) for t in test_list for i in range(K)]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns the trimmed list of tuples.\n    The tuples are trimmed by k in the form (a, b,..., a + k - 1, b + k - 1,..., b + n - 1)\n    where n is the length of the tuples in the list.\n    '''\n    n = len(test_list[0])\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0][:K] + tup[1:K] + tup[2:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]) - 1:\n                test_list[i][j] = test_list[i][j+1]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the given tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match!\")\n        return None\n    # Perform the index wise multiplication and return the result\n    result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should have same number of elements.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    for i in lst:\n        if i in c:\n            print(f\"{i}: {c[i]}\")\n        else:\n            print(f\"{i}: 0\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to list \n    lst = list(tup)\n    # create a dictionary to store count of each element in list \n    count_dict = Counter(lst)\n    # return the count of each element in the tuple \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n\n    for key, value in count_dict.items():\n        if key in lst:\n            count_lst.append((key, value))\n\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Counter function to count the frequency of each element in the list\n    c = Counter(lst)\n    # Dictionary to store the counts of each element in the tuple\n    d = {}\n    # Loop through each element in the tuple\n    for i in tup:\n        # Check if the element exists in the dictionary, if not, add it to the dictionary with a count of 0\n        if i not in d:\n            d[i] = 0\n        # Increment the count of the element in the dictionary by 1\n        d[i] += 1\n    # Return the dictionary containing the counts of each element in the tuple\n    return d"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # initialize a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    for i in tup: \n        count_dict[i] = 0\n    \n    # iterate through the list and count the occurrence of each element in the tuple\n    for i in lst:\n        count_dict[i] += 1\n    \n    # return the dictionary containing the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n\n    for elem in tup:\n        if elem in count_dict:\n            result[elem] = count_dict[elem]\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in count: \n        if i in lst: \n            count[i] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) # create a dictionary with count of elements in the list\n    final_dict = {} # create an empty dictionary for final result\n\n    for elem in tup:\n        if elem in count_dict: # check if the element is present in the list\n            if elem in final_dict: # check if the element is already present in the final result\n                final_dict[elem] += count_dict[elem] # if yes, add the count to the existing count of that element\n            else:\n                final_dict[elem] = count_dict[elem] # if not, add the element to the final result with its count as its value\n\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    final_count = {}\n    for i in tup:\n        final_count[i] = count_dict[i]\n    return final_count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes of the elements in nums\n    cubes = []\n    # Loop through each element in nums\n    for num in nums:\n        # Calculate the cube of the current element\n        cube = num ** 3\n        # Append the cube to the list of cubes\n        cubes.append(cube)\n    # Return the list of cubes\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    sum_perrin = 0\n\n    for i in range(1, n+1):\n        sum_perrin += (1/i)\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Calculate the sum of Perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_num(i)\n    return sum\n\ndef perrin_num(n):\n    '''\n    Write a function to calculate the nth Perrin number.\n    '''\n    return n*(3*n-1)//2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the first\", n, \"Perrin numbers is\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n + 1):\n        sum_perrin += (i * (i + 1)) // 2\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    total_sum = 0\n    \n    for i in range(n):\n        total_sum += perrin_numbers[i]\n    \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perrin(n):\n    '''\n    Check if a number is a Perrin number or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef perrin_sum(n):\n    '''\n    Calculate the sum of perrin numbers up to n.\n    '''\n    total_sum = 0\n    for i in range(n + 1):\n        if is_perrin(i):\n            total_sum += i\n    return total_sum\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += perrin_sum(i)\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(n):\n        sum += p**2\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1379, 1432, 1486, 1541, 1597, 1654, 1712, 1771, 1831, 1892, 1954, 2017, 2081, 2146, 2212, 2279, 2347, 2416, 2486, 2557, 2629, 2702, 2776, 2851, 2927, 3004, 3082, 3161, 3241, 3322, 3404, 3487, 3571, 3656, 3742, 3829, 3917, 4006, 4096, 4187, 4279, 4372, 4466, 4561, 4657, 4754, 4852, 4951, 5051, 5152, 5254, 5357, 5461, 5566, 5672, 5779, 5887, 5996, 6106, 6217, 6329, 6442, 6556, 6671, 6787, 6904, 7022, 7141, 7261, 7382, 7504, 7627, 7751, 7876, 8002, 8129, 8257, 8386, 8516, 8647, 8779, 8912, 9046, 9181, 9317, 9454, 9592, 9731, 9871, 10012, 10153, 10295, 10438, 10582, 10727, 10873, 11020, 11168, 11317, 11467, 11618, 11770, 11923, 12077, 12232, 12388, 12545, 12703, 12862, 13022, 13183, 13345, 13508, 13672, 13837, 14003, 14"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 7, 12, 19, 28, 41, 58, 79]\n    total_sum = 0\n\n    for number in perrin_numbers:\n        total_sum += number\n        if total_sum > n:\n            break\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through all perrin numbers less than or equal to n\n    for i in range(1, n+1):\n        # Calculate the perrin number using the formula: p(n) = n^2 - 1\n        p = i ** 2 - 1\n\n        # Add the perrin number to the sum\n        sum += p\n\n    # Return the sum of all perrin numbers\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from the given list of strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for string in l:\n        # If the length of the current string is greater than or equal to the specified size, extract it and add it to the list\n        if len(string) >= l:\n            extracted_strings.append(string[:l])\n\n    # Return the list of extracted strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The desired size of the extracted strings.\n\n    Returns:\n        A list of extracted string values.\n    '''\n    extracted_str = []\n    for s in str_list:\n        if len(s) >= size:\n            extracted_str.append(s[:size])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of strings.\n    size (int): The desired size of the extracted strings.\n\n    Returns:\n    list: A list of strings of the specified size.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size parameter and returns a list of the specified size of strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i][-1]:\n            result.append(l[i][:l[i][-1]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[0]:\n            result.append(l[i][:l[0]])\n        else:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list containing the extracted strings.\n    '''\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regex\n    text1 = re.sub('\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    # Removing leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text1 = pattern.sub('', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove whitespaces using regular expression\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= 0.5 * actual_cost:\n        return sale_amount - 0.5 * actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost <= sale_amount:\n        loss_amount = 0\n    else:\n        loss_amount = actual_cost - sale_amount\n\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        loss_amount = actual_cost - sale_amount \n        return loss_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.1  # assume 10% loss rate\n    if actual_cost - sale_amount >= sale_amount * loss_percent:\n        loss_amount = actual_cost - sale_amount - sale_amount * loss_percent\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount) / actual_cost * 100\n    if loss_percentage > 10:\n        return round(loss_percentage, 2)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_percentage = (sale_amount - actual_cost) / actual_cost\n        loss_amount = sale_amount - actual_cost * loss_percentage\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (i+2) == 0:\n                sum += i+2\n            else:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # find the list of even factors of n\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n // i % 2 == 0:\n            factors.append(i)\n            if i * i!= n:\n                factors.append(n//i)\n    # find the sum of even factors\n    sum = 0\n    for factor in factors:\n        sum += factor\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    # First, find all the even factors of n\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            evenFactors.append(i)\n            n //= i\n    # Finally, add the remaining factor if it exists\n    if n > 1:\n        evenFactors.append(n)\n    # Calculate the sum of the even factors\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value.\n    It returns True if the string contains a word containing 'z', False otherwise.\n    '''\n    # Regular expression pattern to match word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    \n    # Using regular expression module in Python to match pattern in input string\n    match = re.search(pattern, text)\n    \n    # Return True if match found, False otherwise\n    return True if match else False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Find all words that contain 'z' and replace them with 'zz'\n    pattern = r'\\b[a-z]*z\\b'\n    text = re.sub(pattern, 'zz', text)\n\n    return text"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b', re.IGNORECASE)\n    return pattern.findall(text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bwordz\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Found wordz:\", matches)\n    else:\n        print(\"No wordz found in the text.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regular expression pattern to match word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern to match words containing 'z'\n    pattern = re.compile(r'\\w+z\\w+')\n    \n    # Find all the words in the text that match the pattern\n    matches = pattern.findall(text)\n    \n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        elif monthnum2 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13) and days_in_month[monthnum2-1] == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return False\n    else:\n        if monthnum2 % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the input is a valid month number\n    if not (1 <= monthnum2 <= 12):\n        return False\n\n    # Check if the given month number contains 31 days\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return days_in_months[monthnum2-1] == 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 in [2, 4, 6, 9, 11]:\n            return False\n        else:\n            return True\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and not (year % 4) and (not (year % 100) or (year % 400 == 0)):\n        return True\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1] # reverse the string using slicing\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with the minimum length.\n    \"\"\"\n    # initialize the minimum length to infinity\n    min_length = float('inf')\n    # initialize the sublist with minimum length to None\n    min_sublist = None\n    \n    # iterate over each sublist in the list\n    for sublist in lst:\n        # check if the length of the sublist is less than the minimum length\n        if len(sublist) < min_length:\n            # update the minimum length and sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    # return the sublist with the minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist to empty list\n\n    # loop through each sublist in the list\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            # if the length of the sublist is less than minimum length\n            if j-i+1 < min_len: \n                # update minimum length and minimum sublist\n                min_len = j-i+1\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist \n    that has the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize min_len with the length of the first sublist\n    min_len = len(lst[0])\n\n    # iterate over the sublists of lst\n    for sublist in lst:\n        # check if the current sublist has a shorter length\n        if len(sublist) < min_len:\n            # update min_len with the current sublist's length\n            min_len = len(sublist)\n\n    # create a new list to store the sublists of lst having minimum length\n    result = []\n\n    # iterate over the sublists of lst\n    for sublist in lst:\n        # check if the current sublist has a length equal to min_len\n        if len(sublist) == min_len:\n            # add the current sublist to the result list\n            result.append(sublist)\n\n    # return the result list\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0]) # Initialize minimum length as the length of the first element of the list\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_length: # Check if the length of the sublist is less than the current minimum length\n            min_length = len(lst[i]) # Update the minimum length to the length of the sublist\n    \n    # Return the sublist with minimum length\n    return lst[lst.index(min(lst))], min_length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize variables\n    min_len = lst[0]\n    min_sublist = lst\n\n    # Loop through the list and find the sublist with minimum length\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    sublist = None\n\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if len(lst[i:j+1]) < min_len: \n                min_len = len(lst[i:j+1]) \n                sublist = lst[i:j+1]\n\n    return sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+') #pattern for uppercase substrings\n    return re.sub(uppercase_pattern, '', str1) #remove uppercase substrings from the string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w+\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Compile a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    \n    # Iterate over all substrings of the input string and check if they match the pattern\n    result = []\n    for substring in str1.split():\n        if pattern.search(substring):\n            result.append(substring)\n    \n    # Join the remaining substrings into a single string and return it\n    return''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+', re.IGNORECASE)\n    # Use the pattern.sub() method to replace uppercase substrings with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # convert all characters to lowercase\n    str1 = str1.lower()\n    # find all uppercase substrings in the string\n    matches = re.findall(r'([A-Z]+)', str1)\n    # remove all uppercase substrings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # convert the string back to uppercase\n    str1 = str1.upper()\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase substrings using regular expressions\n    str1 = re.sub('([A-Z])', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to find uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'\\b[A-Z]+\\b', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(Extract(i)[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the first elements\n    first_elements = []\n    \n    # loop through each sublist in the input list\n    for sublist in lst:\n        # add the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        \n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        if isinstance(i, list):\n            for j in i:\n                print(j)\n        else:\n            print(i)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for item in lst:\n        if type(item) == list:\n            new_lst.extend(Extract(item))\n        else:\n            new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Counts the number of upper case characters in a string.\n\n    :param string: The string to count the upper case characters in.\n    :return: The number of upper case characters in the given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    combs = list(combinations(list1, len(list1)))\n    return list(combs)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Create an empty list to store the combinations\n    result = []\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Loop through all possible pairs of indices\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Add the combination to the result list\n            result.append(list1[i:j+1])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize the result list and the current combination\n    result = []\n    curr = []\n\n    # Iterate over each element of the list\n    for i in range(len(list1)):\n        # If the current element is not already in the current combination, add it\n        if list1[i] not in curr:\n            curr.append(list1[i])\n            # If the current combination is complete, add it to the result list\n            if len(curr) == len(list1):\n                result.append(curr[:])\n            # Recursively call the function to find the remaining combinations\n            else:\n                result += combinations_list(list1[i:])\n        # Reset the current combination to start a new one\n        curr = []\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num > 0:\n            max_ending_here *= num\n            min_ending_here = 1\n        elif num < 0:\n            min_ending_here *= num\n        else:\n            min_ending_here = 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n        \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # If the current product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n            \n        # Update the current product\n        current_product *= num\n        \n        # Update the maximum product if necessary\n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = max_ending_here\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] * arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i] * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if max_product < max_ending_here:\n            max_product = max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(max_ending_here, 0)\n    max_product = max_ending_here\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n\n    max_product = float('-inf')  # initialize max product to negative infinity\n    curr_product = 1  # initialize current product to 1\n\n    # loop through the array\n    for i in range(len(arr)):\n        if curr_product < 0:\n            curr_product = 1  # reset current product to 1 if it becomes negative\n\n        curr_product *= arr[i]  # update current product\n        max_product = max(max_product, curr_product)  # update max product if it's greater than current product\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in range(n):\n        values.append(dict[i])\n    return values[0] == values[1] and values[0] == values[2] and values[1] == values[2]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if n!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(n):\n        if dict[i]!= dict[i+1]:\n            count += 1\n            break\n        else:\n            continue\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(value)!= n:\n        return False\n    for i in range(n):\n        if value[0]!= value[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through all the keys in the dictionary\n    for key in dict:\n\n        # Check if the count is equal to n\n        if count == n:\n            return True\n\n        # If the count is not equal to n, increment the count\n        else:\n            count += 1\n\n    # If the loop completes without finding any mismatches, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if key == 'key':\n            if value!= 'value':\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0 or len(dict)!= len(set(dict.values())):\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # create a dictionary to store the cumulative sums of increasing subsequences\n    cumsum_dict = {}\n\n    # calculate the cumulative sum of increasing subsequences of length 1 to n\n    for i in range(len(arr)):\n        if i in cumsum_dict:\n            cumsum_dict[i] += arr[i]\n        else:\n            cumsum_dict[i] = arr[i]\n\n    # initialize the maximum product to negative infinity\n    max_product = -float('inf')\n\n    # loop through the increasing subsequences of length 1 to n-1\n    for i in range(len(arr)):\n        # calculate the cumulative sum of increasing subsequences of length i+1 to n\n        for j in range(i+1, len(arr)):\n            if j in cumsum_dict:\n                cumulative_sum = cumsum_dict[j] - cumsum_dict[i-1]\n            else:\n                cumulative_sum = 0\n\n            # if the maximum product so far is less than the current product formed by multiplying numbers of the increasing subsequence, update max_product\n            if cumulative_sum > max_product:\n                max_product = cumulative_sum\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        elif arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            current_product = 1\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    cur_product = 1\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            cur_product *= arr[i]\n            if cur_product > max_product:\n                max_product = cur_product\n        else:\n            cur_product = 1\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Check if array is empty\n    if not arr:\n        return 0\n\n    # Initialize variables\n    max_profit = float('-inf')\n    curr_profit = 0\n    curr_max = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if current element is greater than the current maximum\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_profit = 0\n        # Check if adding the current element to the current profit results in a larger profit\n        elif arr[i] + curr_profit > curr_max:\n            curr_max = arr[i] + curr_profit\n        # Update the profit if adding the current element to the current profit results in a smaller profit\n        else:\n            curr_profit += arr[i]\n\n    return max_profit if max_profit!= float('-inf') else 0"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n\n    # Maximum product of subsequence ending at index i\n    for i in range(n):\n        # Base case: single element array\n        if i == 0:\n            dp[i][i] = arr[i]\n            continue\n\n        # Maximum product of subsequence ending at index j\n        max_product = 0\n        for j in range(i):\n            max_product = max(max_product, arr[j]*dp[i][j])\n\n        # Update maximum product of subsequence ending at index i\n        dp[i][i] = max_product\n\n    # Maximum product of subsequences in the increasing subsequence\n    max_product = 0\n    for i in range(1, n):\n        max_product = max(max_product, arr[i]*dp[i-1][i-1])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize max product as negative infinity\n    max_product = float('-inf')\n\n    # Iterate through all possible increasing subsequences of arr\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            # Calculate the product of the subsequence and check if it is greater than max_product\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    # Find the sum of the first and second elements of the tuple\n    sum_of_elements = test_tup[0] + test_tup[1]\n    \n    # Find the sum of the pairwise additions of the rest of the elements in the tuple\n    rest_sum = sum_of_elements\n    \n    # Loop through the rest of the elements in the tuple and find the sum of the pairwise additions\n    for i in range(2, len(test_tup)-1):\n        rest_sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of the pairwise additions of all the elements in the tuple\n    return rest_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"Tuple must have at least 2 elements\"\n    else:\n        pairwise_sum = test_tup[0] + test_tup[-1]\n        for i in range(len(test_tup)-2):\n            pairwise_sum += test_tup[i+1]\n        return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length < 2:\n        print(\"The tuple is too short to add pairwise.\")\n        return\n    \n    for i in range(length-1):\n        print(test_tup[i] + test_tup[i+1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Loop through the tuple and add each pair of adjacent elements to the result variable\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # get the first and last elements of the tuple\n    first_elem = test_tup[0]\n    last_elem = test_tup[-1]\n    \n    # create a new tuple with only the middle elements\n    middle_elems = test_tup[1:-1]\n    \n    # add the middle elements pairwise\n    pairwise_sum = 0\n    for i in range(len(middle_elems)):\n        pairwise_sum += middle_elems[i]\n    \n    # add the first and last elements\n    total_sum = first_elem + last_elem + pairwise_sum\n    \n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        first_elem = test_tup[0]\n        last_elem = test_tup[-1]\n        result = []\n        for i in range(1, len(test_tup)-1):\n            result.append(first_elem + last_elem)\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    sum_of_pairs = 0\n    for i in range(len(test_tup)-1):\n        sum_of_pairs += test_tup[i] + test_tup[i+1]\n    \n    return sum_of_pairs"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize a variable to store the product\n    product = 1\n    \n    # Loop through each element in the array\n    for num in arr:\n        # Multiply the current element by the product\n        product = (product * num) % n\n        \n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize variables for result and index\n    product = 1\n    index = 0\n\n    # iterate through the array\n    while index < len(arr):\n        # multiply the current element with product\n        product = (product * arr[index]) % n\n        # increment index\n        index += 1\n\n    # return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    result = 1\n    for i in arr:\n        result *= i\n    \n    # Return the result modulo n\n    return result % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array 'arr' and an integer 'n' as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the remainder of \n    the array multiplication modulo n.\n\n    Args:\n    arr (list): A list of integers\n    n (int): A number greater than 1\n\n    Returns:\n    int: The remainder of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of the array using the long multiplication operator\n    product = 1\n    for i in arr:\n        product *= i\n\n    # Calculate the remainder of the product modulo n\n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        elif l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    If the list contains consecutive numbers, it returns True, otherwise it returns False.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True \n    elif l[0] == l[-1]: \n        return check_Consecutive(l[1:-1]) \n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty\n    if not l:\n        return False\n    \n    # initialize the last number in the list as None\n    last_num = None\n    \n    # iterate through the list\n    for num in l:\n        # check if the current number is equal to the previous number plus 1\n        if last_num is not None and num - last_num == 1:\n            # if consecutive, return True\n            return True\n        \n        # update the last number\n        last_num = num\n    \n    # if we reach here, the list does not contain consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 2: \n        return False\n    else: \n        for i in range(1, n): \n            if l[i] - l[i-1] == 1: \n                return True\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for item in test_list1:\n        if all(elem in item for elem in test_list2):\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new tuple list containing the common elements of both lists.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each element in the first list\n    for element in test_list1:\n        # Check if the element is also present in the second list\n        if element in test_list2:\n            # If it is, append it to the common_elements list\n            common_elements.append(element)\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    \n    intersection = []\n    for elem in test_list1:\n        if elem in test_list2 and elem not in intersection:\n            intersection.append(elem)\n            \n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set()\n    for element in test_list1:\n        if element in test_list2:\n            intersection_set.add(element)\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets to remove duplicates\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n    # find intersection of sets\n    intersection = test_list1_set.intersection(test_list2_set)\n    # convert intersection back to list and return\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from both the lists to get their unique elements\n    unique_elements = set(test_list1 + test_list2)\n    \n    # Create a new list to store the intersection of unique elements\n    intersection = []\n    \n    # Iterate through the unique elements and append them to the intersection list\n    for element in unique_elements:\n        if all(elem in unique_elements for elem in test_list1) and all(elem in unique_elements for elem in test_list2):\n            intersection.append(element)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of all the elements in the test_list1 and test_list2\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns a new list containing only the common tuples in both input lists.\n    \"\"\"\n    common_tuples = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                common_tuples.append(tup1)\n    return common_tuples"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string.\n\n    Parameters:\n    str1 (string): The string to be modified.\n    ch (string): The character to be replaced.\n    newch (string): The character that replaces the old character.\n\n    Returns:\n    string: The modified string with the old character replaced with the new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char!= ch:\n            new_str += char\n        elif char == ch:\n            new_str += newch\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the given character with the new character in the given string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character matches the target character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    # return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count = Counter(dict1)\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_count)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Using Counter to count the frequency of each value in the dictionary\n    counter = Counter(dict1)\n    \n    # Sorting the counter dictionary by value in ascending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    # Creating a new dictionary from the sorted counter dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a list of tuples\n    list_of_tuples = dict1.items()\n\n    # Sort the list of tuples by the second element (the value)\n    list_of_tuples.sort(key=lambda x: x[1])\n\n    # Convert the sorted list of tuples back to a dictionary\n    sorted_dict = dict(list_of_tuples)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Use Counter to count the frequency of each value\n    count = Counter(dict1.values())\n    \n    # Sort the counter in descending order by values\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with the sorted values\n    sorted_dict = {k: v for k, v in sorted_count}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n    # Sort the keys of the sorted Counter object\n    sorted_keys = [k for k, _ in sorted_counter]\n    # Sort the values of the sorted Counter object\n    sorted_values = [v for k, v in sorted_counter]\n    # Create a new dictionary with the sorted keys and values\n    sorted_dict = {k: v for k, v in zip(sorted_keys, sorted_values)}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in descending order.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    sorted_arr = sorted(nums, reverse=True)\n    # Find the sum of the largest and smallest value in the sorted array\n    sum_largest = sorted_arr[0] + sorted_arr[1]\n    sum_smallest = sorted_arr[-1] + sorted_arr[-2]\n    return sum_largest, sum_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        largest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n        smallest = nums[0]\n        for num in nums:\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums[1:]:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the largest and smallest value\n    largest = nums[0]\n    smallest = nums[1]\n\n    # Find the sum of the largest and smallest value\n    sum = largest + smallest\n\n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is in lower case and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to check if the given string is in lower case or not.\n    \"\"\"\n    if string.islower():\n        print(string.lower(), \"is already in lower case.\")\n    else:\n        string = string.lower()\n        print(string, \"is converted to lower case.\")"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split into a list of words\n    words = str1.lower().split()\n    # Initialize an empty list to store the cleaned words\n    cleaned_words = []\n    # Loop through the words in the list\n    for word in words:\n        # Check if the word is all uppercase\n        if word.isupper():\n            # If it is, append the word to the cleaned_words list\n            cleaned_words.append(word)\n        else:\n            # If it's not, look for a match with a regular expression\n            pattern = re.compile(r'(?=[A-Z])')\n            match = pattern.search(word)\n            # If a match is found, append the word to the cleaned_words list up to the match\n            if match:\n                cleaned_words.append(word[:match.start()])\n    # Join the cleaned_words list back into a string and return it\n    return''.join(cleaned_words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # replace all lowercase substrings with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expressions to find and remove all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile('[a-z]+')\n    return lowercase.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define regular expression pattern for lowercase substring\n    pattern = r'[a-z]+'\n\n    # Use re.findall() to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(pattern, str1)\n\n    # Convert the list of lowercase substrings to a string and print it\n    print(\"Lowercase substrings removed:\", \"\".join(lowercase_substrings))"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expressions to remove all lowercase substrings from the string\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r'[a-z]+'\n    pattern = re.compile(regex)\n    str2 = pattern.sub('', str1)\n    return str2"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    s = str(n)\n    # return the first character of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string to access its characters\n    num_str = str(n)\n    \n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # take the integer part of the number\n    int_part = n // 1000000000000\n    # convert the integer part to a string\n    int_part_str = str(int_part)\n    # find the first digit of the integer part\n    first_digit = int_part_str[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the input is a string or an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    \n    # convert the integer to a string and get the first character\n    first_char = str(n)[0]\n    \n    # return the first character as an integer\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the input number to a string and access the first character\n    first_digit = str(n)[0]\n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the input is a number\n    try:\n        int_n = int(n)\n    except ValueError:\n        print(\"Input must be a number.\")\n        return\n    \n    # check if the input is a positive integer\n    if int_n < 0:\n        print(\"Input must be a positive integer.\")\n        return\n    \n    # convert the input to a string\n    str_n = str(int_n)\n    \n    # extract the first digit of the string\n    first_digit = str_n[0]\n    \n    # print the first digit\n    print(\"The first digit of\", n, \"is\", first_digit)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1,n+1)])\n    sum_natural = sum(range(1,n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Function to find the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n    \n    # Function to find the sum of first n natural numbers\n    def sum_of_numbers(n):\n        return sum(range(1, n+1))\n    \n    # Find the sum of cubes of first n natural numbers\n    sum_cubes = sum_of_cubes(n)\n    \n    # Find the sum of first n natural numbers\n    sum_numbers = sum_of_numbers(n)\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    sum_cubes = sum(cubes)\n    sums = [i for i in range(1, n+1)]\n    sum_of_sums = sum(sums)\n    return abs(sum_cubes - sum_of_sums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = sum([i**3 for i in range(n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(n+1))\n    \n    # Return the difference between the two sums\n    return cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n\n    # Calculate the sum of first n natural numbers\n    sum_nums = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = abs(sum_cubes - sum_nums)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(n+1)]\n    cubes_sum = sum(cubes)\n    # Calculate the sum of the first n natural numbers\n    numbers_sum = sum(range(n+1))\n    # Calculate the difference between the two sums\n    return cubes_sum - numbers_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n        if xor_sum % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes a list A of N integers and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if ((A[i] ^ A[j]) % 2!= 0) and ((A[j] ^ A[i]) % 2!= 0):\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize variables for counting odd pairs and xor values\n    odd_count = 0\n    xor_value = 0\n\n    # Iterate through the array A\n    for num in A:\n        # Compute the xor value of num with all the other elements in A\n        xor_value ^= num\n\n        # If the xor value is odd, increment the odd_count variable\n        if xor_value & 1:\n            odd_count += 1\n\n        # If the xor value becomes 0, it means we have reached the end of the array,\n        # so we break out of the loop.\n        if xor_value == 0:\n            break\n\n    # Return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # initialize an empty string to store the toggled string\n    toggled_string = ''\n    # loop through each character in the string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        else:\n            toggled_string += char.upper()\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = char.swapcase()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_string = \"\"\n    \n    # iterate through each character in the input string\n    for char in string:\n        # toggle the case of the character using the `swapcase()` method\n        modified_char = char.swapcase()\n        # append the modified character to the `modified_string`\n        modified_string += modified_char\n    \n    # return the modified string\n    return modified_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert input numbers to lists of digits\n    num1 = list(map(int, str(n1)))\n    num2 = list(map(int, str(n2)))\n\n    # find the distance between the two numbers in terms of number of digits\n    diff_len = len(num1) - len(num2)\n\n    # add the difference in length to the number of digits to get the sum of differences\n    diff_sum = sum(diff_len * digit_distance(x, y) for x, y in zip(num1, num2))\n\n    return diff_sum\n\n\ndef digit_distance(x, y):\n    '''\n    Write a python function to find the per-digit difference between two digits.\n    '''\n    # check if the digits are the same\n    if x == y:\n        return 0\n\n    # find the absolute difference between the digits\n    diff = abs(x - y)\n\n    # check if the difference is even or odd\n    if diff % 2 == 0:\n        return diff // 2\n    else:\n        return (diff // 2) + 1"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    :param n1: An integer.\n    :param n2: An integer.\n    :return: An integer.\n    \"\"\"\n\n    # Convert the integers to lists of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the sum of per-digit differences\n    digit_distance_sum = 0\n    for i in range(len(num1_digits)):\n        digit_distance_sum += abs(num1_digits[i] - num2_digits[i])\n\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # initialize the sum variable to zero\n    sum_digit_distance = 0\n\n    # convert both numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # compare the length of the two numbers and their position in the list of digits\n    if len(num1_digits) == len(num2_digits):\n        for i in range(len(num1_digits)):\n            # compare the digits at the same position in the two lists\n            if num1_digits[i]!= num2_digits[i]:\n                # if the digits are not equal, add the difference to the sum variable\n                sum_digit_distance += abs(num1_digits[i] - num2_digits[i])\n    else:\n        # if the length of the two numbers is not equal, add the sum of their differences to the sum variable\n        for i in range(max(len(num1_digits), len(num2_digits))):\n            if i < len(num1_digits):\n                sum_digit_distance += abs(num1_digits[i] - num2_digits[i])\n            if i < len(num2_digits):\n                sum_digit_distance += abs(num2_digits[i] - num1_digits[i])\n\n    # return the sum of the per-digit differences between the two numbers\n    return sum_digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        sum_diff += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    for i in range(len(str(n1))):\n        sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers to lists of digits\n    digit1 = list(map(int, str(n1)))\n    digit2 = list(map(int, str(n2)))\n    # calculate the per-digit difference\n    diff = [abs(x - y) for x, y in zip(digit1, digit2)]\n    # calculate the sum of the per-digit difference\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to strings and then convert them to lists of digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = [int(digit) for digit in num1_str]\n    num2_list = [int(digit) for digit in num2_str]\n    \n    # Calculate the per-digit difference between the two numbers\n    diff_list = []\n    for i in range(len(num1_list)):\n        diff_list.append(abs(num1_list[i] - num2_list[i]))\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff_list)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits_list1 = [int(digit) for digit in str(n1)]\n    digits_list2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the distance between the two digits lists\n    distance = sum(abs(digit1 - digit2) for digit1, digit2 in zip(digits_list1, digits_list2))\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Initialize the sum to zero\n    digit_sum = 0\n    # Loop through each digit in the strings\n    for i in range(len(n1_str)):\n        # Get the digits as integers\n        n1_digit = int(n1_str[i])\n        n2_digit = int(n2_str[i])\n        # Calculate the difference between the digits\n        diff = abs(n1_digit - n2_digit)\n        # Add the difference to the sum\n        digit_sum += diff\n    # Return the sum\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num_str1 = str(n1)\n    num_str2 = str(n2)\n    diff_sum = 0\n    for i in range(len(num_str1)):\n        diff = int(num_str1[i]) - int(num_str2[i])\n        diff_sum += diff\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        size = len(a)\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    # Loop through the list and find the maximum sum subarray\n    for i in range(size, len(a)):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum and start index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    # Return the maximum sum subarray\n    return a[start_index:start_index + size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    sublist = []\n\n    for i in range(size):\n        current_sum += a[i]\n        sublist.append(a[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            sublist = []\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize max_sum to the first element of the array\n    max_sum = a[0]\n\n    # Initialize max_sub_sum to 0\n    max_sub_sum = 0\n\n    # Traverse through the array and keep track of the maximum sum and the sum of the current sublist\n    for i in range(1, size):\n        max_sum = max(max_sum + a[i], a[i])\n        max_sub_sum = max(max_sub_sum, max_sum)\n\n    return max_sub_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(a)):\n        if i < size:\n            curr_sum += a[i]\n        else:\n            curr_sum -= a[i - size]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < size - 1:\n            current_sum -= a[i + 1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = float('-inf')  # initialize max_so_far to negative infinity\n    max_ending_here = 0  # initialize max_ending_here to 0\n    for i in range(size):\n        max_ending_here += a[i]  # add current element to max_ending_here\n        if max_ending_here > max_so_far:  # if max_ending_here is greater than max_so_far, update max_so_far\n            max_so_far = max_ending_here\n        if max_ending_here < 0:  # if max_ending_here becomes negative, reset it to 0\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list 'a' and an integer'size' as input and returns the sum of the largest contiguous sublist in the list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set() to remove duplicates from the two tuples and then joining them to form a new tuple\n    union_set = set(test_tup1) | set(test_tup2)\n    # Sorting the new tuple in ascending order\n    sorted_union = sorted(union_set)\n    # Converting the sorted tuple back to a list\n    sorted_union_list = list(sorted_union)\n    # Outputting the sorted union list\n    print(sorted_union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union_set = sorted(union_set)\n    return sorted_union_set\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    new_tup = test_tup1 + test_tup2\n    # Use set to remove duplicates\n    unique_tup = list(set(new_tup))\n    # Sort the elements in the tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Convert the list to a set to remove duplicates and sort the resulting list in ascending order\n    unique_sorted_list = sorted(set(combined_list))\n    \n    # Convert the sorted list back to a tuple and return it\n    return tuple(unique_sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(set(union_list))\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Union of two tuples\n    union = test_tup1 + test_tup2\n    \n    # Sort the union in ascending order\n    union.sort()\n    \n    # Print the union\n    print(union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if max_len < len(sublist):\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  # initialize max length to 0\n    for i in range(len(lst)):  # loop through each element in the list\n        for j in range(i+1, len(lst)+1):  # loop through each possible sublist of length j starting at index i+1\n            if j-i >= max_length:  # if the current sublist is longer than the current max_length\n                max_length = j-i  # update max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublists.\n    '''\n    longest_sublist = [0] * len(lst)  \n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sublist = lst[i:j]  \n            longest_sublist[i] = max(longest_sublist[i], len(sublist))  \n            max_length = max(max_length, longest_sublist[i])  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n    sublist = []\n    \n    for i in lst:\n        sublist.append(i)\n        curr_length += 1\n        if curr_length > max_length:\n            max_length = curr_length\n        elif curr_length == max_length:\n            for j in range(len(sublist)-1):\n                if sublist[j] < sublist[j+1]:\n                    max_length = curr_length\n                    break\n                elif sublist[j] == sublist[j+1]:\n                    continue\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest_sublist = []  # empty list to store the longest sublist\n    max_length = 0      # variable to store the length of the longest sublist\n\n    # loop through each sublist in the input list\n    for sublist in lst:\n        if len(sublist) > max_length:  # if the length of the current sublist is greater than the previous longest sublist\n            max_length = len(sublist)  # update the maximum length variable\n            longest_sublist = sublist  # update the longest sublist variable\n\n    return max_length, longest_sublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n\n    max_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            max_length += 1\n        else:\n            max_length = 1\n        if max_length > max_length:\n            max_length = max_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to store the length of the longest sublists and the index of the longest sublist\n    longest_length = 0\n    longest_index = 0\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n\n        # Initialize a variable to store the current sublist length\n        sublist_length = 0\n\n        # Loop through each element in the current sublist\n        for j in range(i, len(lst)):\n\n            # If the element is not None, add it to the sublist length\n            if lst[j] is not None:\n                sublist_length += 1\n\n            # If the current sublist length is greater than the longest sublist length found so far, update the variables\n            if sublist_length > longest_length:\n                longest_length = sublist_length\n                longest_index = i\n\n    # Return the length of the longest sublist\n    return longest_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    \n    Args:\n    text: The string from which the values are to be extracted.\n    \n    Returns:\n    A list of all the values extracted from the string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to match double-quoted strings\n    values = re.findall(pattern, text) # extract all the values using the pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")(.*)(?=\\\")\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match.strip())\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(\\w+)(?=\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\"(.*?)\\\"|\\'.*?\\'\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.+?)\"(?!\\\\)')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            count += 1\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs \n    where both elements are unequal. The input list has n elements and the range of the elements is from 1 to n.\n    The function returns the count of possible pairs.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Count the number of possible unordered pairs where both elements are unequal.\n    \n    :param arr: list of integers\n    :param n: length of the list\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Use a loop to iterate over each digit in the number\n    total = 0\n    while n > 0:\n        # Get the last digit and add it to the total\n        digit = n % 10\n        total += digit\n        # Remove the last digit from the number\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit from the integer\n        n //= 10\n        \n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    s = str(n)\n    # initialize a variable to store the sum\n    total = 0\n    # loop over the digits of the string and add them to the total\n    for digit in s:\n        total += int(digit)\n    # return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and loop through each character\n    total = 0\n    for digit in str(n):\n        # Convert the character to an integer and add it to the total\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Add the last digit of the number to the sum\n        sum += n % 10\n        \n        # Remove the last digit from the number\n        n = n // 10\n    \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit of n\n    for digit in str(n):\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the first element is less than the second element\n    elif list1[0] < list1[1]:\n        return False\n    \n    # If the first element is greater than the second element, check if the rest of the list is sorted\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    if len(lst) < 2:\n        return True\n    else:\n        return lst[1:] == sorted(lst[:-1])\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted in ascending order or False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Checks whether the specified list is sorted or not.\n\n    Args:\n        list1 (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, n):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and checks whether the list is sorted or not.\n    If the list is sorted, the function returns True, else it returns False.\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist in alphabetical order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # create a set to store unique numbers\n    unique_nums = set()\n    \n    # loop through each list in the input list of lists\n    for lst in nums:\n        # loop through each element in the list\n        for num in lst:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set of unique numbers\n    unique_nums = set(sum(nums, []))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store the unique numbers found in any list\n    unique_nums = set()\n    for num_list in nums:\n        # Add the numbers from each list to the set\n        for num in num_list:\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(*args):\n    \"\"\"\n    This function removes duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    return [x for x in args if x not in seen and not seen.add(x)]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Create a set from the first list\n    set_1 = set(nums[0])\n\n    # Iterate through the rest of the lists\n    for i in range(1, len(nums)):\n\n        # Create a set from the current list\n        set_i = set(nums[i])\n\n        # Remove the duplicates from the set in the current list\n        set_i -= set_1\n\n        # Add the result back to the set in the first list\n        set_1 |= set_i\n\n    # Convert the set back to a list and return it\n    return list(set_1)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists containing numbers.\n\n    Returns:\n        list: A list of lists containing unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(list(set(num_list)))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of its unique numbers.\n    \"\"\"\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else reduce(lambda x, y: x * y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # create a set of unique numbers from the given list\n    product = 1  # initialize the product to 1\n    \n    for num in unique_numbers:  # iterate through the unique numbers\n        product *= num  # multiply the product by the current number\n    \n    return product  # return the final product value"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    unique_numbers.sort()\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_numbers = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # find the unique numbers in the list\n    unique_product = 1 # initialize the product as 1\n    for num in unique_numbers: # iterate through each unique number\n        unique_product *= num # multiply the product by the current unique number\n    return unique_product # return the final product\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula to calculate surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    surface_area = 2 * pi * r * h + 2 * pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * (3.14159 * r * r) + 2 * (3.14159 * r * h)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2  # Formula for surface area of a circle\n    volume = math.pi * r**2 * h  # Formula for volume of a cylinder\n    surface_area = area + 2 * (volume)  # Adding the formula for the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B and checks whether A is a sublist of B.\n    It returns True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if len(B) < len(A):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): # check if B is longer than A\n        return False\n\n    for i in range(len(B)):\n        if B[i] not in A: # check if B[i] is in A\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    # If B is empty, then A is a sublist of B\n    if not B:\n        return True\n\n    # Check if B is a sublist of A\n    for i in range(len(B)):\n        if B[i:i+len(A)] == A:\n            return True\n\n    # If none of the sublists were found, then A is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return \"The first list should be a sublist of the second list.\"\n    elif len(A) == len(B): \n        if A.sort() == B.sort(): \n            return True\n        else: \n            return False\n    else: \n        return \"The second list should be a sublist of the first list.\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        for i in range(len(A)):\n            if B[i]!= A[i]:\n                return False\n        return True\n    else:\n        for i in range(len(B)-len(A)+1):\n            if B[i:i+len(A)] == A:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if i == len(A):\n            return True\n\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: \n        return True\n    for i in range(len(A)): \n        if A[i] in B: \n            B.remove(A[i])\n            if B == []: \n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        A, B = B, A\n    i = 0\n    for j in range(len(B)):\n        if A[j] == B[j]:\n            i += 1\n        if i == len(B):\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert the given number to a string\n    n_str = str(n)\n    \n    # Find the last digit in the number\n    last_digit = n_str[-1]\n    \n    # Find the factorial of the number without the last digit\n    factorial = 1\n    for i in range(len(n_str)-1):\n        factorial *= int(n_str[i])\n        \n    # Return the last digit of the factorial\n    return int(last_digit) + factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of its factorial.\n\n    Args:\n    n: a positive integer\n\n    Returns:\n    the last digit of the factorial of n\n    \"\"\"\n    # Convert n to a string\n    n_str = str(n)\n    # Convert last digit of n to an integer\n    last_digit = int(n_str[-1])\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize result\n    result = 0\n\n    # find factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find last digit in factorial\n    last_digit = factorial % 10\n\n    # return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n, 0, -1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # convert the number to a string\n    num_str = str(n)\n    # remove the first digit from the string (since the factorial is calculated for the digits)\n    num_str = num_str[1:]\n    # convert the string back to an integer\n    num_int = int(num_str)\n    # calculate the factorial of the integer\n    factorial = 1\n    for i in range(1, num_int+1):\n        factorial *= i\n    # extract the last digit from the factorial\n    last_digit = factorial % 10\n    # return the last digit as an integer\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert input number to string to handle negative numbers\n    n = str(n)\n    # Initialize variables to store factorial and last digit\n    factorial = 1\n    last_digit = 0\n    \n    # Loop through each digit of the number and multiply by factorial\n    for digit in n:\n        factorial *= int(digit)\n    \n    # Divide factorial by 10 to get the last digit\n    last_digit = factorial // 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initializing variables to store the factorial and the last digit\n    factorial = 1\n    last_digit = 0\n\n    # Calculating the factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Finding the last digit of the factorial using integer division\n    last_digit = factorial // 10\n\n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize the last digit to 0\n    last_digit = 0\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Get the last digit of the factorial\n    last_digit = int(factorial % 10)\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    while n > 0:\n        n //= 10\n    return n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new empty list to hold the interleaved elements\n    interleaved_list = []\n    # iterate over each element in the input lists\n    for i in range(len(list1)):\n        # add the i-th element from each list to the interleaved_list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return None\n    else:\n        return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the interleaved list\n    interleaved = []\n\n    # Loop through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through the 3 lists and append the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of the same length and returns a single flat list of the same length.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Calculate the length of the final list\n    length = len(list1) + len(list2) + len(list3)\n\n    # Create an empty list to store the interleaved lists\n    interleaved_list = []\n\n    # Add the first list to the interleaved list\n    interleaved_list.extend(list1)\n\n    # Add the second list to the interleaved list\n    interleaved_list.extend(list2)\n\n    # Add the third list to the interleaved list\n    interleaved_list.extend(list3)\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    # check if the tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples are not same.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, append them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements in \n    the first tuple that are not present in the second tuple.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff.append(test_tup1[i])\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, compares them and returns a list of the elements that are different between them.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even or odd\n    def is_even(x):\n        return x % 2 == 0\n    \n    # Check if the input is a nested tuple\n    if isinstance(test_tuple, tuple) and all(isinstance(i, tuple) for i in test_tuple):\n        # Loop through each element in the nested tuple\n        for i in test_tuple:\n            # Check if the element is even\n            if is_even(even_fnc(i)):\n                # If the element is even, check if it is in a list and remove it if it is\n                if isinstance(i, list) and i in test_tuple:\n                    test_tuple.remove(i)\n            # If the element is odd, check if it is a list and add it to the list of even elements\n            else:\n                if isinstance(i, list):\n                    even_list = [x for x in i if is_even(even_fnc(x))]\n                    if even_list:\n                        i.extend(even_list)\n    # If the input is not a nested tuple, print an error message\n    else:\n        print(\"Error: Input must be a nested tuple.\")\n    \n    # Return the modified nested tuple\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through each element in the nested tuple\n    for elem in test_tuple:\n        # check if the element is even using the even_fnc function\n        if even_fnc(elem):\n            # if the element is even, append it to a new list\n            new_list.append(elem)\n    # return the new list of even elements\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif even_fnc(test_tuple[i]):\n            del test_tuple[i]\n    return tuple(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) is tuple:\n            new_item = even_ele(item, even_fnc)\n        else:\n            new_item = even_fnc(item)\n        if new_item:\n            new_tuple.append(new_item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(t) for t in test_tuple if len(t) == 2]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Extract even elements from the nested mixed tuple and filter them using the even_fnc function\n    even_tup = tuple(filter(even_fnc, test_tuple))\n\n    # Return the filtered even tuple\n    return even_tup"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_fnc(i))\n        elif isinstance(i, list):\n            even_list.append(even_fnc(i))\n        elif isinstance(i, int) and even_fnc(i):\n            even_list.append(i)\n\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_fnc_wrapper(element):\n        return even_fnc(element)\n\n    return tuple(filter(even_fnc_wrapper, test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Loop through each element in the mixed tuple\n    for i in test_tuple: \n        # Check if the element is even or odd\n        if even_fnc(i): \n            # If even, add it to the result list\n            result.append(i) \n        else: \n            # If odd, continue to the next element in the tuple\n            continue\n\n    # Return the result list\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*s*s + b*b + 2*b*s + s*s + 2*b + 2*s + 2*b*b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s/2)*b*b\n    print(\"The surface area of the square pyramid is:\",area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base of the pyramid\n    base = b\n\n    # Calculate the height of the pyramid\n    height = s\n\n    # Calculate the surface area of the pyramid using the formula:\n    # Area = 1/2 * base * height\n    area = 0.5 * base * height\n\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of each side of the pyramid\n    area_base = b * b\n    area_height = s * s\n    \n    # Calculate the total surface area of the pyramid\n    surface_area = 2 * area_base + 6 * area_height\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s + b * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the half-edge of the pyramid\n    half_edge = b / 2\n    \n    # Calculate the area of each face of the pyramid\n    face_area = half_edge * s\n    \n    # Return the total surface area of the pyramid\n    return 6 * face_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function takes in the base and height of a square pyramid as parameters and returns the surface area of the pyramid.\n    \"\"\"\n    # Calculating the base area and the side area of the square pyramid\n    base_area = base * height\n    side_area = base * (height + 1)\n    \n    # Adding the two areas to get the total surface area\n    surface_area = base_area + side_area\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * b * s) / 2  # use the formula for the surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base\n    base_area = b*s\n\n    # Calculate the surface area of the square pyramid\n    surface_area = 2*b*s + 6*b*b + b*b*b + 2*b*b*s + 6*b*s*s + 2*b*b*b*s + 3*b*b*b*b*s + 5*b*b*b*b*b*s + 2*b*b*b*b*b*s*s + 4*b*b*b*b*b*b*s + 12*b*b*b*b*b*b*b*s + 20*b*b*b*b*b*b*b*b*s + 10*b*b*b*b*b*b*b*b*b*s + 24*b*b*b*b*b*b*b*b*b*s + 6*b*b*b*b*b*b*b*b*b*b*s + 12*b*b*b*b*b*b*b*b*b*b*b*s + 8*b*b*b*b*b*b*b*b*b*b*b*b*s + 16*b*b*b*b*b*b*b*b*b*b*b*b*b*s + 10*b*b*b*b*b*b*b*b*b*b*b*b*b*b*s\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s)+(2*s*b)+(s*s)\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == dict1.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return all(dict1.values()) and all(dict1.keys())"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and returns True if it is empty, and False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n\n    Args:\n        n (int): The value of n.\n\n    Returns:\n        int: The nth catalan number.\n    \"\"\"\n    if n < 0 or n > 50:\n        raise ValueError(\"n must be between 0 and 50\")\n    catalan_num = 0\n    for i in range(2, n + 1):\n        catalan_num += binomial(n, i) * binomial(2 * n - 1, 2 * i - 1)\n    return catalan_num\n\n\ndef binomial(n, k):\n    \"\"\"\n    This function returns the binomial coefficient of n and k.\n\n    Args:\n        n (int): The value of n.\n        k (int): The value of k.\n\n    Returns:\n        int: The binomial coefficient of n and k.\n    \"\"\"\n    if k < 0 or k > n:\n        raise ValueError(\"k must be between 0 and n\")\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n - 1, k - 1) + binomial(n - 1, k)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The argument must be non-negative.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) * n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, num+1):\n            result += catalan_number(i-1) * catalan_number(num-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        num = 0\n        for i in range(1, n+1):\n            num += (i*(2*i-1))\n        return num // (n*(2*n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(2, n+1):\n        catalan.append(4*i*catalan[i-1] - catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n\n    # Compute recursively\n    catalan = 0\n    for i in range(2, n+1):\n        catalan += (factorial(n-i)/(factorial(i)*factorial(n-i)))\n\n    return catalan\n\ndef factorial(n):\n    \"\"\"\n    Computes n! recursively.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    return (1 + 10**n) / 2.0**n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for adverbs ending in \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    # Find all occurrences of adverbs in the given string\n    adverbs = re.findall(pattern, text)\n    # Iterate through each adverb and find its position in the original text\n    for i, adv in enumerate(adverbs):\n        # Split the adverb and get the last part (i.e. the word \"ly\")\n        last_part = adv.split('ly')[-1]\n        # Find the position of the last part in the original text\n        last_part_pos = text.find(last_part)\n        # Print the adverb and its position\n        print(adv, last_part_pos)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create an empty list to store the positions of the matches\n    positions = []\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a list of tuples containing the matches and their positions\n    return list(zip(matches, positions))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regex pattern for finding adverbs\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and return the first adverb with its position\n    for match in matches:\n        return match[0], text.find(match[0])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n\n    # Use the re.findall() method to find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Loop through all the matches and add their positions to the adverb_positions list\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        adverb_positions.append((start_pos, end_pos))\n\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(adverb_pattern, text)\n\n    # Return a list of tuples containing the positions and adverbs\n    return [(m.start(), m.group()) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b\\w+(ly)\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate through the matches and extract the positions of the first adverb ending with \"ly\"\n    for match in matches:\n        # Extract the position of the first adverb ending with \"ly\"\n        first_ly_pos = match.start()\n        # Extract the position of the second word after the \"ly\"\n        second_word_pos = first_ly_pos + len(match.group(1))\n        # Extract the text between the positions\n        adverb = text[first_ly_pos:second_word_pos]\n        # Print the position and text of the first adverb ending with \"ly\"\n        print(f'Adverb \"{adverb}\" found at position {first_ly_pos}.')\n\n    # If no adverbs are found, print a message\n    if not matches:\n        print('No adverbs found.')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and print out the adverb and its position in the text\n    for i, match in enumerate(matches):\n        print(f'{match} found at position {i+1}: \"{text[match.start():match.end()]}\".')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regex pattern for finding adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    # use re.findall to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store positions of adverbs\n    positions = []\n    # iterate through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n    # return the positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(\\w+\\s?ly)\\b'\n    \n    # Find all the occurrences of the pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb and its position in the string\n    return [(match, text[match.start():match.end()].strip()) for match in matches]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Remove and return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Pop and return the n most expensive items from the heap\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items, return the n most expensive items.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for i in range(n):\n        # Add the first n items to the heap\n        heapq.heappush(heap, items[i])\n\n    # Iterate through the remaining items and update the heap\n    for i in range(n, len(items)):\n        # Remove the smallest item from the heap and replace it with the current item\n        heapq.heappop(heap)\n        heapq.heappush(heap, items[i])\n\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # create a min heap of the first n items\n    min_heap = heapq.nsmallest(n, items)\n    # create an empty list to store the n most expensive items\n    result = []\n    # pop the first n items from the min heap and add them to the result list\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Initialize an empty heap\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate over the remaining items and add them to the heap\n    for item in items[n:]:\n        # If the current item is more expensive than the smallest item in the heap,\n        # remove the smallest item from the heap and add the current item to the heap\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a min heap of size n\n    heap = []\n    min_heap = heapq.nsmallest(n, items)\n\n    # Loop through the remaining items and update the min heap\n    for item in items:\n        if item not in min_heap:\n            heapq.heappush(min_heap, item)\n        elif item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the items and insert them into the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a dataset of items and the number n of items to be found\n    and returns the n most expensive items in the dataset.\n    '''\n    # Create a min heap to keep track of the n most expensive items\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # Iterate through the dataset of items and add each item to the min heap if its price is less than or equal to the price of the top item in the heap\n    for item in items:\n        if item[1] <= min_heap[0][1]:\n            heapq.heappushpop(min_heap, item)\n    \n    # Return the n most expensive items from the min heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return []\n    return l[:n] + [l[n]] + split_Arr(l[n:], n+1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        print(\"Error: n is too large\")\n        return None\n    \n    mid = n // 2\n    first_part = l[:mid]\n    second_part = l[mid:]\n    \n    l = first_part + second_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if len(l) <= n:\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # add part1 to the end of part2\n    l = part2 + part1\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n    else:\n        mid = n // 2\n        return l[:mid] + [l[mid]] + l[mid+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Create a new list to store the first part of the list\n    first_part = l[:n]\n    # Concatenate the two lists to get the final result\n    return first_part + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if not nums:\n        return None\n    \n    # Find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least two elements\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between maximum and minimum values\n    diff = max_num - min_num\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_val = max(nums)\n    min_val = min(nums)\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"The list should have at least two elements\")\n        return None\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return None\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n\n    # return the difference between the largest and smallest values\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = int(i**0.5)\n        if i == square**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Find the number of perfect squares between a and b\n    perfect_squares = 0\n    for i in range(int(a**0.5), int(b**0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            perfect_squares += 1\n\n    # Return the number of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through the numbers between a and b, inclusive\n    for i in range(a, b+1):\n        # calculate the square of the number and check if it is equal to i\n        if i == i**2:\n            # if it is, return the number as it is a perfect square\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    squares = []\n\n    for i in range(a, b+1):\n        square = int(i ** 0.5) ** 2\n        if square == i:\n            squares.append(square)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to keep track of the squares found\n    perfect_squares_a = []\n    perfect_squares_b = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is between a and b\n        if i*i >= a and i*i <= b:\n            # If it is, add the square to the list of perfect squares for the smaller number\n            if i < a:\n                perfect_squares_a.append(i*i)\n            else:\n                perfect_squares_b.append(i*i)\n\n    # Return the lists of perfect squares for the two numbers\n    return perfect_squares_a, perfect_squares_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    squares = []\n    for i in range(a, b+1):\n        square = i**2\n        if square == int(square):\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        print(\"Both numbers should be non-negative.\")\n        return None\n    elif a == 0 and b == 0:\n        return [0]\n    elif a == 0:\n        return [int(b**0.5)]\n    elif b == 0:\n        return [int(a**0.5)]\n    else:\n        for i in range(int(a**0.5)+1, int(b**0.5)+1):\n            if a%i == 0 and b%i == 0:\n                return [i]\n        return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == sum(map(int, str(i))):\n            perfect_squares.append(i)\n    return perfect_squares\n\nprint(perfect_squares(1, 10))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through each number between a and b and check if it is a perfect square\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = i*i\n        if square == i:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    return r*cmath.cos(phi), r*cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in two parameters, r and theta, which represent the\n    magnitude and angle of a complex number. The function converts the \n    complex number to its rectangular coordinates and returns them as a tuple.\n    '''\n\n    # Convert the angle from radians to degrees\n    theta = cmath.phase(theta) * 180 / cmath.pi\n\n    # Calculate the real and imaginary parts of the complex number\n    real = r * cmath.cos(theta)\n    imag = r * cmath.sin(theta)\n\n    # Return the rectangular coordinates as a tuple\n    return (real, imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements to swap.\")\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the list has only one element, return the list\n    if len(newList) <= 1:\n        return newList\n    \n    # get the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # create a new list with the first element at the end and the last element at the beginning\n    newList = [last_element] + newList[:-1]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length < 2:\n        print(\"The list must have at least two elements to swap them.\")\n        return\n    \n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.pop()\n    newList.insert(0, newList.pop())\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements\"\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and swaps the first and last elements.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty or contains only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # interchange the first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least two elements\n    if length < 2:\n        print(\"Error: List has less than two elements.\")\n        return\n\n    # Interchange the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    # Print the new list\n    print(\"New List:\", newList)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # base case\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) * n // (k+1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return (n * (n-1)) // 2"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the range of k\n    for i in range(k):\n        # Calculate the binomial coefficient\n        coefficient = (n+1) * (i+1) // (k-i+1)\n\n        # Add the coefficient to the sum\n        sum += coefficient\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The total number of elements in the sequence.\n    k (int): The number of consecutive elements that are used to compute the sum.\n\n    Returns:\n    (float): The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    total_coeff = 0\n    for i in range(1,k+1):\n        coeff *= (n-i+1)\n        total_coeff += coeff\n    return total_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    if n<k:\n        print(\"n must be greater than or equal to k\")\n        return\n    if k==0 or k==n:\n        return 1\n    if k==1 or k==n-1:\n        return 1\n    for i in range(k,n+1):\n        sum += i*(n-i+1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of binomial coefficients to zero\n    sum_binomial = 0\n\n    # Initialize the product of binomial coefficients to one\n    product_binomial = 1\n\n    # Loop through each binomial coefficient\n    for i in range(1, k+1):\n\n        # Calculate the binomial coefficient and its product\n        binomial = (n+1)/(i+1)\n        product_binomial = product_binomial * binomial\n\n        # Add the binomial coefficient to the sum of binomial coefficients\n        sum_binomial = sum_binomial + binomial\n\n    # Return the sum of binomial coefficients\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0:\n        return None\n\n    if k > n:\n        return 0\n\n    return (n * k) // (k + 1) + binomial_Coeff(n - 1, k - 1)\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove all leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Removing leading zeros from IP address\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # define regex pattern for ip address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n\n    # check if the ip address matches the pattern\n    if re.match(pattern, ip):\n        # remove leading zeroes from ip address\n        ip = ip.lstrip('0')\n        # check if the ip address is still valid\n        if re.match(pattern, ip):\n            return ip\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0{1,3})', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes using regex\n    ip = re.sub(r'^0+([1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}$', r'\\1\\3', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match all zeros in an IP address\n    pattern = re.compile(r'\\b0+\\b')\n    # Use the pattern to find all the zeros in the IP address\n    zeros = pattern.findall(ip)\n    # Iterate over the found zeros and replace them with an empty string\n    for zero in zeros:\n        ip = ip.replace(zero, '')\n    # Return the updated IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Convert the IP address to a list of integers\n    ip_list = list(map(int, ip.split('.')))\n    \n    # Remove leading zeroes from each integer in the list\n    for i in range(len(ip_list)):\n        while ip_list[i] == 0:\n            ip_list.pop(0)\n    \n    # Convert the list of integers back to an IP address string\n    ip_str = '.'.join(map(str, ip_list))\n    \n    return ip_str"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) >= 2:\n        if list1[0] % 2 == 0:\n            first_even = list1[0]\n            first_odd = list1[1]\n            return first_even - first_odd\n        else:\n            first_even = list1[0]\n            first_odd = list1[1]\n            return first_odd - first_even\n    else:\n        return \"List should have at least 2 elements\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Initialize two variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through each element in the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    # Return the difference of the even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # define variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    # loop through the list to find even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        elif odd_num is None:\n            odd_num = num\n        else:\n            break\n    # calculate the difference between even and odd numbers and return the result\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        print(\"List is empty\")\n        return\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2!= 0:\n            first_odd = num\n    if first_even is None or first_odd is None:\n        print(\"List does not contain even and odd numbers\")\n        return\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and finds the difference of the first even and first odd numbers of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n        elif num % 2 == 0 and even_num is not None:\n            return num - even_num\n        elif num % 2!= 0 and odd_num is not None:\n            return odd_num - num\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least 2 elements\"\n    \n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    even_num = None\n    odd_num = None\n\n    # loop through the list\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n\n    # check if both even and odd numbers are not None\n    if even_num is not None and odd_num is not None:\n        # calculate the difference\n        diff = even_num - odd_num\n        # return the difference\n        return diff\n    else:\n        # if either even or odd number is None, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    # Iterate through the list\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = even - num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = odd - num\n    # Calculate and return the difference between even and odd\n    if even is not None and odd is not None:\n        return even - odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a counter for swaps\n    swap_count = 0\n\n    # Compare each bit in the binary numbers\n    while num1!= num2:\n        # If the bits are different, swap the bits and increment the swap count\n        if num1 ^ num2 & 1:\n            num1 = num1 ^ (num1 ^ num2)\n            num2 = num2 ^ (num1 ^ num2)\n            num1 = num1 ^ (num1 ^ num2)\n            swap_count += 1\n        # Otherwise, no swap is required\n        else:\n            num1 = num1 >> 1\n            num2 = num2 >> 1\n\n    # Return the swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the number of swaps and the carry over\n    swapCount = 0\n    carryOver = 0\n\n    # Iterate through the binary digits of the two numbers\n    for i in range(31, -1, -1):\n        # Get the current binary digits of the two numbers\n        bit1 = num1 & 1\n        bit2 = num2 & 1\n\n        # If the current bits are different, swap them and increment the swap count\n        if bit1!= bit2:\n            num1 = (num1 >> 1) | (num2 << 1)\n            num2 = (num2 >> 1) | (num1 << 1)\n            swapCount += 1\n\n        # If the current bits are the same, check if there is a carry over from the previous iteration\n        else:\n            if carryOver == 1:\n                num1 = (num1 >> 1) | (num2 << 1)\n                num2 = (num2 >> 1) | (num1 << 1)\n                swapCount += 1\n\n            carryOver = 0\n\n        # Move on to the next binary digit\n        num1 = num1 >> 1\n        num2 = num2 >> 1\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return swapCount"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Args:\n        str1 (str): A binary number represented as a string.\n        str2 (str): A binary number represented as a string.\n\n    Returns:\n        int: The minimum number of swaps required to convert one binary number to another.\n\n    \"\"\"\n\n    # Convert the binary strings to integer\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum swaps count to infinity\n    min_swaps = float('inf')\n\n    # Iterate over the binary digits of num1\n    for i in range(len(str1)):\n\n        # Check if the digit is a 1\n        if num1 & (1 << i):\n\n            # Find the position of the 1 in num2\n            pos = str1.index('1') - i\n\n            # Check if the digit in num2 is also a 1\n            if num2 & (1 << pos):\n\n                # Swap the positions of the digits and count the number of swaps\n                swap_count = (len(str1) - i) // 2\n                min_swaps = min(min_swaps, swap_count)\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*(n+1) for i in range(n+1)]\n\n    # base case: if strings are same, no swaps needed\n    if str1 == str2:\n        return 0\n\n    # fill in the first row\n    for i in range(n+1):\n        if i <= len(str1):\n            dp[i][0] = i\n\n    # fill in the first column\n    for i in range(n+1):\n        if i <= len(str2):\n            dp[0][i] = i\n\n    # fill in the rest of the table\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    # backtrack to find the minimum number of swaps required\n    i = n\n    j = n\n    min_swaps = dp[i][j]\n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] < dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one to the other.\n    \"\"\"\n    # Convert the two binary strings into lists\n    list1 = list(bin(int(str1, 2))[2:])\n    list2 = list(bin(int(str2, 2))[2:])\n\n    # Calculate the length of the longer binary string\n    maxLength = max(len(list1), len(list2))\n\n    # Initialize two variables to store the swaps required and the current position\n    swaps = 0\n    current = 0\n\n    # Loop until the two lists are of equal length\n    while current < maxLength:\n\n        # If the two lists are equal, there is no swap required\n        if list1[current] == list2[current]:\n            current += 1\n            continue\n\n        # If the first list has a 1 at the current position and the second list has a 0, swap the two lists\n        if list1[current] == '1' and list2[current] == '0':\n            temp = list1[current]\n            list1[current] = list2[current]\n            list2[current] = temp\n            swaps += 1\n\n        # If the first list has a 0 at the current position and the second list has a 1, swap the two lists\n        elif list1[current] == '0' and list2[current] == '1':\n            temp = list1[current]\n            list1[current] = list2[current]\n            list2[current] = temp\n            swaps += 1\n\n        # If the first list has a 1 at the current position and the second list has a 1, compare the bits\n        elif list1[current] == '1' and list2[current] == '1':\n            if int(list1[current]) < int(list2[current]):\n                temp = list1[current]\n                list1[current] = list2[current]\n                list2[current] = temp\n                swaps += 1\n            current += 1\n\n    # Return the minimum number of swaps required to convert the two binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Find the number of bits in each number\n    bit_count1 = len(bin(num1)[2:])\n    bit_count2 = len(bin(num2)[2:])\n\n    # Calculate the minimum number of swaps required\n    min_swaps = bit_count1 - bit_count2\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the strings to lists of binary digits\n    digits1 = [int(digit) for digit in str1]\n    digits2 = [int(digit) for digit in str2]\n    \n    # calculate the lengths of the two binary strings\n    len1 = len(digits1)\n    len2 = len(digits2)\n    \n    # check if the two binary strings have the same length\n    if len1!= len2:\n        raise ValueError(\"Both binary strings must have the same length.\")\n    \n    # initialize a counter to keep track of the number of swaps required\n    swaps = 0\n    \n    # iterate over each pair of digits in the two binary strings\n    for i in range(len1):\n        # if the digits are different, swap the digits\n        if digits1[i]!= digits2[i]:\n            # check if the digits are in the same position in both strings\n            if digits1.count(digits1[i]) == len(str1) - digits1[i] - 1 and digits2.count(digits2[i]) == len(str2) - digits2[i] - 1:\n                # if they are, increment the counter\n                swaps += 1\n                \n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through each bit position and check if swapping that bit will make num1 smaller\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Swap the i-th bit of num1 with num2\n            temp = num1 & ~(1 << i)\n            temp |= (num2 & (1 << i))\n\n            # Check if num1 is smaller after swapping\n            if temp < num1:\n                # If so, update min_swaps\n                min_swaps = min(min_swaps, i)\n\n            # Reset num1 and num2 to the temporary values\n            num1 = temp\n            num2 = temp\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the length of both strings are same\n    if len(str1)!= len(str2):\n        return -1\n\n    # Initialize the length of the strings\n    length = len(str1)\n\n    # Initialize a list to store the count of each character in str1\n    count = [0] * 256\n\n    # Iterate through each character in str1\n    for char in str1:\n        # Increment the count of the character in str1\n        count[ord(char)] += 1\n\n    # Initialize a list to store the count of each character in str2\n    count2 = [0] * 256\n\n    # Iterate through each character in str2\n    for char in str2:\n        # Increment the count of the character in str2\n        count2[ord(char)] += 1\n\n    # Initialize a list to store the count of common characters\n    common = [0] * 256\n\n    # Iterate through each character in str1\n    for char in str1:\n        # Check if the character is also present in str2\n        if ord(char) in count2:\n            # Increment the common count\n            common[ord(char)] += 1\n\n    # Initialize the count of swaps required\n    swaps = 0\n\n    # Iterate through each character in str2\n    for i in range(256):\n        # If the count of the current character in str2 is less than the count of the current character in str1\n        if count2[i] < count[i]:\n            # Increment the swap count\n            swaps += min(count[i], count2[i])\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1 > n2:\n        str1, str2 = str2, str1\n        n1, n2 = n2, n1\n\n    dp = [[float('inf')] * (n2 + 1) for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        dp[i][0] = i\n\n    for j in range(1, n2 + 1):\n        dp[0][j] = j\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if str1[i - 1] == '1' and str2[j - 1] == '0':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n            elif str1[i - 1] == '0' and str2[j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[n1][n2]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Find the size of each element in the tuple\n    element_sizes = []\n    for element in tuple_list:\n        element_sizes.append(sys.getsizeof(element))\n\n    # Find the total size of the tuple\n    total_size = sum(element_sizes)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Loop through each tuple in the list\n    for i in tuple_list:\n        # Add the size of each tuple to a variable\n        size = sys.getsizeof(i)\n        # Add the size of the variable to the total size\n        total_size += size\n    # Return the total size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size_in_bytes = 0\n    for i in range(len(tuple_list)):\n        size_in_bytes += sys.getsizeof(tuple_list[i])\n\n    return size_in_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize size to 0\n    size = 0\n    \n    # iterate over each tuple in the list\n    for tup in tuple_list:\n        # calculate the size of the tuple in bytes\n        tup_size = sys.getsizeof(tup)\n        \n        # add the size of the tuple to the total size\n        size += tup_size\n    \n    # return the total size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    # Convert the size to bytes\n    size_in_bytes = size * sys.getsizeof(tuple_list[0])\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element from two sorted arrays.\n\n    Args:\n    - arr1: a list of elements to be sorted\n    - arr2: a list of elements to be sorted\n    - k: the index of the element to find\n\n    Returns:\n    - The kth smallest element from both input arrays.\n    \"\"\"\n\n    # Combine the two arrays into a single list\n    combined_arr = arr1 + arr2\n\n    # Use a binary search algorithm to find the kth smallest element\n    low = 0\n    high = len(combined_arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if combined_arr[mid] == arr1[mid]:\n            # arr1[mid] is in arr1, move to the right\n            low = mid + 1\n        elif combined_arr[mid] == arr2[mid]:\n            # arr2[mid] is in arr2, move to the left\n            high = mid - 1\n        else:\n            # arr1[mid] is smaller, move to the right\n            high = mid - 1\n\n    # The kth smallest element is in combined_arr[low].\n    return combined_arr[low]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    total_elements = n1 + n2\n\n    # if k is less than the sum of the two arrays, it cannot be in the merged array\n    if k < total_elements:\n        return None\n\n    # initialize two pointers for both arrays\n    i, j = 0, 0\n    # initialize a variable to keep track of the current index in the merged array\n    index = 0\n\n    # while there are still elements in both arrays to merge and the index is less than k\n    while i < n1 and j < n2 and index < k:\n        # compare the current elements of both arrays and update the index if necessary\n        if arr1[i] < arr2[j]:\n            arr1[i], arr2[j], index = arr1[i], arr2[j], index + 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            arr1[i], arr2[j], index = arr1[i], arr2[j], index + 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    # if there are still elements in arr1, they need to be added to the merged array\n    if i < n1:\n        for _ in range(i, n1):\n            arr1[index], arr2[j], index = arr1[i], arr2[j], index + 1\n            i += 1\n\n    # if there are still elements in arr2, they need to be added to the merged array\n    if j < n2:\n        for _ in range(j, n2):\n            arr1[index], arr2[j], index = arr1[i], arr2[j], index + 1\n            j += 1\n\n    # return the kth element in the merged array\n    return arr1[index - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a k value as input and returns the kth smallest element from both arrays.\n    \"\"\"\n    # Initialize two pointers for each array\n    i = j = 0\n\n    # Initialize kth element as -1\n    kth_elem = -1\n\n    # Loop until k elements are found\n    while i < len(arr1) and j < len(arr2):\n        # If the current element in arr1 is smaller than the current element in arr2, increment i pointer\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element in arr2 is smaller than the current element in arr1, increment j pointer\n        else:\n            j += 1\n\n        # If we have found k elements, break out of the loop\n        if kth_elem == -1 and i >= k:\n            kth_elem = arr1[i-1]\n        elif kth_elem == -1 and j >= k:\n            kth_elem = arr2[j-1]\n        elif kth_elem!= -1 and (i == len(arr1) or j == len(arr2)):\n            break\n\n    # Return the kth smallest element from both arrays\n    return kth_elem"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr1[i], arr2[j]\n            else:\n                k -= 1\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    min_arr = []\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                min_arr.append(arr1[i])\n                k -= 1\n            i += 1\n        else:\n            if k == 0:\n                min_arr.append(arr2[j])\n                k -= 1\n            j += 1\n            \n    return min_arr"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth smallest element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): First sorted array.\n        arr2 (list): Second sorted array.\n        k (int): The kth smallest element to find.\n\n    Returns:\n        int: The kth smallest element.\n    \"\"\"\n    m = len(arr1)\n    n = len(arr2)\n\n    i = j = 0\n    kth = float('-inf')\n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            if arr1[i] < kth:\n                kth = arr1[i]\n            i += 1\n        elif arr2[j] < arr1[i]:\n            if arr2[j] < kth:\n                kth = arr2[j]\n            j += 1\n        else:\n            kth = arr1[i]\n            i += 1\n            j += 1\n\n    while i < m:\n        if arr1[i] < kth:\n            kth = arr1[i]\n        i += 1\n\n    while j < n:\n        if arr2[j] < kth:\n            kth = arr2[j]\n        j += 1\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == len(arr1):\n            return arr2[j-1]\n        if j == len(arr2):\n            return arr1[i-1]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number = str(number)\n\n    # Initialize a variable to hold the sum of the cube of each digit\n    sum_of_cubes = 0\n\n    # Loop through each digit of the number\n    for digit in number:\n        # Convert the digit to an integer and square it\n        cube = int(digit) ** 3\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube\n\n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    Function to check whether the given number is Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    power = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** power\n    return num == sum\n\nnum = int(input(\"Enter a number: \"))\nif is_armstrong_number(num):\n    print(num, \"is an Armstrong number.\")\nelse:\n    print(num, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is an Armstrong number,\n    False otherwise.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        digits = [int(digit) for digit in str(number)]\n        power = len(digits)\n        total = sum(digit ** power for digit in digits)\n        return number == total\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    '''\n    Check if a number is an Armstrong number or not.\n    '''\n    n = num\n    temp = num\n    power = 0\n    while temp > 0:\n        digit = temp % 10\n        power += digit ** 3\n        temp //= 10\n    if n == power:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a list of digits\n    num_list = [int(digit) for digit in str(number)]\n    # Calculate the sum of the cubes of the digits in the list\n    cube_sum = sum([digit ** 3 for digit in num_list])\n    # Compare the calculated sum with the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to store the sum of the cubes of each digit of the number\n    sum_of_cubes = 0\n    \n    # loop through each digit of the number and compute the cube of each digit\n    for digit in str(number):\n        cube = int(digit) ** 3\n        sum_of_cubes += cube\n    \n    # check if the sum of the cubes of each digit is equal to the original number\n    if sum_of_cubes == number:\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def helper(num):\n        '''\n        Helper function to calculate the sum of digits of a number.\n        '''\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit ** 3\n            num //= 10\n        return sum\n\n    # Calculate the sum of digits of the given number\n    num_digits = len(str(number))\n    sum_of_digits = helper(number)\n\n    # Check if the sum of digits of the number is equal to the original number\n    if sum_of_digits == number:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if len(str(number))!= len(set(str(number))):\n        return False\n    else:\n        num_digits = len(str(number))\n        power = 1\n        total = 0\n        for digit in str(number):\n            total += int(digit)**power\n            power += 1\n        if total == number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an armstrong number, else False.\n    \"\"\"\n    n = number\n    ar = 0\n    while n > 0:\n        ar += int(n % 10) ** 3\n        n //= 10\n    if n == ar:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    average = sum(sum_list) / number\n    return sum_list, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    avg = total / count\n    return total, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # printing the message for the user\n    print(\"Enter the number of natural numbers you want to find the sum and average of:\")\n\n    # taking input from the user\n    num = int(input())\n\n    # looping through the natural numbers from 1 to n\n    for i in range(1, num+1):\n        # adding each number to the sum\n        sum += i\n        # incrementing the count\n        count += 1\n\n    # calculating the average\n    average = sum/count\n\n    # printing the sum and average of the first n natural numbers\n    print(\"Sum of the first\", num, \"natural numbers is:\", sum)\n    print(\"Average of the first\", num, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    sum_num = 0\n    count = 0\n\n    while count < number:\n        sum_num += count\n        count += 1\n    \n    avg_num = sum_num / number\n\n    return sum_num, avg_num"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes a number as input and returns a tuple containing the sum and the average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\nsum_val, avg_val = sum_average(n)\nprint(\"Sum of first\", n, \"natural numbers is:\", sum_val)\nprint(\"Average of first\", n, \"natural numbers is:\", avg_val)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # Iterate over each character in the string again\n    for char in str1:\n        # If the character has a frequency greater than 1, return it as the first repeated character\n        if freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # initialize an empty dictionary to store the frequency of each character\n    freq = {}\n    # iterate through the string\n    for char in str1:\n        # if the character is already in the dictionary, return the character and its frequency\n        if char in freq:\n            return char, freq[char]\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # if the loop completes without finding a repeated character, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first character that appears more than once in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    \n    return 'No repeated character found.'"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids\n\ndef is_lucid(n):\n    '''\n    Determine if a given integer is a lucid number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        lucid_nums.append(i)\n        for j in range(i, n+1, i):\n            lucid_nums.append(j)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    i = 1\n    while True:\n        if i <= n:\n            lucid_nums.append(i)\n            i += 1\n        else:\n            break\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        if is_lucid(current_number):\n            lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Determine whether a given number is a lucid number or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(2, n+1):\n        lucid_num = i\n        while lucid_num <= n and lucid_num % 2 == 0:\n            lucid_num += 1\n        if lucid_num <= n:\n            lucid_list.append(lucid_num)\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_list.append(i)\n    return ludic_list\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    A lucid number is a positive integer that is the sum of its digits raised to the power of their positions.\n    For example, 123 has a lucid number of 1 * 1 * 1 + 2 * 2 * 2 + 3 * 3 * 3 = 21.\n    '''\n    digit_sum = 0\n    for digit in str(n):\n        digit_sum += int(digit) ** (len(str(n)) - int(digit))\n    return digit_sum == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Initialize a flag to indicate if n is a lucid number\n    is_lucid = True\n\n    # Loop through all numbers between 1 and n-1\n    for i in range(1, n):\n        # Initialize a flag to indicate if i is a lucid number\n        is_lucid = True\n\n        # Loop through all numbers between 1 and i-1 to check if i is a lucid number\n        for j in range(1, i):\n            # If i divides j, i is not a lucid number\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If i is a lucid number, add it to the lucid_numbers list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        if all(j <= i for j in lucid_numbers):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words together with spaces\n    result =''.join(reversed_words)\n    # return the result\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words\n    words.reverse()\n    # join the reversed words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Split the string into words and reverse each word\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back together with spaces\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into individual words\n    words.reverse() # reverse the order of the words\n    return''.join(words) # join the words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n\n    # join the reversed words into a string with spaces\n    reversed_s =''.join(reversed_words)\n\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    reversed_words = words[::-1] # reverse the order of the words\n    return''.join(reversed_words) # join the words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n\n    # loop through the words and reverse them\n    for i in range(len(words)//2):\n        # swap the first and last characters of each word\n        words[i], words[-1-i] = words[-1-i], words[i]\n\n    # join the words back into a string and return\n    return \" \".join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n\n    # Check for divisors between 5 and the square root of the number\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0 and is_prime(i):\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num % 2 == 0:\n        if num == 2:\n            return False\n        else:\n            return True\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the given number is 2\n    elif num == 2:\n        return True\n    \n    # Check if the given number is odd and greater than 2\n    else:\n        # Loop through all odd numbers less than or equal to the square root of the given number\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        \n        # If the loop completes without returning False, the number is prime\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi / 180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search a string for a regex pattern. The function returns a tuple containing the matching subtring, a start index, and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        start, end = matches[0].span()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        match = matches.group()\n        start = match.start()\n        end = match.end()\n        return match, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a text and a regex pattern as inputs and returns a tuple containing the matching substring, start index, and end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns a tuple containing the matching substring, start index, and end index.\n    \"\"\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches a string for a regex pattern and returns the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        results.append((substring, start, end))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [0, 1]\n    for i in range(2, n):\n        bell_seq.append(bell_seq[i-1] + bell_seq[i-2])\n    return bell_seq[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n\n    # first bell number is 1\n    if n == 1:\n        return 1\n\n    # nth bell number is the sum of the first n-1 bell numbers\n    else:\n        return bell_Number(n-1) + n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) / (2 * n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number using the recurrence relation:\n    B(n) = n * B(n-1) - (n-1) * B(n-2)\n    \n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * bell_Number(n-1) - (n-1) * bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n    elif n == 0:\n        return 0\n    else:\n        return 1 + bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    for i in range(L):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    count = 0\n    for i in range(len(list1)):\n        if count!= k:\n            new_list.append(list1[i])\n        count += 1\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    n = len(list1)\n    # Find the index of the k'th element\n    k = L - 1\n    # Loop through the list and keep track of the index of the first k elements\n    index = 0\n    for i in range(n):\n        # If we've found the k'th element, remove it from the list\n        if i == k:\n            list1.pop(index)\n            break\n        # Increment the index\n        index += 1\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [x for x in list1[1:]]\n    elif L > 1:\n        for i in range(L - 1):\n            list1.pop(0)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list2 = list1.copy()  # create a copy of the original list\n    k = L-1  # set the index of the element to be removed to the last index in the list\n    list2.pop(k)  # remove the element at the index k from the list\n    return list2  # return the modified list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    if len(test_list[0]) <= N:\n        return \"Error: N is greater than the number of columns in the matrix.\"\n\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the number of rows in the matrix\n    n = len(test_list)\n\n    # Calculate the index of then'th column\n    nth_col_index = N - 1\n\n    # Initialize variables to store the max and the nth column\n    max_val = test_list[0][nth_col_index]\n    nth_col = [row[nth_col_index] for row in test_list]\n\n    # Iterate through the matrix and calculate the nth column\n    for i in range(1, n):\n        if test_list[i][nth_col_index] > max_val:\n            max_val = test_list[i][nth_col_index]\n            nth_col = [row[nth_col_index] for row in test_list[:i] + test_list[i:]]\n\n    return max(nth_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the max of then'th column.\n    \"\"\"\n    if not matrix:\n        return None\n    \n    # find the maximum value of then'th column\n    max_val = float('-inf')\n    for row in matrix:\n        if N >= len(row):\n            raise ValueError(\"Column index out of range\")\n        max_val = max(max_val, row[N-1])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    count = 0\n    for row in test_list:\n        if count == N:\n            return max(row)\n        count += 1\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    max_col = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_col = i\n        if max_val < test_list[i][max_col]:\n            max_val = test_list[i][max_col]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if N-1 < len(row):\n            max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list[0]) < N:\n        return \"Error: The matrix has less than N columns.\"\n    else:\n        max_val = 0\n        for row in test_list:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n        return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        if len(i) == 2:\n            merged_list.append([i[0], i[1]])\n        else:\n            print(\"Error: The sublist has less than two elements.\")\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Extract the value from each tuple\n        value = tup[0]\n\n        # Add the value to the cumulative sum\n        cum_sum += value\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum as 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to zero\n    cumulative_sum = 0\n    # iterate through each value in the list\n    for value in test_list:\n        # add the current value to the cumulative sum\n        cumulative_sum += value\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_of_tup = sum(tup)\n        averages.append(sum_of_tup / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize a list to store the averages\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for t in nums:\n        # Calculate the average value of the tuple\n        avg = sum(t)/len(t)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        avg = total / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        averages.append(sum/len(i))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store average values\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # loop through each element in the tuple and calculate the sum of its elements\n        sum_of_elements = 0\n        for num in tup:\n            sum_of_elements += num\n        # calculate the average of the sum of elements and append it to the avg_list\n        avg_list.append(sum_of_elements / len(tup))\n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(num)\n    return [x/len(nums) for x in total]"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length!\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs element-wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i % j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples should have same length'\n    \n    # perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    # Sort the given list of steps in ascending order\n    steps.sort()\n\n    # Initialize two pointers - start and end - to the first and last elements of the list respectively\n    start = 0\n    end = len(steps) - 1\n\n    # Initialize a variable count to 0\n    count = 0\n\n    # Repeat the following steps until end is less than or equal to start\n    while end >= start:\n        # Calculate the length of the segment connecting (start[0], start[1]) and (end[0], end[1])\n        length = ((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2) ** 0.5\n\n        # If the length of the segment is greater than or equal to d, increment count by 1\n        if length >= d:\n            count += 1\n\n        # Update start to be the element at the next index after end\n        start = steps.index(end) + 1\n\n        # If start is already greater than end, return count\n        if start > end:\n            return count\n\n        # Move end to the element at the next index after start\n        end = steps.index(start) + 1\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n\n    # Move downward from point (0, 0)\n    while j <= d:\n        # Check if we have reached point (d, 0)\n        if j == d:\n            return count + 1\n\n        # Move right\n        j += 1\n\n        # Move down\n        i += 1\n        count += 1\n\n    # If we reach here, it means we cannot reach point (d, 0)\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps == 1:\n        return 1\n    else:\n        n = 0\n        i = 1\n        while i <= steps:\n            n += 1\n            if i > 0:\n                i += 1\n            if i > d:\n                i -= d\n        return n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the steps is greater than the distance\n    if steps > d:\n        return \"Invalid Input\"\n    \n    # Create a 2d list to store the intermediate distances\n    dist = [[0 for i in range(steps+1)] for j in range(d+1)]\n\n    # Initialize the first row\n    for i in range(1, steps+1):\n        dist[0][i] = abs(i - d)\n    \n    # Fill the remaining rows\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            dist[i][j] = min(dist[i-1][j], dist[i][j-1], dist[i-1][j-1]) + abs(i - j)\n\n    # Return the minimum number of jumps required\n    return dist[d][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    x, y = 0, 0\n    jumps = 0\n\n    # loop through all the steps\n    for i in range(steps):\n        # calculate the next position\n        x += d\n        y = -1\n\n        # check if the next position is valid (not out of bounds)\n        if 0 <= x < 20 and 0 <= y < 20:\n            jumps += 1\n        else:\n            # if it's not valid, reset the position\n            x, y = 0, 0\n\n    # return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    :param steps: the number of steps required to reach the point (d, 0) from origin\n    :param d: the desired distance from the origin\n    :return: the minimum number of jumps required to reach the point (d, 0) from origin\n    \"\"\"\n    if steps <= d:\n        return steps\n    else:\n        return min_Jumps(steps - 1, d) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jumps = 0\n    current_jumps = 0\n    current_point = 0\n\n    while current_point < len(steps) - 1:\n        current_jumps += 1\n        current_point += steps[current_point]\n        if current_point == len(steps) - 1 and steps[current_point] >= d:\n            return max_jumps\n        max_jumps = max(max_jumps, current_jumps)\n\n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    count = 0\n    x, y = 0, 0\n    current_steps = 0\n\n    # Loop until we reach the destination\n    while current_steps < steps:\n        # Check if we can reach the destination\n        if x == d and y == 0:\n            return count + 1\n\n        # Check if we can reach the destination if we move right\n        if y == 0:\n            new_x = x + 1\n            if new_x <= d:\n                count += 1\n        # Check if we can reach the destination if we move down\n        elif x == 0:\n            new_y = y - 1\n            if new_y >= 0:\n                count += 1\n        # Check if we can reach the destination if we move up\n        elif y == d:\n            new_y = y + 1\n            if new_y <= d:\n                count += 1\n        # Check if we can reach the destination if we move left\n        else:\n            new_x = x - 1\n            new_y = y - 1\n            if new_x >= 0 and new_y >= 0:\n                count += 1\n\n        # Update the variables\n        current_steps += 1\n        x, y = new_x, new_y\n\n    # If we reach here, it means we haven't reached the destination, so return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables for number of steps and distance\n    steps = steps\n    d = d\n    \n    # Initialize variables for current point\n    x = 0\n    y = 0\n    \n    # Initialize variable for number of jumps\n    jumps = 0\n    \n    # Loop through all possible points from (0, 0) to (steps, 0)\n    for i in range(1, steps+1):\n        # Calculate the next point\n        next_x = x + i\n        next_y = y\n        \n        # Check if the next point is at the bottom of the plane\n        if next_y == 0:\n            # If it is, increment the number of jumps and move to the next point\n            jumps += 1\n            x = next_x\n            y = next_y\n            \n        # If the next point is at the point of interest\n        elif next_x == d and next_y == 0:\n            # If it is, return the number of jumps\n            return jumps\n            \n        # If the next point is not at the bottom of the plane and not at the point of interest\n        else:\n            # Move to the next point\n            x = next_x\n            y = next_y\n            \n    # If the loop completes without finding the point of interest, return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_x = 0\n    current_y = 0\n    \n    while current_y < d and steps > 0:\n        current_x += 1\n        current_y += 1\n        steps -= 1\n        jumps += 1\n    \n    if current_y == d:\n        return jumps\n    \n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length.')\n    \n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the lists are the same\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length\")\n        return\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Divide each element of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists have different length\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    This function takes two lists as input and returns a new list that contains the element-wise division of the two input lists.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of the input lists\n    for i in range(len(nums1)):\n        # Perform element-wise division\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns their element-wise division.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables for counting and moving numbers\n    num_count = 0\n    num_index = 0\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is a number, move it to the end of the string and increment the counter\n        if test_str[i].isdigit():\n            test_str = test_str[:num_index] + test_str[num_index:i] + test_str[i:num_index] + test_str[num_index:num_count] + test_str[i:num_index+num_count]\n            num_index += 1\n            num_count += 1\n        # If the character is not a number, increment the index\n        else:\n            num_index += 1\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    number_flag = False\n    result_str = ''\n    # loop through the string\n    for char in test_str:\n        # if the character is a number, set the flag\n        if char.isdigit():\n            number_flag = True\n        # if the character is not a number, move it to the result string and reset the flag\n        else:\n            result_str += char\n            number_flag = False\n    # add the number flag back to the result string\n    if number_flag:\n        result_str += char\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    # Find all the numbers in the string and append them to the list\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    # Sort the list in reverse order\n    num_list.sort(reverse=True)\n    \n    # Join the sorted list with the original string\n    final_str = ''.join(num_list) + test_str\n    \n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty list to store numbers\n    nums = []\n    # loop through the characters in the string\n    for char in test_str:\n        # if the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # if the character is not a number, append it to the end of the string\n        else:\n            test_str += char\n    # reverse the nums list\n    nums.reverse()\n    # join the nums list into a string\n    result = ''.join(nums)\n    # return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str.replace(num_str, '') + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    nums_str = ''.join(nums)\n    return test_str + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Use regular expression to search for numbers in the string\n    num_regex = r'\\d+'\n\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w+\\b', test_str)\n\n    # Use a loop to iterate over each word in the list\n    for word in words:\n        # Use regular expression to search for numbers in the word\n        num_match = re.search(num_regex, word)\n        # If the word contains a number, move it to the end of the word list\n        if num_match:\n            num_start = num_match.start()\n            num_end = num_match.end()\n            word = word[:num_start] + word[num_end:]\n        # If the word doesn't contain a number, leave it in the list\n        else:\n            pass\n\n    # Use regular expression to join the words back into a string\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    nums.reverse()\n    new_str = ''.join(nums)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], \"\")\n        test_str += num_list[i]\n    for char in char_list:\n        test_str += char\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # Removing all spaces from the string\n    test_str = test_str.replace(\" \", \"\")\n\n    # Initializing the index variable\n    index = 0\n\n    # Looping through the string\n    while index < len(test_str):\n        # Checking if the current character is a number\n        if test_str[index].isdigit():\n            # Moving the number to the end of the string\n            test_str = test_str[0:index] + test_str[index:]\n        index += 1\n\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 1\n    max_count = 1\n\n    for i in range(n-1):\n        if a[i+1] - a[i] % 2 == 0:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # create a dictionary to store the size of the largest subset for every pair of numbers\n    size_dict = {}\n\n    # initialize the size of the largest subset to 1\n    max_size = 1\n\n    # iterate through the list of numbers\n    for i in range(len(a)):\n        # iterate through the remaining numbers after the current number\n        for j in range(i+1, len(a)):\n            # if the current number is divisible by the next number, add it to the subset\n            if a[i] % a[j] == 0:\n                # if the size of the subset is greater than the current largest subset, update the max_size\n                if size_dict.get((a[i], a[j]), 0) + 1 > max_size:\n                    max_size = size_dict.get((a[i], a[j]), 0) + 1\n\n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize variables to keep track of the largest subset size and the indices of the largest subset\n    max_size = 0\n    start = -1\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # Initialize variables to keep track of the current subset size and the indices of the current subset\n        size = 1\n        current_start = i\n        \n        # Iterate through the rest of the list\n        for j in range(i+1, len(a)):\n            # Check if the current element can divide the next element\n            if a[j] % a[i] == 0:\n                size += 1\n                current_start = j\n            else:\n                break\n        \n        # Update the largest subset size and the indices of the largest subset if this subset is larger\n        if size > max_size:\n            max_size = size\n            start = current_start\n    \n    # Return the largest subset size and the indices of the largest subset\n    return max_size, start"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables\n    size = 0\n    current_subset = []\n    \n    # Loop through the sorted list\n    for num in a:\n        # Add the current number to the current subset\n        current_subset.append(num)\n        \n        # Check if the current subset is divisible by all pairs of the previous numbers\n        for i in range(len(current_subset)-1):\n            if current_subset[i] % current_subset[i+1]!= 0:\n                break\n        else:\n            # If it is, add the current subset size to the total size\n            size = max(size, len(current_subset))\n        \n        # Remove the first number from the current subset\n        current_subset.pop(0)\n    \n    # Return the total size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a = sorted(a)\n\n    # Initialize variables\n    size = 0\n    start = 0\n    end = 0\n\n    # Loop through the list\n    for i in range(len(a)):\n        # Find the largest subset that satisfies the condition\n        while (i + 1 < len(a)) and (a[i] % a[i + 1] == 0):\n            end += 1\n            i += 1\n        # Update the size of the largest subset found\n        size = max(size, end - start)\n        # Reset the variables for the next subset\n        start = i\n        end = i\n\n    # Return the size of the largest subset found\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    subset_size = 1\n    current_sum = a[0]\n\n    # loop through the list\n    for i in range(1, len(a)):\n        # calculate the difference between the current number and the next number\n        diff = a[i] - current_sum\n\n        # if the difference is greater than 0 and divisible by 2, update the current subset size\n        if diff > 0 and diff % 2 == 0:\n            subset_size += 1\n\n        # update the current sum\n        current_sum = a[i]\n\n    # return the largest subset size\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    \n    # Sort the list in non-decreasing order\n    a.sort()\n    \n    # Initialize variables to store the answer and indices of the largest subset\n    size = 0\n    left = 0\n    right = 0\n    \n    # Iterate through the list and find the largest subset with every pair divisible\n    for i in range(n):\n        while (a[right] % a[i]!= 0) and (right < n-1):\n            right += 1\n        \n        if (right - left + 1) > size:\n            size = right - left + 1\n            left = i\n    \n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables for the current subset and largest subset\n    subset = [a[0]]\n    largest = [a[0]]\n    \n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the last element in the subset, add it to the subset\n        if a[i] % subset[-1] == 0:\n            subset.append(a[i])\n        # If the current element is not divisible by the last element in the subset, update the largest subset\n        else:\n            largest = subset\n            subset = [a[i]]\n            \n    # Check if the last element is divisible by the subset\n    if a[-1] % subset[-1] == 0:\n        largest = subset\n        \n    # Return the size of the largest subset\n    return len(largest)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Initialize the largest subset size to 0\n    max_size = 0\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # Check if every pair is divisible\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                # If yes, add the size of the subset to max_size\n                max_size = max(max_size, j-i+1)\n                \n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists, arr1 and arr2, and the size of each list n,\n    and returns the median of the two lists. The function uses a quicksort algorithm\n    to find the median. The time complexity of this algorithm is O(n log n) and the space\n    complexity is O(log n).\n    \"\"\"\n\n    # Combine the two lists into a single list\n    combined_list = arr1 + arr2\n\n    # Quicksort the combined list using the quicksort algorithm\n    quicksort(combined_list)\n\n    # Calculate the median of the sorted list\n    if n % 2 == 0:\n        median = (combined_list[n//2 - 1] + combined_list[n//2]) / 2\n    else:\n        median = combined_list[n//2]\n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of same size, arr1 and arr2, and the size of each list, n,\n    and returns the median of the two lists.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid1 = (n // 2) - 1\n    mid2 = n // 2\n    if n % 2 == 0:\n        median = (arr1[mid1] + arr1[mid1 + 1]) / 2\n    else:\n        median = arr1[mid1]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Get the median index\n    median_index = n // 2\n\n    # If n is odd, then the median is the middle element\n    if n % 2 == 1:\n        return arr[median_index]\n    # If n is even, then the median is the average of the middle two elements\n    else:\n        return (arr[median_index-1] + arr[median_index])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The two lists should have same length\")\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    mid_index = n // 2\n    if n % 2 == 0:\n        return (sorted_arr1[mid_index-1] + sorted_arr1[mid_index]) / 2\n    else:\n        return sorted_arr1[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Check if the two lists have the same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The two lists must have the same size\")\n\n    # Merge the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median\n    median_index = len(merged_list) // 2\n    median = merged_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    # create a list to store the merged list\n    merged_list = []\n    \n    # loop through both lists and add elements to the merged list until one of them is empty\n    while arr1 and arr2:\n        if arr1[0] <= arr2[0]:\n            merged_list.append(arr1[0])\n            arr1 = arr1[1:]\n        else:\n            merged_list.append(arr2[0])\n            arr2 = arr2[1:]\n            \n    # append any remaining elements from arr1 or arr2 to the merged list\n    merged_list += arr1\n    merged_list += arr2\n    \n    # sort the merged list\n    merged_list.sort()\n    \n    # calculate the median\n    median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Combine the two arrays into one\n    combined_arr = arr1 + arr2\n\n    # Sort the combined array\n    combined_arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (combined_arr[n // 2 - 1] + combined_arr[n // 2]) / 2\n    else:\n        median = combined_arr[n // 2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Use a list comprehension to compute the nth power of each number in the list\n    result = [num ** n for num in nums]\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n and returns a new list containing\n    the n-th power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    results = []\n    for num in nums:\n        result = num ** n\n        results.append(result)\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize a new list to store the results\n    result = []\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the nth power of the number\n        result.append(num ** n)\n    # Return the result list\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function converts a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string contains only uppercase characters.\n    '''\n    if not string.isupper():\n        return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Args:\n        string (str): A string to be converted to uppercase.\n\n    Returns:\n        str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase using list comprehension\n    return ''.join([char.upper() for char in string])"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n\n    # create a new list with the first and last elements interchanged\n    newList = [last] + newList[1:-1] + [first]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check if the list is not empty\n    if not newList:\n        return None\n    # check if the list has only one element\n    elif len(newList) == 1:\n        return newList\n    # check if the list has two or more elements\n    else:\n        # swap the first and last element\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the list is empty\n    if len(newList) == 0:\n        return \"Error: List is empty\"\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return \"Error: List has only one element\"\n    # Swap the first and last element in the list\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least 2 elements\n    if length < 2:\n        return \"Error: List has less than 2 elements.\"\n    # Check if the list is mutable\n    if not isinstance(newList, list):\n        return \"Error: List is not mutable.\"\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    #checking if the length of the list is less than 2\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    \n    #swapping the first and last elements\n    first_last = newList[0], newList[-1]\n    newList[0] = first_last[1]\n    newList[-1] = first_last[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Get the first and last elements of the list\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    \n    # Create a new list with the first and last elements swapped\n    newList = [last_elem, first_elem]\n    \n    # Return the new list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: The list must have at least two elements.\"\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Using the index of the last element\n    lastIndex = len(newList) - 1\n    # Using list slicing to swap the first and last elements\n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "This function first calculates the area using Heron's formula, and then checks if the semi-perimeter is positive or negative. If it is negative, it returns the absolute value of the area, since the triangle cannot be inscribed in a negative area. Otherwise, it returns the calculated area."
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # calculate the semi-circle radius\n    semi_circle_radius = math.sqrt(r**2 + 1)\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (semi_circle_radius**2) / 3\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sqrt(r**2 - 1)\n    s = 2*r + h\n    area = math.sqrt(s*(s-r)*(s-h)*(s-h+r))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3*r**2)/2 # formula for area of triangle inscribed in semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = math.sqrt(s / 3)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    b = math.sqrt(s * (3 / 2))\n    \n    # Calculate the area of the largest triangle\n    area = a + b\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculating the semi-perimeter\n    s = math.pi * r\n    \n    # Calculating the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    area_1 = (s * (s - 3 * r)) / 2\n    \n    # Calculating the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_2 = math.sqrt(s * (s - r) * (s - 2 * r) * (s + r))\n    \n    # Returning the larger area\n    return max(area_1, area_2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    # Define the formula for the area of the largest triangle\n    area = (math.pi/4) * r**2\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Helper function to find the area of a triangle with sides a, b, and c\n    def triangle_area(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = 0.5 * r ** 2\n    b = sqrt(r ** 2 - a)\n    c = sqrt(r ** 2 - a - b)\n    area = triangle_area(a, b, c)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi * r ** 2) / 3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius `r` as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = 2 * math.asin(r/2)\n\n    # Calculate the area of the triangle using Heron's formula\n    A = math.sqrt(s*(s-r)*(s-2*r))\n\n    return A"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n    array (list): A list of natural numbers.\n\n    Keyword Arguments:\n    start (int): The starting index of the array. Default is 0.\n    end (int): The ending index of the array. Default is None.\n\n    Returns:\n    int: The smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    # Check if the input is a list of numbers\n    if not isinstance(array, list) or not all(isinstance(x, int) for x in array):\n        return None\n    \n    # Sort the input list\n    array.sort()\n\n    # Initialize the missing number to the first element of the array\n    missing = array[0]\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(array)):\n        # If the current element is greater than the missing number, update the missing number to the current element\n        if array[i] > missing:\n            missing = array[i]\n        # If the current element is equal to the missing number, update it to the next element\n        elif array[i] == missing:\n            missing += 1\n\n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    if start > end:\n        return end+1\n\n    if array[start]!= start:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return find_First_Missing(array,start+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers as input and returns the first missing number.\n    \"\"\"\n    # Find the range of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Traverse the array and check for missing numbers\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    # If no missing numbers are found, return the last element in the array + 1\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = max(array)\n    \n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n\n    return end+1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n\n    return end"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a Python function to find even numbers from a list of numbers.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        list: A list containing only even numbers from the original list.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # create an empty list to hold even numbers\n    even_lst = []\n\n    # loop through each number in the list\n    for num in lst:\n        # if the number is even, append it to the even_lst\n        if num % 2 == 0:\n            even_lst.append(num)\n\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the first element of the coordinate tuple\n    x, y = ele\n\n    # Append the first coordinate to the list of sub-elements\n    sub.append((x, y))\n\n    # Append the coordinates (x-1, y), (x+1, y), (x, y-1), (x, y+1) to the list of sub-elements\n    for i in range(1, 5):\n        if i == 2:\n            sub.append((x, y+1))\n        elif i == 3:\n            sub.append((x, y-1))\n        else:\n            sub.append((x+i, y))\n            sub.append((x-i, y))\n\n    # Return the list of sub-elements\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    adj = []\n    if i > 0:\n        adj.append((i-1,j))\n    if i < len(grid) - 1:\n        adj.append((i+1,j))\n    if j > 0:\n        adj.append((i,j-1))\n    if j < len(grid[0]) - 1:\n        adj.append((i,j+1))\n    adj = adj + sub\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # get the list of adjacent elements\n    adj_ele = [ele[0]+dx, ele[1]+dy] for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)] if dx!= dy]\n\n    # add the current element to the list of sublists\n    sub.append(ele)\n\n    # recursively call the function for each adjacent element and append its adjacent elements to the sublist\n    for adj in adj_ele: \n        if adj in elements and adj not in sub: \n            adjac(adj, sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(coord):\n    x, y = coord\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    if isinstance(ele, tuple):\n        x, y = ele\n        adj_list = [(x+dx, y+dy) for dx, dy in sub]\n        return adj_list + adjac((x, y), sub)\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # defining all the adjacent coordinates of a given coordinate\n    adjacents = []\n    # extract the x and y components of the given coordinate\n    x, y = ele\n    \n    # checking all the possible adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                # if the adjacent coordinate is not the same as the original coordinate\n                if (i!= x and j!= y) or (i == x and j == y):\n                    # appending the adjacent coordinate to the adjacents list\n                    adjacents.append((i + x, j + y))\n    \n    # returning the list of adjacent coordinates\n    return adjacents"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(coord):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Create a list of tuples containing all possible adjacent coordinates\n    adjs = [(x, y) for x in range(-1, 2) for y in range(-1, 2) if (x, y)!= coord]\n    # Convert the list of tuples into a set to remove duplicates\n    adjs = set(adjs)\n    # Convert the set back into a list of tuples\n    adjs = list(adjs)\n    # Return the list of tuples\n    return adjs"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        if ele[0] > 0:\n            sub.append((ele[0]-1, ele[1]))\n        if ele[0] < 18:\n            sub.append((ele[0]+1, ele[1]))\n        if ele[1] > 0:\n            sub.append((ele[0], ele[1]-1))\n        if ele[1] < 18:\n            sub.append((ele[0], ele[1]+1))\n    elif len(ele) == 3:\n        if ele[0] > 0:\n            sub.append((ele[0]-1, ele[1]))\n        if ele[0] < 18:\n            sub.append((ele[0]+1, ele[1]))\n        if ele[1] > 0:\n            sub.append((ele[0], ele[1]-1))\n        if ele[1] < 18:\n            sub.append((ele[0], ele[1]+1))\n        if ele[2] > 0:\n            sub.append((ele[0], ele[1]))\n        if ele[2] < 18:\n            sub.append((ele[0], ele[1]))\n        if ele[0] > 0 and ele[1] > 0:\n            sub.append((ele[0]-1, ele[1]-1))\n        if ele[0] > 0 and ele[1] < 18:\n            sub.append((ele[0]-1, ele[1]+1))\n        if ele[0] < 18 and ele[1] > 0:\n            sub.append((ele[0]+1, ele[1]-1))\n        if ele[0] < 18 and ele[1] < 18:\n            sub.append((ele[0]+1, ele[1]+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    ele: coordinate tuple (x, y)\n    sub: (optional) sub-list to append the adjacent coordinates to\n\n    Returns:\n    sub: list of adjacent coordinates (tuples)\n    '''\n\n    # Convert the coordinate tuple to a list of integers\n    x, y = ele\n\n    # Calculate the adjacent coordinates as tuples\n    adjs = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n\n    # If a sub-list is provided, append the adjacent coordinates to it\n    if sub is not None:\n        sub.extend(adjs)\n\n    # Otherwise, return the adjacent coordinates as a list\n    return adjs"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Split the text into words\n    words = text.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Replace spaces with underscores\n        if words[i] == \" \":\n            words[i] = \"_\"\n        # Replace underscores with spaces\n        elif words[i] == \"_\":\n            words[i] = \" \"\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # remove whitespaces from the text and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # iterate over each character in the text\n    for i in range(len(text)):\n        # if the character is a space, replace it with an underscore\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i+1:]\n        # if the character is an underscore, replace it with a space\n        elif text[i] == \"_\":\n            text = text[:i] + \" \" + text[i+1:]\n    \n    # return the modified text\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n\ndef replace_underscores(text):\n    '''\n    Write a function to replace underscores with a space and vice versa in a given string.\n    '''\n    return text.replace(\"_\", \" \")\n\ndef main():\n    # Example usage:\n    text = \"This is a sample text.\"\n    print(replace_spaces(text))   # Output: \"This_is_a_sample_text\"\n    print(replace_underscores(text))   # Output: \"This is a sample text.\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    \n    # loop through each word and replace spaces with underscores\n    for i in range(len(words)):\n        words[i] = words[i].replace(\" \", \"_\")\n    \n    # join the words back into a string\n    result = \" \".join(words)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Replace all whitespaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace all underscores with whitespaces\n    text = text.replace('_','')\n\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    i = 0\n    j = len(num_list) - 1\n\n    # Traverse through the list from both ends simultaneously\n    while i < j:\n        # If the current element is zero, swap it with the next non-zero element\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        # If the current element is not zero, move to the next element\n        else:\n            i += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create an empty list to store the non-zero elements\n    non_zero_list = []\n    # iterate through the given list\n    for num in num_list:\n        # if the element is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # append the zero elements to the end of the non_zero_list\n    non_zero_list += [0] * num_list.count(0)\n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Loop through the list\n    for i in range(len(num_list)-1, -1, -1):\n        # If the element is zero\n        if num_list[i] == 0:\n            # Move it to the end of the list\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a variable to keep track of the index of the last non-zero element\n    last_non_zero_index = 0\n\n    # Iterate over the list and swap the zero elements with the last non-zero elements\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            num_list[i], num_list[last_non_zero_index] = num_list[last_non_zero_index], num\n            last_non_zero_index += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    # Use two pointers to move the zeroes to the end of the list\n    zero_index = 0\n    non_zero_index = 0\n\n    while non_zero_index < len(num_list):\n        if num_list[non_zero_index]!= 0:\n            # Move non-zero elements to the front of the list\n            num_list[zero_index], num_list[non_zero_index] = num_list[non_zero_index], num_list[zero_index]\n            zero_index += 1\n        non_zero_index += 1"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list `arr` of `n` integers and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return arr[0] ^ arr[1]\n    else:\n        return arr[0] ^ pair_xor_Sum(arr[1:], n - 1)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize the sum and xor variables\n    xor_sum = 0\n\n    # Loop through the list and find the xor of all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the sum of xor of all pairs of numbers\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += (arr[i] ^ arr[i+1])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    \n    # Extract the first element from the heap and append it to the end of the sorted list\n    sorted_list = []\n    while hq.heapq:\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max-heap\n    hq.heapify(iterable)\n    \n    # Extract the elements from the heap\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Build a max heap from the given list\n    hq.heapify(iterable)\n\n    # Extract the max element from the heap and append it to a new list\n    result = []\n    while hq.heappop(iterable) is not None:\n        result.append(hq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list to a heap\n    hq.heapify(iterable)\n\n    # Iterate through the heap and extract the elements in sorted order\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable = iterable[1:]\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n\n    # extract the minimum element from the heap\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n\n    # convert the sorted list back to the original type\n    return type(iterable)(result)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = list(iterable)\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        hq.heappop(arr)\n        hq.heappush(arr, arr[0])\n\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    # create a max heap from the list\n    hq.heapify(iterable)\n    # sort the list by extracting the maximum element from the heap and inserting it back into the heap\n    while len(iterable) > 1:\n        iterable.pop()\n        hq.heappush(iterable, hq.heappop(iterable))\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    heap = hq.heapify(iterable)\n    \n    # sort the heap using heapsort algorithm\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if there is any profit and loss\n    if profit >= 0 and loss >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        print(\"The given amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The given amount has a profit\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"Yes, the given amount has no profit and no loss\")\n    else:\n        print(\"No, the given amount has profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount: # if the actual cost is less than or equal to the sale amount\n        if sale_amount <= actual_cost * (1 + 0.05): # if the sale amount is less than or equal to the profit margin\n            print(\"There is no profit and no loss\") # print \"There is no profit and no loss\" if the conditions are met\n        else:\n            print(\"There is no profit but there is loss\") # print \"There is no profit but there is loss\" if the sale amount is greater than the profit margin\n    else:\n        print(\"There is no loss but there is profit\") # print \"There is no loss but there is profit\" if the actual cost is greater than the sale amount\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters: actual_cost and sale_amount, which represent the actual cost of the sale and the amount of money the customer sold, respectively.\n\n    The function then returns True if the customer did not lose money (i.e. if the profit or loss was zero), and False otherwise.\n\n    The function first calculates the profit or loss between the actual cost and the sale amount, and then checks if it is negative. If it is, the customer did lose money.\n    \"\"\"\n    profit_loss = sale_amount - actual_cost\n    if profit_loss < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost: The actual cost of the sale\n    sale_amount: The amount that the sale represents\n    \n    Returns:\n    True if the sale has no profit and no loss, False otherwise\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount >= actual_cost: \n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the absolute temperature difference between the air and the ground\n    T_diff = abs(t - 273.15)\n    \n    # Calculate the dewpoint temperature using the formula: T_dew = T_air + (10^3/5)*(T_air - T_ground)\n    T_dew = t + (10**3/5)*(t - 273.15)\n    \n    # Calculate the absolute humidity difference between the air and the ground\n    H_diff = abs(100*(t/T_dew) - 100)\n    \n    # Calculate the dew point depression using the formula: T_dp = T_dew - 10^3/5*H_diff\n    T_dp = T_dew - (10**3/5)*H_diff\n    \n    # Calculate the wind chill index using the formula: W_c = 13.12 + 0.6215*T_diff - 11.37*math.log(T_diff) + 0.3965*T_dp\n    W_c = 13.12 + 0.6215*T_diff - 11.37*math.log(T_diff) + 0.3965*T_dp\n    \n    # Round the wind chill index to the nearest integer\n    W_c = round(W_c)\n    \n    return W_c\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind speed from km/h to m/s\n    wind_speed = v * 1000\n    \n    # Calculate the temperature in Kelvin\n    temp_kelvin = t + 273.15\n    \n    # Calculate the dewpoint\n    dewpoint = math.floor((temp_kelvin - 273.15) / 0.0065) + 273.15\n    \n    # Calculate the air density\n    air_density = 1.225 * math.exp((17.625 * (dewpoint - 298.15)) / (dewpoint - 273.15))\n    \n    # Calculate the wind chill\n    wchill = math.floor((23.45 * (air_density / wind_speed) ** 0.16) + 26.83)\n    \n    # Return the wind chill rounded to the next integer\n    return math.ceil(wchill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -273.15:\n        raise ValueError(\"Temperature must be in Celsius.\")\n    \n    if v < 0:\n        raise ValueError(\"Wind speed must be positive.\")\n    \n    if v == 0:\n        return 0\n\n    if t < 0:\n        t = 0\n\n    if t > 100:\n        t = 100\n\n    if v < 1.5:\n        return round(32.7 + 0.6215 * t - 3.867e-4 * t * t + 1.0038e-6 * t * t * t)\n\n    elif v < 5.0:\n        return round(13.12 + 0.3965 * t - 0.1134 * t * t + 2.379e-3 * t * t * t)\n\n    elif v < 11.0:\n        return round(0.0924 + 0.01852 * t - 0.001039 * t * t + 2.735e-5 * t * t * t)\n\n    else:\n        return round(0.04478 + 0.001228 * t - 2.548e-4 * t * t + 2.475e-7 * t * t * t)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes the wind velocity (in km/h) and temperature (in celsius) as inputs and returns the wind chill index (rounded to the nearest integer) as output.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    temp = (v * 1.6) + 32\n\n    # Calculate the wind chill index\n    wc = 13.12 + (0.6215 * temp) - (11.37 * (temp ** 0.16)) + (0.3965 * (temp ** 0.16)) ** 2\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = int(wc)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the heat index\n    h = 13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * k - 5.379e-2 * math.pow(v, 2) + 1.732e-4 * math.pow(v, 3)\n\n    # Calculate the wind chill index\n    wc = h * 1.8 - 32\n\n    # Round the wind chill index to the nearest integer\n    wind_chill = round(wc)\n\n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in celsius\n\n    Returns:\n    int: Wind chill index rounded to the next integer\n    '''\n\n    # Convert wind velocity and temperature to SI units (meters per second and degrees Celsius respectively)\n    v_si = v * 1000  # convert km/h to m/s\n    t_si = t - 273.15  # convert Celsius to degrees Fahrenheit\n\n    # Calculate the wind chill index using the given formula\n    w_c = round(13.12 + 0.6215 * v_si + 11.37 * t_si - 0.3965 * t_si ** 2 + 0.5882 * v_si * t_si)\n\n    return w_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < 0:\n        raise ValueError(\"Temperature must be non-negative.\")\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be positive.\")\n    if v > 100:\n        raise ValueError(\"Wind velocity must not exceed 100 km/h.\")\n    alpha = 12.5\n    k = 0.6219718\n    t = t + 273.15\n    t_celsius = t - 273.15\n    if t_celsius <= 0:\n        raise ValueError(\"Temperature must be greater than 0.\")\n    if t_celsius > 100:\n        raise ValueError(\"Temperature must not exceed 100 degrees Celsius.\")\n    if t_celsius < 20:\n        return 0\n    else:\n        v_m_s_2 = v * 0.01\n        w_s_2 = v_m_s_2 * math.sin(math.radians(t_celsius))\n        w_m_s_2 = w_s_2 * 0.1\n        if w_m_s_2 > 10:\n            w_m_s_2 = 10\n        return int(alpha + k * w_m_s_2)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in celsius\n    wc = (0.0065*(t-273.15)+237.3)/(v*1.609344)\n    # Calculate the wind chill index rounded to the nearest integer\n    wci = round(wc)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215*v - 35.75*math.exp(-(t-32.0)/1.8) + 0.4275*t\n    \n    # Round the wind chill index to the nearest integer\n    wc = int(round(wc))\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill in celsius\n    wind_chill_c = v * math.log((t+273.15)/273.15 + 1) / (0.6219718 * (t+273.15))\n    # Calculate the wind chill index in celsius\n    wind_chill_index_c = round(wind_chill_c)\n    # Calculate the wind chill in fahrenheit\n    wind_chill_f = (wind_chill_c * 1.8) + 32\n    # Calculate the wind chill index in fahrenheit\n    wind_chill_index_f = round(wind_chill_f)\n    # Return the calculated wind chill index\n    return wind_chill_index_c, wind_chill_index_f"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper() == False:\n            valid_names.append(name)\n    length_sum = 0\n    for name in valid_names:\n        length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the valid names\n    valid_names = []\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # If the name doesn't start with a lowercase letter, add it to the valid_names list\n        else:\n            valid_names.append(name)\n    # Use the sum() function to calculate the sum of the lengths of the valid names\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower(): # Check if the first character of the name is a lowercase letter\n            continue # Skip the name if it does\n        total_length += len(name) # Add the length of the name to the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable to 0\n    total_length = 0\n    \n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name and move on to the next one\n            continue\n        # if the name starts with an uppercase letter, add the length of the name to the total_length variable\n        else:\n            total_length += len(name)\n    \n    # return the total_length after all names have been processed\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to zero\n    total_length = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # If it is, add the length of the name to the sum\n            total_length += len(name)\n    \n    # Return the total length of the names that start with uppercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum variable\n    total_length = 0\n    # iterate through the list of names\n    for name in sample_names:\n        # check if the first character of the name is uppercase\n        if name[0].isupper():\n            # remove the name from the list\n            sample_names.remove(name)\n        # add the length of the name to the total length\n        total_length += len(name)\n    # return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the new names\n    new_names = []\n    \n    # Loop through each name in the original list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if name[0].isupper():\n            new_names.append(name)\n    \n    # Sum the lengths of the names in the new list\n    total_length = sum([len(name) for name in new_names])\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # loop through each name in the list\n    total_length = 0\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name\n            continue\n        # add the length of the name to the total\n        total_length += len(name)\n\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    #pattern = r'\\([^)]*\\)' # alternative pattern to remove only if there is an opening parenthesis\n    items_list = re.findall(pattern, items)\n    items_list = [i.strip() for i in items_list] # remove leading/trailing spaces\n    return items_list"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string of text and removes the parenthesis and what is inbetween them.\n    '''\n    # remove all parenthesis and what is inbetween them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # remove any whitespace left over from the removal\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string\n    items = re.sub(r'\\(', '', items)\n    items = re.sub(r'\\)', '', items)\n    # remove the content in between the parenthesis\n    items = re.sub(r'[\\w\\s]*', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Find all the parenthesis in the string\n    pattern = r'\\([^()]*\\)'\n    matches = re.findall(pattern, items)\n    # Remove all the parenthesis from the matches and join them back into a string\n    result = ''.join(matches)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to find and replace the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items_list = re.findall(pattern, items)\n    result = [item.strip() for item in items_list]\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove any spaces between the words\n    items = items.replace(\" \", \"\")\n    # Split the string into individual words\n    words = items.split()\n    # Join the words back into a string\n    items = \" \".join(words)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Use regular expression to find all the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\((.*?)\\)')\n    matches = re.findall(pattern, items)\n\n    # Create a new string with the parenthesis removed\n    new_items = []\n    for item in matches:\n        new_item = ''.join(filter(str.isalnum, item))\n        new_items.append(new_item)\n\n    # Join the new items into a string and return it\n    return''.join(new_items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # calculate the sum of the squares of nonagonal numbers up to n\n    total = (n * (n + 1)) // 2\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * is_nonagonal(n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th nonagonal number is {is_nonagonal(n)}\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the counter and nonagonal number to 1\n    counter = 1\n    nonagonal = 1\n    \n    # Iterate till n number of nonagonal numbers are found\n    while counter <= n:\n        # Add the nonagonal number to the counter\n        counter += 1\n        \n        # Add the counter to the nonagonal number\n        nonagonal += counter\n        \n        # If the sum becomes greater than n, the loop breaks\n        if nonagonal > n:\n            break\n    \n    # Return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the edge of the square\n    edge = 1\n\n    # Iterate through the squares\n    while n >= edge:\n        # Calculate the number of sides in the square\n        num_sides = 4 * edge + 1\n\n        # Add up the number of sides to get the nth nonagonal number\n        n -= num_sides\n\n        # Move to the next square\n        edge += 1\n\n    # Return the nth nonagonal number\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) / 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_count = 0\n    for i in range(1, n+1):\n        nonagonal_count += i\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    if n > 0:\n        result = is_nonagonal(n)\n        print(\"The nth nonagonal number is:\", result)\n    else:\n        print(\"Please enter a positive integer.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = (2 * n * (n + 1)) + (n * (n - 1))\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<!\\w)(z)(?!\\w)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z[a-zA-Z]*\\b')\n    return pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for matching 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\b'\n\n    # Use the re.search() function to search for matches in the input text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, and False otherwise\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z])[zZ](?![a-zA-Z])')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-z]*[z]*[a-z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match words that end with 'z'\n    pattern = r'\\b([^\\w]*z[^\\w]*)\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # Check if the result is not None, which means there was a match\n    if result is not None:\n        # Get the matched word (i.e., the part between the word boundaries)\n        matched_word = result.group(1)\n        # Check if the matched word starts and ends with a 'z'\n        if matched_word[0] == 'z' and matched_word[-1] == 'z':\n            # The matched word contains 'z' at the start and end, so return True\n            return True\n    # If there was no match, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub('[^a-zA-Z0-9]+', '', text)\n    # Split the string into words\n    words = text.split()\n    # Loop through each word and check if it contains 'z' at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    # If no word contains 'z' at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Check if the text contains 'z' at the start or end of the word\n    match = re.search(r'^[a-zA-Z]+z[a-zA-Z]+$', text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[zZ]\\b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # check if the array is empty or not\n    if len(input) == 0:\n        return []\n\n    # reverse the array from the first element to k-1\n    for i in range(k-1, len(input)):\n        input[i], input[i-k+1] = input[i-k+1], input[i]\n\n    # reverse the array from k to last element\n    for i in range(k, len(input), 2):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # reverse the array from the last element to k-1\n    for i in range(len(input)-2, k-2, -2):\n        input[i], input[i+k-2] = input[i+k-2], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from index 0 to k-1\n    input[0:k] = input[0:k][::-1]\n\n    # Reverse the remaining part of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    :param input: list of integers representing the input array\n    :param k: integer representing the position from which the array is reversed\n    :return: the reversed array up to position k\n    \"\"\"\n    # Reverse the array from position 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array `input` and an integer `k` as input and returns the reversed array up to the position `k`.\n    \"\"\"\n    # check if input is a list or an array\n    if type(input)!= list and type(input)!= np.ndarray:\n        raise TypeError(\"Input must be a list or an array.\")\n    \n    # check if k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    \n    # check if k is less than or equal to the length of input\n    if k > len(input):\n        raise ValueError(\"k must be less than or equal to the length of input.\")\n    \n    # create a new empty list to store the reversed array\n    reversed_array = []\n    \n    # reverse the first k elements of the array\n    for i in range(k):\n        reversed_array.append(input[len(input) - i - 1])\n    \n    # append the remaining elements of the array to the reversed list\n    for element in input[k:]:\n        reversed_array.append(element)\n    \n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and returns the reversed array up to k position.\n    \"\"\"\n    # Create a new array to store the reversed array\n    reversed_array = []\n\n    # Loop through the array from the start to k\n    for i in range(k):\n        # Append the element at the current position to the new array\n        reversed_array.append(input[i])\n\n    # Loop through the array from k to the end\n    for i in range(k, len(input)):\n        # Append the element at the current position to the new array\n        reversed_array.append(input[i])\n\n    # Return the reversed array up to k position\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the given position is valid or not\n    if k > len(input) or k <= 0:\n        return \"Invalid position\"\n\n    # Initialize two pointers, one at the beginning and other at the end of the array\n    i = 0\n    j = len(input) - 1\n\n    # Swap elements from the beginning of the array to the given position k-1\n    while i < k-1:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n\n    # Reverse the elements from the given position k to the end of the array\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k > len(input) - 1:\n        return input\n    else:\n        mid = len(input) // 2\n        input[mid], input[k] = input[k], input[mid]\n        reverse_Array_Upto_K(input, k+1)\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a copy of the input array\n    arr = input[:]\n    # Reverse the array up to the k-th element\n    arr[:k] = arr[:k][::-1]\n    # Reverse the entire array\n    arr[k:] = arr[k:][::-1]\n    # Return the reversed array\n    return arr"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    tup_dict = tuple(test_dict.items())\n    # Add the tuple to the original tuple\n    new_tup = test_tup + (tup_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    new_list = [(k, v) for k, v in test_dict.items()]\n    # Concatenate the list with the tuple and return it\n    return test_tup + new_list"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Merge the two dictionaries into a single dictionary\n    new_dict = dict(test_dict.items() + test_tup.items())\n    \n    # Convert the merged dictionary back into a tuple\n    new_tup = tuple(new_dict.values())\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # creating a new dictionary and adding the values of test_dict to it\n    new_dict = {**test_dict}\n    # adding the new dictionary to the tuple\n    new_tup = (test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    test_list = [(k, test_dict[k]) for k in test_dict]\n    # Append the dictionary to the tuple\n    return test_tup + test_list"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize the maximum average and the maximum number of visited cells\n    max_avg = 0\n    max_num_cells = 0\n\n    # Initialize the variables to keep track of the current path and the total cost\n    curr_path = [(0, 0)]\n    curr_cost = cost[0][0]\n    curr_num_cells = 1\n\n    # Iterate through the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Check if we can move right or down\n            if i + 1 < N and j == N - 1:\n                # If we can move right, add the cost of moving right and update the current path and cost\n                curr_path.append((i + 1, j))\n                curr_cost += cost[i + 1][j]\n                curr_num_cells += 2\n            elif i == N - 1 and j + 1 < N:\n                # If we can move down, add the cost of moving down and update the current path and cost\n                curr_path.append((i, j + 1))\n                curr_cost += cost[i][j + 1]\n                curr_num_cells += 2\n            else:\n                # If we cannot move right or down, we cannot continue exploring this path, so we skip it\n                continue\n\n            # Calculate the average and compare it with the maximum average so far\n            avg = curr_cost / curr_num_cells\n            if avg > max_avg:\n                max_avg = avg\n                max_num_cells = curr_num_cells\n\n            # Backtrack to explore the next path\n            while len(curr_path) > 1 and curr_path[-1] in curr_path[:-1]:\n                # If we backtrack and reach the starting point, we have explored the entire matrix, so we break\n                break\n                curr_path.pop()\n                curr_cost -= cost[curr_path[-1][0]][curr_path[-1][1]]\n                curr_num_cells -= 1\n\n            # Add the backtracked cost to the current cost\n            if curr_path[-1] == (N - 1, N - 1):\n                curr_cost += cost[N - 1][N - 1]\n                curr_num_cells += 1\n\n    # Return the maximum average and the maximum number of visited cells\n    return max_avg, max_num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables to store maximum and minimum average values\n    max_avg = float('-inf')\n    min_avg = float('inf')\n    # Initialize variables to store the current path average\n    curr_avg = 0\n    # Initialize variables to store the current row and column\n    row = 0\n    col = 0\n    # Initialize a variable to store the total cost of the path\n    total_cost = 0\n    # Loop through all possible paths from top-left to bottom-right\n    for i in range(N*N):\n        # Calculate the next row and column of the path\n        if i % N == N-1:\n            row += 1\n            col = 0\n        else:\n            col += 1\n        # Calculate the total cost of the path and add the cost of the current cell to it\n        total_cost += cost[row][col]\n        # Update the current path average\n        curr_avg += cost[row][col]\n        # Update the maximum and minimum average values\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n        if curr_avg < min_avg:\n            min_avg = curr_avg\n    # Return the maximum average value\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize variables\n    max_avg = float('-inf')\n    max_path = None\n    # iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            # compute path cost and average\n            path_cost = 0\n            path_avg = 0\n            visited = set()\n            def dfs(x, y):\n                nonlocal path_cost, path_avg, visited\n                if (x, y) == (N-1, N-1):\n                    if path_avg > max_avg:\n                        max_avg = path_avg\n                        max_path = [(x, y)]\n                    elif path_avg == max_avg:\n                        max_path.append((x, y))\n                    return\n                if (x, y) not in visited:\n                    visited.add((x, y))\n                    if x < N-1:\n                        dfs(x+1, y)\n                    if y < N-1:\n                        dfs(x, y+1)\n            dfs(i, j)\n    # return maximum average path\n    if max_path is None:\n        return 'No path found with maximum average'\n    else:\n        return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Get the dimensions of the matrix\n    N = len(cost)\n    \n    # Initialize variables to keep track of the maximum and minimum averages\n    max_avg = float('-inf')\n    min_avg = float('inf')\n    max_path = None\n    min_path = None\n    \n    # Initialize variables to keep track of the current path and its total cost\n    current_path = [(0, 0, 0)]\n    current_cost = 0\n    \n    # Iterate through the matrix\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            # Get the cost of the current cell and the adjacent cells\n            left_cost = cost[i-1][j]\n            right_cost = cost[i+1][j]\n            up_cost = cost[i][j-1]\n            down_cost = cost[i][j+1]\n            \n            # Compute the average of the current cell and its adjacent cells\n            avg_cost = (left_cost + right_cost + up_cost + down_cost) / 4\n            \n            # If this is the first path or if the average is greater than the current maximum average, update the maximum and maximum path\n            if current_path == [(0, 0, 0)] or avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = current_path\n            \n            # If this is the first path or if the average is less than the current minimum average, update the minimum and minimum path\n            if current_path == [(0, 0, 0)] or avg_cost < min_avg:\n                min_avg = avg_cost\n                min_path = current_path\n            \n            # Add the current cell to the current path and update the current cost\n            current_path.append((i, j, avg_cost))\n            current_cost += avg_cost\n            \n            # If the current path has more than N cells, remove the first cell and its cost\n            if len(current_path) > N:\n                current_path.pop(0)\n                current_cost -= current_path[0][2]\n                \n    # Return the maximum and minimum paths\n    return max_path, min_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == N-1 and j == N-1:\n                dp[i][j] = cost[i][j]\n            elif i == N-1:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == N-1:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = float('-inf')\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            avg = (dp[i][j-1] + dp[i+1][j] + cost[i][j]) // 3\n            dp[i][j] = avg\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]  # initialize DP table\n    max_avg = float('-inf')  # initialize maximum average\n    \n    # fill in DP table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:  # base case: start from top-left cell\n                dp[i][j] = cost[i][j]\n            elif i == 0:  # move only down\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:  # move only right\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                # compute average of both diagonals\n                diag1 = dp[i-1][j] + cost[i][j]\n                diag2 = dp[i][j-1] + cost[i][j]\n                dp[i][j] = (diag1 + diag2) / 2\n                \n            # update maximum average\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_average = float('-inf')\n    start_cell = (0, 0)\n    visited = set()\n\n    def dfs(row, col, total_cost):\n        if (row, col) == (N - 1, N - 1):\n            nonlocal max_average\n            nonlocal start_cell\n            nonlocal visited\n            if total_cost > max_average:\n                max_average = total_cost\n                start_cell = (row, col)\n            visited.add((row, col))\n            return\n        visited.add((row, col))\n        total_cost += cost[row][col]\n        dfs(row + 1, col, total_cost)\n        dfs(row, col + 1, total_cost)\n        visited.remove((row, col))\n\n    dfs(0, 0, 0)\n    return max_average, start_cell"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # define a helper function to compute the number of cells visited in a path\n    def count_cells(matrix, path):\n        row, col = path[0]\n        count = 1\n        while row > 0 and col < len(matrix[0]) - 1:\n            row -= 1\n            col += 1\n            count += 1\n        while row < len(matrix) - 1 and col > 0:\n            row += 1\n            col -= 1\n            count += 1\n        return count\n    \n    # initialize variables\n    max_average = float('-inf')\n    current_path = [(0, 0)]\n    path_count = 1\n    current_cost = 0\n    \n    # iterate over all possible paths\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[0])):\n            # check if the current cell can be reached from the current path\n            row, col = current_path[-1]\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                current_cost += cost[i][j]\n                path_count += count_cells(cost, current_path)\n                if current_cost > max_average:\n                    max_average = current_cost\n                    current_path = [(i, j)]\n                current_cost -= cost[row][col]\n                path_count -= count_cells(cost, [(row, col)])\n            else:\n                new_row, new_col = i, j\n                if cost[new_row][new_col] <= cost[row][col]:\n                    new_row, new_col = row, col\n                if cost[new_row][new_col] <= cost[i][j]:\n                    new_row, new_col = i, j\n                if (new_row, new_col) in current_path:\n                    continue\n                current_path.append((new_row, new_col))\n                current_cost += cost[new_row][new_col]\n                path_count += count_cells(cost, current_path)\n                if current_cost > max_average:\n                    max_average = current_cost\n                    current_path = [(new_row, new_col)]\n                current_cost -= cost[row][col]\n                path_count -= count_cells(cost, [(row, col)])\n                current_path.pop()\n                \n    # return the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    paths = []\n    \n    # Create paths\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            paths.append((i,j))\n    \n    # Calculate average of each path\n    for path in paths:\n        avg = sum([cost[p[0]][p[1]] for p in path]) / len(path)\n        if avg > max_avg:\n            max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the students that meet the criteria\n    filtered_students = []\n    \n    # Iterate through the dictionary of students\n    for name, (height, weight) in students.items():\n        # If the height and weight are greater than or equal to the minimum\n        if height >= h and weight >= w:\n            # Append the student to the list\n            filtered_students.append((name, height, weight))\n    \n    # Return the list of filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Iterate through the students dictionary\n    for student in students:\n        # Extract the student height and weight from the tuple\n        height, weight = students[student]\n        \n        # Check if the student height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered students list\n            filtered_students.append(student)\n    \n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a list to store indices where the lists have the same values\n    indices = []\n\n    # Iterate over the indices of the first list\n    for i in range(len(nums1)):\n        # Compare the value at the current index with the value at the same index in the second list\n        if eq(nums1[i], nums2[i]):\n            # If the values are the same, append the index to the list of indices\n            indices.append(i)\n\n    # Return the list of indices where the lists have the same values\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string\n    base_str = str(base)\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert digit to integer\n        digit_int = int(digit)\n\n        # Calculate the sum of digits raised to the power\n        power_sum = sum_of_digits(digit_int, power)\n\n        # Add power_sum to sum\n        sum += power_sum\n\n    # Return sum\n    return sum\n\ndef sum_of_digits(num, power):\n    '''\n    Helper function to calculate the sum of digits raised to the power.\n    '''\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each digit of the number\n    while num > 0:\n        # Extract the last digit of the number\n        digit = num % 10\n\n        # Calculate the sum of digits raised to the power\n        power_sum = digit ** power\n\n        # Add power_sum to sum\n        sum += power_sum\n\n        # Remove the last digit of the number\n        num = num // 10\n\n    # Return sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize a variable to store the sum\n    sum = 0\n    # loop through each digit in the base\n    for digit in str(base):\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    # convert the base to a string\n    base_str = str(base)\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the power of the digit to the total\n        total += digit_int ** power\n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into digits\n    digits_str = str(base)\n    digits = list(map(int, digits_str))\n    \n    # Calculate the sum of the digits raised to the power\n    sum_digits = sum([digits[i]**power for i in range(len(digits))])\n    \n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    # Initialize sum to 0\n    sum = 0\n    # Loop through each digit in the base string and add its value to sum\n    for digit in base_str:\n        sum += int(digit)\n    # Calculate the sum of all digits raised to the power\n    result = sum ** power\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    # convert the base to a string and calculate the sum of its digits raised to the power\n    base_str = str(base)\n    sum_of_digits = sum([int(digit) ** power for digit in base_str])\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the digits of the base string and add each digit to the sum\n    for digit in base_str:\n        sum += int(digit)\n    # Calculate the power of the sum to the power of the specified power\n    sum_to_power = sum ** power\n    # Return the sum_to_power\n    return sum_to_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum variable\n    total = 0\n\n    # Loop through each digit of the base string and add it to the total variable\n    for digit in base_str:\n        total += int(digit)\n\n    # Calculate the power of the total variable to the specified power\n    result = total ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\b|\\w)\\'\"\\w+(?=\\b|\\W)\"|(?<=\\b|\\w)\\'\\w+(?=\\b|\\W)\\''\n    matches = re.findall(pattern, text)\n    return matches\n\ntext1 = \"This is a sample text. It contains quotations like 'this' and \\\"this\\\".\"\nprint(extract_quotation(text1))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to find all quotation marks \" \" in the given string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    \n    # Extracting the values between quotation marks and returning it as a list\n    quotes = []\n    for match in matches:\n        quotes.append(match.strip('\"'))\n    \n    return quotes"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regex to extract all the quotes\n    pattern = r'(?<=[\"\\']).*?(?=[\"\\'])'\n\n    # Use regex to match all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text1)\n\n    # Return the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(?:\\\\.|[^\"])*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the pattern to match the quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # match the pattern in the text and return the matched string\n    result = re.findall(pattern, text1)\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression to match quotation marks \" \"\n    pattern = re.compile(r'(\"(?:[^\"\\\\]|\\\\.)*\")')\n\n    # Find all matches in the string using the regular expression\n    matches = pattern.findall(text)\n\n    # Iterate through the matches and extract the values between the quotation marks\n    for match in matches:\n        # Remove leading and trailing quotes from the value\n        value = match.strip('\"')\n        # Print the value\n        print(value)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    result_tup = ()\n    for i in range(len(t_list)-1):\n        result_tup += (t_list[i] * t_list[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = (test_tup[0],) * N\n    for i in range(1, N):\n        result = (result[i-1] * test_tup[i],) + result\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0], test_tup[1])\n    for i in range(2, N+1):\n        result_tup = (result_tup[0] * result_tup[1], result_tup[0])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Loop through each element of the input tuple\n    for i in range(N):\n        # Calculate the product of the current element and the next element\n        product = test_tup[i] * test_tup[i+1]\n        # Append the result to the result list\n        result.append(product)\n    # Return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initializing an empty list to store the result\n    result = []\n    # iterating through the first list\n    for i in range(len(lst1)):\n        # adding the element at index i from the first list to the element at index i from the second list\n        result.append(lst1[i]+lst2[i])\n    # returning the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if the two lists are of equal length\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists are of unequal length\")\n        return\n    \n    # initialize a new list to store the sum of each element of the two input lists\n    result = []\n    \n    # iterate through each element of the two input lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two input lists\n        result.append(lst1[i] + lst2[i])\n    \n    # return the final result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum of the two lists\n    result = []\n    # Loop through each element of the first list\n    for i in range(len(lst1)):\n        # Add the corresponding element of the second list to the sum\n        result.append(lst1[i] + lst2[i])\n    # Return the sum of the two lists\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by consecutive duplicates and flatten the groups\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n    return [item for group in groups for item in group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [list(g) for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of integers with consecutive duplicates removed.\n\n    \"\"\"\n\n    # Using itertools.groupby() function to group consecutive duplicates of the list\n    # and then summing them up to get the final result.\n    result = sum(1 for _, group in groupby(nums) if len(list(group)) > 1)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key == nums[0]:\n            result.append(group[0])\n        elif key + 1 == nums[0]:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    grouped_nums = groupby(nums)\n    return [k for k, g in grouped_nums if not g]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n\n    # Group the numbers by their consecutive duplicates\n    groups = groupby(nums)\n\n    # Use a list comprehension to create a new list with consecutive duplicates removed\n    return [x for key, group in groups if not key]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) * h\n    print(\"The lateral surface area of the cone is:\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2 # area of cone\n    V = 3*math.pi*r**2 # volume of cone\n    l = math.sqrt((h/3)*A) # lateral surface area\n    return l"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi*r**2*(h+r)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function finds the lateral surface area of a cone with given radius r and height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Define the base area of the cone\n    base_area = math.pi * r**2\n    \n    # Calculate the lateral surface area\n    lateral_area = math.pi * (r**2 + h**2)\n    \n    # Return the lateral surface area of the cone\n    return lateral_area - base_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the area of a circle with radius r and height h\n    area_circle = math.pi * r * r * h\n    \n    # Calculating the lateral surface area of the cone\n    lateral_area = 2 * area_circle * math.tan(math.pi/3)\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\nprint(\"The lateral surface area of the cone is:\", lateralsurface_cone(r,h))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*(math.pi*r**2 + math.pi*r*h + math.pi*h**2)/(math.pi*r*h)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    \n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The lateral surface area of the cone.\n    \n    Raises:\n    TypeError: If either r or h is not a number.\n    ValueError: If either r or h is negative.\n    '''\n    \n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Both r and h must be numbers.\")\n    \n    if r < 0 or h < 0:\n        raise ValueError(\"Both r and h must be non-negative.\")\n    \n    # Calculate the lateral surface area using the formula A = 1/2 * h * r^2\n    lateral_area = 0.5 * h * r ** 2\n    \n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,.]+'\n    # use the re.sub() method to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Use regular expressions to replace all occurrences of spaces, commas, or dots with a colon\n    pattern = r'([.,])'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^a-zA-Z0-9\\s,\\.]'\n    replacement = ''\n    text = re.sub(pattern, replacement, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expressions to replace all occurrences of spaces, commas, or dots with a colon\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with a single space\n    text = re.sub(r'[\\.,]', ':', text) # replace commas and dots with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regex pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[,\\. ]')\n    # replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace all occurrences of commas with a semicolon\n    text = re.sub(r',', ';', text)\n    # Replace all occurrences of dots with a semicolon\n    text = re.sub(r'\\.', ';', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if left!= len(A) and A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        while i > 0 and A[i] == x:\n            i -= 1\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: A sorted array in which the number x is present.\n    :param x: The number we want to find the first occurrence of.\n    :return: An index of the first occurrence of x in A, or -1 if x is not present in A.\n    \"\"\"\n\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # Find the first occurrence of x in A using binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If x is equal to the mid element, return its index\n        if A[mid] == x:\n            return mid\n\n        # If x is less than the mid element, search the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If x is greater than the mid element, search the left half of the array\n        else:\n            right = mid - 1\n\n    # If x is not present in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(A) - 1\n    \n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the middle index of the array\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to the target, update the first occurrence index and the left pointer\n        if A[mid] == x:\n            first_occurrence_index = mid\n            left = mid + 1\n        # If the middle element is greater than the target, update the right pointer\n        elif A[mid] > x:\n            right = mid\n        # If the middle element is less than the target, update the left pointer\n        else:\n            left = mid + 1\n    \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n:\n        if A[i] == x:\n            return i\n        i += 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # find the index of the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x is not in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Loop through the array and check if the current element is equal to the target element\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the element is found, update the index variable to the current index\n            index = i\n            # Break out of the loop since we have found the first occurrence of the target element\n            break\n            \n    # Return the index variable\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    prefix_sum[1] = arr[0]\n    for i in range(1, n+1):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i-1]\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result += prefix_sum[j] * (prefix_sum[j]-prefix_sum[i])\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize a list to store the products of subarrays\n    prod_list = []\n\n    # Initialize a variable to store the current subarray product\n    subarray_prod = 1\n\n    # Initialize the sum of products\n    sum_prod = 0\n\n    # Iterate through the array and find the products of subarrays\n    for i in range(n):\n        subarray_prod *= arr[i]\n        sum_prod += subarray_prod\n        if i >= n // 2:\n            # Remove the current element from the product and add it to the sum list\n            sum_prod -= prod_list[i - n // 2]\n            prod_list.pop(i - n // 2)\n\n    # Return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0]*arr[1]\n    else:\n        sum_list = []\n        for i in range(n):\n            temp = []\n            for j in range(i+1, n+1):\n                temp.append(arr[j]*(j-i))\n            sum_list.append(sum(temp))\n        return sum(sum_list)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + arr[i-1] * dp[i][j-1]\n    return dp[n][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    # Initialize the sum of products to 0\n    sum_prod = 0\n\n    # Initialize the sum of squares to 0\n    sum_sq = 0\n\n    # Initialize the prefix sum of squares\n    prefix_sq = 0\n\n    # Initialize the prefix sum of products\n    prefix_prod = 1\n\n    # Initialize the subarray start index\n    start = 0\n\n    # Iterate through the list\n    for end in range(n):\n        # Update the prefix sum of squares\n        prefix_sq = prefix_sq + (arr[end] - arr[start]) * (arr[end] - arr[start])\n\n        # Update the prefix sum of products\n        prefix_prod = prefix_prod * (arr[end] - arr[start])\n\n        # Update the sum of squares\n        sum_sq = sum_sq + prefix_sq\n\n        # Update the sum of products\n        sum_prod = sum_prod + prefix_prod\n\n        # Update the start index\n        start = end\n\n    # Return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = arr[i-1] * dp[i-1][j]\n            elif i > j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j-1] * arr[i-1]\n    \n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += dp[n][i]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            prod = 1\n            for k in range(i):\n                prod *= arr[j+k]\n            ans += prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = prefix_sum[j+1] - prefix_sum[i]\n            subarray_prod = 1\n            for k in range(i, j+1):\n                subarray_prod *= arr[k]\n            result += subarray_sum * subarray_prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n\n    # Initialize the sum of products\n    sum_of_products = 0\n\n    # Initialize the prefix sum\n    prefix_sum = [0] * n\n\n    # Calculate the prefix sum of the given list\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Calculate the sum of products of sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_products += prod * prefix_sum[j] - prod * prefix_sum[i]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize result with first element\n    result = arr[0]\n\n    # loop through all subarrays from 2 to n\n    for i in range(2, n+1):\n        # loop through all possible sublists of length i\n        for j in range(n-i+1):\n            # calculate product of current sublist\n            product = 1\n            for k in range(j, j+i):\n                product *= arr[k]\n            # add product to result\n            result += product\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the given integer to binary and get the first and last bit positions\n    binary = bin(n)[2:]\n    first_bit = len(binary) - 1\n    last_bit = 0\n\n    # Calculate the middle bit positions\n    mid_bit = (first_bit + last_bit) // 2\n\n    # Initialize the resultant binary string as all 1's\n    result = '1' * (len(binary) + 1)\n\n    # Toggle the middle bit positions in the resultant binary string\n    for i in range(len(binary)):\n        if i == mid_bit:\n            result = result[:mid_bit] + '0' + result[mid_bit+1:]\n        else:\n            result = result[:mid_bit] + '1' + result[mid_bit+1:]\n\n    # Convert the resultant binary string to an integer\n    result = int(result, 2)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # iterate over the bits in the number from the first and last to middle bits\n    for i in range(1, num_bits - 1):\n        # toggle the bit at position i\n        n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        msb = n & 1  # get the most significant bit\n        first_bit = n & ~(1 << (32 - 1))  # clear the first bit and set the last bit\n        last_bit = n & ~(1 << (32 - 2))  # clear the last bit and set the first bit\n        return first_bit ^ last_bit ^ msb"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the variable for the first bit\n    first_bit = 1 << 0\n\n    # Initialize the variable for the last bit\n    last_bit = 1 << 63\n\n    # Initialize the variable for the middle bit\n    middle_bit = first_bit + last_bit\n\n    # Get the first and last bits of the number\n    first_bit_num = n & first_bit\n    last_bit_num = n & last_bit\n\n    # Toggle the middle bit\n    middle_bit_num = n ^ middle_bit\n\n    # Combine the first and last bits and the middle bit\n    result = first_bit_num | last_bit_num | middle_bit_num\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initializing the result as the original number\n    result = n\n    \n    # Extracting the first and last bits from the number\n    first_bit = result & 1\n    last_bit = result & (1 << 31)\n    \n    # Toggle the middle bits\n    result &= ~(last_bit | first_bit)\n    \n    # Adding the middle bits\n    result |= first_bit | last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    \n    # Initialize the first and last bits\n    first_bit = binary_num[0]\n    last_bit = binary_num[-1]\n    \n    # Remove the first and last bits from binary_num\n    binary_num = binary_num[1:-1]\n    \n    # Toggle the middle bits\n    for i in range(len(binary_num)):\n        if i % 2 == 0:\n            binary_num[i] = '0' if binary_num[i] == '1' else '1'\n    \n    # Add the first and last bits back to binary_num\n    binary_num = first_bit + binary_num + last_bit\n    \n    # Convert binary_num back to an integer and return it\n    return int(binary_num, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Get the first and last bit positions\n    first_bit_pos = binary_str.find('1')\n    last_bit_pos = binary_str.rfind('1')\n\n    # Check if the first and last bit positions are the same\n    if first_bit_pos == last_bit_pos:\n        # If the first and last bit positions are the same, then there are no middle bits to toggle\n        return n\n\n    # Toggle middle bits\n    middle_bits = binary_str[first_bit_pos+1:last_bit_pos]\n    binary_str = binary_str[:first_bit_pos] + ''.join(['0' if bit in middle_bits else '1' for bit in binary_str[first_bit_pos:last_bit_pos+1]]) + binary_str[last_bit_pos+1:]\n\n    # Convert back to integer\n    n = int(binary_str, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Initialize the first and last bit to 1\n    first_bit = 1\n    last_bit = 1 << (n.bit_length() - 1)\n    \n    # Toggle the middle bits\n    mid_bits = (n ^ first_bit ^ last_bit)\n    \n    # Add the first and last bits to the middle bits\n    mid_bits = mid_bits | first_bit | last_bit\n    \n    # Return the modified number\n    return mid_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the first and last bits of the given number\n    first_bit = n & 1\n    last_bit = n & (2**n-1)\n    \n    # Toggle the middle bits of the number\n    middle_bits = n ^ first_bit ^ last_bit\n    \n    # Combine the first and last bits of the number with the middle bits\n    result = first_bit ^ middle_bits ^ last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first and last bit of the number to 1\n    n = n | 0b111111111111111111111111111111111\n    # Toggle all the other bits of the number\n    n = n ^ 0b1111111111111111111111111111111111\n    # Set the first and last bit of the number to 0\n    n = n & 0b011111111111111111111111111111111\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return idx\n    elif a[idx] == x:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): list of sorted numbers\n    x (int): a number to be inserted\n\n    Returns:\n    int: the left insertion point for the specified value in the sorted list\n    \"\"\"\n    # find the left insertion point by using the bisect_left() function from the bisect module\n    pos = bisect.bisect_left(a, x)\n    # return the position where the specified value is to be inserted\n    return pos"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    # Use the bisect_left function from the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present in the sorted list, return the index of its leftmost occurrence\n    if index == len(a) or a[index]!= x:\n        return index\n    # Otherwise, return the index of the left insertion point\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        a.append(x)\n        return len(a)-1\n    elif index > 0 and a[index-1]!= x:\n        return index-1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    elif a[left] == x:\n        return left\n    else:\n        return left - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(\"The given string is starting with a vowel.\")\n    else:\n        print(\"The given string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    # use regex to check if the string matches the regex pattern\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    # if the string matches the regex pattern, return True\n    if match:\n        return True\n    \n    # if the string does not match the regex pattern, return False\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of n-1 is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1. \n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(10)) # output: 385"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # base case\n    if n == 0:\n        return 0\n\n    # recursive case\n    else:\n        return (1 + 1/geometric_sum(n-1)) * 1/n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_num = math.ceil(math.log10(n+1)) # Find minimum number of digits\n    \n    # Iterate till n digits\n    for i in range(min_num,n,-1):\n        # Check if smallest triangular number with i digits is greater than n\n        if math.ceil(math.log10(n+i)) >= i:\n            return i # Return i as index\n    \n    # If no triangular number found with n digits, return 0 as index\n    return 0"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits of the triangular number with n digits\n    num_digits = int(math.log10(n * (n+1))) + 1\n\n    # Find the index of the smallest triangular number with n digits\n    index = int(math.pow(10, num_digits - 1))\n\n    # Initialize the smallest triangular number with n digits\n    smallest_triangular = int(math.pow(10, num_digits - 1) * index)\n\n    # Find the index of the smallest triangular number with n-1 digits\n    i = index - 1\n    while True:\n        triangular_num = smallest_triangular + i\n        num_digits_triangular = int(math.log10(triangular_num)) + 1\n        if num_digits_triangular == n - 1:\n            break\n        i += 1\n\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def triangular_number(n):\n        if n == 0:\n            return 0\n        else:\n            return n * (n + 1) // 2\n\n    def smallest_triangular_number(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            for i in range(3, n + 1):\n                if is_prime(i) and is_prime(i - 1):\n                    return i\n\n    def smallest_index(n):\n        max_triangular_num = triangular_number(n)\n        min_index = 0\n        max_index = n\n\n        while min_index < max_index:\n            mid_index = (min_index + max_index) // 2\n            if smallest_triangular_number(mid_index) == max_triangular_num:\n                max_index = mid_index\n            else:\n                min_index = mid_index + 1\n\n        return min_index\n\n    return smallest_index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # base case\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 0\n    elif n == 5:\n        return 0\n    elif n == 6:\n        return 0\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 0\n    elif n == 9:\n        return 0\n\n    # recursive case\n    else:\n        index = 1\n        triangular = 1\n        triangular_digits = 1\n\n        # find smallest triangular number with n digits\n        while triangular_digits < n:\n            triangular *= 10\n            triangular_digits += 1\n\n        # find index of smallest triangular number with n digits\n        while triangular < 10**(n-1):\n            index += 1\n            triangular = (index * (index + 1)) // 2\n\n        return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n < 2:\n        return -1 # Return -1 for n < 2\n    \n    triangular_numbers = []\n    for i in range(n, 0, -1):\n        triangular_numbers.append(i * (i+1) // 2)\n    \n    smallest_triangular_number = min(triangular_numbers)\n    \n    index = triangular_numbers.index(smallest_triangular_number)\n    \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize a counter to keep track of the number of digits in triangular numbers \n    counter = 0 \n    triangular_numbers = [] \n    # Initialize a counter to keep track of the number of digits in the smallest triangular number \n    smallest_triangular_number = 0 \n\n    # Loop through all numbers from 1 to n \n    for i in range(1, n + 1): \n        # Calculate the next triangular number with n digits \n        triangular_number = i * (i + 1) / 2 \n        # If the current triangular number has n digits, check if it's smaller than the current smallest triangular number \n        if len(str(triangular_number)) == n and triangular_number < smallest_triangular_number: \n            smallest_triangular_number = triangular_number \n            counter = n \n\n    # Return the index of the smallest triangular number \n    return counter"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 0\n    count = 0\n    while len(str(triangular_num)) < n:\n        triangular_num += 1\n        count += 1\n\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Initialize the smallest triangular number with n digits to be 10^(n-1)\n    min_num = 10**(n-1)\n    # Initialize the index of smallest triangular number with n digits to be 0\n    min_index = 0\n    # Iterate over all the integers from 1 to 10^n-1\n    for i in range(1, 10**(n-1)+1):\n        # Check if i is a triangular number with n digits\n        triangular_num = i*i + i\n        triangular_digits = len(str(triangular_num))\n        if triangular_digits == n:\n            # If i is a triangular number with n digits, check if it is smaller than min_num\n            if triangular_num < min_num:\n                # If i is smaller than min_num, update min_num and min_index\n                min_num = triangular_num\n                min_index = i\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Calculate the value of smallest triangular number with n digits\n    sum_of_digits = math.factorial(n) * 2**n - math.factorial(n-1) * 2**(n-1)\n    # Calculate the index of smallest triangular number with n digits\n    triangular_num = 1\n    for i in range(n):\n        triangular_num *= 10\n        triangular_num += sum_of_digits\n    index_of_triangular_num = triangular_num - sum_of_digits\n    \n    return index_of_triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # initializing variables\n    min_triangular_number = 0\n    smallest_triangular_number = 0\n    triangular_numbers = []\n\n    # calculating the smallest triangular number\n    for i in range(1, n+1):\n        smallest_triangular_number += i**i\n\n    # calculating the minimum triangular number\n    for i in range(1, n+1):\n        min_triangular_number += i*(i+1)//2\n\n    # initializing the index\n    index = -1\n\n    # checking if the minimum triangular number is smaller than the smallest triangular number\n    if min_triangular_number < smallest_triangular_number:\n        # calculating the index\n        index = math.ceil(math.log(smallest_triangular_number, 2)) - 1\n\n    # returning the index\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Add the current element as a key and the next element as a value to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n        \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            test_dict[i] = test_tup[i]\n        else:\n            test_dict[test_tup[i]] = i\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a list of adjacent pairs\n    adjacent_pairs = list(zip(test_tup[0::2], test_tup[1::2]))\n    \n    # Create an empty dictionary\n    d = {}\n    \n    # Loop through the adjacent pairs and add them to the dictionary\n    for pair in adjacent_pairs:\n        key = pair[0]\n        value = pair[1]\n        d[key] = value\n        \n    # Return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Traverse through the tuple\n    for i in range(len(test_tup)):\n        # Check if the index is odd\n        if i % 2 == 1:\n            # Extract the value and key from the tuple at the current index\n            value = test_tup[i]\n            key = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    value = 1\n    result_dict = {}\n    while value < len(test_tup):\n        result_dict[test_tup[key]] = test_tup[value]\n        key += 1\n        value += 1\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # initialize an empty dictionary\n    result_dict = {}\n    \n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # check if the index is even (i.e. not the last element)\n        if i % 2 == 0:\n            # extract the key from the current tuple element\n            key = test_tup[i]\n            # extract the value from the next tuple element\n            value = test_tup[i+1]\n            # add the key-value pair to the dictionary\n            result_dict[key] = value\n    \n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Check if the length of the tuple is even\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Length of the tuple should be even.\")\n        return None\n\n    # Initialize the dictionary\n    dict_obj = {}\n\n    # Loop through the tuple and add the pairs of adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # Define a dictionary to store key-value pairs\n    my_dict = {}\n    # Loop through the tuple using range() function\n    for i in range(len(test_tup)):\n        # If the current index is even, add the key-value pair to the dictionary\n        if i % 2 == 0:\n            # Assign the first element to the key and the second element to the value\n            my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the final dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 1\n    if len(s) == 1:\n        # if it is, return True\n        return True\n    \n    # if the length is greater than 1, check if all the characters are the same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            # if any of the characters are not the same, return False\n            return False\n    \n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, else False.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # first character of the string\n    first_char = s[0]\n    # check if all characters are same\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters are same and False otherwise.\n    '''\n\n    if len(s) == 1:\n        return True\n\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, else False.\n    \"\"\"\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # create a set to store unique characters\n    char_set = set()\n    # loop through each character in the string\n    for char in s:\n        # if the character is not already in the set, add it\n        if char not in char_set:\n            char_set.add(char)\n        # if the set has more than one element, return False\n        elif len(char_set) > 1:\n            return False\n    # if we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2)/4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 4 * side\n\n    # Calculate the area of the tetrahedron using the Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 - (side / 2) ** 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (4 * side ** 2) / (s * (1 - s))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (2*side)**0.5\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter*(semi_perimeter+side)*(semi_perimeter+side+side))\n    \n    # Return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = 0.5 * side\n    area = (1.0/6.0) * math.pow(side, 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 6\n    area = math.sqrt(s) * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Using Heron's formula to calculate the area of the tetrahedron\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n    area = (s * (s - side) * (s - side) * (s - side)) ** 0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * (math.sqrt(2) + math.sqrt(3))\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n    return (4 / 3) * s * (side ** 3)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n\n    # Check if the given list is empty or not\n    if not list:\n        return list\n    \n    # Check if the m is greater than the length of the list\n    if m > len(list):\n        return list\n    \n    # Reverse the list from the start to the end\n    reversed_list = list[::-1]\n    \n    # Reverse the list from the m position to the end\n    m_reversed_list = reversed_list[m:]\n    \n    # Reverse the list from the start to the m position\n    start_to_m_reversed_list = reversed_list[:m]\n    \n    # Reverse the list from the m position to the end again\n    m_to_end_reversed_list = reversed_list[m:][::-1]\n    \n    # Merge the two reversed lists\n    rotated_list = start_to_m_reversed_list + m_reversed_list + m_to_end_reversed_list\n    \n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(n//m):\n        temp = list[i]\n        for j in range(i*m, (i+1)*m-1, -1):\n            list[j] = list[j+m]\n        list[i*m-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # check if m is valid\n    if m >= n:\n        return list\n    # rotate the list\n    for i in range(m):\n        temp = list[i]\n        list[i] = list[n-1-i]\n        list[n-1-i] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[-m:] = list[-n:]\n    list[:-m] = list[:-n]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n #to handle the case where m is greater than n\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    if m == 0:\n        return list\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:n] + list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if there are any None values in it.\n    \"\"\"\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup) is None"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes in a tuple and checks if it contains any none value.\n    '''\n    none_found = False\n    \n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    \n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Check if the given number is divisible by every digit.\n        \"\"\"\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    def check_num(num):\n        \"\"\"\n        Check if the given number is divisible by every digit and is within the given range.\n        \"\"\"\n        if num >= startnum and num <= endnum and is_divisible(num):\n            return True\n        return False\n\n    return filter(check_num, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        for digit in str(num):\n            if int(digit) % num!= 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(n):\n        \"\"\"\n        Check if a given number is divisible by every digit.\n        \"\"\"\n        for digit in str(n):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(num) == 0 for num in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    def is_divisible_by_sum(num):\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        return total % 2 == 0\n\n    return list(filter(lambda num: is_divisible_by_digits(num) and is_divisible_by_sum(num), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit % 2 == 0:\n                return True\n        return False\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Check if a number is divisible by every digit it contains.\n        \"\"\"\n        return all(num % d == 0 for d in range(10))\n    \n    return filter(is_divisible, range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda x: all(int(digit) == 0 for digit in str(x))\n\n    # Use a list comprehension to filter the numbers within the given range that are divisible by every digit\n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle is larger than 360 degrees.\")\n        return None\n    else:\n        # calculate area using sine and cosine functions\n        area = r**2 * (math.sin(math.radians(a/360)))**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    # Check if angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area using Pythagorean theorem\n    area = math.pi * r * r * (1 - math.cos(math.radians(a)))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r ** 2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within the valid range\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of the sector\n        area = math.pi * r**2 * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area using radius and angle\n    area = math.pi * r ** 2 * a / 360\n    \n    # Return area\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    # Step 1: Create a table to store lengths of LCS for all prefixes of X, Y, and Z\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n    # Step 2: Fill in the table L[][] using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # Step 3: Find the length of the LCS by tracing back the L[] table\n    i, j, k = m, n, p\n    lcs_length = L[i][j][k]\n    lcs = [X[i-1]]\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs.append(X[i-1])\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    # Reverse the lcs list to obtain the original sequence\n    lcs = lcs[::-1]\n    return lcs, lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n\n    #creating a table to store length of longest common subsequence of prefixes of X,Y and Z\n    LCS = [[0 for j in range(O)] for i in range(M + 1)]\n\n    #filling the table using dynamic programming\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            for k in range(1, O + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n\n    #backtrack to find the LCS\n    i = M\n    j = N\n    k = O\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D table to store the lengths of LCS of all prefixes of X, Y and Z\n    L = [[[0] * (o + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # fill the 3D table using dynamic programming approach\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, o + 1):\n                if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j][k - 1])\n\n    # extract the LCS from the 3D table and return it as a string\n    lcs = \"\"\n    i = n\n    j = m\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n            lcs = X[j - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dynamic programming table to store the length of LCS for all possible substrings \n    T = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n    \n    # Fill the table using dynamic programming method \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    \n    # Backtrack to find the LCS \n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes in three string sequences and finds the longest common subsequence (LCS) between them.\n    The LCS is defined as the longest substring that is common to all three sequences.\n    '''\n\n    # Find the length of each string sequence\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store the length of the LCS for all prefixes of the three sequences\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif L[i-1][j] > L[i][j-1]:\n                L[i][j] = L[i-1][j]\n            else:\n                L[i][j] = L[i][j-1]\n\n    # Use the table to find the LCS of the three sequences\n    i = m\n    j = p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # creating a function to find the length of the longest common subsequence\n    def length_of_lcs(a, b, c):\n        # initialize the length of the lcs to 0\n        length = 0\n        # create a 2D array to store the lengths of all lcs of the three strings\n        dp = [[0 for j in range(len(c)+1)] for i in range(len(b)+1)]\n        # fill the 2D array using dynamic programming\n        for i in range(1, len(b)+1):\n            for j in range(1, len(c)+1):\n                if b[i-1] == c[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                    length = max(length, dp[i][j])\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return length\n\n    # find the length of the longest common subsequence of the three strings\n    length = length_of_lcs(X, Y, Z)\n\n    # create a 2D array to store the common subsequences of the three strings\n    lcs = [[0 for j in range(length+1)] for i in range(length+1)]\n\n    # fill the 2D array using dynamic programming\n    for i in range(len(b)):\n        for j in range(len(c)):\n            if b[i] == c[j]:\n                lcs[i+1][j+1] = lcs[i][j] + 1\n            else:\n                lcs[i+1][j+1] = max(lcs[i+1][j], lcs[i][j+1])\n\n    # create a list to store the lcs of the three strings\n    lcs_list = []\n\n    # find the lcs of the three strings\n    for i in range(length, -1, -1):\n        for j in range(length, -1, -1):\n            if lcs[i][j] == lcs[i][j+1]:\n                lcs_list.append(b[i])\n            elif lcs[i][j] == lcs[i+1][j]:\n                lcs_list.append(c[j])\n\n    # reverse the list and return the lcs of the three strings\n    return lcs_list[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    return p[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for _ in range(n + 1)] \n  \n    # Step 1: Build LCS table in bottom up manner.\n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 2: Print LCS table to get the LCS string.\n    lcs_str = \"\" \n    i, j = n, m \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs_str = X[i - 1] + lcs_str \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return lcs_str[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, p = len(X), len(Y), len(Z)\n    L = [[0] * (p + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j] = L[i - 1][j]\n                elif X[i - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j]\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize the table to store the length of the longest common subsequence\n    # for all possible pairs of suffixes of X, Y and Z\n    table = [[0] * (len(Z)+1) for _ in range(len(X)+1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # Find the starting index of the longest common subsequence\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j-1][k]:\n            i -= 1\n        elif table[i][j-1][k] == table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all the words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Loop through each word and insert spaces before capital letters\n    new_str = ''\n    for word in words:\n        if word[0].isupper():\n            new_str +='' + word\n        else:\n            new_str += word\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Convert the first letter of each word to upper case\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9]+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    # Join the words back together with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Create a list to store the words with spaces\n    space_words = []\n    \n    # Loop through each word and check if the first letter is capitalized\n    for word in words:\n        if word[0].isupper():\n            # If the first letter is capitalized, add a space before it and append the word to the list\n            space_words.append(''+ word)\n        else:\n            # Otherwise, append the word to the list as is\n            space_words.append(word)\n    \n    # Join the space_words list into a single string with spaces as separator\n    result =''.join(space_words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it does, add a space after it\n            words[i] = words[i] +''\n    # Join the words back together with spaces\n    final_str =''.join(words)\n    return final_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all the special characters from the given string\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1)\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Iterate over the words and check if the first letter is capital\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it is capital, add a space before it\n            words[i] ='' + words[i]\n    \n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through each word in the list\n    for i, word in enumerate(words):\n        # If the word starts with a capital letter, add a space before it\n        if word[0].isupper():\n            words[i] ='' + word\n\n    # Join the words back into a string with spaces between them\n    result = ''.join(words)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-word characters from the string\n    pattern = r'\\W+'\n    str1 = re.sub(pattern, '', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first word and join the words with spaces\n    result = words[0].capitalize()\n    for word in words[1:]:\n        result +='' + word.capitalize()\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([A-Z][a-z]+)', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # split the list into a list of lists, each inner list containing one number as a string\n    nums = [list(filter(str.isdigit, num)) for num in nums_str]\n    # convert the lists of lists into lists of integers\n    nums_int = [int(''.join(num)) for num in nums]\n    # sort the integers in numerical order\n    nums_int.sort()\n    # convert the sorted integers back to lists of strings and join them back into a list of strings\n    nums_str_sorted = [str(num) for num in nums_int]\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num in nums_str:\n        if num.isdigit():\n            nums.append(int(num))\n        else:\n            nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = int(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the list to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers numerically\n    nums_int.sort()\n    # Convert the list of integers back to a list of strings\n    nums_str = [str(num) for num in nums_int]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # converting all the elements in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # using the sort() method of the list to sort the integers in ascending order\n    nums.sort()\n\n    # converting the sorted integers back to strings and returning the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to integers using map() function\n    nums_int = list(map(int, nums_str))\n    \n    # Sort the integers using the sorted() function\n    sorted_nums = sorted(nums_int)\n    \n    # Convert the sorted integers back to strings using map() function\n    sorted_nums_str = list(map(str, sorted_nums))\n    \n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): A list of strings representing numbers.\n\n    Returns:\n    sorted_nums_str (list): A sorted list of strings representing numbers.\n    \"\"\"\n    # Convert all strings to float numbers and sort them\n    float_nums = sorted([float(num_str) for num_str in nums_str])\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in float_nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    # convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers\n    nums.sort()\n    # convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert strings to float values\n    nums = [float(num) for num in nums_str]\n    # Sort the list in ascending order using the sorted() function\n    nums_sorted = sorted(nums)\n    # Convert sorted list back to strings\n    nums_str_sorted = [str(num) for num in nums_sorted]\n    return nums_str_sorted"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # loop through the list and add each element to the tuple\n    for element in test_list:\n        test_tup += (element,)\n    # return the tuple with the added elements\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # convert the list to a set to remove any duplicates\n    test_list = set(test_list)\n\n    # add the tuple to the list\n    test_list.add(test_tup)\n\n    # convert the list back to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the given index is less than the length of the array, check if the left child is smaller than the current index.\n    if i * 2 + 1 < len(arr):\n        if arr[i] > arr[i * 2 + 1]:\n            return False\n\n    # If the given index is greater than 0, check if the parent is smaller than the current index.\n    if i > 0 and arr[i] > arr[i // 2]:\n        return False\n\n    # If both conditions are satisfied, the array represents a min heap.\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) / 2:\n        # if the size of the array is less than or equal to half of its initial size,\n        # then the array represents a min heap\n        return True\n    else:\n        # if the size of the array is greater than half of its initial size,\n        # then the array does not represent a min heap\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_heapify(arr, n, i):\n    '''\n    This function takes an array and its size and an index i and rearranges the array\n    such that the element at index i is the minimum element of the heap.\n    '''\n    smallest = i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, n, smallest)\n\n\ndef is_min_heap(arr, n):\n    '''\n    This function takes an array and its size and returns True if it represents a min heap\n    and False otherwise.\n    '''\n    for i in range(n//2 - 1, -1, -1):\n        min_heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n\n    return True\n\n\ndef check_min_heap_helper(arr, n):\n    '''\n    This function takes an array and its size and checks if it represents a min heap or not.\n    If it does represent a min heap, it returns True, else it returns False.\n    '''\n    if is_min_heap(arr, n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n\n    # Check if the array has at least one element\n    if len(arr) == 0:\n        return False\n\n    # Check if the array is a min heap\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    # Perform n-1 iterations of the Max Heap property check\n    for i in range(n-1):\n        # If the current element is greater than its parent, return False\n        if arr[i] > arr[parent(i, n)]:\n            return False\n\n    # If we reach here, then the array is a valid min heap\n    return True\n\ndef parent(i, n):\n    '''\n    Returns the index of the parent of the node at index i in a max heap.\n    '''\n    return (i - 1) // 2\n\ndef min_heapify(arr, i, n):\n    '''\n    Implement the Min Heapify algorithm to convert an array into a min heap.\n    '''\n\n    # Find the index of the smallest child and swap it with the current node\n    smallest = i\n    left = left_child(i, n)\n    right = right_child(i, n)\n\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n\n        # Recursively heapify the affected sub-tree\n        min_heapify(arr, smallest, n)\n\ndef min_heapify_array(arr):\n    '''\n    Heapify the given array using the Min Heapify algorithm.\n    '''\n\n    n = len(arr)\n\n    # Call the min_heapify function for every node in the array\n    for i in range(n // 2 - 1, -1, -1):\n        min_heapify(arr, i, n)\n\n    # Build a max heap using the array as it is\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        min_heapify(arr, 0, i)\n\n    return arr"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i > len(arr) // 2:\n        return True\n    \n    # If the left child is greater than the parent, return False\n    if arr[i] < arr[2 * i]:\n        return False\n    \n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array and checks if it represents a min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n\n    # If the root node is not at index 0, then it is not a min heap\n    if i!= 0 and arr[i] < arr[int(i/2)]:\n        return False\n\n    # Recursively check for left and right sub-arrays\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n\n    # If left child exists and it is greater than root, then it is not a min heap\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n\n    # If right child exists and it is greater than root, then it is not a min heap\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] < arr[1]:\n            return True\n        else:\n            return False\n    else:\n        return check_min_heap_helper(arr, len(arr)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n//2 + 1):\n        if arr[i] > arr[2*i]:\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        j_prev = jacobsthal_num(n-1)\n        j_current = 1\n        for _ in range(3, n+1):\n            j_next = (j_prev + j_current) % 21\n            j_prev = j_current\n            j_current = j_next\n        return j_current"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    j = 0\n    j_prev = 1\n    for i in range(n):\n        if i % 2 == 0:\n            j_prev = j_prev + j\n            j = j_prev\n        else:\n            j_prev = j_prev + j_prev\n            j = j_prev\n    \n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    if n == 1:\n        return jacobsthal_numbers[1]\n    elif n == 2:\n        return jacobsthal_numbers[2]\n    else:\n        for i in range(3, n+1):\n            jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n        return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (jacobsthal_num(n-1) - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        l = 1\n        while l <= n:\n            j = (j*j + l) % 1000000\n            l = (l*l + l) % 1000000\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) - jacobsthal_num(n-2)) // 2"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum k records from the list.\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Create an empty set to store the k minimum records\n    k_set = set()\n    \n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # If the set has less than k elements, add the current record to the set\n        if len(k_set) < K:\n            k_set.add(sorted_list[i])\n        # If the set has k elements, compare the current record with the minimum element in the set\n        elif sorted_list[i] < sorted_list[0]:\n            # Remove the minimum element from the set\n            k_set.remove(sorted_list[0])\n            # Add the current record to the set\n            k_set.add(sorted_list[i])\n    \n    # Convert the set to a list and return the list of k minimum records\n    return list(k_set)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # initialize minimum list and its length\n    min_list = []\n    min_length = 0\n\n    # iterate over the tuple list\n    for i in test_list:\n\n        # compare the length of the tuple with the current minimum length\n        if len(i) < min_length:\n\n            # if the length of the tuple is smaller, update minimum list and its length\n            min_list = [i]\n            min_length = len(i)\n\n        # if the length of the tuple is equal to the minimum length, append the tuple to the minimum list\n        elif len(i) == min_length:\n            min_list.append(i)\n\n    # return the minimum list of length K\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    # Initialize a dictionary to store the counts of each element in the list\n    count_dict = {}\n    for i in range(len(test_list)):\n        if test_list[i] not in count_dict:\n            count_dict[test_list[i]] = 0\n        count_dict[test_list[i]] += 1\n    \n    # Initialize a list to store the minimum counts\n    min_counts = []\n    \n    # Traverse the dictionary and find the minimum count\n    for i in count_dict:\n        if count_dict[i] < K:\n            min_counts.append(i)\n        else:\n            break\n    \n    # Return the minimum counts as a list\n    return min_counts"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order based on the second element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # initialize min_k as the first K elements of the sorted list\n    min_k = sorted_list[:K]\n    # initialize the minimum value of min_k to the minimum value of the first K elements\n    min_k_value = sorted_list[:K][0][1]\n    # iterate through the remaining elements of the sorted list\n    for i in sorted_list[K:]:\n        # if the current element in the sorted list has a higher value than the current minimum value of min_k, update min_k\n        if i[1] < min_k_value:\n            min_k = sorted_list[:K] + [i]\n            min_k_value = i[1]\n        # if the current element in the sorted list has the same value as the current minimum value of min_k, add it to min_k\n        elif i[1] == min_k_value:\n            min_k.append(i)\n    # return the minimum value of min_k\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list\n    '''\n    # sorting the test_list by first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # initializing minimum count variable and result list\n    minimum = float('inf')\n    result = []\n    # iterating through the sorted list and checking if the count is less than k\n    for tup in test_list:\n        count = 1\n        for i in range(1, len(test_list)):\n            if tup[0] == test_list[i][0]:\n                count += 1\n        if count < K:\n            result.append(tup)\n        if len(result) == K:\n            break\n    # returning the result list\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Convert the tuple list into a dictionary with keys as the record ID and values as tuples containing the record ID and the record itself\n    record_dict = {}\n    for record in test_list:\n        record_dict[record[0]] = record\n\n    # Sort the dictionary based on the values in the tuples (record ID and record itself)\n    sorted_dict = dict(sorted(record_dict.items(), key=lambda x: x[1]))\n\n    # Create a list of record IDs in descending order of their values in the sorted dictionary\n    record_ids = [k for k in sorted_dict.keys() if sorted_dict[k][0] in sorted_dict.keys()][:K]\n\n    # Convert the list of record IDs back into a list of tuples\n    final_list = [(k, v) for k, v in sorted_dict.items() if k in record_ids]\n\n    return final_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_k_list = []\n    count = 0\n    for x in test_list:\n        if count < K:\n            min_list.append(x)\n            min_k_list.append(min_list)\n            count += 1\n        else:\n            min_list.append(x)\n            min_list.sort(reverse=True)\n            min_k_list[count-1].append(min_list.pop(0))\n    min_k_list = min_k_list[:K]\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    count_dict = {}\n    min_count = float('inf')\n    min_index = None\n    for i in range(len(test_list)):\n        if len(count_dict) < K:\n            count_dict[test_list[i]] = count_dict.get(test_list[i], 0) + 1\n        else:\n            if count_dict[test_list[i]] < min_count:\n                min_count = count_dict[test_list[i]]\n                min_index = i\n                del count_dict[test_list[i+1]]\n        if min_index is not None and len(count_dict) == K:\n            break\n    if min_index is None:\n        return None\n    else:\n        result = []\n        while min_index is not None:\n            result.append(test_list[min_index])\n            min_index = count_dict.get(test_list[min_index], 0) - 1\n            if min_index < 0:\n                del count_dict[test_list[min_index]]\n        result.sort()\n        return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    :param test_list: A tuple list containing k records\n    :param K: The number of records to find the minimum of\n    :return: A tuple containing the minimum k records in the tuple list\n    \"\"\"\n    # Sort the list of tuples based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the minimum k record to the first record\n    min_record = test_list[0]\n\n    # Iterate through the remaining records\n    for record in test_list[1:]:\n        # If the current record is less than the minimum k record, update the minimum k record\n        if record[0] < min_record[0]:\n            min_record = record\n\n    # Return the minimum k record\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_count = float('inf')\n    min_list = []\n\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i] < min_list[0][0]:\n                del min_list[0]\n                min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    \n    # iterate over each index in l1\n    for i in range(len(l1)):\n        # if the element at that index appears in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # If the element at that index is in the second and third lists, add it to the common elements list\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    \n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the indices and values of elements in each list\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    \n    # Iterate through the first list and add each element to the dictionary\n    for i in range(len(l1)):\n        dict1[i] = l1[i]\n        \n    # Iterate through the second list and add each element to the dictionary\n    for i in range(len(l2)):\n        dict2[i] = l2[i]\n        \n    # Iterate through the third list and add each element to the dictionary\n    for i in range(len(l3)):\n        dict3[i] = l3[i]\n        \n    # Create an empty list to store the common elements found\n    common_elements = []\n    \n    # Iterate through the dictionary and check if each element is common for all three lists\n    for i in range(len(l1)):\n        if i in dict1 and i in dict2 and i in dict3:\n            if l1[i] == l2[i] and l1[i] == l3[i]:\n                # If the element is common for all three lists, add it to the list of common elements\n                common_elements.append(l1[i])\n                common_elements.append(l2[i])\n                common_elements.append(l3[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            common_list.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            common_list.append(l3[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second smallest number in the list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Check if the list has only one element\n    if len(numbers) == 1:\n        return None\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list of numbers.\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Check if the length of the list is less than 2\n    if len(numbers) < 2:\n        return None\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() #sort the list in ascending order\n    return numbers[1] #return the second smallest number\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<![a-z])a(?=[b]*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r\"a[b]+\")\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba\\w*b\\b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    The pattern used is:\n    \n    -a-b*\n    \n    where a is a non-capturing group that matches any character, and b is a capturing group that matches any 'b' character.\n    \n    The function returns a list of all the matches found in the input text.\n    '''\n    \n    # The pattern used is:\n    # -a-b*\n    pattern = r'-a-b*'\n    \n    # The search function is used to search for all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # The matches are returned as a list\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = \"aaabbbcccddeeeffffgghhiijjklmnoopqr\"\nresult = text_match_zero_one(text)\nif result:\n    print(f\"The string {text} contains the pattern 'a' followed by one or more 'b's.\")\n    print(f\"The matched pattern is '{result}'.\")\nelse:\n    print(f\"The string {text} does not contain the pattern 'a' followed by one or more 'b's.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*b*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b){1,}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=[b]+)'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    \"\"\"\n    Check if a given string is a reverse of itself.\n    \"\"\"\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the reversed string is in the list\n            if test_list[j][::-1] in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Initialize variables for the current string\n        current_string = test_list[i]\n        # Initialize variables for the count of reverse pairs\n        count = 0\n        # Loop through each character in the current string\n        for j in range(len(current_string)):\n            # Get the first character of the current string\n            char1 = current_string[j]\n            # Loop through each character in the current string starting from the next character\n            for k in range(j+1, len(current_string)):\n                # Get the second character of the current string\n                char2 = current_string[k]\n                # If the characters are in reverse order, increment the count of reverse pairs\n                if char1 == char2[::-1]:\n                    count += 1\n        # Print the count of reverse pairs for the current string\n        print(\"Count of reverse pairs for string {}: {}\".format(i+1, count))\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_dict = {}\n\n    # loop through the string list\n    for string in test_list:\n        # loop through the characters of the string\n        for i in range(len(string)):\n            # if the character is not the first character, add the reversed character to the dictionary\n            if i > 0:\n                reverse_char = string[i]\n                reverse_dict[reverse_char] = reverse_dict.get(reverse_char, 0) + 1\n    \n    # count the reverse pairs\n    count = 0\n    for pair, count in reverse_dict.items():\n        # if the count is odd, it means there are at least two strings of equal length with the same reversed characters\n        if count % 2!= 0:\n            count += 1\n            count += 1\n        count = count // 2  # divide by 2 to get the count of pairs of strings of equal length\n        count *= 2  # double the count to get the count of pairs of reverse strings\n        count -= 1  # subtract 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of different lengths\n        count *= 2  # double the count to get the count of pairs of different lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of unequal lengths\n        count *= 2  # double the count to get the count of pairs of strings of unequal lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of different reversed lengths\n        count *= 2  # double the count to get the count of pairs of different reversed lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of unequal reversed lengths\n        count *= 2  # double the count to get the count of pairs of strings of unequal reversed lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of equal reversed lengths\n        count *= 2  # double the count to get the count of pairs of strings of equal reversed lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of unequal lengths\n        count *= 2  # double the count to get the count of pairs of strings of unequal lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of equal lengths\n        count *= 2  # double the count to get the count of pairs of strings of equal lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of different lengths\n        count *= 2  # double the count to get the count of pairs of different lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of unequal lengths\n        count *= 2  # double the count to get the count of pairs of strings of unequal lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of strings of equal lengths\n        count *= 2  # double the count to get the count of pairs of strings of equal lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get the count of pairs of different lengths\n        count *= 2  # double the count to get the count of pairs of different lengths\n        count += 1  # add 1 to get the count of pairs of unique strings\n        count //= 2  # divide by 2 to get"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n            if test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Iterate through each string in the list\n    for i in range(len(test_list)):\n        # Find the length of the current string\n        length = len(test_list[i])\n        \n        # Iterate through each character in the current string\n        for j in range(length//2):\n            # Check if the reverse of the current character matches the first character in the current string\n            if test_list[i][j] == test_list[i][length-j-1]:\n                # If it does, increment the count of reverse pairs\n                count_reverse_pairs[i].append(j)\n                count_reverse_pairs[i].append(length-j-1)\n                \n    # Return the count of reverse pairs\n    return count_reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create a dictionary to store the count of pairs for each string\n    count_dict = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n        # Reverse the string and add it to the dictionary\n        rev_string = string[::-1]\n        if rev_string not in count_dict:\n            count_dict[rev_string] = 1\n        else:\n            count_dict[rev_string] += 1\n\n    # Iterate through the dictionary and count the pairs of strings that are in reverse order\n    pair_count = 0\n    for key, value in count_dict.items():\n        if key in count_dict:\n            pair_count += value\n\n    # Return the count of pairs\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist = tuple(sorted(sublist))  # sort the list to make it unique\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the original list to a set to remove duplicates\n    unique_set = set(list1)\n    # Initialize an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    # Iterate over the unique set of sublists\n    for sublist in unique_set:\n        # Convert each sublist back to a list so that we can count its occurrences\n        sublist_list = list(sublist)\n        # Count the number of occurrences of the sublist in the original list\n        count = list1.count(sublist_list)\n        # Add the count of the sublist to the dictionary\n        sublist_count[tuple(sublist_list)] = count\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple and store in a dictionary\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[tuple(sublist)] = sublist_count.get(tuple(sublist), 0) + 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n\n    # loop through each element in the original list\n    for element in list1:\n        # convert the element to a tuple\n        tup = tuple(element)\n        \n        # check if the tuple is in the dictionary\n        if tup in counts:\n            # if it is, increment the count by 1\n            counts[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            counts[tup] = 1\n\n    # return the final dictionary with the counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n    \n    # Loop through each element of the list\n    for i in range(len(list1)):\n        # Convert the list element to a tuple and check if it's already in the dictionary\n        sublist = tuple(list1[i])\n        if sublist in count_dict:\n            # If it's in the dictionary, increment its count by 1\n            count_dict[sublist] += 1\n        else:\n            # If it's not in the dictionary, add it with a count of 1\n            count_dict[sublist] = 1\n    \n    # Return the dictionary containing the count of each unique sublist\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    # loop through each list in the original list\n    for lst in list1:\n        # convert the list to a tuple and check if it exists in the dictionary\n        if tuple(sorted(lst)) in count_dict:\n            # increment the count of the tuple in the dictionary\n            count_dict[tuple(sorted(lst))]+=1\n        else:\n            # otherwise, add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sorted(lst))]=1\n    # return the dictionary of unique sublists with their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the count of unique tuples\n    count = {}\n    \n    # Looping through each element in the list\n    for i in range(len(list1)):\n        # Converting each element to a tuple and checking if it is already in the dictionary\n        if tuple(list1[i]) in count:\n            # Incrementing the count of the tuple by 1\n            count[tuple(list1[i])] += 1\n        else:\n            # Adding the tuple to the dictionary with a count of 1\n            count[tuple(list1[i])] = 1\n    \n    # Returning the dictionary\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function counts the number of unique sublists in a given list.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if tuple(sorted(sublist)) not in count:\n                count[tuple(sorted(sublist))] = 1\n            else:\n                count[tuple(sorted(sublist))]+=1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if tuple(list1[i:j]) not in count:\n                count[tuple(list1[i:j])] = 1\n            else:\n                count[tuple(list1[i:j])] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        if list(list1[i]) in counts:\n            counts[tuple(list1[i])] += 1\n        else:\n            counts[tuple(list1[i])] = 1\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        num = float(num)\n        num = round(num, 2)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the string contains any non-numeric characters\n    if any(char not in '0123456789.' for char in num):\n        return False\n\n    # Split the string into integer and decimal parts\n    parts = num.split('.')\n\n    # Check if the decimal part has a precision of 2\n    if len(parts[1]) > 2:\n        return False\n\n    # Check if the integer part contains a non-zero digit\n    for char in parts[0]:\n        if char == '0':\n            return False\n\n    # Check if the integer part is a valid decimal\n    decimal_num = int(parts[0]) + int(parts[1]) / 10\n    if decimal_num == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if float(num).is_integer():\n            return True\n        else:\n            decimal = str(float(num)).split('.')\n            if len(decimal) == 2 and len(decimal[1]) <= 2:\n                return True\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    \n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    \n    if len(parts[0]) > 10 or len(parts[1]) > 2:\n        return False\n    \n    for digit in parts[0]:\n        if digit < '0' or digit > '9':\n            return False\n    \n    for digit in parts[1]:\n        if digit < '0' or digit > '9':\n            return False\n    \n    if len(parts[0]) - len(parts[1]) > 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the number has a precision of 2\n    if len(num)!= 2:\n        return False\n\n    # Check if the first digit is greater than or equal to 5\n    if int(num[0]) >= 5:\n        return False\n\n    # Check if the second digit is greater than or equal to 5\n    if int(num[1]) >= 5:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        # Convert the number to a float with 2 decimal places\n        float_num = float(num)\n        # Check if the float has exactly 2 decimal places\n        if str(float_num).count('.')!= 1:\n            return False\n        # Check if the float has no more than 2 digits after the decimal point\n        if len(str(float_num).split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Convert the input string to a float\n    num = float(num)\n    \n    # Check if the float has 2 decimal places\n    if len(str(num).split('.')[1]) == 2:\n        # If it has, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_digits = 0\n    for digit in num:\n        if digit.isdigit() and int(digit) >= 0 and int(digit) <= 9:\n            decimal_digits += 1\n            if decimal_digits == 2:\n                return True\n        else:\n            return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # sort the array in ascending order\n    arr = sorted(arr)\n    # initialize a counter for unique elements\n    unique_count = 0\n    # initialize a list to store unique elements\n    unique_list = []\n    # loop through the sorted array\n    for i in range(len(arr)):\n        # check if the current element is already in the unique list\n        if arr[i] in unique_list:\n            # increment the counter for unique elements\n            unique_count += 1\n        # if the current element is not in the unique list, add it to the list\n        else:\n            unique_list.append(arr[i])\n            # reset the counter for unique elements\n            unique_count = 0\n    # if the length of the unique list is equal to the original length of the array, the array contains only one distinct element\n    if len(unique_list) == len(arr):\n        return True\n    # otherwise, the array contains more than one distinct element\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"The list contains one or more repeated elements\"\n    else:\n        return \"The list contains only one distinct element\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if there is only one distinct element in the list, otherwise it returns False.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        unique_flag = True\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    unique_flag = False\n        return unique_flag"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Checks whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Create a set to keep track of distinct elements\n    distinct_elements = set()\n\n    # Add elements from the list to the set\n    for element in arr:\n        distinct_elements.add(element)\n\n    # Check if the set has only one element\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set of the elements in the list\n    set_arr = set(arr)\n\n    # If the length of the set is 1, then the list contains only one distinct element\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check for valid input\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Months are given as number from 1 to 12.\"\n    \n    # Check for February\n    if monthnum3 == 2:\n        return \"February has 28 or 29 days.\"\n    \n    # Check for leap years\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"Leap years have 30 days.\"\n    \n    # Check for regular years\n    return \"Regular years have 31 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            days[1] = 29\n        elif monthnum3 == 2 and (year % 4!= 0 or (year % 100 == 0 and year % 400!= 0)):\n            days[1] = 28\n        return days[monthnum3 - 1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum3 == 2 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 2 and day <= 28:\n                return True\n            else:\n                return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if day <= 30:\n            return True\n        else:\n            return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if day <= 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum3 in range(1, 13):\n        return days_in_month[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    months = {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\"\n    }\n    if monthnum3 in months and monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100!= 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    \n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    \n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes a list 'arr' of size 'n' and returns the minimum difference between any two elements in the list.\n    \n    The function first sorts the array in non-decreasing order. Then, it iterates through the array and calculates the difference between any two adjacent elements.\n    The function returns the minimum difference found.\n    \"\"\"\n    \n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Initialize the minimum difference and the starting index of the current range\n    min_diff = float('inf')\n    start_index = 0\n    \n    # Iterate through the array and calculate the difference between any two adjacent elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n        \n        # Update the starting index of the current range\n        if diff == min_diff:\n            start_index = i\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to keep track of the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = 0\n\n    # Iterate through the array\n    for i in range(n-1):\n        # Find the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum and maximum difference\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum element in the array\n    min_elem = min(arr)\n\n    # Initialize two variables to store the minimum difference and the index of the minimum element\n    min_diff = float('inf')\n    min_index = 0\n\n    # Iterate over the array and check for the minimum difference between any two elements\n    for i in range(1, n):\n        if arr[i] - min_elem < min_diff:\n            min_diff = arr[i] - min_elem\n            min_index = i\n\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = abs(arr[n-1] - arr[0]) \n    for i in range(n-1): \n        diff = abs(arr[i+1] - arr[i]) \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    min_index = 0\n    \n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    The minimum difference can be calculated by comparing the difference between adjacent elements in the array.\n    If the difference between adjacent elements is greater than or equal to the minimum difference found so far, the minimum difference is updated accordingly.\n    '''\n\n    # Initialize the minimum difference as the maximum possible value\n    min_diff = float('inf')\n\n    # Traverse through the array and calculate the difference between adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the minimum difference found so far\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference found so far\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n\n    # Sort the array in ascending order \n    arr.sort() \n\n    # Initialize variables \n    min_diff = arr[1] - arr[0] \n\n    # Loop through the array \n    for i in range(1, n-1): \n\n        # Find the difference between the current element and the next element \n        diff = arr[i+1] - arr[i] \n\n        # Update the minimum difference if it's smaller than the current minimum \n        if diff < min_diff: \n            min_diff = diff \n\n    # Return the minimum difference \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        if i == n-2:\n            diff = arr[i+1] - arr[i]\n        else:\n            diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for char in str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Increment the count variable\n            count += 1\n\n    # Return the count of digits\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    # Calculate the maximum number of digits\n    max_digits = int(math.log10(n)) + 1\n\n    # Initialize the variables\n    i = 0\n    polite_number = 0\n\n    # Loop through all the possible digits\n    while i <= max_digits:\n        # Calculate the power of 10 raised to the current digit\n        power = 10 ** i\n\n        # Check if the current digit is a polite digit\n        if (n // power) % 10 == i:\n            polite_number += power\n\n        # Increment the digit\n        i += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def factorial(n): \n        if n == 0: \n            return 1\n        else: \n            return n * factorial(n-1)\n\n    def nth_polite_number(n): \n        def is_prime(n): \n            if n <= 1: \n                return False\n            for i in range(2, int(math.sqrt(n)) + 1): \n                if n % i == 0: \n                    return False\n            return True\n\n        def prime_factorization(n): \n            factors = []\n            i = 2\n            while i * i <= n: \n                if n % i == 0 and is_prime(i): \n                    factors.append(i)\n                    n //= i\n                else: \n                    i += 1\n            if n > 1: \n                factors.append(n)\n            return factors\n\n        def is_polite_number(num): \n            factors = prime_factorization(num)\n            return all(is_prime(f) for f in factors)\n\n        def nth_polite_factorization(n): \n            polite_factorization = [f for f in prime_factorization(n) if is_prime(f)]\n            return polite_factorization\n\n        def nth_polite_number_helper(n, polite_factorization): \n            if n == 1: \n                return 1\n            else: \n                return nth_polite_number_helper(n-1, polite_factorization) * polite_factorization[0]\n\n        polite_factorization = nth_polite_factorization(n)\n        if len(polite_factorization) == 0: \n            return 1\n        else: \n            return nth_polite_number_helper(n, polite_factorization)\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Define a dictionary to store the polite numbers\n    polite_dict = {\n        1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\", 6: \"VI\", 7: \"VII\", 8: \"VIII\", 9: \"IX\",\n        10: \"X\", 11: \"XI\", 12: \"XII\", 13: \"XIII\", 14: \"XIV\", 15: \"XV\", 16: \"XVI\", 17: \"XVII\", 18: \"XVIII\", 19: \"XIX\",\n        20: \"XX\", 30: \"XXX\", 40: \"XL\", 50: \"L\", 60: \"LX\", 70: \"LXX\", 80: \"LXXX\", 90: \"XC\",\n        100: \"C\", 200: \"CC\", 300: \"CCC\", 400: \"CD\", 500: \"D\", 600: \"DC\", 700: \"DCC\", 800: \"DCCC\", 900: \"CM\",\n        1000: \"M\", 2000: \"MM\", 3000: \"MMM\"\n    }\n\n    # Calculate the nth polite number\n    polite_number = polite_dict[n]\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Define a list of first 100 polite numbers\n    polite_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    # Check if n is within range of 1-100\n    if n < 1 or n > 100:\n        return \"Invalid input\"\n    # Return the nth polite number\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "The problem statement asks us to write a function to find the nth polite number. However, I cannot find any information on how to solve this problem in Python."
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n\n    :param n: The nth polite number to find.\n    :type n: int\n    :return: The nth polite number.\n    :rtype: int\n    \"\"\"\n\n    # Constants\n    a = 5\n    b = 7\n    c = 11\n    d = 13\n\n    # Define a function to check if a number is polite\n    def is_polite_helper(num):\n        \"\"\"\n        Helper function to check if a number is polite.\n\n        :param num: The number to check.\n        :type num: int\n        :return: True if the number is polite, False otherwise.\n        :rtype: bool\n        \"\"\"\n\n        # Calculate the number of divisors of the number\n        def count_divisors(n):\n            \"\"\"\n            Helper function to count the number of divisors of a number.\n\n            :param n: The number to count the divisors of.\n            :type n: int\n            :return: The number of divisors of the number.\n            :rtype: int\n            \"\"\"\n            count = 0\n            for i in range(1, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    count += 1\n                    if n // i!= i:\n                        count += 1\n            return count\n\n        # Calculate the number of divisors of the number without 1\n        divisors_without_1 = count_divisors(num - 1)\n\n        # Check if the number has a prime factor that divides num - 1\n        def has_prime_factor(num, prime):\n            \"\"\"\n            Helper function to check if a number has a prime factor that divides num.\n\n            :param num: The number to check.\n            :type num: int\n            :param prime: The prime number to check.\n            :type prime: int\n            :return: True if the number has a prime factor that divides num, False otherwise.\n            :rtype: bool\n            \"\"\"\n            if num % prime == 0:\n                return True\n            if prime * prime > num:\n                return False\n            return has_prime_factor(num, prime + 1)\n\n        if has_prime_factor(num - 1, 2):\n            return True\n        if has_prime_factor(num - 1, 3) and divisors_without_1 > 3:\n            return True\n        if has_prime_factor(num - 1, 5) and divisors_without_1 > 5:\n            return True\n        if has_prime_factor(num - 1, 7) and divisors_without_1 > 7:\n            return True\n        if has_prime_factor(num - 1, 11) and divisors_without_1 > 11:\n            return True\n        if has_prime_factor(num - 1, 13) and divisors_without_1 > 13:\n            return True\n        return False\n\n    # Iterate through the list of polite numbers and return the nth polite number\n    for i in range(1, n + 1):\n        if is_polite_helper(a * i + b):\n            return a * i + b\n        if is_polite_helper(c * i + d):\n            return c * i + d"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return is_polite(n//2) * (is_polite(n//2) + 1)\n        else:\n            return is_polite((n-1)//2) * (is_polite((n-1)//2) + 1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n\n    The nth polite number is the smallest positive integer x such that the first n\n    positive integers that are multiples of x are all polite, i.e., have\n    a non-negative denominator.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    denominator = 1\n    x = 1\n\n    # Check if the nth polite number exists\n    while count < n:\n        if math.gcd(x, denominator) == 1:\n            count += 1\n            x += 1\n        else:\n            denominator += 1\n\n    return x"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [l1[i:j+1] for i in range(len(l1)) for j in range(i+1, len(l1))]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to \u2018sum\u2019.\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Use set() to remove duplicates from the first list and then use set() again to remove duplicates from the second list\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    # Check if the two lists are of the same length\n    if len(li1)!= len(li2):\n        print(\"The two lists must have the same length\")\n        return\n\n    # Initialize an empty list to store the differences\n    diff_list = []\n\n    # Loop through each element in the first list\n    for i in range(len(li1)):\n        # Check if the corresponding elements in the two lists are different\n        if li1[i]!= li2[i]:\n            # If they are, add the difference to the diff_list\n            diff_list.append(li1[i])\n\n    # Return the list of differences\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # initialize an empty list to store the difference\n    diff = []\n    # iterate over each element in both lists\n    for i in li1:\n        # check if the element is not in the second list\n        if i not in li2:\n            # if it's not, append it to the difference list\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Create an empty list to store the difference\n    diff_list = []\n\n    # Iterate through the first list and add each element to the diff_list if it is not in the second list\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n\n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the odd number\n        fourth_power = i**4\n\n        # Add the fourth power to the sum variable\n        sum += fourth_power\n\n    # Return the sum of the fourth powers of the odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum_of_powers = 0\n    \n    while count < n:\n        count += 1\n        num = 1 + count * 2\n        sum_of_powers += num ** 4\n        \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n): \n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0 \n    i = 1\n    while i <= n: \n        if i % 2!= 0: \n            sum += i**4 \n        i += 1 \n    return sum "
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    \n    for i in range(1, n+1, 2):\n        num *= i\n        sum += num ** 4\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        num = i * i * i\n        if num % 2!= 0:\n            sum += num\n        i += 1\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_parentheses = set(['(', '{', '['])\n    close_parentheses = set([')', '}', ']'])\n\n    for i in range(len(exp)):\n        if exp[i] in open_parentheses:\n            stack.append(exp[i])\n        elif exp[i] in close_parentheses:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n        else:\n            continue\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            while exp[j]!= '(':\n                if exp[j]!= '(':\n                    return False\n                j = stack.pop()\n            if stack:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = {'(', '[', '{'}\n    closing_parentheses = {')', ']', '}'}\n\n    for char in exp:\n        if char in opening_parentheses:\n            stack.append(char)\n        elif char in closing_parentheses:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{', '['] and top!= char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in {')', ']', '}'}:\n            if not stack or stack[-1] not in open_brackets.values():\n                return False\n            stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', ')', '[', ']']:\n                if char!= top:\n                    return False\n            elif char in ['{', '}']:\n                if char!= top.lower():\n                    return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into a list of words\n    words = test_str.split()\n    # Remove all the words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    # Convert the list of words back to a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into a list of words\n    words = test_str.split()\n    # Remove words with length equal to K\n    filtered_words = [word for word in words if len(word)!= K]\n    # Join the filtered words back into a string\n    result_str =''.join(filtered_words)\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with length K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # Join the remaining words into a single string\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Loop through the words and remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return [match.group(),match.start(),match.end()]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use regex to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Extract the occurrences and positions\n    occurrences = [match.start() for match in matches]\n    positions = [match.end() for match in matches]\n\n    # Return the occurrence and positions\n    return occurrences, positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.search() method to find the pattern in the text\n    match = re.search(pattern, text)\n    # check if match is not None\n    if match is not None:\n        # return the index of the pattern and its occurrence in the text\n        return (match.start(), match.end(), match.group())\n    else:\n        # if there is no match, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # if there are no matches, return None\n    if len(matches) == 0:\n        return None\n    # initialize a list to store the matches\n    result = []\n    # loop through the matches and add them to the result list with their positions\n    for match in matches:\n        result.append((match, text.find(match)))\n    # return the result list\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], result[0].start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        results = []\n        for match in matches:\n            results.append({'start':match.start(), 'end':match.end(),'substring':match.group()})\n        return results"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern '{}' occurs {} time(s) at position {}\".format(match.group(), match.span()[0], match.span()[1]))\n        return None\n    else:\n        return \"No match found\"\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if current index is even\n            continue  # skip to the next index\n        odd_count = 0\n        for num in nums[i:]:  # iterate over the current index and check for odd numbers\n            if num % 2 == 1:\n                odd_count += 1\n        if odd_count % 2 == 1:  # if odd_count is odd, the odd index does not contain odd numbers\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0: # check if the index is odd\n            if nums[i] % 2!= 0: # check if the number is odd\n                odd_count += 1\n            else:\n                return False # the odd number was even, so return False\n    if odd_count == len(nums): # all odd numbers found\n        return True # all indices are odd and contain odd numbers\n    else:\n        return False # not all odd numbers found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # iterate over the list and check if the odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    # if we get to this point, then the list contains only odd numbers in every odd index\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n                if odd_count == 2:\n                    return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and (nums[i] % 2!= 0):\n            odd_count += 1\n    if odd_count == len(nums):\n        print(\"All odd positions contain odd numbers.\")\n    else:\n        print(\"Some odd positions do not contain odd numbers.\")"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 2):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels) and (test_str[i+2] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their counts\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num, count in freq.items():\n        if count == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = list(set(arr))\n    sum_unique = sum(unique_elements)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # Loop through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # Loop through the list and add each non-repeated element to the sum\n    for num in arr:\n        if freq[num] == 1:\n            non_repeated_sum += num\n            \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the number of occurrences of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # calculate the sum of all non-repeated elements in the list\n    non_repeated_sum = sum([num for num in arr if freq_dict[num] == 1])\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their count in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # sum up all the elements with count 1\n    sum_of_one = 0\n    for i in freq:\n        if freq[i] == 1:\n            sum_of_one += i\n\n    return sum_of_one"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Convert the set to a list\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_list)\n    # Return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    # iterate through the list and add each unique element to the set\n    for num in arr:\n        if num not in unique_set:\n            unique_set.add(num)\n    # calculate the sum of the unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr) # convert list to set to remove duplicates\n    return sum(unique_elements) # sum the elements in the set\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize variables\n    non_repeated_sum = 0\n    repeated_elements = {}\n    \n    # Iterate through the list\n    for num in arr: \n        # Check if the element is already in the dictionary\n        if num in repeated_elements: \n            # If it is, increment its count by 1\n            repeated_elements[num] += 1\n        else: \n            # If it's not, add it to the dictionary with a count of 1\n            repeated_elements[num] = 1\n    \n    # Iterate through the dictionary and add up the counts of each element\n    for num, count in repeated_elements.items(): \n        # Only add up elements that appear only once\n        if count == 1: \n            non_repeated_sum += num\n    \n    # Return the final sum\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Convert the set to a list and sort it\n    unique_list = sorted(list(unique_set))\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the sorted list and add each element to the sum_non_repeated variable\n    for element in unique_list:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function from itertools to group the list elements based on the value of the previous element\n    grouped_list = groupby(lst)\n    # Loop through each group of consecutive duplicate elements\n    for key, group in grouped_list:\n        # Check if the first element of the group is not None (i.e., it's not the first element of the list)\n        if key is not None:\n            # If it is, add a new sublist with the first element as the only element\n            yield [key]\n        # Iterate through the group and add subsequent elements to the current sublist\n        for element in group:\n            # Check if the current element is the first element of a group\n            if element is not None:\n                # If it is, add the element to the current sublist\n                yield [element]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates of \n    the elements are grouped together in sublists.\n    '''\n    # Using groupby() to group consecutive duplicates of elements in the list\n    grouped_list = list(groupby(lst))\n    # Creating an empty list to store the sublists of consecutive duplicates\n    sub_list = []\n    # Looping through the grouped_list and appending sublists of consecutive duplicates to the sub_list\n    for item in grouped_list:\n        if len(list(item)) > 1:\n            sub_list.append(list(item))\n    # Returning the sub_list containing the sublists of consecutive duplicates\n    return sub_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # convert the list into a generator to make it iterable\n    gen_list = (x for x in list1)\n    # group the consecutive elements by key\n    grouped_list = groupby(gen_list)\n    # create an empty list to store the sublists\n    sublists = []\n    # iterate over the grouped list and add each sublist to the sublists list\n    for key, group in grouped_list:\n        # create a sublist and append each consecutive element to the sublist\n        sublist = [next(group)]\n        for elem in group:\n            sublist.append(elem)\n        sublists.append(sublist)\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pack_consecutive_duplicates(lst):\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(list1)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = [(k, list(g)) for k, g in groupby(enumerate(list1), lambda x: x[1] == x[0])]\n    result = []\n    for group in grouped_list:\n        if len(group[1]) > 1:\n            result.append(group[1])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(sorted(list1))\n    return [list(group) for key, group in grouped_list if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #group the list by consecutive duplicates\n    grouped_lst = groupby(lst, lambda x,y: x == y)\n    \n    #create a new list to store the packed duplicates\n    packed_lst = []\n    \n    #iterate over the grouped list and pack consecutive duplicates into sublists\n    for k, g in grouped_lst:\n        packed_lst.append([k] * (len(list(g)) + 1))\n    \n    return packed_lst"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        else:\n            sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        if tuple(sublist) in count:\n            count[tuple(sublist)] += 1\n        else:\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # convert the list to a set to remove duplicates\n    list1_set = set(list1)\n\n    # create an empty dictionary\n    unique_sublists_dict = {}\n\n    # iterate over the set of lists\n    for sublist in list1_set:\n        # if the sublist is not already in the dictionary, add it with a value of 1\n        if sublist not in unique_sublists_dict:\n            unique_sublists_dict[sublist] = 1\n        # if the sublist is already in the dictionary, increment its value by 1\n        else:\n            unique_sublists_dict[sublist] += 1\n\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the input list to a set to remove duplicates\n    unique_lists = set(tuple(list1))\n\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the unique lists and add their counts to the dictionary\n    for lst in unique_lists:\n        counts[lst] = list1.count(lst)\n\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list\n    sublists = list(set(list1))\n\n    # Create a dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # Loop through the sublists and increment the count in the dictionary for each one\n    for sublist in sublists:\n        count_dict[tuple(sublist)] = list1.count(sublist)\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of unique lists\n    counts = {}\n\n    # Iterate over each list in the input list\n    for sublist in list1:\n\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in counts:\n            # Increment the count of this tuple\n            counts[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    dict_count = {}\n    \n    # loop through the list1\n    for sublist in list1:\n        # check if the sublist is already in the dictionary\n        if sublist in dict_count:\n            # increment the count for the sublist\n            dict_count[sublist] += 1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            dict_count[sublist] = 1\n    \n    # return the dictionary with the counts\n    return dict_count\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total = sum(test_list)\n    combinations_list = []\n    for i in range(1, total + 1):\n        for j in range(i, total + 1):\n            if j - i == 1:\n                continue\n            subset = test_list[i-1:j]\n            subset_sum = sum(subset)\n            if subset_sum == i:\n                combinations_list.append(tuple(subset))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples with unique elements\n    unique_list = list(set([tuple(i) for i in test_list]))\n    # find all combinations of tuples with unique elements\n    combinations_list = list(combinations(unique_list, r=2))\n    # filter the combinations to get only those with unique elements\n    unique_combinations = [tuple(sorted(i)) for i in combinations_list]\n    # return the unique combinations\n    return unique_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def is_valid_combination(combination):\n        # Check if the combination has unique elements\n        return len(combination) == len(set(combination))\n    \n    def has_unique_elements(combination):\n        # Check if the combination contains unique elements\n        return len(combination) == len(combination - set(combination))\n    \n    # Find all combinations of sums with tuples\n    for combination in combinations(test_list, r=2):\n        # Check if the combination is valid\n        if is_valid_combination(combination):\n            # Check if the combination contains unique elements\n            if has_unique_elements(combination):\n                # Print the combination\n                print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def is_valid(combination):\n        '''\n        This function checks if a given combination is valid or not.\n        A combination is valid if it contains tuples that are all distinct.\n        '''\n        return len(combination) == len(set(combination))\n\n    def combinations_of_sums(target_sum):\n        '''\n        This function returns all the combinations of sums from a given target sum.\n        '''\n        result = []\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                result.append((test_list[i] + test_list[j]))\n\n        return result\n\n    def find_combinations_with_tuples(combination, target_sum):\n        '''\n        This function finds all the combinations of sums with tuples in the given combination.\n        '''\n        result = []\n        for i in range(len(combination)):\n            if i == 0:\n                for j in range(i + 1, len(combination)):\n                    if j == 0:\n                        result.append((combination[i], combination[j]))\n                    else:\n                        result.append((combination[i], combination[j], target_sum - (combination[i] + combination[j])))\n            else:\n                for j in range(i, len(combination)):\n                    if j == 0:\n                        result.append((combination[i], combination[j], target_sum - (combination[i] + combination[j])))\n                    else:\n                        result.append((combination[i], combination[j], target_sum - (combination[i] + combination[j])))\n\n        return result\n\n    target_sum = sum(test_list)\n    combinations_list = combinations_of_sums(target_sum)\n\n    for combination in combinations_list:\n        if is_valid(combination):\n            result = find_combinations_with_tuples(combination, target_sum)\n            if result:\n                print(combination, ':', result)\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuples_list = test_list\n    for i in range(len(tuples_list)):\n        tuples_list[i] = tuple(tuples_list[i])\n    n = len(tuples_list)\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            if (tuples_list[i][0] + tuples_list[j][0]) in test_list:\n                for k in range(j+1, len(tuples_list)):\n                    if (tuples_list[i][1] + tuples_list[k][1]) in test_list:\n                        temp_list = [tuples_list[i], tuples_list[j], tuples_list[k]]\n                        result.append(tuple(temp_list))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if sum(test_list[i:j]) == sum(test_list[j:k]) == sum(test_list[k:]):\n                    print(tuple(test_list[i:j]), tuple(test_list[j:k]), tuple(test_list[k:]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize empty list to store the combinations\n    combinations_list = []\n\n    # Iterate over all possible combinations of tuples\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            # Check if the sum of each combination is equal to the target sum\n            if sum(j) == 10:\n                # If yes, append the combination to the list\n                combinations_list.append(j)\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to calculate the sum of a tuple\n    def sum_of_tuple(tup):\n        return sum(tup)\n\n    # Function to find the combinations of sums with tuples in the given tuple list\n    def find_combinations_of_sums(lst):\n        comb = combinations(lst, len(lst))\n        result = []\n        for c in comb:\n            c_sum = sum_of_tuple(c)\n            if c_sum in lst:\n                result.append(c)\n        return result\n\n    # Example usage\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    result = find_combinations_of_sums(test_list)\n    print(result)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    unique_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for k in range(j+1, len(test_list)+1):\n                if sum(test_list[i:j]) == sum(test_list[k:j]) and sum(test_list[i:j]) == sum(test_list[i:k]):\n                    unique_combinations.append((test_list[i], test_list[j], test_list[k]))\n    return unique_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all possible combinations of sums with tuples in the given list.\n    '''\n    def find_combinations_helper(current_sum, remaining_tuples, index, combinations_list):\n        if len(remaining_tuples) == 0:\n            combinations_list.append(current_sum)\n            return\n        \n        for i in range(index, len(remaining_tuples)):\n            if i > index and remaining_tuples[i] == remaining_tuples[i-1]:\n                # Skip duplicates in the remaining tuples\n                continue\n            \n            remaining_tuples_without_i = remaining_tuples[:i] + remaining_tuples[i+1:]\n            find_combinations_helper(current_sum + remaining_tuples[i], remaining_tuples_without_i, i+1, combinations_list)\n            \n    combinations_list = []\n    find_combinations_helper(0, test_list, 0, combinations_list)\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return (count + 1) % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # check the count of divisors\n    if len(divisors) % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, else False.\n    '''\n    # Calculate the number of divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    divisor_count = len(divisors)\n\n    # Check whether the count of divisors is even\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n < 2: \n        return True \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False \n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    \n    count_of_divisors = len(divisors)\n    print(\"The count of divisors of\", n, \"is\", count_of_divisors)\n    \n    if count_of_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    if n > 1:\n        divisor_count += 1\n    return divisor_count % 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, else False.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a positive integer n as input and returns True if the count of its divisors is even and False otherwise.\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i == n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    count = 0\n    for i in range(len(divisors)):\n        count += divisors[i]\n    if count%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_subarrays = 0\n    n = len(arr)\n    \n    # Traverse through all possible subarrays\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1%2!=0:\n                continue\n            # Find the sum of the subarray\n            subarray_sum = sum(arr[i:j+1])\n            # Add the sum to the sum of all odd subarrays found so far\n            sum_of_odd_subarrays += subarray_sum\n    \n    return sum_of_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum_odd_length += arr[i]\n        if i < n-1:\n            if i % 2 == 0:\n                sum_odd_length -= arr[i+1]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n):\n            temp_sum += arr[j]\n            if j-i+1 % 2 == 1:\n                sum += temp_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(1, n+1, 2):\n        subarray_sum = sum(arr[j:j+i] for j in range(n-i+1))\n        total += subarray_sum\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd_length_subarrays(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray_sum += arr[j-1]\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_subarrays_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            odd_subarrays_sum += arr[j-1]\n    return odd_subarrays_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a dictionary to store the prefix sums of all subarrays of odd length\n    prefix_sum = {}\n\n    # Iterate through the array and calculate the prefix sum of all odd length subarrays\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            prefix_sum[i] = prefix_sum.get(i - 1, 0) + arr[i]\n\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd = 0\n\n    # Iterate through the dictionary and calculate the sum of all odd length subarrays\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum_odd += prefix_sum[i]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+2, n+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if j-i+1 % 2 == 1:\n                sum += sum_of_subarray(arr, i, j)\n    return sum\n\ndef sum_of_subarray(arr, i, j):\n    \"\"\"\n    Helper function to calculate the sum of a subarray.\n    \"\"\"\n    return sum(arr[i:j])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    sum_arr = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if j-i+1%2!= 0:\n                sum_arr.append(sum(arr[i:j+1]))\n    return sum_arr"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three arguments, r, g, and b, and returns their corresponding hue, saturation, and value in a tuple.\n    \"\"\"\n\n    # Calculate maximum and minimum values of rgb\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate saturation\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6\n\n        # Make sure hue is within range of 0 to 1\n        if h < 0:\n            h = h + 1\n\n    # Calculate value\n    value = max_val\n\n    # Return hsv values as a tuple\n    return (h, value, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    \n    # Convert RGB to HSV\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta_color = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0  # achromatic color\n    else:\n        if r == max_color:\n            h = (g - b) / delta_color\n        elif g == max_color:\n            h = 2 + (b - r) / delta_color\n        else:\n            h = 4 + (r - g) / delta_color\n        \n        if h < 0:\n            h += 6\n        \n        h /= 6\n    \n    if max_color == 0:\n        s = 0  # achromatic color\n    else:\n        s = delta_color / max_color\n    \n    v = max_color\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes the red, green, and blue values of an RGB color and returns the HSV (Hue, Saturation, Value) values.\n    \"\"\"\n    # Convert the RGB color values to integers\n    r, g, b = int(r), int(g), int(b)\n    \n    # Convert the RGB values to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n    \n    # Find the maximum and minimum values\n    max_val, min_val = max(r, g, b), min(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Find the saturation of the color\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    \n    # Find the value of the color\n    v = max_val\n    \n    # If the color is very light in one of the channels, adjust the saturation accordingly\n    if delta == 0:\n        s = 0\n    elif max_val == r:\n        s = delta / max_val\n    elif max_val == g:\n        s = delta / max_val\n    else:\n        s = delta / max_val\n    \n    # Convert the HSV values to integers and return the result\n    h, s, v = int(h), int(s * 255), int(v * 255)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    if h < 0:\n        h += 1\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color value to HSV color value.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    delta = max_c - min_c\n    \n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = 60 * ((g - b) / delta)\n    elif max_c == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    \n    if h < 0:\n        h += 360\n    \n    if v == 0:\n        s = 0\n    else:\n        s = delta / v\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / cmax\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h % 6\n        if h < 0:\n            h += 6\n        h = h * 60\n    v = cmax * 100\n    return round(h), round(s), round(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert rgb to float and make sure values are within range 0-255\n    r = r / 255.0 if r >= 0 else r / 255.0 + 1.0\n    g = g / 255.0 if g >= 0 else g / 255.0 + 1.0\n    b = b / 255.0 if b >= 0 else b / 255.0 + 1.0\n\n    # Find minimum and maximum values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # Find the delta value\n    delta = max_value - min_value\n\n    # Calculate hue value\n    if max_value == r:\n        hue = ((g - b) / delta) % 6.0\n    elif max_value == g:\n        hue = (b - r) / delta + 2.0\n    else:\n        hue = (r - g) / delta + 4.0\n\n    # Calculate saturation and value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    value = max_value\n\n    # Normalize hue value\n    hue = hue / 6.0 if hue >= 0 else hue / 6.0 + 1.0\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV (hue, saturation, value) color model.\n    \n    Args:\n        r (int): Red value between 0 and 255.\n        g (int): Green value between 0 and 255.\n        b (int): Blue value between 0 and 255.\n        \n    Returns:\n        tuple: HSV (hue, saturation, value) tuple.\n    \"\"\"\n    \n    # Normalize the values between 0 and 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # If the maximum value is equal to zero, the color is gray\n    if max_val == 0:\n        hue = 0\n        saturation = 0\n    else:\n        # Find the hue based on the RGB values\n        if r == max_val:\n            hue = (g - b) / delta\n        elif g == max_val:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        \n        # Normalize the hue between 0 and 1\n        hue = max(0, min(1, hue))\n        \n        # Calculate the saturation\n        if delta == 0:\n            saturation = 0\n        else:\n            saturation = delta / max_val\n        \n        # Normalize the saturation between 0 and 1\n        saturation = max(0, min(1, saturation))\n    \n    # Calculate the value\n    value = max_val\n    \n    # Convert the values to percentages\n    saturation *= 100\n    value *= 100\n    \n    # Convert the values to integers and return the tuple\n    return (int(hue * 360), int(saturation), int(value))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        h = 0.0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2.0 + (b - r) / delta\n        elif max_rgb == b:\n            h = 4.0 + (r - g) / delta\n        h = h / 6.0\n        if h < 0:\n            h += 1.0\n    if max_rgb == 0:\n        s = 0.0\n    else:\n        s = delta / max_rgb\n    v = max_rgb\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert RGB values to float\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Find greatest and least values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate difference between max and min values\n    delta = max_value - min_value\n\n    # Calculate HSV values\n    if max_value == min_value:\n        h = 0\n    elif delta == 0:\n        h = 0\n    elif r == max_value:\n        h = 60 * ((g - b) / delta)\n    elif g == max_value:\n        h = 60 * (2 + (b - r) / delta)\n    elif b == max_value:\n        h = 60 * (4 + (r - g) / delta)\n\n    h = int(h)\n    h %= 360\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    if max_value == 0:\n        v = 0\n    else:\n        v = max_value\n\n    # Calculate HSV values as percentages\n    hsv = (h / 360.0, s, v)\n\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = list1[0] * list1[-1]\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = 1\n    odd = 1\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    product = even_sum * odd_sum\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number.\n    If there is no even or odd number in the list, then it returns 0.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    product = even_sum * odd_sum\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n        elif even_count == 0 and odd_count == 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def int_tuple(tup):\n        return tuple(int(x) for x in tup)\n\n    return int_tuple(tuple(test_str.split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        test_str = tuple(test_str.split(','))\n    return tuple(int(i) for i in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and converts it to an integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and append it to a new list\n    int_list = [int(x) for x in str_list]\n    \n    # Convert the new list to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize the empty tuple\n    result = ()\n    # split the tuple string into individual strings\n    str_list = test_str.split(',')\n    # iterate through each string in the list\n    for str_elem in str_list:\n        # if the string is a valid integer, add it to the result tuple\n        try:\n            int_elem = int(str_elem)\n            result += (int_elem,)\n        except ValueError:\n            continue\n    # return the result tuple\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        int_list = []\n        for item in test_str:\n            int_list.append(int(item))\n        return tuple(int_list)\n    except ValueError:\n        return \"Invalid input string\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space and remove any extra spaces\n    test_str = test_str.replace(', ', ',').replace(', ', ',').strip()\n    \n    # Split the string by comma and convert the resulting list to a tuple\n    return tuple([int(i.strip()) for i in test_str.split(',')])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    test_list = test_str.split(',')\n    \n    # Create an empty list to store the integer tuples\n    result = []\n    \n    # Loop through each string in the list\n    for item in test_list:\n        # Convert the string to an integer\n        try:\n            num = int(item)\n            # Add the tuple to the result list\n            result.append(num)\n        except ValueError:\n            pass # Skip non-integer values\n    \n    # Return the final result as an integer tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    test_list = test_str.split(',')\n    \n    # Convert each string to an integer and append to a new list\n    int_list = []\n    for item in test_list:\n        int_list.append(int(item))\n    \n    # Convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split(',')])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize an empty list to store the integers\n    int_list = []\n\n    # Loop through the list of characters\n    for char in char_list:\n        # Convert the character to an integer\n        num = int(char)\n\n        # Add the integer to the list of integers\n        int_list.append(num)\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    # find the index where x should be inserted\n    i = bisect.bisect_left(a, x)\n    # return the index where x should be inserted\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index = len(a) - 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect_right function from the bisect module to find the insertion point.\n    # The bisect_right function takes two arguments - the sorted list and the value we want to insert.\n    # It returns the index where the value should be inserted.\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        # the value is not in the list, so we need to insert it to the right of the index i\n        return i\n    else:\n        # the value is already in the list, so we need to move all the values to the right of i to the right\n        for j in range(i, len(a)-1, -1):\n            a[j+1] = a[j]\n        # insert the value at the right position\n        a[i] = x\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index - 1] < x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\babbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b.*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"(?i)a{1}b{3}\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba(?=.{3}b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\b[b]{3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_list + (test_str,))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and the string into a new list\n    combined_list = test_list + [test_str]\n\n    # Convert the new list into a tuple\n    new_tuple = tuple(combined_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Use the * operator to join the list and string\n    new_tuple = test_list + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(x) for x in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a list of tuples\n    my_tuples = []\n    for i in range(len(test_list)):\n        # Append a tuple with the test_list and test_str\n        my_tuples.append((test_list[i], test_str))\n    return my_tuples"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    concatenated_strings = tuple(test_list)\n    concatenated_strings = tuple(concatenated_strings + (test_str,))\n    return concatenated_strings"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a tuple from the list and string\n    new_tuple = (test_list, test_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i:]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a counter for even numbers at even indices\n    even_counter = 0\n    \n    # loop through the list and count the number of even numbers at even indices\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_counter += 1\n    \n    # check if the total number of even numbers is equal to the length of the list\n    if even_counter == len(nums):\n        print(\"Every even index contains even numbers.\")\n    else:\n        print(\"Some even index does not contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            if nums[i+1] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    for index in even_indices:\n        if len(nums[index:index+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) == 1:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Remove nested tuples\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # If the input is not a tuple, return the input as it is.\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    \n    # If the input is a tuple, iterate through its elements and recursively remove tuples.\n    new_tup = ()\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup += remove_nested(elem)\n        else:\n            new_tup += (elem,)\n    \n    # Return the new tuple with all the tuples removed.\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize an empty list to store the new tuple\n    new_tup = []\n    # loop through each element of the given tuple\n    for item in test_tup:\n        # if the element is not a tuple, append it to the new_tup list\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        # if the element is a tuple, recursively call the remove_nested function on it\n        else:\n            new_tup.append(remove_nested(item))\n    # return the new_tup list\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_helper(tup):\n        if isinstance(tup, tuple):\n            for item in tup:\n                remove_nested_helper(item)\n        else:\n            print(tup)\n    \n    remove_nested_helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        if len(test_tup) > 1:\n            return remove_nested(test_tup[0])\n        else:\n            return []\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store non-tuple elements\n    result = []\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # If the element is not a tuple, append it to the result list\n        if not isinstance(element, tuple):\n            result.append(element)\n    \n    # Return the result list as the final output\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function counts the number of lists in a given list of lists. \n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if type(sublist) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid\n    if arr[i] == x:\n        return i\n    elif arr[j] == x:\n        return j\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the index of the last occurrence of x in the array.\n    If the element x is not present in the array, it returns -1.\n    \"\"\"\n    if x == arr[0]:\n        return 0\n    elif x == arr[-1]:\n        return len(arr) - 1\n    else:\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr)-1\n    for i in range(len(arr)-1):\n        if arr[i] < x and arr[i+1] == x:\n            return i+1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return right if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments:\n    - arr: a sorted array\n    - x: the element you want to find the last position of\n    \n    This function returns the index of the last occurrence of x in the array, or -1 if x is not in the array.\n    \n    Example:\n    >>> arr = [1, 3, 5, 7, 9]\n    >>> last(arr, 5)\n    3\n    >>> last(arr, 10)\n    -1\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the last index of the element x in the array\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    # If element is not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the left and right pointers to the first and last indices of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Find the last occurrence of x in the array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # Check if the left half of the array contains x\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            # Otherwise, search the right half of the array\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize last position to -1\n    last_position = -1\n    # Initialize count to 0\n    count = 0\n    # Traverse the sorted array from right to left\n    for i in range(len(arr)-1,-1,-1):\n        # If the element at the current position is equal to x, then set the last position to current position and break out of the loop\n        if arr[i] == x:\n            last_position = i\n            break\n        # Increment the count\n        count += 1\n    # Return the last position and the count of elements traversed\n    return last_position, count"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[A-Za-z0-9\\s]*b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?P<anything>.)(b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('anything')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'Not found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.findall(pattern, text)\n\ntext = 'There is a group of people who are starting to get ready for the big day. They have just met and will be in the office in a few minutes.'\nresult = text_starta_endb(text)\nprint(result)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key, value in dict.items():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Find the lower limit of the range\n    l = 1\n\n    # Find the upper limit of the range\n    r = n\n\n    # Initialize the sum variable to zero\n    sum_of_odds = 0\n\n    # Loop through the range from l to r\n    for i in range(l, r+1):\n        # If the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum_of_odds += i\n\n    # Return the sum of odd numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # define range of numbers to check for odd numbers\n    r = n\n\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through range of numbers\n    while r >= 1:\n\n        # check if current number is odd\n        if r % 2!= 0:\n\n            # add current number to sum\n            sum += r\n\n        # decrement current number\n        r -= 1\n\n    # return sum of odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n % 2 == 0:\n        return sum_odd(n-1)\n    else:\n        return n+sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    \n    for i in range(l, r+1, 2):\n        sum += i\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of all odd natural numbers in the given range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add it to the sum variable\n            sum += i\n    # Return the sum of odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(arr):\n    \"\"\"\n    This function takes in an array as input and returns the sum of all its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    shifted = (n << d) & mask\n    return (n >> (32 - d)) | shifted"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # Shift the bits to the right by d bits\n    n = n >> d\n    \n    # Shift the leftmost d bits to the left by d bits\n    n = n << d\n    \n    # Return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # rotate left n bits by d bits\n    n = n << d | n >> (32 - d)\n\n    # return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    binary = format(n, 'b')\n    \n    # Pad the binary string with 0s to make it of length d\n    padded_binary = binary.zfill(d)\n    \n    # Convert the padded binary string to decimal\n    decimal = int(padded_binary, 2)\n    \n    # Rotate the decimal by d bits\n    rotated_decimal = (decimal << d) | (decimal >> (32 - d))\n    \n    # Convert the rotated decimal to binary and return it\n    return format(rotated_decimal, 'b')"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):   \n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Mask to get the last d bits\n    mask = ((1 << d) - 1) << (32 - d)\n    \n    # Left rotation by d bits\n    result = ((n << d) & mask) | ((n & ((1 << d) - 1)) >> (32 - d))\n    \n    # Return the rotated number\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # Convert the number to a string\n    n = bin(n)[2:]\n    \n    # Reverse the order of bits\n    n = n[::-1]\n    \n    # Pad with zeros to the left\n    n = '0'*(32-len(n)) + n\n    \n    # Calculate the new value\n    new_value = int(n[d:],2)\n    \n    # Convert the new value back to a binary string\n    new_value = bin(new_value)[2:]\n    \n    # Reverse the order of bits\n    new_value = new_value[::-1]\n    \n    # Convert the new value back to an integer\n    new_value = int(new_value,2)\n    \n    # Return the new value\n    return new_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the least significant d bits from the number\n    mask = (1 << d) - 1\n    shifted_n = (n << d) & ((1 << 32) - 1)\n    \n    # Shift the remaining bits to the left\n    n = (n >> d) & ((1 << 32) - 1)\n    \n    # Combine the shifted and shifted-out bits\n    return (n | shifted_n) & ((1 << 32) - 1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of left rotations required\n    rotations = d // 32\n    if d % 32!= 0:\n        rotations += 1\n\n    # Calculate the number of bits to shift\n    bits_to_shift = d % 32\n\n    # Perform the left rotations\n    result = 0\n    for _ in range(rotations):\n        result = (result << 32) | (n >> (32 - bits_to_shift))\n        n <<= bits_to_shift\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    bin_num = bin(n)[2:]\n    # Compute the number of bits to shift\n    shift_num = d % 32\n    # Compute the new binary number after left rotation\n    new_bin = bin_num[shift_num:] + bin_num[:shift_num]\n    # Convert the new binary number back to decimal\n    new_num = int(new_bin, 2)\n    # Return the new number\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    shift = d % 32\n\n    # Check if the number of bits to rotate is less than 32\n    if shift < 32:\n        # Shift the number to the left by the number of bits to rotate\n        return (n << shift) | (n >> (32 - shift))\n    else:\n        # Shift the number to the right by 32 - number of bits to rotate\n        return (n >> (shift - 32)) | (n << (32 - shift))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and returns the same string with all spaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    # Check if the three given integers are equal\n    if x == y == z:\n        count += 1\n\n    # Check if the three given integers are equal in reverse order\n    if y == x == z:\n        count += 1\n\n    # Check if the three given integers are equal in a different order\n    if z == x == y:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    if x == y!= z and x!= y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, z + 1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # loop through each number in the list\n    for num in [x, y, z]:\n        # check if the number is equal to any of the other two numbers\n        if num == x or num == y or num == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x == z!= y:\n        count += 1\n    elif y == z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    # initialize a variable to keep track of the number of equal numbers\n    count = 0\n\n    # loop through the three integers\n    for num in [x, y, z]:\n        # if the current number is equal to the previous number, increment the count\n        if num == count:\n            count += 1\n        # otherwise, reset the count to 1\n        else:\n            count = 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # If the array is already sorted, return 0\n        if arr[0] <= arr[i]:\n            return 0\n        \n        # If the element at i is greater than the element at i+1, the array is already sorted.\n        elif arr[i] < arr[i+1]:\n            return 0\n        \n        # If the element at i is greater than the element at i-1, then there are two cases:\n        # 1. The element at i-1 is the smallest element in the array, which means it should be moved to the beginning.\n        # 2. The element at i-1 is not the smallest element in the array, but it can be moved to the beginning.\n        # In the first case, we need to rotate the array to the left by 1. In the second case, we need to rotate the array to the right by 1.\n        elif arr[i] > arr[i-1]:\n            count += 1\n        \n        # If the element at i is equal to the element at i-1, the array is not sorted. Return -1.\n        elif arr[i] == arr[i-1]:\n            return -1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Two variables to keep track of the smallest and largest element in the array\n    smallest = arr[0]\n    largest = arr[0]\n\n    for i in range(1, n):\n        # Update the smallest and largest element in the array\n        smallest = min(smallest, arr[i])\n        largest = max(largest, arr[i])\n\n        # If the smallest element becomes greater than the largest element, we have found a rotation\n        if smallest > largest:\n            return i\n\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n\n    # initialize variables\n    count = 0\n    left = 0\n    right = n - 1\n\n    # while the left and right pointers don't cross each other\n    while left < right:\n        # check if the left element is greater than the right element\n        if arr[left] > arr[right]:\n            # if it is, swap them and increment count\n            arr[left], arr[right] = arr[right], arr[left]\n            count += 1\n            left += 1\n            right -= 1\n        # if the left element is less than the right element, move the left pointer to the right\n        else:\n            left += 1\n\n    # return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    \n    # Initialize the count of rotations to 1\n    count = 1\n    \n    # Find the smallest and largest elements in the array\n    smallest = arr[0]\n    largest = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n        elif arr[i] > largest:\n            largest = arr[i]\n    \n    # If all elements are the same, return 0\n    if smallest == largest:\n        return 0\n    \n    # Loop through the array and check if any elements can be moved to the end\n    for i in range(n-1):\n        # If the element at index i can be moved to the end, do so and increment the count\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n    \n    # If no rotation is required, return 0\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    \n    # Return the final count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize count to 0\n    count = 0\n    # Traverse the array and check for rotation\n    for i in range(n-1):\n        # If the current element is greater than the next element, rotate the array\n        if arr[i] > arr[i+1]:\n            # Increment the count by 1\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return i + 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Create a copy of the input array\n    arr_copy = arr.copy()\n\n    # Sort the input array\n    arr_copy.sort()\n\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    while arr_copy!= sorted(arr_copy):\n        count += 1\n        # Reverse the sorted part of the array\n        arr_copy = sorted(arr_copy)[::-1]\n\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        temp = arr[i]\n        j = i + 1\n        while j < n and temp < arr[j]:\n            j += 1\n        count += j - i - 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    \n    # Check if the array is already sorted\n    if n <= 1:\n        return 0\n\n    # Find the pivot element\n    pivot = arr[n//2]\n\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    left, right = 0, n-1\n\n    while left <= right:\n        # Move the left pointer to the right until the left element is greater than or equal to the pivot\n        while left <= right and arr[left] < pivot:\n            left += 1\n\n        # Move the right pointer to the left until the right element is less than or equal to the pivot\n        while left <= right and arr[right] > pivot:\n            right -= 1\n\n        # If the left pointer is less than or equal to the right pointer, there is a rotation required\n        if left <= right:\n            count += 1\n\n            # Swap the left and right elements\n            arr[left], arr[right] = arr[right], arr[left]\n\n            # Move the left pointer to the right and the right pointer to the left\n            left += 1\n            right -= 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # we can use the square root of n to check if it is a perfect square or not\n    sqrt_n = int(n ** 0.5)\n    # if sqrt_n is equal to n, then n is a perfect square\n    if sqrt_n == n:\n        return True\n    # if sqrt_n is less than n, then n is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    i = 0\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if n is a perfect square,\n    otherwise it returns False. The function implements the approach of\n    Newton-Raphson method. It checks whether the given number is a perfect square or not using\n    the following algorithm:\n\n    1. Compute the square root of n using the bisection method.\n    2. Check if the difference between n and the square root is less than or equal to 0.00001.\n    3. If yes, then n is a perfect square and return True.\n    4. If no, then compute the square root of n using the bisection method again.\n\n    Complexity: O(sqrt(n))\n    \"\"\"\n    # Bisection method to find the square root of n\n    low = 0.0\n    high = n\n    while low <= high:\n        mid = (low + high) / 2.0\n        diff = abs(n - mid)\n        if diff <= 0.00001:\n            return True\n        elif diff > 0.00001:\n            low = mid\n        else:\n            raise ValueError(\"Invalid input\")\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Using the Babylonian method\n    a, b = 1, n\n    while a < b:\n        c = (a + b) // 2\n        if c*c == n:\n            return True\n        elif c*c < n:\n            a = c\n        else:\n            b = c\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number n is a perfect square or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Using the Babylonian method to check if n is a perfect square or not\n    a = n\n    b = (n**2) + 1\n    \n    while b**2 > n:\n        a = b\n        b = (b**2) + 1\n        \n    if a == b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        elif i*i < n:\n            i += 1\n        else:\n            i -= 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    # Take the square root of n\n    root = int(n ** 0.5) + 1\n\n    # Check if root is an integer\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns True if it is a perfect square, and False otherwise.\n\n    A perfect square is a number that is the square of an integer. In other words, the square of a perfect square is equal to the number itself.\n\n    For example, 16 is a perfect square because 16 = 4 * 4 = 16.\n\n    This implementation uses the binary search algorithm to check if a number is a perfect square or not. The algorithm works as follows:\n\n    1. Start with a lower bound of 0 and an upper bound of n.\n    2. Calculate the midpoint of the range.\n    3. Check if the square of the midpoint is equal to the number. If it is, return True.\n    4. If the square of the midpoint is greater than the number, narrow the range to the lower half of the midpoint.\n    5. Otherwise, narrow the range to the upper half of the midpoint.\n\n    This implementation has a time complexity of O(log n) and a space complexity of O(1).\n    \"\"\"\n\n    # Start with a lower bound of 0 and an upper bound of n\n    lower_bound = 0\n    upper_bound = n\n\n    # Binary search algorithm to check if a number is a perfect square or not\n    while lower_bound <= upper_bound:\n        midpoint = (lower_bound + upper_bound) // 2\n\n        # Check if the square of the midpoint is equal to the number\n        if midpoint * midpoint == n:\n            return True\n\n        # If the square of the midpoint is greater than the number, narrow the range to the lower half of the midpoint\n        elif midpoint * midpoint > n:\n            lower_bound = midpoint + 1\n\n        # Otherwise, narrow the range to the upper half of the midpoint\n        else:\n            upper_bound = midpoint - 1\n\n    # If the loop completes without finding a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is positive\n    if n <= 0:\n        return False\n\n    # Find the square root of the number\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of all numbers in the list is even.\"\n    else:\n        return \"The product of all numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num \n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    # Loop through the array and multiply each element with the product\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0:\n        print(\"The product is even.\")\n    else:\n        print(\"The product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Check if the list is empty or has only one element\n    if len(arr) <= 1:\n        return False\n\n    # Calculate the product of all the elements in the list\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of all elements in the list\n    product = 1\n\n    # Iterate through each element in the list\n    for num in arr: \n        # Multiply the current element with the product variable\n        product *= num\n\n    # Check if the product is even or not by comparing it to 0\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through each list in the input list of lists\n    for num_list in lists:\n        # Loop through each element in the current list\n        for element in num_list:\n            # Add the element to the current sum\n            current_sum += element\n            \n            # Check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                # Update the maximum sum\n                max_sum = current_sum\n                \n    # Return the list with the maximum sum\n    return num_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in lists:\n        total_sum = sum(i)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            result = l\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for the maximum sum and the current sum of the current list\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through each list in the input list of lists\n    for list_i in lists:\n        # Loop through each element in the current list\n        for element in list_i:\n            # Add the element to the current sum\n            current_sum += element\n\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # If so, update the maximum sum\n                max_sum = current_sum\n\n                # Reset the current sum to 0\n                current_sum = 0\n\n    # Convert the maximum sum to a list and return it\n    return [[element for element in list_i] for list_i in lists]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = 0\n            for k in range(len(lists[i])):\n                current_sum += lists[i][k]\n                current_sum += lists[j][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a copy of the input list to avoid modifying the original list\n    input_list = lists[:]\n    # Initialize a variable to store the maximum sum found so far\n    max_sum = 0\n    # Initialize a variable to store the list of lists with the maximum sum found so far\n    max_list = []\n    # Iterate over all possible sublists of the input list\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            for k in range(len(input_list[i][j])):\n                # Create a new list by combining the i-th, j-th, and k-th elements of each sublist\n                sublist = [input_list[i][j][k]]\n                # Add the i-th, j-th, and k-th elements to the new list\n                for l in range(i):\n                    sublist.append(input_list[l][j][k])\n                for m in range(j):\n                    sublist.append(input_list[i][m][k])\n                for n in range(k):\n                    sublist.append(input_list[i][j][n])\n                # Calculate the sum of the new list's elements\n                sublist_sum = sum(sublist)\n                # If the sum of the new list's elements is greater than the maximum sum found so far, update the maximum sum and the maximum list\n                if sublist_sum > max_sum:\n                    max_sum = sublist_sum\n                    max_list = sublist\n    # Return the maximum list of lists\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    current_run = 0\n    i = 0\n    \n    while i < len(test_str):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n        i += 1\n    \n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables to keep track of the start and end of the run\n    start = 0\n    end = 0\n    \n    # Iterate over the characters in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, update the start index\n        if test_str[i].isupper():\n            start = i\n        \n        # If the current character is not uppercase, update the end index\n        else:\n            end = i\n        \n        # If the run is longer than the current maximum, update the maximum\n        if end - start + 1 > max_run:\n            max_run = end - start + 1\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            max_run += 1\n            if max_run > max_run:\n                start = i-max_run+1\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    start = 0\n    max_len = 1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_len < i - start + 1:\n                max_run = i - start + 1\n                max_len = i - start + 1\n            elif i - start + 1 == max_len:\n                max_run += i - start + 1\n        else:\n            start = i + 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    last_upper = False\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the character is uppercase\n        if test_str[i].isupper():\n            current_run += 1\n            last_upper = True\n        else:\n            current_run = 0\n            last_upper = False\n\n        # Update maximum run if necessary\n        if current_run > max_run and last_upper:\n            max_run = current_run\n\n    # Return maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    prev_char = \"\"\n    \n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase and not the same as the previous character, update the run length\n        if char.isupper() and char!= prev_char:\n            run_length += 1\n        else:\n            # If the character is not uppercase or is the same as the previous character, reset the run length\n            run_length = 0\n        \n        # Update the maximum run if the current run length is greater than the previous maximum run\n        if run_length > max_run:\n            max_run = run_length\n        \n        # Update the previous character\n        prev_char = char\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increase the current run counter\n            current_run += 1\n        else:\n            # If it's not, reset the current run counter\n            current_run = 1\n\n        # If the current run counter is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 0\n    curr_run = 0\n    prev_char = None\n    \n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # if yes, check if it is the start of a new run\n            if prev_char is None or prev_char.isupper():\n                curr_run += 1\n            # if it is not the start of a new run, add it to the current run\n            else:\n                curr_run = 1\n            # update maximum run if necessary\n            if curr_run > max_run:\n                max_run = curr_run\n            # update previous character\n            prev_char = test_str[i]\n        # if the current character is not uppercase, reset variables\n        else:\n            curr_run = 0\n            prev_char = None\n            \n    # return maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to keep track of the current run and maximum run\n    current_run = 0\n    max_run = 0\n\n    # Iterate through the string and update the current run and maximum run as needed\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # Check if the last run is longer than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in the given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate through the list of numbers\n    for num in nums:\n        # if the number is odd, return the number and break out of the loop\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    # loop through each number in the list\n    for num in nums:\n        # if the number is odd, return it\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the length of the tuple is equal to K\n    if len(test_tup) == K:\n        # Check if the first element of the tuple is 'k'\n        if test_tup[0] == 'k':\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if tup == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"{K} is present in the tuple.\")\n    else:\n        print(f\"{K} is not present in the tuple.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a number K and returns True if the tuple contains the number K, and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element at index i of the first tuple is smaller than the element at index i of the second tuple\n        if test_tup1[i] < test_tup2[i]:\n            return True\n    # if we reach here, all elements of the second tuple are smaller than or equal to their corresponding elements in the first tuple\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # loop through each element of second tuple\n    for i in range(len(test_tup2)):\n        # if the element of second tuple is smaller than its corresponding element in the first tuple, return False\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"False\")\n            return\n    \n    print(\"True\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths do not match\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"False\"\n    \n    return \"True\""
    }
]