[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1 & set2\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    # iterate through the first list and check if it's in the second list\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert tuples to lists to compare them\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Find the common elements\n    common_elements = []\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.append(element)\n    \n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Create a dictionary to store the count of each element in test_tup1\n    count_dict1 = {}\n    for elem in test_tup1:\n        if elem in count_dict1:\n            count_dict1[elem] += 1\n        else:\n            count_dict1[elem] = 1\n    \n    # Create a dictionary to store the count of each element in test_tup2\n    count_dict2 = {}\n    for elem in test_tup2:\n        if elem in count_dict2:\n            count_dict2[elem] += 1\n        else:\n            count_dict2[elem] = 1\n    \n    # Find the shared elements in the dictionaries\n    shared_elems = []\n    for elem in count_dict1:\n        if elem in count_dict2 and count_dict1[elem] == count_dict2[elem]:\n            shared_elems.append(elem)\n    \n    return shared_elems"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Define two empty lists to store the common elements\n    shared_list1 = []\n    shared_list2 = []\n\n    # Iterate through each element in the first list\n    for element1 in test_tup1:\n        # Check if the element is in the second list\n        if element1 in test_tup2:\n            # If it is, append it to the shared list\n            shared_list1.append(element1)\n\n    # Iterate through each element in the second list\n    for element2 in test_tup2:\n        # Check if the element is in the first list\n        if element2 in test_tup1:\n            # If it is, append it to the shared list\n            shared_list2.append(element2)\n\n    # Return the shared elements in a tuple\n    return tuple(shared_list1 + shared_list2)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a positive integer as input and returns True if it is a non-prime number, otherwise False.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return True\n    # Check if n is divisible by 2 or 3\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    # Check if n is divisible by any number between 4 and square root of n\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2 (since 1 and 2 are not prime)\n    if n < 2:\n        return True\n\n    # Check if the number is a multiple of 2 (since 2 is not prime)\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is divisible by any number between 3 and the square root of the number (since all numbers between 3 and the square root of the number are also not prime)\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if number is less than 2\n    if n < 2:\n        return False\n    # Check if number is equal to 2\n    elif n == 2:\n        return True\n    # Check if number is divisible by 2\n    elif n % 2 == 0:\n        return False\n    # Check odd numbers greater than 2\n    elif n > 2:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = [-inf] * n\n    hq.heapify(max_heap)\n    \n    # Add the first n elements to the max heap\n    for num in nums[:n]:\n        hq.heappushpop(max_heap, -num)\n    \n    # Add the remaining elements to the max heap\n    for num in nums[n:]:\n        hq.heappush(max_heap, -num)\n    \n    # Return the n largest integers in descending order\n    return [num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers,\n    returned in descending order.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Convert the set back to a list so that we can sort it\n    nums = sorted(list(nums), reverse=True)\n    # Return the first n largest numbers\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    for _ in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a min heap of size n\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, -num)\n\n        # if heap size exceeds n, pop the smallest element\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n\n    # convert heap to a list in descending order\n    result = [-num for num in min_heap]\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input,\n    and returns the n largest integers from the list in descending order.\n    '''\n    \n    # Initialize an empty max-heap and a list to store the indices of the largest numbers found\n    max_heap = []\n    max_indices = []\n    \n    # Iterate through the list of numbers\n    for i in range(len(nums)):\n        \n        # If the length of the max_heap is less than n, push the index of the current number onto the heap\n        if len(max_heap) < n:\n            hq.heappush(max_heap, i)\n            max_indices.append(i)\n            \n        # If the length of the max_heap is equal to n, compare the current number with the smallest number in the heap\n        elif len(max_heap) == n:\n            if nums[i] > nums[max_heap[0]]:\n                hq.heappushpop(max_heap, i)\n                max_indices.pop(0)\n                hq.heappush(max_heap, i)\n                max_indices.append(i)\n            \n        # If the length of the max_heap is greater than n, compare the current number with the largest number in the heap\n        elif len(max_heap) > n:\n            if nums[i] < nums[max_heap[0]]:\n                hq.heappushpop(max_heap, i)\n                max_indices.pop(0)\n                \n    # Return the n largest numbers in descending order\n    return nums[max_indices]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap from the list of numbers\n    heap = nums\n    hq.heapify(heap)\n    \n    # remove the largest n elements from the heap\n    for _ in range(n-1):\n        hq.heappop(heap)\n    \n    # return the largest n elements from the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers found in the input list.\n    \"\"\"\n\n    # Convert the list to a min heap\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n\n    # Extract the n largest integers from the heap and convert back to a list\n    return [-x for x in hq.nlargest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap to store the largest elements\n    max_heap = []\n    for num in nums:\n        # add each element to the heap\n        heapq.heappush(max_heap, num)\n        # if the heap size exceeds n, remove the smallest element\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # convert the heap to a list and return the largest elements in descending order\n    return sorted(max_heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers into a min-heap\n    nums_heap = []\n    for num in nums:\n        heapq.heappush(nums_heap, num)\n        \n    # return the n largest integers from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(nums_heap))\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    if x!= 1:\n        return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0 and x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x//2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    else:\n        y = x // 2\n        if x == 2 ** y:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the two numbers differ at one bit position only, False otherwise.\n    '''\n    # get the binary representation of the number\n    binary = bin(x)[2:]\n    # count the number of occurrences of 1s in the binary representation\n    count = binary.count('1')\n    # if the number of 1s is odd, then the two numbers differ at one bit position only\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the first bit that differs in x and 2^k\n    k = 0\n    while x!= 1:\n        x >>= 1\n        k += 1\n    # Check if x is a power of 2\n    return (x == 2**k)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # To check if the number is a power of two, we need to check if the binary representation of x has only one '1' \n    # at the end, i.e., all the remaining bits are '0'. To do this, we first convert x to binary using the \n    # bin() function and then count the number of '1's at the end using the count() function. If there is only \n    # one '1' at the end, then x is a power of two and we return True. Otherwise, we return False.\n    # If the number is less than or equal to 0, then it is not a power of two and we return False.\n    if x <= 0:\n        return False\n    else:\n        binary = bin(x)[-1]\n        return True if binary == '1' else False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    for i in range(32):\n        if (x & 1)!= ((x >> i) & 1):\n            return False\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all words in the input string that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use re.findall() to return a list of all matches in the text\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern for finding words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    min_rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                min_rotations += 1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the substrings match in both directions\n            if str[i:j] == str[j:i][::-1]:\n                # calculate the number of rotations required to obtain the same string\n                rotations = 1 + n - j - i\n                if rotations < min_rotations:\n                    min_rotations = rotations\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    str_length = len(str)\n    min_rotations = 0\n    for i in range(str_length):\n        for j in range(i+1, str_length):\n            # if the substrings are equal, there is no need to rotate\n            if str[i:j+1] == str[j:i+1]:\n                continue\n            # if the substrings are not equal, check if the difference is equal to the minimum difference found so far\n            else:\n                # calculate the difference between the substrings\n                diff = abs(str_length - (j - i + 1))\n                if diff < min_rotations:\n                    min_rotations = diff\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Create a sliding window of length n\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the substring from i to j is the same as the string itself\n            if str[i:j+1] == str:\n                # If yes, return the count of rotations required\n                return j - i + 1\n    \n    # If the substring is not found, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # convert the input string to lowercase\n    str = str.lower()\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the maximum frequency of each character in the string\n    max_freq = {}\n    for char in freq:\n        if freq[char] > 0 and char not in max_freq or freq[char] > max_freq[char]:\n            max_freq[char] = freq[char]\n\n    # find the minimum frequency of each character in the string\n    min_freq = {}\n    for char in freq:\n        if freq[char] > 0 and char not in min_freq or freq[char] < min_freq[char]:\n            min_freq[char] = freq[char]\n\n    # calculate the total frequency of each character\n    total_freq = {}\n    for char in freq:\n        if char in total_freq:\n            total_freq[char] += freq[char]\n        else:\n            total_freq[char] = freq[char]\n\n    # calculate the number of rotations required\n    rotations = 0\n    for char in max_freq:\n        if char in total_freq:\n            rotations += max_freq[char] // total_freq[char]\n            total_freq[char] -= max_freq[char] // total_freq[char] * total_freq[char]\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Sort the frequency dictionary based on the values in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the minimum number of rotations required\n    rotations = 0\n    \n    # Iterate over the sorted frequency dictionary\n    for i in range(n):\n        # Check if the frequency of the ith character is less than 2\n        if sorted_freq[i][1] < 2:\n            # If yes, increment the rotation count\n            rotations += 1\n            \n            # If the frequency of the (i+1)th character is less than 2, decrement the rotation count\n            if i+1 < n and sorted_freq[i+1][1] < 2:\n                rotations -= 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string to a list of characters\n    str = list(str)\n    n = len(str)\n\n    # If the string has length 1, it's already a palindrome\n    if n == 1:\n        return 0\n\n    # Find the longest palindrome substring\n    longest_palindrome = \"\"\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Check if the substring between i and j is a palindrome\n            if str[i] == str[j]:\n                substring = str[i:j+1]\n                # Update the longest palindrome substring\n                if len(substring) > len(longest_palindrome):\n                    longest_palindrome = substring\n\n    # Check if the longest palindrome is the entire string\n    if longest_palindrome == str:\n        return 0\n\n    # Find the number of rotations required to get the same string\n    rotations = 0\n    for i in range(n-1):\n        # Swap the first and last characters\n        str[i], str[n-1] = str[n-1], str[i]\n        # Check if the string is the same as the longest palindrome substring\n        if str == longest_palindrome:\n            break\n        # If not, rotate the string by one character\n        else:\n            rotations += 1\n            str[i], str[n-1] = str[n-1], str[i]\n\n    # Return the number of rotations required\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize variables\n    count = 0\n    start = 0\n    end = len(str)-1\n    rotations = 0\n\n    # Loop until the end of the string is reached\n    while end < start:\n\n        # Find the middle index of the string\n        mid = (start + end) // 2\n\n        # Check if the substring is equal to the original string\n        if str[mid:mid+len(str)] == str[:len(str)]:\n\n            # Check if the number of rotations is greater than 0\n            if mid > 0:\n                rotations += 1\n\n            # Update the start and end index\n            start = mid+len(str)\n            end = len(str)-1\n            count += 1\n\n        # If the substring is greater than the original string, move the end index to the left\n        else:\n            end = mid-1\n\n    # Return the count of rotations and the minimum number of rotations required to get the same string\n    return count, rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the given string is empty or not\n    if len(str) == 0:\n        return 0\n    \n    # Initialize a dictionary to store the number of rotations required for each character\n    char_count = {}\n    \n    # Iterate through the given string and store the count of each character in the dictionary\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum count of any character in the string\n    max_count = max(char_count.values())\n    \n    # Initialize a counter variable to keep track of the number of rotations required\n    count = 0\n    \n    # Iterate through the characters of the string and find the number of rotations required for each character\n    for char in str:\n        # Find the number of times the character appears in the string\n        char_count[char] -= 1\n        \n        # If the count of the character becomes 0, increment the counter variable and remove the character from the dictionary\n        if char_count[char] == 0:\n            count += 1\n            del char_count[char]\n    \n    # Return the minimum number of rotations required to get the same string\n    return min(max_count, count)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the given string is empty or not\n    if not str:\n        return 0\n\n    # Initialize the minimum number of rotations required\n    min_rotations = 0\n\n    # Initialize the last index of the given string\n    last_index = len(str) - 1\n\n    # Initialize the current index\n    current_index = 0\n\n    # Loop through the given string\n    while current_index <= last_index:\n        # Check if the last character of the string is the same as the current character\n        if str[last_index] == str[current_index]:\n            # Move the last index to the previous character\n            last_index -= 1\n        else:\n            # If not, increment the minimum number of rotations\n            min_rotations += 1\n            # Shift the string to the right by one character\n            str = str[1:] + str[0]\n            # Update the last index\n            last_index = len(str) - 1\n\n        # Move the current index to the next character\n        current_index += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the character\n    s = s.replace(ch, '')\n    # remove last occurrence of the character\n    s = s.rstrip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to a list of characters\n    s_list = list(s)\n\n    # Initialize the first and last index of the character\n    first_index = -1\n    last_index = -1\n\n    # Loop through the list and find the first and last occurrences of the character\n    for i in range(len(s_list)):\n        if s_list[i] == ch:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n\n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n\n    # Remove the first and last occurrences of the character from the list\n    s_list = s_list[:first_index] + s_list[last_index + 1:]\n\n    # Convert the list back to a string and return it\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character from the string\n    s = s.replace(ch, \"\")\n    # Remove last occurrence of the character from the string\n    s = s.rstrip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch, \"\", 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    s = list(s)\n    if s[0] == ch:\n        s.pop(0)\n    if s[-1] == ch:\n        s.pop()\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # removing first occurrence of the character\n    s = s[1:]\n    # removing last occurrence of the character\n    s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    s = s.strip()\n    if len(s) > 0:\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == ch:\n            s.pop(i)\n            i -= 1\n        else:\n            i += 1\n        if s[j] == ch:\n            s.pop(j)\n            j -= 1\n        else:\n            j -= 1\n    return ''.join(s)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # loop through each row of the matrix\n    for i in range(n):\n        # initialize the minimum index and minimum value\n        min_idx = i\n        min_val = M[i][i]\n\n        # loop through the remaining elements of the row\n        for j in range(i+1, n):\n            # check if the current element is smaller than the minimum\n            if M[i][j] < min_val:\n                # update the minimum index and minimum value\n                min_idx = j\n                min_val = M[i][j]\n\n        # swap the minimum element with the first element of the row\n        M[i][i], M[i][min_idx] = M[i][min_idx], M[i][i]\n\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the row with the minimum sum\n        min_sum = float('inf')\n        row_index = -1\n        for j in range(n):\n            if i!= j:\n                sum_j = sum(M[j])\n                if sum_j < min_sum:\n                    min_sum = sum_j\n                    row_index = j\n        # Swap the rows\n        M[i], M[row_index] = M[row_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        \n        # Find the sum of the current row\n        current_row_sum = sum(M[i])\n        \n        # Loop through the other rows of the matrix to find the row with the smallest sum\n        for j in range(i+1, len(M)):\n            \n            # Find the sum of the current row\n            other_row_sum = sum(M[j])\n            \n            # If the current row has a smaller sum, swap it with the current row\n            if other_row_sum < current_row_sum:\n                M[i], M[j] = M[j], M[i]\n                current_row_sum = other_row_sum\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # Calculate the sum of each row\n    row_sums = []\n    for i in range(n):\n        row_sums.append(sum(M[i]))\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Sort the matrix in ascending order\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = M[i][j][row_sums.index(M[i][j])]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix M and returns a new matrix where the rows are sorted in ascending order \n    according to the sum of its rows.\n    \n    Input: A matrix M of integers.\n    Output: A new matrix M where the rows are sorted in ascending order according to the sum of its rows.\n    '''\n    \n    # Create a new matrix M_sorted with the same dimensions as M\n    M_sorted = [[0 for j in range(len(M))] for i in range(len(M))]\n    \n    # For each row in M\n    for i in range(len(M)):\n        \n        # Calculate the sum of the row and store it in a variable\n        sum_row = sum(M[i])\n        \n        # Sort the row in ascending order using the bubble sort algorithm\n        for j in range(len(M[i])-1):\n            for k in range(len(M[i])-1-j):\n                if M[i][k] > M[i][k+1]:\n                    M[i][k], M[i][k+1] = M[i][k+1], M[i][k]\n    \n    # Return the sorted matrix M_sorted\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    # initialize a list to store the sums of the rows\n    sums = [0] * rows\n    # calculate the sums of the rows\n    for row in range(rows):\n        for col in range(cols):\n            sums[row] += M[row][col]\n    # sort the rows according to the sums\n    for i in range(rows):\n        for j in range(i + 1, rows):\n            if sums[i] < sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n                for k in range(cols):\n                    M[i][k], M[j][k] = M[j][k], M[i][k]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Transpose the matrix to get a new matrix with rows as columns and vice versa\n    M = [list(i) for i in zip(*M)]\n    # Sort the matrix in ascending order of the sum of its rows\n    for i in range(n):\n        M[i] = sorted(M[i])\n    # Transpose the matrix to get the sorted matrix in ascending order of the sum of its rows\n    return [list(i) for i in zip(*M)]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[0])):\n                if i < j:\n                    M[i][k], M[j][k] = M[j][k], M[i][k]\n\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[0])):\n                if i < j:\n                    M[j][k], M[i][k] = M[i][k], M[j][k]\n\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[0])):\n                if i < j:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[0])):\n                if i < j:\n                    M[j][i], M[k][i] = M[k][i], M[j][i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    # initialize two lists to store the sorted matrix and its sum\n    sorted_matrix = []\n    row_sums = []\n\n    # iterate over each row in the matrix\n    for row in M:\n        # initialize a variable to store the sum of the row\n        row_sum = 0\n\n        # iterate over each element in the row\n        for element in row:\n            # add the element to the row sum\n            row_sum += element\n\n        # append the row sum to the row sums list\n        row_sums.append(row_sum)\n\n    # sort the row sums in ascending order\n    row_sums.sort()\n\n    # iterate over each row in the matrix, starting from the last row\n    for i in range(len(M) - 1, -1, -1):\n        # initialize a variable to store the sum of the current row\n        current_row_sum = row_sums.pop()\n\n        # iterate over each element in the current row\n        for j in range(len(M[i])):\n            # if the current row sum is less than the element, swap them\n            if current_row_sum < M[i][j]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n\n        # append the sorted current row to the sorted matrix list\n        sorted_matrix.append(M[i])\n\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = (1/3)*l*b*h\n\n    print(\"The volume of the triangular prism is\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = 0.5 * l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Formula to find the volume of a triangular prism\n    V = l * b * h\n\n    # Function to print the volume\n    print(\"The volume of a triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h # formula for volume\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'([a-z]+)_'\n\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<![A-Z])[a-z]+(?=[A-Z]|$)'\n    # Use the re.search() method to check if the input string matches the pattern\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(_[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'([a-z])([a-z])_')\n    match = regex.search(text)\n    \n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\w)(?=[a-z])|(?<=\\d)(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])(?=[a-z])|(?<=\\d)(?=\\d)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    \n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Initialize an empty list to store the final string\n    final_list = []\n    \n    # Iterate over each character of the first string\n    for char in char_list:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # If the character is not present, add it to the final list\n            final_list.append(char)\n    \n    # Convert the final list to a string\n    final_string = ''.join(final_list)\n    \n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the final string\n    result_list = []\n    # Convert the first string to a list of characters\n    str_list = list(string)\n    # Iterate through the characters in the list\n    for char in str_list:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result_list.append(char)\n    # Convert the result list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = [0] * NO_OF_CHARS\n    for char in string:\n        if char in string:\n            index = ord(char)\n            list_string[index] = 1\n    return ''.join(chr(index) for index in range(NO_OF_CHARS) if list_string[index] == 0)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters in the input string\n    which are not present in the second string.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in set(string):\n            result.append(char)\n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    char_set = set(string)\n    return [char for char in string if char not in char_set]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    list_string = list(string)\n    # Find the intersection of the two lists\n    common_chars = list(set(list_string) & set(NO_OF_CHARS))\n    # Remove the characters from the list\n    for char in list_string:\n        if char in common_chars:\n            list_string.remove(char)\n    # Convert the list back to a string\n    final_string = ''.join(list_string)\n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    # Convert string to list of integers \n    str_list = [ord(char) for char in string]\n\n    # Remove characters from str_list which are present in second_list \n    for i in range(len(str_list)): \n        if str_list[i] in second_list: \n            str_list.pop(i)\n            i -= 1\n\n    # Convert list of integers back to string \n    str_list = [chr(num) for num in str_list]\n    result_string = ''.join(str_list)\n\n    return result_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as an input and returns a list of characters in which the first string\n    has less than or equal to the second string.\n    '''\n    return [chr(i) for i in range(NO_OF_CHARS) if chr(i) not in string]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to check against\n    set_chars = set(string)\n\n    # Create a new string without the characters in the set\n    new_string = ''.join([char for char in string if char not in set_chars])\n\n    # Return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and removes characters from the first string which are present in the second string.\n    \"\"\"\n    no_of_chars = 256  # assuming ASCII encoding\n    \n    # create a list of characters present in the second string\n    char_list = [chr(i) for i in range(no_of_chars) if chr(i) in string2]\n    \n    # create a set of characters present in the first string\n    set_of_chars = set(string1)\n    \n    # create a set of characters which are present in the first string and not present in the second string\n    common_chars = set_of_chars.intersection(char_list)\n    \n    # create a new string by replacing the common characters with an empty string\n    new_string = \"\"\n    for char in string1:\n        if char in common_chars:\n            new_string += char\n        else:\n            new_string += \" \"\n    \n    return new_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # Check if the set is empty, which means there are no duplicate elements\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the number of occurrences of each element in the array\n    num_occurrences = {}\n    \n    # Loop through the array and increment the number of occurrences of each element in the dictionary\n    for num in arraynums:\n        if num in num_occurrences:\n            num_occurrences[num] += 1\n        else:\n            num_occurrences[num] = 1\n    \n    # Loop through the dictionary and check if any element has a count greater than 1\n    for num in num_occurrences:\n        if num_occurrences[num] > 1:\n            return True\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique values\n    unique_set = set()\n\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if there are any duplicate values in the set\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique values\n    unique_set = set()\n\n    # Loop through the array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_set.add(num)\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through the array and count the frequency of each element\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Check if there are any duplicate elements in the dictionary\n    for num in freq:\n        if freq[num] > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = {}\n    for num in arraynums:\n        if num in unique:\n            return True\n        unique[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if the set has any duplicate elements\n    if len(unique_set) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 3 or x == 7 or x == 13 or x == 29:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Woodall number\"\n    elif x > 1:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function will check if the given number is woodball or not.\n    \"\"\"\n    if x > 0 and x < 10:\n        return \"It is a woodball.\"\n    else:\n        return \"It is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x == 2 or x == 3 or x == 5 or x == 7:\n        return True\n    else:\n        return is_woodall(x + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 5:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 5 or x == 10 or x == 20 or x == 50:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 12:\n        return 'Woodball'\n    elif x % 2 == 0:\n        return 'Odd'\n    elif x % 3 == 0:\n        return 'Multiple of 3'\n    else:\n        return 'Not Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 13 or x == 23:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num = num // 10\n    return reverse_num\n\ndef is_one_less_than_twice_reverse(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = rev(num)\n    if num == reverse_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed number to an integer and subtract one\n    rem_num = int(rev_num) - 1\n    # Check if the original number is one less than twice its reverse\n    if num == rem_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Compare the reverse and the original number\n    return (reverse == 2 * num - 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    if num == reverse + 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num <= int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reversed number is one less than twice the original number\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    # Check if the reversed number is one less than twice its original number\n    return num * 2 == rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    if reverse == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    # Initialize variables\n    num = 0\n    max_num = 0\n    temp = 0\n    \n    # Convert list of digits to integer\n    for digit in arr : \n        temp += int(digit)\n    \n    # Initialize max_num with temp\n    max_num = temp\n    \n    # Calculate largest number that can be formed with temp\n    while temp > 0 : \n        num = temp % 10\n        temp //= 10\n        \n        # If num is greater than 0, add it to max_num\n        if num > 0 : \n            max_num += num\n        \n        # If num is 0, we have reached the largest number we can form with temp\n        if num == 0 : \n            break\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits as input and returns the maximum number that can be formed with the digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num = max(max_num, arr[i] + arr[i-1])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    i = 0\n    while i < len(arr):\n        j = 0\n        while j < len(arr):\n            k = 0\n            while k < len(arr):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    if arr[i] + arr[j] + arr[k] > max_num:\n                        max_num = arr[i] + arr[j] + arr[k]\n                k += 1\n            j += 1\n        i += 1\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*(10**(len(arr)-1-i)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables to store the maximum and the current number\n    max_num = 0\n    curr_num = 0\n    \n    # Iterate over the list of digits\n    for digit in arr:\n        # Compute the next number by adding the digit to the current number\n        curr_num += digit\n        \n        # Update the maximum number if the current number is larger\n        if curr_num > max_num:\n            max_num = curr_num\n            \n    # Return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits and returns the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            max_num = max(max_num, int(\"\".join(arr[i:j])))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # Initializing variables\n    max_num = 0\n    power = 0\n\n    # Looping through each digit\n    for digit in arr:\n        # Multiplying the current digit with 2 raised to the power of the current power\n        max_num += digit * 2 ** power\n        # Updating the power variable\n        power += 1\n\n    # Returning the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # converting the list to a string\n    num_str = ''.join(map(str, arr))\n\n    # converting the string to an integer\n    num_int = int(num_str)\n\n    # initializing a variable to store the largest formed number\n    largest = num_int\n\n    # loop through each digit in the number\n    for digit in num_str : \n\n        # initialize a variable to store the next number formed by adding the current digit to the largest number\n        next_num = largest + int(digit)\n\n        # check if the next number formed is greater than the current largest number\n        if next_num > largest : \n\n            # update the largest number\n            largest = next_num\n\n    # return the largest formed number\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            max_num = max(max_num, int(\"\".join(arr[i:j])))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero\"\n    elif x > 0 and y < 0:\n        return \"First number has opposite sign to second number\"\n    elif x < 0 and y > 0:\n        return \"Second number has opposite sign to first number\"\n    elif x > 0 and y == 0:\n        return \"First number has positive sign\"\n    else:\n        return \"Second number has positive sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x < 0 and y > 0:\n        return \"The first number has negative sign and the second number has positive sign.\"\n    elif x > 0 and y < 0:\n        return \"The first number has positive sign and the second number has negative sign.\"\n    elif x == y:\n        return \"Both numbers are equal.\"\n    else:\n        return \"Neither number has opposite sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if the signs are different\n    if x and y:\n        if x * y <= 0:\n            print(\"The two integers have opposite signs.\")\n        else:\n            print(\"The two integers have the same sign.\")\n    else:\n        print(\"Both the integers are zero.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x < 0)!= (y < 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if x and y have opposite signs\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    # Check if x and y have opposite signs\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if count < 10:\n            count = count * 10 + 10\n        else:\n            count = count * 10 + 5\n    return count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_octagonal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 2 * get_octagonal(n // 2)\n        else:\n            return get_octagonal(n - 1) + 1\n    \n    return get_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # initialize the first three numbers of the sequence\n    num1, num2, num3 = 1, 8, 27\n    \n    # iterate through the sequence\n    for i in range(3, n+1):\n        # find the next octagonal number\n        oct_num = num1 + num2 - num3\n        num1, num2, num3 = num2, num3, oct_num\n        \n        # check if the octagonal number is equal to n\n        if oct_num == n:\n            return oct_num\n    \n    # if the loop completes, there is no octagonal number less than n\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1 or n % 2 == 0:\n        return \"Invalid input. Please enter an odd integer greater than or equal to 1.\"\n    else:\n        return n * (2 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n**2 + n - 1\n\ndef find_nth_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        i = 2\n        octagonal = 0\n        while i <= n:\n            octagonal += i**2 + i - 1\n            i += 1\n        return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    This function returns the nth octagonal number.\n    \"\"\"\n    return 8 * n * n + 16 * n - 12"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a = 1\n    while a**3 < n:\n        a += 1\n    return a**3 == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i**2 <= n: \n        if n % i**2 == 0: \n            return False\n        i += 1\n    return True\n\nn = int(input(\"Enter the number for which you want to find the octagonal number: \"))\nif is_octagonal(n): \n    print(\"The\", n, \"th octagonal number is\", n**2)\nelse: \n    print(\"The\", n, \"th octagonal number is not a valid number.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define a function to calculate the nth octagonal number\n    def nth_octagonal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 24\n        elif n == 3:\n            return 33\n        elif n == 4:\n            return 46\n        elif n == 5:\n            return 59\n        elif n == 6:\n            return 78\n        elif n == 7:\n            return 91\n        elif n == 8:\n            return 100\n        elif n == 9:\n            return 113\n        elif n == 10:\n            return 126\n\n    # Call the nth_octagonal function and return the result\n    return nth_octagonal(n)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of each substring with the given sum\n    count_dict = defaultdict(int)\n    \n    # Iterate over the characters of the string\n    for i in range(len(s)):\n        # Create a substring starting from i\n        substring = s[i:]\n        \n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n        \n        # If the substring sum is equal to its length, increment the count in the dictionary\n        if substring_sum == len(substring):\n            count_dict[substring] += 1\n    \n    # Return the count of all the substrings in the dictionary\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count_dict[substring] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    length = len(s)\n    count = 0\n    digit_sum = defaultdict(int)\n    \n    for i in range(length):\n        digit_sum[int(s[i])] += 1\n    \n    for i in range(length - 1, -1, -1):\n        substring = s[i:i+length]\n        digits_sum = sum(int(digit) for digit in substring)\n        \n        if digits_sum == length:\n            count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = [defaultdict(int) for i in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            if s[j] - s[i] in dp[i].keys():\n                dp[i][s[j] - s[i]] += 1\n            else:\n                dp[i][s[j] - s[i]] = 1\n\n            if s[j] - s[i] == 9:\n                count += dp[i][9] - 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length_sum = sum(len(str(i)) for i in range(10))\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(s[k]) for k in range(i, j)) == length_sum:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a defaultdict to store the counts of substrings with sum of digits equal to length\n    substring_counts = defaultdict(int)\n\n    # Iterate over all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # If substring has sum of digits equal to length, increment count in defaultdict\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substring_counts[substring] += 1\n\n    # Return the count of substrings with sum of digits equal to length\n    return len(substring_counts)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_digits = sum(int(digit) for digit in substring)\n            if sum_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of each substring\n    count = defaultdict(int)\n    # loop through the string\n    for i in range(len(s)):\n        # check if the current substring has the sum of digits equal to its length\n        if s[i:i+1] == str(len(s[i:i+1])):\n            # increment the count of this substring\n            count[s[i:i+1]] += 1\n    # return the count of all substrings\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    dp = defaultdict(int) # dictionary to store the count of substrings for each sum of digits\n\n    # calculate the sum of digits for each substring of length i\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum_of_digits = sum(int(d) for d in s[i:j])\n            dp[sum_of_digits] += 1\n\n    # count the number of substrings with sum of digits equal to their length\n    count = sum(1 for i in dp.values() if i == n)\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0] # assuming the first element is the smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    return max(pairs, key=lambda x: abs(x[0] - x[1]))[0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference to be the difference between the first two elements\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n\n    # Iterate through the list from the second element to the last element\n    for i in range(1, len(test_list) - 1):\n        # Calculate the difference between the current and the next elements of the list\n        diff = abs(test_list[i][0] - test_list[i + 1][0])\n\n        # Update the maximum difference if the difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    max_diff = 0\n\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, test_list[j][0] - test_list[i][0])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Use set to find unique tuples in the list\n    unique_tuples = set(test_list)\n    # Initialize the maximum difference to be the first difference\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n    # Loop through the remaining tuples\n    for i in range(1, len(unique_tuples)):\n        # Calculate the difference between this tuple and the previous one\n        diff = abs(unique_tuples[i][0] - unique_tuples[i-1][0])\n        # Update the maximum difference if this difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference to be negative infinity\n    max_diff = float('-inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Loop through the remaining tuples from the current index\n        for j in range(i + 1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Using the sort() method in Python\n    subjectmarks.sort(key=lambda x: x[1])\n\n    # Printing the sorted list\n    print(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: flatten the list and add the sum of its elements to the sum of the flattened list\n    else:\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(data_list):\n        \"\"\"\n        Recursively flatten a list.\n        \"\"\"\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result += flatten_list(item)\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list, total=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return total\n    else:\n        return recursive_list_sum(data_list[1:], total + data_list[0])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    '''\n    This function takes a list and recursively flattens it and sums its elements.\n    '''\n    if index == len(data_list):\n        return total\n    else:\n        return recursive_list_sum(data_list, index+1, total+data_list[index])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(data_list):\n        \"\"\"\n        Recursively flatten a nested list.\n        \"\"\"\n        if isinstance(data_list, list):\n            result = []\n            for item in data_list:\n                result.extend(flatten(item))\n            return result\n        else:\n            return [data_list]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    def sum_list(lst):\n        result = 0\n        for item in lst:\n            result += item\n        return result\n    \n    flattened_list = flatten(data_list)\n    sum_of_list = sum_list(flattened_list)\n    return sum_of_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: empty list\n    if not data_list:\n        return 0\n    \n    # recursive case: sum first element of list and call function recursively on rest of list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list, level=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item, level+1)\n    else:\n        return data_list + level"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # helper function to flatten the list recursively\n    def flatten(data_list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    # flatten the list\n    flattened_list = flatten(data_list)\n    \n    # sum all elements in the flattened list\n    total_sum = 0\n    for element in flattened_list:\n        total_sum += element\n    \n    return total_sum"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers and returns the count of positive numbers.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Returns the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # initialize variables\n    bell = [1, 1]\n    ways = [1, 1]\n\n    # loop through the set of Bell numbers\n    for i in range(2, n+1):\n        # add the previous two numbers to the set\n        bell.append(bell[i-1] + bell[i-2])\n        # add the number of ways to partition the set of Bell numbers up to i\n        ways.append(ways[i-1] + ways[i-2])\n\n    # return the final number of ways to partition the set of Bell numbers up to n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Check if n is a prime number\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Create a list of all Bell numbers up to n\n    bell_numbers = [1]\n    for i in range(2, n + 1):\n        if is_prime(i):\n            bell_numbers.append(i)\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through the list of Bell numbers and check if each number is in the set of Bell numbers\n    for num in bell_numbers:\n        if num > n:\n            break\n        count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) * bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate from 0 to n-1\n    for i in range(2, n+1):\n        # Count the number of ways to partition i\n        count = 0\n        # For each number from 2 to i-1\n        for j in range(2, i):\n            # If i is divisible by j, then it can be partitioned into j and i-j\n            if i % j == 0:\n                count += 1\n        \n        # Multiply the result by the count of ways to partition i\n        result *= count\n    \n    # Return the result\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return (2 * n - 1) * bell_number(n-1) // (n - 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 0\n    if n % 4 == 0:\n        return 1\n    if n % 8 == 0:\n        return 2\n    if n % 16 == 0:\n        return 3\n    if n % 32 == 0:\n        return 4\n    if n % 64 == 0:\n        return 5\n    if n % 128 == 0:\n        return 6\n    if n % 256 == 0:\n        return 7\n    if n % 512 == 0:\n        return 8\n    if n % 1024 == 0:\n        return 9\n    if n % 2048 == 0:\n        return 10\n    if n % 4096 == 0:\n        return 11\n    if n % 8192 == 0:\n        return 12\n    if n % 16384 == 0:\n        return 13\n    if n % 32768 == 0:\n        return 14\n    if n % 65536 == 0:\n        return 15\n    if n % 131072 == 0:\n        return 16\n    if n % 262144 == 0:\n        return 17\n    if n % 524288 == 0:\n        return 18\n    if n % 1048576 == 0:\n        return 19\n    if n % 2097152 == 0:\n        return 20\n    if n % 4194304 == 0:\n        return 21\n    if n % 8388608 == 0:\n        return 22\n    if n % 16777216 == 0:\n        return 23\n    if n % 33554432 == 0:\n        return 24\n    if n % 67108864 == 0:\n        return 25\n    if n % 134217728 == 0:\n        return 26\n    if n % 268435456 == 0:\n        return 27\n    if n % 536870912 == 0:\n        return 28\n    if n % 1073741824 == 0:\n        return 29\n    if n % 2147483648 == 0:\n        return 30\n    if n % 4294967296 == 0:\n        return 31\n    if n % 8589934592 == 0:\n        return 32"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    count = 0\n    x = 1\n    y = 1\n\n    # Loop through all possible values of x and y\n    while y <= n:\n        if y == 0:\n            x += 1\n            y = 1\n        else:\n            x += 1\n            y += 1\n\n        # Increment count if x is greater than n\n        if x > n:\n            count += 1\n\n    # Return count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    elif n % 2 == 0:\n        return bell_number(n // 2)\n    else:\n        return bell_number((n - 1) // 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize the count of ways to partition to 0\n    count = 0\n    \n    # Iterate through all possible ways to partition the set of Bell numbers\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            count += 1\n            \n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty\n    if len(A) < 2:\n        return True\n\n    # check if the array has only one element\n    if len(A) == 2:\n        return (A[0] <= A[1])\n\n    # check if the array is monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks if the given array A is monotonic or not.\n    A monotonic array is either increasing or decreasing.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n            \n    for i in range(n-1):\n        if A[i] < A[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    if n == 0:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, n):\n            if A[i] <= A[i - 1]:\n                return False\n        return True\n\n    if A[0] > A[1]:\n        for i in range(1, n):\n            if A[i] >= A[i - 1]:\n                return False\n        return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic, else False.\n    A monotonic array is an array where each element is either monotonically increasing or monotonically decreasing.\n    The function checks if the array is monotonic by comparing each element with the next one.\n    If the element is greater than the next element, it means the array is decreasing. If the element is less than the next element, it means the array is increasing.\n    If the array is both increasing and decreasing, it means the array is neither increasing nor decreasing.\n    '''\n    \n    n = len(A)\n    \n    # check if the array is empty or has only one element\n    if n <= 1:\n        return True\n    \n    # check if the array is increasing or decreasing\n    increasing = A[0] <= A[1]\n    decreasing = A[0] >= A[1]\n    \n    # check if the array is neither increasing nor decreasing\n    if increasing and decreasing:\n        return True\n    \n    # check if all the elements are monotonic\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n    \n    # if all elements are monotonic, return True\n    if increasing or decreasing:\n        return True\n    \n    # otherwise, return False\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    n = len(A) \n\n    # Check if array is monotonic in increasing order\n    if n > 1:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n\n    # If array is of length 1, it cannot be monotonic\n    else:\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:]) and A[0] > A[1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    else: \n        return (A[0] <= A[1] and is_Monotonic(A[1:])) or (A[0] >= A[1] and is_Monotonic(A[1:]))"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    if j == len(s):\n        return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # check if the sublist is empty\n    if not s:\n        return True\n    # check if the first element of the sublist matches the first element of the list\n    if l[0] == s[0]:\n        # check if the sublist is a sublist of the rest of the list\n        return is_sublist(l[1:], s[1:])\n    else:\n        # if the first element of the sublist doesn't match, try the rest of the list\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    if j == len(s):\n        return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_equal = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples and returns True if all the tuples have equal length,\n    False otherwise.\n    \"\"\"\n    lengths = set()\n    for tup in Input:\n        lengths.add(len(tup))\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through the list of tuples\n    for i in Input:\n        # check if the length of the current tuple is equal to the length of the first tuple in the list\n        if len(i)!= len(Input[0]):\n            # if not, return False\n            return False\n    # if all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length,\n    and False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            count += 1\n            break\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through each tuple in the input list\n    for i in range(len(Input)):\n        # if the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(Input[i])!= len(Input[0]):\n            return False\n    # if all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = max(1, int(gap/1.3))\n        if gap == 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j-gap] > nums[j]:\n                nums[j-gap], nums[j] = nums[j], nums[j-gap]\n                j -= gap\n        gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 1.3\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # set the gap size\n    gap = len(nums) // 2\n\n    # while gap is greater than 1\n    while gap > 1:\n        # set the new gap size\n        old_gap = gap\n\n        # set the gap size to half of the current gap\n        gap = len(nums) // gap\n\n        # for each iteration of the loop, do the following:\n        for i in range(len(nums) // gap):\n            # compare the current element with its neighboring elements\n            if nums[i] > nums[i + gap]:\n                # swap the elements if they are out of order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n        # if the gap size is not decreasing with each iteration, break the loop\n        if old_gap == gap:\n            break\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        # Iterate through the list using a for loop\n        for i in range(gap, n):\n            # If the current element is greater than the next element, swap them\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        # Decrease the gap and repeat the process until no more swaps are made\n        gap = (gap + 1) // 2\n        \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    step = 1\n    while swapped:\n        swapped = False\n        for i in range(1, n-step):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n        step += 1\n        if step == n:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n // 2\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    start = 0\n    mid = 0\n    end = n - 1\n\n    while swapped:\n        swapped = False\n\n        # find the middle of the array\n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        # find the starting index of the array\n        if not swapped:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    :param nums: A list of integers to be sorted.\n    :return: A sorted list of integers.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        j = n - i*i\n        if j*j == n:\n            print(\"YES\")\n            return\n    print(\"NO\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1): \n        # check if the sum of i and its square is equal to n\n        if i*i + n - i == n: \n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        for j in range(1, int(n ** 0.5) + 1):\n            if i + j == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_Square(x):\n        '''\n        A helper function to check whether a given number is a square or not.\n        '''\n        sqrt_x = int(x ** 0.5)\n        return sqrt_x * sqrt_x == x\n\n    def is_Difference_of_Squares(x):\n        '''\n        A helper function to check whether a given number can be represented as the difference of two squares or not.\n        '''\n        a, b = int(x / 2), int((x + 1) / 2)\n        return is_Square(a) and is_Square(b)\n\n    if is_Difference_of_Squares(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Define a function to check if a number is a square\n    def is_square(x):\n        return x**0.5 == int(x**0.5)\n\n    # Check if the given number is divisible by 2\n    if n%2 == 0:\n        return \"The given number can't be represented as the difference of two squares.\"\n\n    # Calculate the difference between the given number and 2\n    dif = n - 2\n\n    # Check if the difference is a square\n    if is_square(dif):\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Initialize the sum of squares\n    sum_squares = 0\n\n    # Iterate from 1 to sqrt(n) and add the square of each number to the sum of squares\n    for i in range(1, sqrt_n + 1):\n        sum_squares += i ** 2\n\n    # Check if n can be represented as the difference of two squares\n    if n == sum_squares - n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Define the lower and upper bounds for the range of numbers to check\n    lower_bound = 0\n    upper_bound = int(n**0.5)\n\n    # Loop through all the numbers between the lower and upper bounds\n    for i in range(lower_bound, upper_bound+1):\n\n        # Calculate the difference of the given number and the square of the current number\n        square_diff = n - i**2\n\n        # Check if the difference is an integer and within the range of the current number\n        if square_diff.is_integer() and square_diff >= 0 and square_diff <= i:\n\n            # If it's an integer, it can be represented as the difference of two squares\n            return True\n\n    # If the loop completes without finding any square difference, the number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"Number is negative\"\n    elif n == 0:\n        return \"Number is equal to 0\"\n    elif n == 1:\n        return \"Number is equal to 1\"\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0 and n / i == int(n/i):\n                return \"Number cannot be represented as the difference of two squares\"\n        return \"Number can be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Calculate the square of the input number\n    square = n * n\n    # Check if the square of the input number is an integer or not\n    if int(square) == square:\n        # Calculate the difference between the square and its integer value\n        difference = square - int(square)\n        # Check if the difference is an integer or not\n        if int(difference) == difference:\n            # Return True if both conditions are met, False otherwise\n            return True\n        else:\n            # Return False if the difference is not an integer\n            return False\n    else:\n        # Return False if the square is not an integer\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number can be represented as the difference of two squares\n    if n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if the colors in the patterns array are distinct\n    if len(set(colors))!= len(colors):\n        return False\n\n    # check if the pattern is the same for each color in the colors array\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    # check if the colors array is sorted in the same order as the patterns array\n    if colors!= sorted(colors):\n        return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a variable to keep track of the index in the colors array\n    index = 0\n    # Initialize a variable to keep track of the number of colors matched with each pattern\n    colors_matched = [0 for _ in range(len(patterns))]\n    # Loop through the patterns array\n    for pattern in patterns:\n        # Loop through the colors array until we find a pattern that matches all the colors in the pattern\n        while index < len(colors) and colors_matched[pattern] < len(pattern):\n            # If the current color matches the current pattern, increment the colors matched\n            if colors[index] == pattern[colors_matched[pattern]]:\n                colors_matched[pattern] += 1\n            # Increment the index\n            index += 1\n        # If we have gone through the entire colors array and we have not found a pattern that matches all the colors in the pattern,\n        # then there is no match\n        if index == len(colors):\n            return False\n    # If we have gone through all the patterns and found a match for all the colors in each pattern, then we have a match\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Define a function to check whether a pattern is valid or not\n    def is_valid_pattern(pattern):\n        if len(pattern) % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Check if all the patterns are valid\n    for pattern in patterns:\n        if not is_valid_pattern(pattern):\n            return False\n\n    # Define a function to find the valid patterns that match the given colors\n    def find_valid_patterns(colors, patterns):\n        valid_patterns = []\n        for pattern in patterns:\n            if len(pattern) % 2 == 0:\n                if set(colors) == set(pattern):\n                    valid_patterns.append(pattern)\n        return valid_patterns\n\n    # Find the valid patterns that match the given colors\n    valid_patterns = find_valid_patterns(colors, patterns)\n\n    # Check if there is a valid pattern\n    if len(valid_patterns) == 0:\n        return False\n    else:\n        # Check if the sequence of colors follows the valid pattern\n        for i in range(len(colors) - len(valid_patterns[0]) + 1):\n            pattern = valid_patterns[0]\n            if set(colors[i:i+len(pattern)])!= set(pattern):\n                return False\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of colors and patterns arrays are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to store the count of colors in the patterns array\n    count = 0\n\n    # Loop through the patterns array\n    for i in range(len(patterns)):\n        # Check if the current color matches the pattern at index i in the patterns array\n        if colors[i] == patterns[i]:\n            # If it does, increment the count variable\n            count += 1\n\n    # Check if the count is equal to the length of the patterns array\n    return count == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors in the array matches the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a set of all patterns to check against\n    patterns_set = set(patterns)\n\n    # Iterate through each color in the array\n    for color in colors:\n        # If the color is not in the patterns set, it means that the sequence is not followed\n        if color not in patterns_set:\n            return False\n\n    # If we made it through the loop without returning False, it means the sequence is followed\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples\n    result = []\n\n    # iterate through the list of tuples\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(i % K == 0 for i in tup):\n            # if all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j]%K!=0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple(test_list[i]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i, tuple_ in enumerate(test_list):\n        for j, element in enumerate(tuple_):\n            if element % K!= 0:\n                break\n        else:\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns a list of tuples that have all\n    elements divisible by K from the input list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0 and test_list[j][0] % K == 0 and test_list[j][1] % K == 0 and test_list[j][2] % K == 0 and test_list[k][0] % K == 0 and test_list[k][1] % K == 0 and test_list[k][2] % K == 0:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n\n    # Initialize an empty list to store the tuples\n    result_list = []\n\n    # Iterate over the test_list and find the tuples with all elements divisible by K\n    for tup in test_list:\n        if sum(1 for x in tup if x % K == 0) == len(tup):\n            result_list.append(tup)\n\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                count += 1\n        if count == len(test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and returns a list of tuples\n    that have all elements divisible by K from the input list.\n    \n    For example, if we have the list of tuples [(1,2,3), (4,5,6), (7,8,9)], K=3, and we call the function,\n    the function will return [(1,2,3), (4,5,6)].\n    \"\"\"\n    return [t for t in test_list if all(x % K == 0 for x in t)]"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, \"is divisible by 11.\")\n    else:\n        print(n, \"is not divisible by 11.\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or not.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        print(n, \"is divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether its length is odd or even.\n    \"\"\"\n    word = s.split()[0] # split the string into a list of words and take the first word\n    if len(word) % 2 == 0: # if the length of the first word is even\n        print(word + \" has an even length.\")\n    else: # if the length of the first word is odd\n        print(word + \" has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in range(len(s)): \n        if s[i].isalpha() and len(s[i]) % 2 == 1: \n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # convert the string into a list of characters\n    word = list(s)\n    # check whether the length of the word is odd or even\n    if len(word) % 2 == 0:\n        print(f\"{s} has an even length.\")\n    else:\n        print(f\"{s} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = \"\"\n    count = 0\n    for i in s:\n        if i == \" \":\n            if count % 2!= 0:\n                return False\n            else:\n                count = 0\n        else:\n            count += 1\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of a word is odd or even.\n    \"\"\"\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # If the length is odd, return True\n            return True\n\n    # If no words have odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split() # Splitting the string into a list of words\n    for word in word_list:\n        if len(word) % 2!= 0: # Checking if the length of each word is odd or even\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even.\")\n        else:\n            print(f\"{word} is odd.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 2 * a + b\n\n    for i in range(n):\n        a = b\n        b = c\n        c = 2 * a + b\n\n    return c"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return (4*n*(n-1)) - (n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4*n**2 - 6*n + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return 4 * (n - 1) + 6 * (n - 1) ** 2 + 3 * (n - 1) ** 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_helper(i):\n        if i == 0:\n            return 1\n        elif i == 1:\n            return 1\n        elif i == 2:\n            return 4\n        else:\n            return 4*tetrahedral_helper(i-1)\n\n    return tetrahedral_helper(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    i = 1\n    j = 2\n    while count < n:\n        count += (j * (j - 1)) // 2\n        i += 1\n        j += 1\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base tetrahedral number\n    base = 4 * (n - 1) * (n - 2) / 6\n    \n    # Calculate the nth tetrahedral number\n    nth_tetrahedral = base + 2 * n * (n - 1) / 2\n    \n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(n):\n        t = t * (4*i + 6) // (i + 1)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            tetrahedral_count += 1\n    return tetrahedral_count\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return (4 * n * (n + 1) - 2) // 2"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of the sphere using the formula V = (4/3)\u03c0r^3\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    if not isinstance(strr, str):\n        raise TypeError(\"Input must be a string\")\n    total_sum = 0\n    for char in strr:\n        if ord(char) < 65 or ord(char) > 90:\n            raise ValueError(\"Input string should contain only uppercase letters\")\n        ascii_value = ord(char) - 64\n        total_sum += ascii_value\n    return chr(total_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the result string\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        \n        # Add the ASCII value to the result string modulo 26\n        result += chr(((ascii_val % 26) + 65) % 91 + 65)\n        \n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of each character in the string\n    sum_ascii = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the sum_ascii variable\n        sum_ascii += ord(char)\n    \n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char %= 26\n    char += 65\n    char = chr(char)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0  \n    for char in strr:  \n        char_val += ord(char)  \n    return chr((char_val % 26) + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n\n    return chr((sum_ascii % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ASCII_value = 65  # the ASCII value of 'A'\n    char_sum = 0\n    \n    for char in strr:\n        char_sum += ord(char) - ASCII_value\n        if char_sum > 25:\n            char_sum -= 26\n    \n    char_ascii = char_sum + ASCII_value\n    if char_ascii > 90:\n        char_ascii -= 26\n    \n    char = chr(char_ascii)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(strr)\n    # Initialize the sum of ASCII values of characters to 0\n    sum_of_ascii = 0\n    # Iterate through the list of characters\n    for char in char_list:\n        # Add the ASCII value of the character to the sum\n        sum_of_ascii += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum_of_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char = char % 26\n    char += 65\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[i-1] * 2)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: \n        return \"Please enter a non-negative integer.\"\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            sequence.append(sequence[i-1]*2)\n        else:\n            sequence.append(sequence[i-1]+sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        if sequence[i-1] == 1:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        else:\n            sequence.append(sequence[i-1])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(3 * sequence[i - 1] + 1)\n    return sequence[n - 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 4, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 67989163763"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    This function calculates the nth number in the Newman Conway sequence.\n    '''\n\n    # initialize the sequence\n    sequence = [0, 1]\n\n    # calculate the sequence\n    for i in range(2, n):\n        # find the next number in the sequence\n        next_num = sequence[i-1] + sequence[i-2]\n\n        # add the next number to the sequence\n        sequence.append(next_num)\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize a list to store the sequence values\n    sequence_list = []\n    # initialize a variable to keep track of the current number\n    current_number = 1\n    # loop until we have generated n numbers in the sequence\n    while len(sequence_list) < n:\n        # check if the current number is a prime number\n        if all(current_number % i!= 0 for i in range(2, int(current_number ** 0.5) + 1)):\n            # if it is a prime number, add it to the sequence\n            sequence_list.append(current_number)\n        # calculate the next number in the sequence\n        current_number += 1\n    # return the nth number in the sequence\n    return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    # first n terms of sequence\n    sequence = [0] * n\n    sequence[0] = 1\n    # sequence growth rules\n    for i in range(1, n):\n        sequence[i] = 4 * sequence[i-1] - sequence[i-2]\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula:\n    # A = 4 * \u03c0 * r^2\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = math.pi * (r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4/3) * pi * r**3\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: n=0 and n=1 are not centered hexagonal numbers\n    if n < 0 or n == 0 or n == 1:\n        return None\n    \n    # Recursive case: find the (n-1)th centered hexagonal number\n    elif n % 2 == 0:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n    \n    # Non-recursive case: find the (n-1)th centered hexagonal number\n    else:\n        return centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n\n    b = n + 1\n    c = n + 2\n    hexagonal_number = 0\n\n    if n % 2 == 0:\n        hexagonal_number = (a ** 2 + b ** 2) ** 0.5\n        return int(hexagonal_number)\n    else:\n        hexagonal_number = (a ** 2 + b ** 2 + c ** 2) ** 0.5\n        return int(hexagonal_number)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 1\n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result += a\n            n -= 1\n        else:\n            result += b\n            n -= 2\n        c += 2\n        a += 1\n        b += 2\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon = 1\n    while hexagon < n:\n        hexagon = (3*hexagon**2) + 1\n    return hexagon"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(n):\n        a = 3*a - b\n        b = c\n        c = 2*a - b\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = (n + 1) * (n + 1)\n    outer_hexagonal = (3 * (n + 1)) ** 2\n    return center - outer_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n <= 0:\n        return 0\n    \n    # Initialize variables\n    a = 1\n    b = 2\n    \n    # Calculate centered hexagonal number\n    for i in range(2, n+1):\n        centered_hexagonal = (a**i - b**i)/2\n        a = b\n        b = centered_hexagonal\n    \n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the variables\n    num = 1\n    count = 0\n    total = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the number to the total\n        total += num\n\n        # If the total is even, add the number to the count\n        if total % 2 == 0:\n            count += 1\n\n        # Calculate the next number\n        num += 2\n\n    # Return the count of even numbers\n    return count"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to hold the merged data\n    merged_dict = {}\n\n    # Loop through the keys in each dictionary and add them to the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the dictionaries\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Iterate over each key in each dictionary\n    for key in dict1:\n        # If the key exists in both dictionaries, add the value from the first dictionary\n        if key in dict2:\n            merged_dict[key] = dict1[key]\n        # If the key exists only in the first dictionary, add the value from the first dictionary\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        # If the key exists only in the second dictionary, add the value from the second dictionary\n        else:\n            merged_dict[key] = dict2[key]\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict3:\n            merged_dict[key] = (dict1[key], dict3[key])\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(list1)\n    # count the frequency of each element in the set\n    freq_dict = collections.Counter(unique_set)\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is in the dictionary, increment its frequency\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store the frequencies\n    freq = {}\n\n    # Loop through the list and update the frequencies in the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # Return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = abs(N-1)\n    if N%2 == 0:\n        diff /= 2\n    else:\n        diff = diff + 1\n    return N - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    n = int(input(\"Enter a number: \"))\n\n    min_n = n\n    diff = n - min_n\n\n    for i in range(1, N+1):\n        if i < min_n:\n            min_n = i\n            diff = i - min_n\n\n        elif i - min_n < diff:\n            diff = i - min_n\n\n    return min_n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    nums = list(range(1, N+1))\n    min_diff = abs(N)\n    closest = None\n\n    for num in nums:\n        diff = abs(num - N)\n\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return 1\n    elif N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        min_diff = abs(N-1)\n        min_num = 1\n        max_num = N-1\n        for i in range(2, N):\n            diff = abs(i-N)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = i\n            elif diff == min_diff:\n                if i < min_num:\n                    min_num = i\n        return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')  # initialize minimum number to infinity\n    closest_num = None  # initialize closest number to none\n    \n    for num in range(N):\n        if num < min_num:\n            min_num = num\n            closest_num = num\n        elif num - min_num <= min_num - closest_num:\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    \n    while True:\n        if num - 1 < 0:\n            return num\n        else:\n            num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest_num = float('inf')\n\n    # Loop through the list\n    for num in N:\n        # Check if num is smaller than smallest\n        if num < smallest:\n            # Set smallest to num and closest_num to smallest\n            closest_num = smallest\n            smallest = num\n        # Check if num is closer to closest_num than smallest\n        elif num < closest_num and abs(num - closest_num) < abs(smallest - closest_num):\n            # Set closest_num to num\n            closest_num = num\n\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    \n    # iterate through numbers from 1 to N\n    for i in range(1, N+1):\n        # find the absolute difference between the current number and N\n        diff = abs(i - N)\n        \n        # check if the absolute difference is smaller than the closest\n        if diff < closest:\n            # update the closest number\n            closest = diff\n    \n    # return the smallest number that is smaller than N\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    \n    while True:\n        try:\n            if N > n:\n                n -= 1\n            else:\n                n += 1\n            break\n        except:\n            print(\"Invalid input. Please enter a positive integer.\")\n            \n    print(\"The closest smaller number is:\", n)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes an integer N as input and returns the closest smaller number to N.\n    \"\"\"\n    smallest = N\n    closest = N\n    for i in range(1, N):\n        if abs(i - N) < abs(closest - smallest):\n            smallest = i\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the given string.\")\n    else:\n        print(f\"{sub_str} is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the list of string values is empty\n    if not str1:\n        return False\n\n    # iterate through the list of string values and check if the substring is present as a substring\n    for string in str1:\n        if sub_str in string:\n            return True\n\n    # if the function reaches this point, the substring is not present in any of the string values\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1)!= list:\n        raise TypeError(\"First argument must be a list of strings\")\n    if type(sub_str)!= str:\n        raise TypeError(\"Second argument must be a string\")\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for string in str1:\n            if sub_str in string:\n                return True\n        return False\n    else:\n        raise ValueError('Both the input parameters must be lists of string values.')"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the list of strings to a set to remove duplicates and improve performance\n    str_set = set(str1)\n\n    # Loop through the list of strings and check if the substring is present as a substring\n    for string in str_set:\n        if sub_str in string:\n            return True\n    \n    # If the substring is not present in any of the strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Check if a string is present as a substring in a given list of string values.\n    '''\n    for str1 in str_list:\n        if sub_str in str1:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 10:\n        return False\n\n    sum = 0\n    for i in range(n):\n        if n % i == 0:\n            sum += i\n\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        print(\"The given number is even.\")\n    else: \n        print(\"The given number is odd.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is even or odd\n    if n % 2 == 0: \n        # If even, it's not undulating\n        return False\n    else: \n        # If odd, it's undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Define the constants\n    HALF_PI = 1.5707963267948966\n    HALF_E = 0.7853981633974483\n    \n    # Check for input validity\n    if n <= 0:\n        return \"Invalid input\"\n    \n    # Calculate the angle of the number using the formula\n    angle = n * HALF_PI / 180\n    \n    # Check if the angle is within the range of a straight line\n    if angle >= 0 and angle <= HALF_E:\n        return \"The number is undulating\"\n    else:\n        return \"The number is not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    This function will check whether the given number is undulating or not.\n    A number is said to be undulating if it is divisible by 10 but not divisible by 5.\n    '''\n    if n % 10 == 0 and n % 5!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1/power(a, -b)\n\nprint(power(2, 3)) # Output: 8\nprint(power(2, -3)) # Output: 0.008"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1 / power(a, abs(b))"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a: int - the base number\n    b: int - the exponent\n\n    Returns:\n    int - the value of 'a' to the power 'b'\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (which is the second element of each tuple)\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (the second element of each tuple)\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple (the first element of each tuple)\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize variables to store the smallest and longest lists\n    min_length = lst[0][0]\n    max_length = lst[0][0]\n\n    # Loop through each list in the list of lists\n    for sublist in lst:\n\n        # Check if the length of the current sublist is shorter than the smallest\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n        # Check if the length of the current sublist is longer than the longest\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  \n    for i in range(len(lst)):  \n        if len(lst[i]) < min_len:  \n            min_len = len(lst[i])  \n    return min_len  \n  \n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sublist in lst:\n        if min_len is None or len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    # Initialize a variable to store the length of the smallest list\n    min_len = None\n    # Loop through each list in the input list of lists\n    for sub_list in lst:\n        # Check if the length of the current sub_list is less than the current minimum length\n        if min_len is None or len(sub_list) < min_len:\n            # If it is, update the minimum length to be the length of the current sub_list\n            min_len = len(sub_list)\n    # Return the minimum length of any list in the input list of lists\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 1\n\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    if n <= 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = divisor(n/2)\n        if result <= 1:\n            return 1\n        else:\n            return 1 + divisor(n-result)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of \n    divisors of the input integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency counts\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[element] = 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for item in list1:\n\n        # If the element is a list, recursively call the function to find the frequency of each element in the list\n        if isinstance(item, list):\n            freq_dict.update(frequency_lists(item))\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # Return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each element in the flattened list of lists\n    for element in list1:\n        # if the element is a list, recursively call the function to find the frequency of each element in the list\n        if type(element) == list:\n            freq_dict.update(frequency_lists(element))\n        # if the element is not a list, add it to the dictionary with a value of 1\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store frequency of each element\n    freq_dict = {}\n    \n    # iterate through each element in the list1\n    for i in list1:\n        # if the element is a list, recursively call the function on it\n        if isinstance(i, list):\n            # recursively call the function on the sublist\n            sublist_freq = frequency_lists(i)\n            # add the sublist frequency to the parent frequency dictionary\n            for key, value in sublist_freq.items():\n                freq_dict[key] = value\n        # if the element is not a list, add it to the parent frequency dictionary\n        else:\n            freq_dict[i] = freq_dict.get(i, 0) + 1\n            \n    # return the parent frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result *= numbers[i]\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    # Divide the result by the length of the list\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1  \n    for num in numbers:  \n        total *= num  \n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary equivalent of the decimal number\n    binary = \"\"\n    # loop through each digit of the decimal number from right to left\n    while n > 0:\n        # extract the last digit of the decimal number and convert it to binary\n        digit = n % 2\n        # append the binary digit to the beginning of the binary string\n        binary = str(digit) + binary\n        # remove the last digit of the decimal number\n        n = n // 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary string\n    binary = bin(n)[2:]\n    # Remove any leading zeros\n    binary = binary.lstrip('0')\n    # Reverse the string\n    binary = binary[::-1]\n    # Convert binary string to integer\n    binary = int(binary, 2)\n    # Return the binary integer\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes an integer as input and returns a string representing its binary equivalent. \n    The string will not have any leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary representation\n    binary = ''\n    # loop through each bit of the decimal number\n    for i in range(32):\n        # determine whether the current bit is set or not\n        bit = n & (1 << i)\n        # convert the bit to its binary equivalent and append it to the binary string\n        binary += str(bit)\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Convert decimal number to binary\n    binary = bin(n)[2:]\n    \n    # Remove leading zeros from binary string\n    binary = binary.lstrip('0')\n    \n    # Return binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary = ''\n    # loop through each digit of the decimal number from right to left\n    while n > 0:\n        # get the remainder of n divided by 2\n        remainder = n % 2\n        # convert the remainder to a string and append it to the binary string\n        binary = str(remainder) + binary\n        # divide n by 2 and discard the remainder\n        n = n // 2\n    # return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to hold the binary representation\n    binary = \"\"\n    # iterate through each bit of the decimal number\n    for i in range(32):\n        # extract the bit at the current position\n        bit = n & 1\n        # convert the bit to a binary string and pad it with leading zeros if necessary\n        binary_bit = format(bit, '08b')\n        # add the binary bit to the binary string\n        binary += binary_bit\n        # shift the decimal number to the right by one bit to discard the least significant bit\n        n >>= 1\n    # return the binary representation as a string with no leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal to binary using recursion\n    def convert_decimal_to_binary(num, count): \n        # Base case: If the number is 0, return an empty string\n        if num == 0: \n            return \"\" \n        # Recursive case: Divide the number by 2 and convert the remainder to binary\n        else: \n            remainder = num % 2 \n            binary = convert_decimal_to_binary(num // 2, count + 1) \n            return remainder + binary\n    \n    # Call the recursive function to convert the decimal to binary\n    binary_str = convert_decimal_to_binary(n, 0) \n    \n    # Remove leading zeros from the binary string\n    while binary_str[0] == '0': \n        binary_str = binary_str[1:] \n        \n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Check if the reversed string is palindrome or not\n    if num_str == reversed_str:\n        # If the input number is already a palindrome, return the input number\n        return num\n    \n    # Find the first non-zero digit in the reversed string\n    first_non_zero_digit_index = len(reversed_str) - 1\n    while reversed_str[first_non_zero_digit_index] == '0':\n        first_non_zero_digit_index -= 1\n    \n    # Replace the first non-zero digit with the next digit\n    next_digit = int(reversed_str[first_non_zero_digit_index] + '1')\n    reversed_str = reversed_str[:first_non_zero_digit_index] + str(next_digit) + reversed_str[first_non_zero_digit_index+1:]\n    \n    # Convert the reversed string back to integer\n    next_smallest_palindrome = int(reversed_str)\n    \n    # Return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the smallest palindrome greater than the given number\n    smallest_palindrome = 0\n    while smallest_palindrome**2 <= num:\n        smallest_palindrome += 1\n    # Check if the next smallest palindrome is greater than the given number\n    if smallest_palindrome**2 > num:\n        # If it is, find the next smallest palindrome less than the given number\n        smallest_palindrome = 0\n        while smallest_palindrome**2 <= num:\n            smallest_palindrome += 1\n    # Return the next smallest palindrome\n    return smallest_palindrome**2"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Initialize two pointers: one starting from the beginning and one from the end\n    start = 0\n    end = len(num_str) - 1\n\n    # Initialize variables to store the largest palindrome\n    largest_palindrome = 0\n    palindrome = int(num_str)\n\n    # Loop while the two pointers meet in the middle\n    while start < end:\n        # Find the next smallest palindrome between the two pointers\n        palindrome = int(num_str[start:end+1])\n\n        # If the palindrome is larger than the current largest palindrome, update the largest palindrome\n        if palindrome > largest_palindrome:\n            largest_palindrome = palindrome\n\n        # Check if the next palindrome is smaller than the input number\n        if palindrome < num:\n            # If it is, move the start pointer to the right\n            start += 1\n        else:\n            # If it is not, move the end pointer to the left\n            end -= 1\n\n    # Return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 0:\n        num = -num\n\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # initialize variables\n    start = 1\n    end = 10**9\n\n    # iterate through the range of numbers to find the next smallest palindrome\n    while True:\n        mid = (start + end) // 2\n\n        # check if the mid number is a palindrome\n        if str(mid) == str(mid)[::-1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n        # check if the number is within the range\n        if mid > num:\n            return mid"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    reverse_num_str = num_str[::-1]\n    last_digit = int(reverse_num_str[-1])\n    for i in range(9, 0, -1):\n        if last_digit + i <= 9:\n            next_last_digit = last_digit + i\n            break\n    return int(reverse_num_str[::-1] + str(next_last_digit))\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n    else:\n        num = int(sys.argv[1])\n        result = next_smallest_palindrome(num)\n        print(f\"{num} -> next smallest palindrome: {result}\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    '''\n    Function to check if a given number is a palindrome.\n    '''\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reversed_num = reversed_num * 10 + remainder\n        temp //= 10\n    return num == reversed_num\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num + 1\n    else:\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # initialize a variable to keep track of the palindrome\n    is_palindrome = num\n\n    # loop until we find a non-palindrome\n    while not is_palindrome:\n        # check if the current palindrome is a palindrome\n        if str(num) == str(num)[::-1]:\n            is_palindrome = True\n        # if the current palindrome is not a palindrome, increment it by 1\n        else:\n            num += 1\n\n    # return the next smallest palindrome\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    min_palindrome = 10**(len(num_str))\n    for i in range(2, len(num_str)+1):\n        for j in range(9, 1000):\n            if str(j*10**(i-1))[::-1] == num_str:\n                min_palindrome = j\n                break\n    return min_palindrome\n\nif __name__ == '__main__':\n    num = int(input(\"Enter an integer: \"))\n    result = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if the number is palindrome, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    s = str(n)\n    return s == s[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer.\n    \"\"\"\n    if num < 10:\n        return None\n    \n    # Base cases: 10, 2, 3, 4, 5, 6, 7, 8, 9\n    if num < 100:\n        return 100\n    \n    # Find the largest multiple of 10 smaller than num\n    max_palindrome = num - 1\n    while not is_palindrome(max_palindrome):\n        max_palindrome -= 1\n        \n    # Find the next smallest palindrome greater than max_palindrome\n    next_palindrome = max_palindrome + 1\n    while not is_palindrome(next_palindrome):\n        next_palindrome += 1\n    \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Check if the number is negative or zero\n    if num < 0 or num == 0:\n        sys.exit(\"Invalid input. Please enter a positive integer.\")\n    \n    # Find the length of the number\n    length = len(str(num))\n    \n    # Check if the number is greater than 9\n    if num > 9:\n        # Find the smallest palindrome that is greater than 9\n        for i in range(10, num + 1):\n            if str(i) == str(i)[::-1]:\n                return i\n            \n    # Check if the number is less than 10\n    elif num < 10:\n        # Find the largest palindrome that is less than 10\n        for i in range(10, num + 1):\n            for j in range(10, i):\n                if str(j) == str(j)[::-1] and str(i) == str(i)[::-1]:\n                    return i\n            \n    # If the number is 10 or less\n    else:\n        # Find the smallest palindrome that is greater than 10\n        for i in range(10, num + 1):\n            if str(i) == str(i)[::-1]:\n                return i\n    \n    # If no palindromes were found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n\n    # find the median of the array\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid-1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    # find the kth element\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    elif k % 2 == 0:\n        left = 0\n        right = n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if k == mid + 1:\n                return arr[mid]\n            elif k < mid + 1:\n                right = mid - 1\n            else:\n                left = mid + 1\n    else:\n        left = 0\n        right = n - 1\n        while left <= right:\n            mid = left + (right - left + 1) // 2\n            if k == mid:\n                return arr[mid]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        count = 0\n        for i in range(1, n+1):\n            if arr[i-1] == k:\n                count += 1\n                if count == k:\n                    return i\n        return \"Element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer and not greater than the length of the array\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 1\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if k == mid:\n                return arr[k-1]\n            elif k < mid:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not isinstance(arr, list) or not isinstance(arr[0], int):\n        raise ValueError(\"The input must be a list of integers.\")\n\n    if k < 1 or k > len(arr):\n        raise ValueError(\"The input value of k must be between 1 and the length of the array.\")\n\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    else:\n        # sort the array\n        arr.sort()\n        # return the kth element\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n    # Traverse the array from the last element to the first element\n    for i in range(len(arr)-1, -1, -1):\n        # Check if the current element is the kth element\n        if i == k-1:\n            return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('The length of the array is less than k')\n    \n    for i in range(len(arr)):\n        j = i + k - 1\n        if j < len(arr):\n            return arr[j]\n        else:\n            k -= len(arr) - i\n            \n    raise ValueError('k is greater than the length of the array')\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError('Invalid index')\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    result = []\n    for i, word in enumerate(words):\n        if i == 0:\n            result.append(word.lower())\n        else:\n            result.append(word.capitalize())\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # initialize the camel case string\n    camel_case = \"\"\n\n    # iterate over each character in the snake case string\n    for char in word:\n        # if the current character is a space, add an underscore to the camel case string\n        if char == \"_\":\n            camel_case += \"_\"\n        # if the current character is a letter, convert it to upper case and add it to the camel case string\n        else:\n            camel_case += char.upper()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into a list of words\n    words = word.split('_')\n\n    # Convert each word to camel case\n    camel_case = []\n    for word in words:\n        camel_case.append(word.capitalize())\n\n    # Join the camel case words into a string\n    camel_case_string = ''.join(camel_case)\n\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char == '_':\n            result +=''\n        else:\n            result += char.upper()\n    return result.lstrip()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().replace('_','').split())"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case_word = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case_word += char.lower()\n        elif i > 0 and char.isupper():\n            camel_case_word += \"_\" + char.lower()\n        else:\n            camel_case_word += char\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    return components[0] + ''.join([word[i].capitalize() for i in range(1, len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the input word to lowercase\n    word = word.lower()\n    # Split the word by underscores\n    words = word.split('_')\n    # Join the words using capitalization rules\n    result = ''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first row and the first column with 1\n    first_row = [1]*(n+1)\n    first_col = [1]*(m+1)\n\n    # Create the remaining rows and columns\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Calculate the sum of the two adjacent elements on the first row and the first column\n            first_sum = first_row[i-1] + first_col[j-1]\n\n            # Calculate the sum of the two adjacent elements in the next row and column\n            next_row = [first_row[i] + first_row[i+1]]\n            next_col = [first_col[j] + first_col[j+1]]\n\n            # If the sum is even, add the next_sum to the current sum\n            if first_sum % 2 == 0:\n                next_sum = first_sum + next_sum[0]\n            else:\n                next_sum = next_sum[0]\n\n            # Set the current row and column with the next_row and next_col\n            first_row = next_row\n            first_col = next_col\n\n    # Return the sum of the first row and column\n    return sum(first_row) + sum(first_col) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return n * m / (m - 1) + m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first term of the series\n    a = 0\n    \n    # Initialize the next term of the series\n    for i in range(1, n+1):\n        a += m**i\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize matrix\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    # Fill the matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n    \n    # Return the result\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    elif n == m:\n        return n * eulerian_num(n-1, m-1)\n    else:\n        return (n+1) * eulerian_num(n, m-1) + (m+1) * eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are positive integers\n    if not isinstance(n, int) or not isinstance(m, int) or n <= 0 or m <= 0:\n        raise ValueError(\"Both n and m must be positive integers.\")\n\n    # Initialize the Eulerian number a(n, m) to 1\n    a = 1\n\n    # Calculate the first n primes\n    prime_numbers = [2]\n    for i in range(3, n + 1, 2):\n        if i in prime_numbers:\n            continue\n        prime_numbers.append(i)\n\n    # Calculate the Eulerian number a(n, m) by using the formula a(n, m) = a(n-1, m-1) * (prime_numbers[n] - 1) / (prime_numbers[m] - 1)\n    for i in range(n - 1):\n        a = a * (prime_numbers[n] - 1) / (prime_numbers[m] - 1)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m * ((n + 1) // 2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the matrix\n    matrix = [[0 for x in range(n+1)] for y in range(m+1)]\n    # Fill the first row and column with 1\n    matrix[0][0] = 1\n    matrix[0][1] = 1\n    \n    # Fill the rest of the matrix using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1:\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n            else:\n                matrix[i][j] = matrix[i-1][j] - matrix[i-1][j-1] + matrix[i][j-1]\n    \n    # Return the last element of the matrix, which is the Eulerian number\n    return matrix[n][m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a string and sort it using the sorted() function\n        sublist_sorted = sorted(str(sublist))\n        # Convert the sorted string back to a list and add it to the input list\n        input_list.append(sublist_sorted)"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    new_tup = test_tup + test_list\n    \n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the test_list to a list\n    test_list = list(test_list)\n\n    # Iterate over the test_tup and append the elements of the test_list to it\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] + test_list\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # append the list to the tuple\n    test_tup = tuple(test_list + test_list)\n    # convert the list back to a tuple\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = list(test_tup)\n    for i in test_list:\n        test_tup.append(i)\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple\n    new_tup = tuple(test_list)\n    # append the new tuple to the original tuple\n    test_tup += (new_tup,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # combine three lists into a single sorted list\n    combined_list = sorted(num1 + num2 + num3)\n    return combined_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists into one\n    all_nums = num1 + num2 + num3\n    # Create a min heap from the concatenated list\n    min_heap = []\n    for num in all_nums:\n        heapq.heappush(min_heap, num)\n    # Extract the minimum value from the min heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create an empty list to store the merged list\n    merged_list = []\n\n    # Merge the three lists using heapq\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) < -heapq.heappop(num2):\n            merged_list.append(-heapq.heappop(num1))\n        else:\n            merged_list.append(-heapq.heappop(num2))\n            \n        if -heapq.heappop(num1) < -heapq.heappop(num3):\n            merged_list.append(-heapq.heappop(num1))\n        else:\n            merged_list.append(-heapq.heappop(num3))\n            \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate all three lists into one list\n    all_numbers = num1 + num2 + num3\n    # Sort the list using heapq\n    heapq.heapify(all_numbers)\n    # Return the sorted list\n    return list(heapq.nsmallest(len(all_numbers), all_numbers))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i, j, k = 0, 0, 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num3[k] < num1[i]:\n                merged_list.append(num3[k])\n                k += 1\n            else:\n                merged_list.append(num1[i])\n                i += 1\n        elif num1[i] > num2[j]:\n            if num3[k] > num2[j]:\n                merged_list.append(num3[k])\n                k += 1\n            else:\n                merged_list.append(num2[j])\n                j += 1\n        else:\n            merged_list.append(num1[i])\n            i += 1\n            j += 1\n    \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    \n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    all_numbers = num1 + num2 + num3\n    \n    # Use heapq module to sort the combined list in ascending order\n    sorted_numbers = heapq.nsmallest(len(all_numbers), all_numbers)\n    \n    # Return the sorted list\n    return sorted_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert lists to sets to remove duplicates\n    num1_set = set(num1)\n    num2_set = set(num2)\n    num3_set = set(num3)\n    \n    # merge sets into lists\n    num1_list = list(num1_set)\n    num2_list = list(num2_set)\n    num3_list = list(num3_set)\n    \n    # sort lists\n    num1_list.sort()\n    num2_list.sort()\n    num3_list.sort()\n    \n    # merge sorted lists\n    merged_list = num1_list + num2_list + num3_list\n    \n    # convert merged list back to set and back to list\n    merged_list_set = set(merged_list)\n    merged_list = list(merged_list_set)\n    \n    # return merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the list to a heap\n    heap = []\n    for num in num1 + num2 + num3:\n        heapq.heappush(heap, num)\n    # convert the heap back to a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a list to store the merged sorted list\n    merged_list = []\n\n    # Iterate through each list and add the smallest element to the merged list\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heapify(num2)\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heapify(num3)\n    while num3:\n        heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize the count variable\n    count = 0\n\n    # Check if the length of the string is odd\n    if len(s) % 2 == 1:\n\n        # Initialize the current position and end position\n        current = 0\n        end = len(s) - 1\n\n        # Iterate n times\n        for i in range(n):\n\n            # Swap the current and end positions\n            s[current], s[end] = s[end], s[current]\n\n            # Increment the current position and decrement the end position\n            current += 1\n            end -= 1\n\n            # Check if the value at the end position is odd\n            if int(s[end]) % 2 == 1:\n                count += 1\n\n    # If the length of the string is even, the rotation doesn't affect the odd value\n    else:\n        pass\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.zfill(len(s)) # zero-padding to make the string of length n\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j] == '0':\n                s = s[:j] + '1' + s[j+1:]\n                count += 1\n                break\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    n = n % len(s)\n    for i in range(len(s)):\n        if s[i] == '1':\n            result += 1\n            if i >= n:\n                result += 1\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables to keep track of the number of odd equivalents and the current rotation\n    num_odd_equiv = 0\n    current_rotation = 0\n\n    # Convert the binary string to an array of integers\n    s = [int(bit) for bit in s]\n\n    # Iterate through the binary string n times\n    for i in range(n):\n        # Initialize variables to keep track of the current position and the previous position\n        current_pos = 0\n        prev_pos = 0\n\n        # Iterate through the array of integers from the current position to the end\n        for j in range(len(s) - 1, current_pos - 1, -1):\n            # Check if the current bit is 1\n            if s[j] == 1:\n                # Increment the number of odd equivalents and update the current position\n                num_odd_equiv += 1\n                current_pos = j + 1\n\n        # If the current position is 0, the string is rotated\n        if current_pos == 0:\n            # Update the current rotation\n            current_rotation += 1\n\n            # Initialize variables to keep track of the current position and the previous position\n            current_pos = 0\n            prev_pos = 0\n\n            # Iterate through the array of integers from the end to the previous position\n            for j in range(len(s) - 1, current_pos - 1, -1):\n                # Check if the current bit is 1\n                if s[j] == 1:\n                    # Increment the number of odd equivalents and update the current position\n                    num_odd_equiv += 1\n                    current_pos = j + 1\n\n        # If the current position is not 0, the string is not rotated\n        else:\n            # Initialize variables to keep track of the current position and the previous position\n            current_pos = 0\n            prev_pos = 0\n\n            # Iterate through the array of integers from the current position to the end\n            for j in range(len(s) - 1, current_pos - 1, -1):\n                # Check if the current bit is 1\n                if s[j] == 1:\n                    # Increment the number of odd equivalents and update the current position\n                    num_odd_equiv += 1\n                    current_pos = j + 1\n\n            # Initialize variables to keep track of the current position and the previous position\n            current_pos = 0\n            prev_pos = 0\n\n            # Iterate through the array of integers from the end to the previous position\n            for j in range(len(s) - 1, current_pos - 1, -1):\n                # Check if the current bit is 1\n                if s[j] == 1:\n                    # Increment the number of odd equivalents and update the current position\n                    num_odd_equiv += 1\n                    current_pos = j + 1\n\n    # Return the number of odd equivalents and the current rotation\n    return num_odd_equiv, current_rotation"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    This function takes a binary string and a number n as input and returns the number of odd numbers that can be obtained by rotating the string n times.\n    \n    For example:\n    odd_Equivalent(\"1101\", 3)\n    Output: 6\n    \n    odd_Equivalent(\"110011\", 2)\n    Output: 8\n    \"\"\"\n    \n    # convert binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # rotate the list of integers n times\n    for i in range(n):\n        s.append(s.pop(0))\n        \n    # count the number of odd numbers\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # get the length of the binary string\n    length = len(s)\n    # initialize the counter for odd numbers\n    count = 0\n    # rotate the binary string n times\n    for i in range(n):\n        # get the last digit of the string and append it to the beginning\n        s = str(int(s[-1]) + int(s[-2])) + s[:-1]\n    # iterate through the binary string and check if the current digit is odd\n    for i in range(length):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize variables\n    count = 0\n\n    # loop through the rotation count number of times\n    for i in range(n):\n\n        # convert the binary string to a list of integers\n        binary_list = [int(j) for j in s]\n\n        # create a new list by reversing the order of the binary list\n        reversed_list = binary_list[::-1]\n\n        # compare the original binary string and the reversed binary string\n        if s!= ''.join(str(i) for i in reversed_list):\n\n            # increment the count if the original string is not equal to the reversed string\n            count += 1\n\n    # return the count of odd numbers with a rotation of n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"The number of rotations should be odd\")\n    if len(s) % 2 == 0:\n        s = s[::-1]\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j] == \"1\":\n                count += 1\n                s = s[:j] + \"0\" + s[j+1:]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if int(s[-1],2) % 2 == 1:\n            count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list containing all the common elements in the list.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Iterate through the nested list and add all the unique elements to the common set\n    for elem in nestedlist:\n        if isinstance(elem, list):\n            common.update(set(elem))\n        else:\n            common.add(elem)\n    \n    # Convert the common set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j] or nestedlist[j] in nestedlist[i]:\n                common.append(nestedlist[i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is not in the dictionary, add it\n            if element not in common_dict:\n                common_dict[element] = True\n\n    # Initialize an empty list to store the common elements\n    common_list = []\n\n    # Loop through each key-value pair in the dictionary\n    for key, value in common_dict.items():\n        # If the value is True, add the key to the common list\n        if value:\n            common_list.append(key)\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n    for i in nestedlist:\n        for j in i:\n            set1.add(j)\n    for i in nestedlist:\n        for j in i:\n            set2.add(j)\n    common = set1.intersection(set2)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create a dictionary to store common elements\n    common_dict = {}\n    # iterate through each list in the nested list\n    for lst in nestedlist:\n        # iterate through each element in the list\n        for item in lst:\n            # if the element is not already in the dictionary, add it\n            if item not in common_dict:\n                common_dict[item] = 1\n    # convert the dictionary to a list and return it\n    return list(common_dict.keys())"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            elif nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            elif nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common_elements = set()\n\n    # Iterate over each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # Add the element to the common_elements set if it is not already present\n            if element not in common_elements:\n                common_elements.add(element)\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j!= i:\n                common.add(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the input is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    text (str): a string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function takes a string as input and checks if it represents an integer or not.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # Remove any non-numeric characters from the string\n    text = ''.join(c for c in text if c.isdigit())\n    \n    # Check if the string is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # loop through the list and check if each dictionary is empty\n    for dic in list1:\n        if dic:\n            return False\n    # if all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(not bool(dict(item).keys()) for item in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the numbers in the tuple\n    total = 0\n    \n    # iterate through each number in the tuple\n    for num in nums:\n        # add each number to the total\n        total += num\n    \n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Initialize integer variable\n    int_num = 0\n    # Iterate through list and add each element to integer\n    for num in nums_list:\n        int_num += num\n    # Return integer\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer\n    that represents the sum of all the integers in the tuple.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # convert the tuple to a list to work with it\n    nums_list = list(nums)\n    # initialize an empty integer variable to store the sum\n    sum_int = 0\n    # loop through each number in the list\n    for num in nums_list:\n        # add the number to the sum\n        sum_int += num\n    # return the final sum as an integer\n    return sum_int"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums = list(nums)\n\n    # Initialize accumulator variable\n    total = 0\n\n    # Loop through each number in the tuple\n    for num in nums:\n        # Check if the number is a positive integer\n        if num > 0:\n            # Add the number to the accumulator\n            total += num\n\n    # Return the final total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        elif isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the list\n    for i in range(len(test_list)):\n        # Loop through each element in the current list\n        for j in range(len(test_list[i])):\n            # Try to convert the element to a float\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                try:\n                    float(element)\n                    test_list[test_list.index(sublist)][test_list[test_list.index(sublist)].index(element)] = float(element)\n                except:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for element in test_list:\n        # Try to convert the element to float\n        try:\n            # If conversion is successful, assign the float value to the element\n            element = float(element)\n        except ValueError:\n            # If conversion is unsuccessful, print error message and continue to the next element\n            print(\"Error: Element in list is not a convertible type.\")\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, elem in enumerate(row):\n            if isinstance(elem, str):\n                try:\n                    test_list[i][j] = float(elem)\n                except ValueError:\n                    pass\n            elif isinstance(elem, int):\n                test_list[i][j] = float(elem)\n            elif isinstance(elem, float):\n                pass\n            else:\n                raise ValueError(f'Unsupported data type: {type(elem)}')"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist[sublist.index(element)] = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the element has not been seen before, add it to the dictionary\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        # If the element has been seen before, increment its frequency by 1\n        else:\n            freq[arr[i]] += 1\n    # Loop through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n            if count == 2:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    This function takes in a sorted array and returns the element that appears only once.\n    '''\n    \n    # Initialize variables for the first and last indices of the array\n    first = 0\n    last = len(arr) - 1\n    \n    # Initialize variables for the count and element that appears only once\n    count = 1\n    element = arr[first]\n    \n    # Loop through the array until the count reaches 2\n    while count < 2:\n        # If the element is equal to the current element and the count is equal to 1, update the element and count\n        if arr[first] == arr[last] and count == 1:\n            element = arr[first]\n            count = 2\n        # If the element is equal to the current element and the count is equal to 2, update the count\n        elif arr[first] == arr[last] and count == 2:\n            count = 3\n        # If the element is not equal to the current element, reset the count and move to the next element\n        else:\n            count = 1\n            first += 1\n            last -= 1\n    \n    # Return the element that appears only once\n    return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to keep track of the elements we have seen so far\n    seen = {}\n\n    # loop through the array and add each element to the dictionary\n    for num in arr:\n        if num in seen:\n            # if the element has already been seen, we have found a duplicate\n            return num\n        else:\n            seen[num] = True\n\n    # if we have made it here, no duplicate has been found\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    result = None\n    \n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            if count == 1:\n                result = arr[i]\n                count = 0\n            elif count > 1:\n                return None\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            count = 1\n            j = i + 1\n            while j < n and arr[j] == arr[i]:\n                count += 1\n                j += 1\n            if count == 1:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n    if count == len(arr) - 1:\n        return arr[0]\n    else:\n        return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for key in freq_dict:\n        if freq_dict[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}  # dictionary to store the count of each element in the array\n\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num in arr:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    # iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                result = [(list1[i][0], list1[j][1])]\n            elif product == max_product:\n                result.append((list1[i][0], list1[j][1]))\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][0]) > max_product:\n                max_product = (list1[i][0] * list1[j][0])\n            if (list1[i][1] * list1[j][1]) > max_product:\n                max_product = (list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: (abs(x[0]), abs(x[1])))\n    max_product = 0\n    for i in range(len(list1) - 1):\n        product = list1[i][0] * list1[i + 1][1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # initialize variables\n    max_product = -float('inf')\n    # loop through the list\n    for i in range(len(list1)):\n        # loop through the remaining elements in the list\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the numbers in pairs\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            # update the maximum product if necessary\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize the maximum product and variables for the current tuple\n    max_product = float('-inf')\n    max_1 = float('-inf')\n    max_2 = float('-inf')\n\n    # Loop through the list of tuples and compare the products of the numbers in pairs\n    for tup in list1:\n        product_1 = tup[0] * tup[1]\n        product_2 = tup[1] * tup[0]\n        \n        # Update the maximum product and variables\n        if product_1 > max_product:\n            max_product = product_1\n            max_1 = tup[0]\n            max_2 = tup[1]\n            \n        if product_2 > max_product:\n            max_product = product_2\n            max_1 = tup[1]\n            max_2 = tup[0]\n            \n    # Return the maximum product and the corresponding tuple\n    return max_product, (max_1, max_2)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    product = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp_product = abs(lst[i]*lst[j])\n            if temp_product > max_product:\n                max_product = temp_product\n                product = lst[i]*lst[j]\n    return product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_divisors(num):\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0 and is_prime(i):\n                divisors.append(i)\n        return divisors\n\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num!= 1:\n            divisors = sum_divisors(num)\n            if sum(divisors) == num and is_prime(num):\n                amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all possible pairs of numbers\n    pairs = [(x, y) for x in range(1, limit) for y in range(x, limit) if x!= y and x + y == limit]\n    # sum all the amicable numbers\n    amicable_sum = sum([x for x, y in pairs if x == max(x, y) and y == min(x, y)])\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list to store the amicable numbers\n    amicable_numbers = []\n\n    # loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            # add the number to the list of amicable numbers\n            amicable_numbers.append(i)\n\n    # return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(number):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5) + 1):\n        # check if the number is divisible by either i or number//i\n        if (number % i == 0) or (number//i % i == 0):\n            # if it is, the number is not amicable\n            return False\n\n    # if no divisor is found, the number is amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum([int(x) for x in str(num)]):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize two variables to keep track of the sum and the current amicable number\n    sum = 0\n    current = 2\n    \n    # Loop through all numbers from 2 to the specified limit\n    while current <= limit:\n        # Check if the current number is amicable\n        if is_amicable(current):\n            # Add the current number to the sum\n            sum += current\n        # Check if the current number is less than or equal to the limit\n        current += 1\n    \n    # Return the sum of all amicable numbers\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize variables for amicable numbers\n    sum_amicable = 0\n    amicable_numbers = []\n\n    # iterate from 1 to limit\n    for i in range(1, limit+1):\n        # check if i is an amicable number\n        if i < 100:\n            j = 1\n            while i + j <= limit:\n                if i + j == 1 or i + j == i:\n                    j += 1\n                elif i + j == j:\n                    amicable_numbers.append(i + j)\n                    j += 1\n                else:\n                    break\n            if len(amicable_numbers) == 2:\n                sum_amicable += i + j\n                print(i, '+', j, '=', i + j)\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store amicable numbers\n    amicable_list = []\n    # Loop through the numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Append the amicable number to the list\n            amicable_list.append(num)\n    # Return the sum of all amicable numbers\n    return sum(amicable_list)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    # Check if the number is equal to its sum of proper divisors\n    sum_of_divisors = sum(proper_divisors(num))\n    return num == sum_of_divisors\n\ndef proper_divisors(num):\n    '''\n    Generate a list of proper divisors of a number.\n    '''\n    # Initialize an empty list to store the proper divisors\n    divisors = []\n    # Check if the number is less than 2\n    if num < 2:\n        return divisors\n    # Loop through the numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        # Check if the number is divisible by the current divisor\n        if num % i == 0:\n            # Append the divisor to the list of proper divisors\n            divisors.append(i)\n            # If the divisor is also divisible by the square root of the number, it is not a proper divisor\n            if i!= int(num**0.5):\n                divisors.append(num//i)\n    # Return the list of proper divisors\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(n):\n    \"\"\"\n    A helper function to check if a number is amicable or not.\n    \"\"\"\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num) and is_amicable(limit - num):\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    # create a dictionary to store the sum of amicable numbers for each number from 1 to limit\n    amicable_numbers_sum_dict = {}\n    # iterate over all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable with any other number from 1 to limit - 1\n        for j in range(1, limit):\n            if i!= j and i % j == 0 and j % i == 0:\n                # if the number is amicable, add it to the dictionary with its sum\n                if (i, j) in amicable_numbers_sum_dict:\n                    amicable_numbers_sum_dict[(i, j)] += i + j\n                else:\n                    amicable_numbers_sum_dict[(i, j)] = i + j\n                # if the number is amicable with i, add i to the dictionary with its sum\n                if (j, i) in amicable_numbers_sum_dict:\n                    amicable_numbers_sum_dict[(j, i)] += i + j\n                else:\n                    amicable_numbers_sum_dict[(j, i)] = i + j\n    # calculate the sum of all amicable numbers and return it\n    return sum(amicable_numbers_sum_dict.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(a, b):\n        return a + b == limit and is_prime(a) and is_prime(b)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    amicable_numbers = []\n    for a in range(1, limit + 1):\n        for b in range(a, limit + 1):\n            if is_amicable(a, b):\n                amicable_numbers.append((a, b))\n                break\n\n    return sum(x[0] + x[1] for x in amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns their angle.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * (180/cmath.pi)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return round(angle.real,3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n\n    # Return the angle as a float value\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the magnitude and phase of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(mag + 1j*b)\n    \n    # return the angle in degrees\n    return phase * 180 / cmath.pi"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        \n        for j in range(i, n):\n            if string[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            \n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    n = len(string)\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n\n    for i in range(n): \n        if string[i] == '0': \n            count_0s += 1\n        else: \n            count_1s += 1\n\n        max_diff = max(max_diff, abs(count_0s - count_1s))\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = abs(count_zeros(string[:j]) - count_ones(string[:j]))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\ndef count_zeros(s):\n    return s.count('0')\n\ndef count_ones(s):\n    return s.count('1')"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables for the length of the longest sub-string with 0s and 1s\n    longest_0s = 0\n    longest_1s = 0\n\n    # Iterate over each sub-string of the binary string\n    for i in range(len(string)):\n        # Get the current sub-string\n        sub_string = string[i:i+len(string)]\n        # Initialize variables for the current sub-string's 0s and 1s\n        current_0s = 0\n        current_1s = 0\n        # Iterate over each character in the sub-string\n        for char in sub_string:\n            # Increment the current sub-string's 0s and 1s based on the character\n            if char == '0':\n                current_0s += 1\n            else:\n                current_1s += 1\n        # Update the longest sub-string with 0s and 1s if necessary\n        if current_0s > longest_0s:\n            longest_0s = current_0s\n        if current_1s > longest_1s:\n            longest_1s = current_1s\n\n    # Return the maximum difference between the number of 0s and number of 1s in the sub-strings\n    return longest_0s - longest_1s"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in string]\n\n    # initialize variables for the number of 0s and 1s\n    num_0s = 0\n    num_1s = 0\n\n    # loop through the binary list\n    for bit in binary_list:\n        # if the bit is 0, increment the number of 0s\n        if bit == 0:\n            num_0s += 1\n        # if the bit is 1, increment the number of 1s\n        else:\n            num_1s += 1\n\n        # calculate the maximum difference between the number of 0s and 1s so far\n        max_diff = max(abs(num_0s - num_1s), max_diff)\n\n    # return the maximum difference between the number of 0s and 1s so far\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Create a list to store the lengths of sub-strings\n    sub_string_lengths = []\n    \n    # Loop through the binary string\n    for i in range(len(string)):\n        # Check if the current character is a 0 or a 1\n        if string[i] == '0':\n            # Initialize the number of 0s and 1s as 1\n            count_0 = 1\n            count_1 = 0\n        else:\n            # Initialize the number of 0s and 1s as 0\n            count_0 = 0\n            count_1 = 1\n        \n        # Loop through the remaining characters in the sub-string\n        for j in range(i+1, len(string)+1):\n            # If the current character is a 0 or a 1\n            if string[j-1] == '0':\n                # Increment the count of 0s and 1s\n                count_0 += 1\n                count_1 = 0\n            else:\n                # Increment the count of 0s and 1s\n                count_0 = 0\n                count_1 += 1\n            \n            # Calculate the length of the sub-string\n            sub_string_length = j - i\n            \n            # Add the length of the sub-string to the list of sub-string lengths\n            sub_string_lengths.append(sub_string_length)\n            \n            # Check if the difference between the number of 0s and 1s in the sub-string is greater than the current maximum difference\n            if count_1 - count_0 > max_diff:\n                max_diff = count_1 - count_0\n                \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n        if count_zero > 0 and count_one > 0:\n            count_zero = 0\n            count_one = 0\n        elif count_zero == 0 and count_one > 0:\n            max_diff = max(max_diff, count_one)\n            count_zero = 0\n            count_one = 0\n        elif count_zero > 0 and count_one == 0:\n            max_diff = max(max_diff, count_zero)\n            count_zero = 0\n            count_one = 0\n        else:\n            count_zero -= 1\n            count_one -= 1\n\n    if count_zero > 0 and count_one > 0:\n        max_diff = max(max_diff, count_zero + count_one)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length-1):\n        if string[i] == '0' and string[i+1] == '1':\n            max_diff = max(max_diff, 1)\n        elif string[i] == '1' and string[i+1] == '0':\n            max_diff = max(max_diff, 0)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    This function takes two integers as input and finds their common divisors.\n    '''\n    # Check for divisibility of both numbers\n    if b%a == 0:\n        return a + b\n    elif a%b == 0:\n        return b + a\n    else:\n        # Find the largest common divisor\n        while b!= 0:\n            a, b = b, a % b\n        return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    common_divisors = []\n\n    # Find common divisors using a loop\n    for i in range(1,b+1):\n        if b % i == 0 and a % i == 0:\n            common_divisors.append(i)\n\n    # Calculate sum of common divisors\n    total = sum(common_divisors)\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the common divisor of a and b\n    div = gcd(a, b)\n    # find the sum of the divisors of a and b\n    sum_div = sum(div, a) + sum(div, b)\n    # return the sum of the common divisor and the sum of the divisors of a and b\n    return sum_div\n\ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    # if a is less than b, swap them\n    if a < b:\n        a, b = b, a\n    # while b is not zero, swap a and b and subtract the smaller from b\n    while b!= 0:\n        a, b = b, a % b\n    # return the value of a\n    return a\n\ndef sum(n):\n    '''\n    Write a python function to find the sum of all numbers from 1 to n.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of common divisors.\n    \"\"\"\n    # loop through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if the smaller number is divisible by the current number\n        if a % i == 0 and b % i == 0:\n            # if it is, add the common divisor to the sum\n            result = i\n    # return the result\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    Find the largest common divisor of two numbers.\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two numbers.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if common_divisor(a, i) == common_divisor(b, i):\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    '''\n\n    # function to find the common divisors of two numbers\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num2 + 1):\n            if (num1 % i == 0) and (num2 % i == 0):\n                divisors.append(i)\n        return divisors\n\n    # finding the common divisors of a and b\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n\n    # finding the sum of common divisors of a and b\n    sum_of_divisors = sum(divisors_a + divisors_b)\n\n    return sum_of_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Find the common divisor using the Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Find the sum of common divisors\n    def common_divisors(n, m):\n        return sum(range(1, min(n, m)+1)) - sum(range(1, max(n, m)+1))\n    \n    # Call the gcd and common_divisors functions\n    d = gcd(a, b)\n    result = common_divisors(a, b)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num2 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Find the common divisors of the two numbers\n    common_divisors_a = find_common_divisors(a, b)\n    common_divisors_b = find_common_divisors(b, a)\n\n    # Find the sum of common divisors of the two numbers\n    sum_of_common_divisors = sum(common_divisors_a) + sum(common_divisors_b)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, max(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y, 0, -1):\n        result += x * i\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into individual words\n    result = [] # initialize an empty list to store the result\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            result.append(word) # add the word to the result list\n    \n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words_list = []\n\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Find the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n\n    # Iterate over the matrix\n    for i in range(len(my_matrix)):\n        # Find the sum of the current column\n        current_column_sum = sum(my_matrix[i])\n\n        # Check if the sum is equal to the sum of the first row\n        if current_column_sum!= first_row_sum:\n            # If not, then the matrix is not a magic square\n            return False\n\n        # Find the sum of the sub-matrix starting from the current element\n        sub_matrix_sum = 0\n        sub_matrix_length = len(my_matrix) - i\n        for j in range(i, len(my_matrix[0])):\n            sub_matrix_sum += my_matrix[j][i]\n\n        # Check if the sum of the sub-matrix is equal to the sum of the first row\n        if sub_matrix_sum!= first_row_sum:\n            # If not, then the matrix is not a magic square\n            return False\n\n    # If the function reaches this point, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Get the size of the matrix\n    n = len(my_matrix)\n    \n    # Initialize a variable to keep track of the sum of the diagonals\n    diag_sum = 0\n    \n    # Check if the first column of the matrix is a magic square\n    for i in range(n):\n        # Initialize a variable to keep track of the sum of the row\n        row_sum = 0\n        # Check if the number in the first row is equal to the sum of the diagonals\n        if my_matrix[0][i] == diag_sum:\n            row_sum += diag_sum\n        # Check if the number in the last row is equal to the sum of the diagonals\n        elif my_matrix[n-1][i] == diag_sum:\n            row_sum += diag_sum\n        # Check if the row sum is equal to the sum of the diagonal values\n        if row_sum == diag_sum*n:\n            return True\n    \n    # Check if the first row of the matrix is a magic square\n    for i in range(n):\n        # Initialize a variable to keep track of the sum of the column\n        col_sum = 0\n        # Check if the number in the first column is equal to the sum of the diagonals\n        if my_matrix[i][0] == diag_sum:\n            col_sum += diag_sum\n        # Check if the number in the last column is equal to the sum of the diagonals\n        elif my_matrix[i][n-1] == diag_sum:\n            col_sum += diag_sum\n        # Check if the column sum is equal to the sum of the diagonal values\n        if col_sum == diag_sum*n:\n            return True\n    \n    # Check if the main diagonal of the matrix is a magic square\n    for i in range(n):\n        if my_matrix[i][i]!= diag_sum:\n            return False\n    \n    # Check if the second diagonal of the matrix is a magic square\n    for i in range(n):\n        if my_matrix[i][n-i-1]!= diag_sum:\n            return False\n    \n    # If the function gets here, then the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check that all rows, columns, and diagonals are magic squares\n    for row in my_matrix:\n        for num in row:\n            if num!= (sum(row) - sum(my_matrix) + num):\n                return False\n    for col in range(len(my_matrix)):\n        if sum([row[col] for row in my_matrix])!= (len(my_matrix) * (len(my_matrix) + 1) // 2):\n            return False\n    if sum([sum(row) for row in my_matrix])!= (len(my_matrix) * (len(my_matrix) + 1) // 2):\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix must be a square\"\n    \n    # Check if the matrix is a magic square\n    magic_square = True\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        # Check if the row sums are equal to the column sums\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                row_sum += my_matrix[i][j]\n                col_sum += my_matrix[j][i]\n            else:\n                magic_square = False\n        if row_sum!= col_sum or magic_square == False:\n            return \"Matrix is not a magic square\"\n    \n    return \"Matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix has all the numbers from 1 to n^2\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > len(my_matrix)*len(my_matrix[0]):\n                return False\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum = 0\n            col_sum = 0\n            for k in range(len(my_matrix[0])):\n                row_sum += my_matrix[i][k]\n                col_sum += my_matrix[k][j]\n            if row_sum == j+1 or row_sum == j+len(my_matrix)+1 or col_sum == i+1 or col_sum == i+len(my_matrix)+1:\n                continue\n            else:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if the matrix contains only unique elements\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # Check if the element is not equal to its neighbors\n            if my_matrix[i][j]!= my_matrix[(i + 1) % len(my_matrix)][(j + 1) % len(my_matrix[i])]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes in a matrix as input and checks whether it is a magic square or not.\n    '''\n    # get the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix is a square\n    if rows!= cols:\n        return False\n\n    # check if the matrix contains only non-negative integers\n    for row in my_matrix:\n        for elem in row:\n            if type(elem)!= int or elem < 0:\n                return False\n\n    # check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == 0:\n        return False\n\n    # check if the matrix is a magic square by traversing the matrix\n    magic_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n        magic_sum -= rows * (i+1)\n    if magic_sum == 0:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n        magic_sum -= i * cols\n    if magic_sum == 0:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize the sum of the rows and columns\n    row_sum = col_sum = 0\n    \n    # Check if the matrix is a magic square\n    for row in my_matrix:\n        row_sum += sum(row)\n    for col in range(len(my_matrix)):\n        col_sum += sum(row[col] for row in my_matrix)\n    if row_sum == col_sum == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix is a square matrix\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Initialize a list to store the sum of each row\n    row_sums = [0] * n\n\n    # Initialize a list to store the sum of each column\n    col_sums = [0] * n\n\n    # Initialize a list to store the sum of the diagonal\n    diag_sum = 0\n\n    # Loop through each element in the matrix\n    for i in range(n):\n        for j in range(n):\n            # Calculate the element's value\n            value = my_matrix[i][j]\n\n            # Add the value to the row and column sums\n            row_sums[i] += value\n            col_sums[j] += value\n\n            # If the element is on the diagonal, add it to the diagonal sum\n            if i == j:\n                diag_sum += value\n\n    # Check if the sum of the row and column sums is the same as the diagonal sum\n    if sum(row_sums)!= diag_sum or sum(col_sums)!= diag_sum:\n        return False\n\n    # Check if the sum of each row, column, and diagonal is the same as the matrix's sum\n    total_sum = 0\n    for i in range(n):\n        total_sum += row_sums[i]\n        total_sum += col_sums[i]\n        total_sum += diag_sum\n\n    if total_sum!= n ** 2:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix is a square\n    if rows!= cols:\n        return False\n\n    # check if the matrix contains the magic number\n    magic_sum = (rows * (rows + 1) * (2 * rows + 1)) // 6\n    for row in my_matrix:\n        for num in row:\n            if num!= magic_sum:\n                return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_count:\n            max_count = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    # count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    max_num = max(freq, key=freq.get)\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    max_count = max(count_dict.values())\n    max_item = None\n    for item, count in count_dict.items():\n        if count == max_count:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n        \n    max_num = None\n    max_count = 0\n    for num, freq in count.items():\n        if freq > max_count:\n            max_num = num\n            max_count = freq\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # loop through the list and increment the frequency count for each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the highest frequency count\n    max_freq = max(freq_dict.values())\n\n    # find the items with that frequency count\n    max_freq_items = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    # return the item with the highest frequency count\n    return max(max_freq_items)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function will return the item with the maximum frequency in the given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list.\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency.\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_num = [num for num, freq in freq_dict.items() if freq == max_freq][0]\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_set = set(vowels)\n    vowel_str = ''.join(vowels)\n    result = []\n    for char in str1:\n        if char in vowel_set:\n            result.append(vowel_str[vowel_str.index(char)])\n        else:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = [i for i, letter in enumerate(str1) if letter in vowels]\n\n    if not vowel_index:\n        return str1\n    else:\n        reversed_str = str1[:vowel_index[0]] + str1[vowel_index[0]:vowel_index[-1]] + str1[vowel_index[-1]+1:]\n        return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels and i!= 0 and str1[i-1] not in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    new_str = new_str[::-1]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reverse_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            reverse_str = char.lower() + reverse_str\n        else:\n            reverse_str += char\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    rev_vowels = []\n    for char in str1:\n        if char in vowels:\n            if char not in rev_vowels:\n                rev_vowels.append(char)\n    rev_str = ''.join(rev_vowels[::-1])\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a list\n    lst = list(tup1)\n    # Convert each element of the list to a string\n    new_lst = [str(elem) for elem in lst]\n    # Join the elements of the list with a comma and space as separator\n    new_str = \", \".join(new_lst)\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = \"\"\n    for elem in tup1:\n        str_tup += str(elem) + \" \"\n    return str_tup[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a string using the join() method\n    return \", \".join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    result = \", \".join(str(x) for x in tup1)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list\n    lst1 = list(tup1)\n    # Convert each element of the list to a string and join them with commas\n    str1 = \",\".join(str(x) for x in lst1)\n    # Return the resulting string\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # iterate over the list of numbers\n    for num in nums:\n\n        # check if the number is negative\n        if num < 0:\n\n            # add the number to the sum\n            sum += num\n\n    # return the sum of the negative numbers\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum of negative numbers\n            neg_sum += num\n    \n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n - 3 * n) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def get_nth_term(n):\n        '''\n        Returns the nth term of the hexagonal number sequence.\n        '''\n        if n == 0:\n            return 0\n        elif n % 2 == 0:\n            return 2 * (get_nth_term(n // 2) - 1)\n        else:\n            return 2 * (get_nth_term((n + 1) // 2) - 1)\n    \n    return get_nth_term(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Calculate the nth hexagonal number\n    nth_hex = (n * (3 * n - 1)) // 2\n\n    return nth_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    for i in range(1, n+1):\n        hexagonal += 6*i\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize a variable to store the hexagonal number\n    hex_num = 0\n    # loop through the range of n numbers\n    for i in range(1, n+1):\n        # add the hexagonal number to the variable\n        hex_num += 6*i - 5\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*n) + (2*n) - 1) / 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = 1\n    for i in range(1, n+1):\n        hex_num += (2*i - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = 0\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a += b\n        b += c\n        c = a - b\n    print()"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple of two integers.\n    The first integer is the count of zeroes and the second integer is the count of non-zeroes.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing two integers representing the count of zeroes and non-zeroes in the input array.\n    \"\"\"\n\n    zeros = array('i', [0 for _ in range(len(nums))])\n    non_zeros = array('i', [1 for _ in range(len(nums))])\n\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n        else:\n            non_zeros[nums.index(num)] -= 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = zeros[0] / non_zeros[0]\n\n    return (zero_count, 1 - zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list and count the number of zeroes and non-zeroes\n    zeros = len([x for x in nums if x == 0])\n    nonzeros = len(nums) - zeros\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    if nonzeros == 0:\n        return 0\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple of the form\n    (numerator, denominator), where numerator is the number of zeroes and denominator is the total number of integers.\n    \"\"\"\n    # Convert the input array to an array of boolean values representing whether each integer is zero or not\n    zeros = array('b', [x == 0 for x in nums])\n\n    # Count the number of zeroes and the total number of integers\n    zero_count = zeros.count(True)\n    total_count = len(nums)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / total_count\n\n    # Return the ratio as a tuple\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')  # create an array of integers to store the number of zeros\n    ones = array('i')  # create an array of integers to store the number of ones\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n\n    total = len(nums)\n    zeros_total = zeros.itemsize * len(zeros)\n    ones_total = ones.itemsize * len(ones)\n\n    zeros_ratio = zeros_total / total\n    ones_ratio = ones_total / total\n\n    return zeros_ratio, ones_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # convert the array to a list to work with the NumPy library\n    nums = list(nums)\n\n    # create a NumPy array from the list and count the number of non-zero elements\n    non_zero_count = len(nums[nums!= 0])\n\n    # create a NumPy array from the list and count the number of zero elements\n    zero_count = len(nums[nums == 0])\n\n    # compute the ratio of non-zero elements to all elements\n    ratio = non_zero_count / (non_zero_count + zero_count)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])  # create an array of integers of size 1 to store the count of zeroes\n    non_zeros = array('i', [0])  # create an array of integers of size 1 to store the count of non-zeroes\n\n    for num in nums:\n        if num == 0:\n            zeros[0] += 1\n        else:\n            non_zeros[0] += 1\n\n    if non_zeros[0] == 0:\n        return 0\n    else:\n        return zeros[0]/non_zeros[0]\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / zero_count[0]\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as sum of non-zero powers of 2\n    otherwise False is returned.\n    \"\"\"\n    \n    # function to check whether n can be represented as sum of non-zero powers of 2 or not\n    def can_represent_as_sum_of_powers_of_two(n):\n        # base case\n        if n == 0:\n            return True\n        \n        # recursive case\n        if n % 2 == 0:\n            return can_represent_as_sum_of_powers_of_two(n//2) and can_represent_as_sum_of_powers_of_two(n//2)\n        \n        # if n % 2 is not 0, n cannot be represented as sum of non-zero powers of 2\n        return False\n    \n    # call the recursive function to check whether n can be represented as sum of non-zero powers of 2\n    if can_represent_as_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is 0\n    if n == 0:\n        return True\n\n    # check if n is a power of 2\n    if n == 1 or n == 2:\n        return True\n\n    # check if n is a power of 4\n    if n == 4:\n        return True\n\n    # check if n is a power of 8\n    if n == 8:\n        return True\n\n    # check if n is a power of 16\n    if n == 16:\n        return True\n\n    # check if n is a power of 32\n    if n == 32:\n        return True\n\n    # check if n is a power of 64\n    if n == 64:\n        return True\n\n    # check if n is a power of 128\n    if n == 128:\n        return True\n\n    # check if n is a power of 256\n    if n == 256:\n        return True\n\n    # check if n is a power of 512\n    if n == 512:\n        return True\n\n    # check if n is a power of 1024\n    if n == 1024:\n        return True\n\n    # check if n is a power of 2048\n    if n == 2048:\n        return True\n\n    # check if n is a power of 4096\n    if n == 4096:\n        return True\n\n    # check if n is a power of 8192\n    if n == 8192:\n        return True\n\n    # check if n is a power of 16384\n    if n == 16384:\n        return True\n\n    # check if n is a power of 32768\n    if n == 32768:\n        return True\n\n    # check if n is a power of 65536\n    if n == 65536:\n        return True\n\n    # check if n is a power of 131072\n    if n == 131072:\n        return True\n\n    # check if n is a power of 262144\n    if n == 262144:\n        return True\n\n    # check if n is a power of 524288\n    if n == 524288:\n        return True\n\n    # check if n is a power of 1048576\n    if n == 1048576:\n        return True\n\n    # check if n is a power of 2097152\n    if n == 2097152:\n        return True\n\n    # check if n is a power of 4194304\n    if n == 4194304:\n        return True\n\n    # check if n is a power of 8388608\n    if n == 8388608:\n        return True\n\n    # check if n is a power of 16777216\n    if n == 16777216:\n        return True\n\n    # check if n is a power of 33554432\n    if n == 33554432:\n        return True\n\n    # check if n is a power of 67108864\n    if n == 67108864:\n        return True\n\n    # check if n is a power of 134217728\n    if n == 134217728:\n        return True\n\n    # check if n is a power of 268435456\n    if n == 268435456:\n        return True\n\n    # check if n is a power of 536870912\n    if n == 536870912:\n        return True\n\n    # check if n is a power of 1073741824\n    if n == 1073741824:\n        return True\n\n    # check if n is a power of 2147483648\n    if n == 2147483648:\n        return True\n\n    # if n is greater than 2^30, then n cannot be represented"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check for negative numbers and return False\n    if n < 0:\n        return False\n\n    # check for 0 and return True\n    if n == 0:\n        return True\n\n    # check for odd numbers and return False\n    if n % 2!= 0:\n        return False\n\n    # check for even numbers and return True\n    if n == 2:\n        return True\n\n    # use binary search to check if the number can be represented as sum of powers of 2\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        count = 0\n        while n % mid == 0:\n            count += 1\n            n //= mid\n        if count == 0:\n            left = mid + 1\n        else:\n            right = mid\n\n    # check if the last non-zero power of 2 is greater than or equal to the number\n    if n % left == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n < 0:\n        return \"The number should be a non-negative integer.\"\n\n    # Converting the number to binary\n    binary = bin(n)[2:]\n\n    # Counting the number of ones in the binary representation\n    count = 0\n    for digit in binary:\n        if digit == '1':\n            count += 1\n\n    if count == 0:\n        return \"The number should not be zero.\"\n\n    # Counting the number of non-zero powers of 2\n    powers = 0\n    while n > 0:\n        n = n // 2\n        powers += 1\n\n    if powers == count:\n        return \"Yes, the number can be represented as sum of non-zero powers of 2.\"\n    else:\n        return \"No, the number cannot be represented as sum of non-zero powers of 2.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than 2^31, it cannot be represented as sum of powers of 2.\n    if n < 2**31:\n        return False\n\n    # Divide n by 2 and keep dividing by 2 until n is less than or equal to 1.\n    while n > 1:\n        n = n // 2\n\n    # If n is greater than or equal to 1, it cannot be represented as sum of powers of 2.\n    if n == 1:\n        return False\n\n    # Check if n is a power of 2.\n    if n == 2**int(math.log2(n)):\n        return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Loop through all possible powers of 2 and check if the sum of all powers of 2 can equal n\n    for i in range(1, 32):\n        if n >= 2 ** i:\n            n -= 2 ** i\n        else:\n            break\n    # If n is still greater than or equal to 0, it cannot be represented as sum of non-zero powers of 2\n    if n >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # n is a power of 2, so check if there is at least one odd power of 2\n        while n!= 0:\n            if n % 2 == 1:\n                return True\n            n //= 2\n        return False\n    # n is not a power of 2, so check if it can be expressed as a sum of odd powers of 2 and even powers of 2\n    else:\n        odd_powers_of_2 = 0\n        even_powers_of_2 = 0\n        while n!= 0:\n            if n % 2 == 1:\n                odd_powers_of_2 += 1\n            else:\n                even_powers_of_2 += 1\n            n //= 2\n        return odd_powers_of_2 > 0 and even_powers_of_2 > 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while i <= n:\n        if n == i**2:\n            return True\n        elif n > i**2:\n            n = n - i**2\n        else:\n            i = i + 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n\n    power = 0\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n        power += 1\n\n    for i in range(power):\n        if not (1 << i):\n            return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    power_of_two = 1\n    count = 0\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            count += 1\n            n = n // power_of_two\n        else:\n            power_of_two *= 2\n    return count == 1"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # using the formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle with a given radius r.\n    \n    Parameters:\n    r (float): the radius of the circle\n    \n    Returns:\n    float: the circumference of the circle\n    \"\"\"\n    # calculate the circumference using the formula pi * r^2\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == list:\n                flat_list.extend(item)\n            else:\n                flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        for subitem in item:\n            flat_list.append(subitem)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return list(set(flat_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened.extend(extract_singly(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return list(set(flat_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    flattened_set = set(flattened_list)\n    return flattened_set"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of indices to represent the pancakes\n    pancake_indices = [n - i - 1 for i in range(n)]\n    # iterate over the pancakes and swap the elements in the list\n    for i in range(n - 1, 0, -1):\n        # get the index of the current pancake\n        pancake_index = pancake_indices[i - 1]\n        # get the current element at the pancake index\n        current_element = nums[pancake_index]\n        # swap the current element with the last element in the list\n        nums[pancake_index] = nums[i - 1]\n        nums[i - 1] = current_element\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the index of the largest element\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # calculate the length of the list\n    n = len(nums)\n    # create a helper array of size n\n    helper = [0] * n\n    # iterate through the list and count the number of pancakes required to sort it in descending order\n    for i in range(n):\n        max_pancake = 0\n        # iterate through the list from i to the end and find the maximum element in the remaining part of the list\n        for j in range(i, n):\n            if nums[j] > nums[max_pancake]:\n                max_pancake = j\n        # if there is no swapping required, the list is already sorted, so return\n        if max_pancake == i:\n            return nums\n        # swap the i-th element with the maximum element found so far\n        nums[i], nums[max_pancake] = nums[max_pancake], nums[i]\n        # count the number of pancakes required to sort the list in descending order\n        helper[i] = max_pancake + 1\n        # decrement the maximum pancake index to find the next highest element\n        max_pancake -= 1\n    # sort the list in descending order using the helper array\n    for i in range(n-1, 0, -1):\n        # move the i-th element to the end of the list\n        nums[i], nums[helper[i] - 1] = nums[helper[i] - 1], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def sort_pancakes(pancakes):\n        for _ in range(len(pancakes)):\n            max_index = pancakes.index(max(pancakes))\n            pancakes[max_index], pancakes[-1] = pancakes[-1], pancakes[max_index]\n            yield pancakes\n\n    for pancakes in sort_pancakes(nums):\n        for num in pancakes:\n            print(num, end=' ')"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the last element in the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the array from i to the maximum index\n        j = i\n        while j < max_index:\n            nums[j], nums[max_index] = nums[max_index], nums[j]\n            j += 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    def is_sorted(nums, start, end):\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                return False\n        return True\n\n    n = len(nums)\n    while True:\n        swapped = False\n        for start in range(n-1):\n            if nums[start] > nums[start+1]:\n                swap(nums, start, start+1)\n                swapped = True\n        if not swapped:\n            break\n\n        swapped = False\n        for start in range(n-2, 0, -1):\n            if nums[start] > nums[start+1]:\n                swap(nums, start, start+1)\n                swapped = True\n        if not swapped:\n            break\n\n        for i in range(n-1, 0, -1):\n            if is_sorted(nums, i-1, i):\n                reverse(nums, 0, i)\n                break\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def create_pancake(nums, n):\n        pancake = [0] * n\n        pancake[n - 1] = n - 1\n        for i in range(n - 2, -1, -1):\n            pancake[i] = i\n            while pancake[i] > pancake[pancake[i]]:\n                swap(nums, pancake[i], pancake[pancake[i]])\n                pancake[pancake[i]] = i\n        return pancake\n\n    def sort_nums(nums, pancake):\n        n = len(pancake)\n        for i in range(n):\n            swap(nums, i, pancake[i])\n        pancake[n - 1] = n - 1\n\n    n = len(nums)\n    pancake = create_pancake(nums, n)\n    sort_nums(nums, pancake)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # create a copy of the input list\n    nums_copy = nums[:]\n\n    # initialize variables\n    n = len(nums_copy)\n    swaps = 0\n\n    # bubble sort algorithm\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums_copy[j] > nums_copy[j+1]:\n                nums_copy[j], nums_copy[j+1] = nums_copy[j+1], nums_copy[j]\n                swaps += 1\n\n    return nums_copy, swaps"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the subarray starting from the second element and ending at the maximum element\n        for j in range(i+1, max_index-i+1):\n            nums[i+j], nums[max_index-j+i] = nums[max_index-j+i], nums[i+j]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sorting the array in ascending order\n    arr.sort()\n    # Calculating the difference between adjacent elements\n    max_diff = arr[1] - arr[0]\n    # Iterating through the array to calculate the maximum difference\n    for i in range(1, len(arr)-1):\n        current_diff = arr[i+1] - arr[i]\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to store minimum and maximum values\n    max_diff = arr[0] - arr[1]\n    min_diff = arr[0] - arr[1]\n\n    # Iterate through the array and calculate the maximum and minimum differences\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n        elif abs(arr[i] - arr[i-1]) < min_diff:\n            min_diff = abs(arr[i] - arr[i-1])\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    # Initialize variables to store the minimum and maximum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, len(arr)): \n        if arr[i] > max_val: \n            max_val = arr[i] \n        elif arr[i] < min_val: \n            min_val = arr[i] \n    # Calculate the maximum absolute difference between any two elements in the array\n    return abs(max_val - min_val)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # initialize the variables for x and y\n    x = 0\n    y = 0\n    \n    # loop through all possible values of x and y\n    while y <= n:\n        x += 1\n        y = a * x + b\n        \n        # check if the result is equal to n\n        if y == n:\n            return (x, y)\n        \n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n/b\n            y = x\n            return (x, y)\n    else:\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        elif d == 0:\n            x1 = (-b + n/2) / (2*a)\n            y1 = x1\n            return (x1, y1)\n        else:\n            x1 = (-b + math.sqrt(d)) / (2*a)\n            y1 = x1\n            x2 = (-b - math.sqrt(d)) / (2*a)\n            y2 = x2\n            return ((x1, y1), (x2, y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Compute the discriminant\n    discriminant = b ** 2 - 4 * a * n\n    \n    # Check if there is a solution\n    if discriminant > 0:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a, b, and n are all integers\n    if not all(isinstance(x, int) and isinstance(y, int) for x, y in [(a, b), (a, -b), (-a, b), (-a, -b)]):\n        raise ValueError(\"a, b, and n must be integers.\")\n\n    # Initialize variables to keep track of the solution\n    x = 0\n    y = 0\n    found_solution = False\n\n    # Iterate through all possible values of x and y\n    for i in range(1, n // a + 1):\n        x_temp = i * a\n        if (x_temp + b) % n == 0:\n            y_temp = (x_temp + b) // n\n            if y_temp == 0 or (y_temp == i and n // i == a):\n                x = x_temp\n                y = y_temp\n                found_solution = True\n                break\n\n    # If no solution was found, return None\n    if not found_solution:\n        return None\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if the equation has two solutions\n    d = a**2 - 4*b\n    if d < 0:\n        return None\n\n    # find the two solutions\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n\n    # check if the equations have distinct solutions\n    if x1 == x2:\n        return None\n\n    # return the solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    This function takes three arguments - a, b, and n - which represent the coefficients of the equation ax + by = n.\n    It returns the two integers x and y that satisfy the equation, or None if no solution exists.\n    '''\n    # First, we check if a, b, and n are valid inputs.\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(n, (int, float))):\n        return None\n\n    # Second, we use the quadratic formula to find the two solutions of the equation ax^2 + bx + c = 0.\n    # Here, c = -n.\n    discriminant = b**2 - 4*a*n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = x2 = -b/(2*a)\n    else:\n        return None\n\n    # Finally, we check if the two solutions satisfy the equation ax + by = n.\n    if not (x1 * a + x2 * b == n):\n        return None\n\n    # If both the above conditions are satisfied, we return the two solutions as a tuple.\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b//(2*a), -b//(2*a))\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        x += a\n        y += b\n        if x == n:\n            return (x, y)\n        elif x < n:\n            x += 1\n        else:\n            y += 1\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if ax + by = n, where a, b are non-zero real numbers\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative\n    if d > 0:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (int(x1), int(x2))\n    elif d == 0:\n        x1 = -b/(2*a)\n        return (int(x1), int(x1))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function takes three arguments: a, b and n.\n    It uses the quadratic formula to find the roots of the equation ax^2 + bx + c = n,\n    and returns a tuple (x1, y1) where a is the coefficient of x and b is the coefficient of y,\n    such that ax^2 + bx + c = n.\n\n    If no solution exists, it returns None.\n    \"\"\"\n    c = n - a*a - b*b\n    if c < 0:\n        return None\n    \n    discriminant = b*b - 4*a*c\n    if discriminant < 0:\n        return None\n    \n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    return (root1, root2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Create an empty list to store the new list without the elements in list2\n    new_list = []\n\n    # Loop through the elements in list1\n    for element in list1:\n\n        # Check if the element is not present in list2\n        if element not in list2:\n\n            # If the element is not present in list2, add it to new_list\n            new_list.append(element)\n\n    # Return the new list with all elements from list1 not present in list2\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate over the elements of list1\n    for i in range(len(list1)):\n        # check if the element is present in list2\n        if list1[i] in list2:\n            # if it is, remove it from list1\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # converting the list into a set to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # creating a new list with the elements present in list1 and not present in list2\n    new_list = [x for x in set1 if x not in set2]\n    # returning the new list\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([i*n - (2*i+1)**2 for i in range(n//2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        # n is even\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    else:\n        # n is odd\n        return (n * (n + 1) * (2 * n + 2)) // 6"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n//2):\n        series_sum += n - 2*i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum\n    sum_ = 0\n    \n    # iterate over all possible values of x (between 1 and n//2)\n    for x in range(1, n//2+1):\n        # add (n - 2*x) to the sum for each value of x\n        sum_ += n - 2*x\n        \n    return sum_"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*tan(pi/l))**2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 360 / l\n        area += s * tan(angle * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l)) / (4*math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of the polygon by multiplying the perimeter and the length of the side\n    area = (s * l) / (4 * tan(pi/l))\n\n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*s*tan(pi/l))/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        x = s * tan(pi / 180 * angle)\n        y = 0\n        area += x\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = 2 * l\n    \n    # calculate the area using Heron's formula\n    area = 0.5 * s * perimeter * perimeter\n    \n    # return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    \n    # calculate the area of the polygon using the formula A = (s * (s-1) * (s-2) *... * 3 * 2) / 2 / pi\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l * i)\n    \n    # calculate the difference between the perimeter and the area to get the error\n    error = abs(perimeter - area)\n    \n    # return the area of the polygon and the error\n    return area, error"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function calculates the sum of the divisors of two integers.\n    '''\n    # create a list of all the divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # calculate the sum of the divisors\n    sum_divisors = sum(divisors)\n\n    # check if the sum of the divisors is equal to n\n    if sum_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # calculate the sum of the divisors of n using a loop \n    div_sum = sum(divisor for divisor in range(1, int(math.sqrt(n))+1) if n % divisor == 0)\n\n    # compare the sum of divisors with n \n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of the divisors of a number \n    def sum_div(num): \n        return sum(set(map(int, str(num)))) \n\n    # Find the sum of the divisors of two integers \n    a, b = map(int, input(\"Enter two integers: \").split()) \n\n    # Check if the sum of the divisors of a and b is same \n    if sum_div(a) == sum_div(b): \n        print(\"The sum of the divisors of\", a, \"and\", b, \"is the same.\") \n    else: \n        print(\"The sum of the divisors of\", a, \"and\", b, \"is not the same.\") "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def find_divisor(num):\n        '''\n        Finds the smallest divisor of a given number.\n        '''\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return i\n        return num\n    \n    def sum_divisors(num):\n        '''\n        Sums the divisors of a given number.\n        '''\n        div_list = []\n        divisor = find_divisor(num)\n        div_list.append(divisor)\n        while divisor * divisor <= num:\n            num //= divisor\n            if num > 1:\n                divisor = find_divisor(num)\n                div_list.append(divisor)\n        return sum(div_list)\n    \n    if sum_divisors(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        '''\n        Find the sum of the divisors of a given number.\n        '''\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    div1 = int(input(\"Enter the first number: \"))\n    div2 = int(input(\"Enter the second number: \"))\n\n    if sum_of_divisors(div1) == sum_of_divisors(div2):\n        print(\"The sum of the divisors of\", div1, \"and\", div2, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", div1, \"and\", div2, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Finding the divisors of n using the math library\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n%i == 0]\n    \n    # Finding the sum of the divisors\n    sum_div = sum(divisors)\n    \n    # Printing the result\n    if n == sum_div:\n        print(\"Yes, the sum of the divisors of\", n, \"is\", sum_div)\n    else:\n        print(\"No, the sum of the divisors of\", n, \"is not\", sum_div)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n    div2 = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return True\n    else:\n        div_sum = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_sum += i\n                if n // i!= i:\n                    div_sum += n // i\n        return div_sum == sum([i for i in range(1, n+1)])"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    if div_sum(n):\n        print(f\"{n} is a prime number.\")\n    else:\n        print(f\"{n} is not a prime number.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # convert all characters in str1 to lowercase\n    str1 = str1.lower()\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    # iterate through each character in str1\n    for char in str1:\n        # if the character is an uppercase letter, add it to the dictionary with a count of 1\n        if char.isupper():\n            char_count[char] = 1 if char in char_count else 1\n        # if the character is a lowercase letter, add it to the dictionary with a count of the number of times it occurs in the string\n        elif char.islower():\n            char_count[char] = sum([1 for i in range(len(str1)) if str1[i] == char])\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # initialize an empty dictionary to store the character counts\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter\n        if char.isalpha():\n            # if it is, check if it is in the dictionary\n            if char in char_count:\n                # if it is, increment its count in the dictionary\n                char_count[char] += 1\n            else:\n                # if it isn't, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    # loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # convert the index to a letter and check if it's in the dictionary\n        if chr(i) in char_count:\n            # if it is, add it to a list of characters at the same position in the string\n            same_pos_chars.append(chr(i))\n    # return the count of the same-position characters in the string\n    return len(same_pos_chars)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # Define the English alphabet as a string\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Initialize a dictionary to store the number of occurrences of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n\n        # If the character is in the English alphabet, increment its count in the dictionary\n        if char in english_alphabet:\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the dictionary with the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes a string as input and returns a dictionary where the keys are the English alphabetic characters and the values are the number of times they occur in the string.\n\n    Example:\n    count_char_position(\"hello world\")\n    Output: {'e': 1, 'l': 3, 'o': 2, 'h': 1, 'w': 1, 'r': 1, 'd': 1}\n    \"\"\"\n\n    # Convert the input string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the character count\n    char_count = {}\n\n    # Iterate through the string and count the number of occurrences of each English alphabetic character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str(i+97).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if alphabet[i].lower() in str1.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the character counts\n    char_count = {}\n\n    # Loop through the characters in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # If the character is in the English alphabet (case insensitive), increment its count in the dictionary\n        if 'a' <= char <= 'z':\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            if i == len(str1) - 1:\n                count += 1\n            else:\n                if str1[i+1].lower() == str1[i].lower():\n                    count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize an empty dictionary to store the count of characters at each position in the English alphabet\n    position_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # Convert the character to lowercase to make it case insensitive\n        char = char.lower()\n\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n\n            # Convert the character to its position in the English alphabet (0-25)\n            position = ord(char) - ord('a')\n\n            # If the position is not already in the dictionary, add it with a count of 1\n            if position not in position_count:\n                position_count[position] = 1\n            # Otherwise, increment the count of characters at that position\n            else:\n                position_count[position] += 1\n\n    # Return the count of characters at each position in the English alphabet\n    return position_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0!= A[j] % 2:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    # initialize two variables to keep track of even and odd counts \n    even_count = 0 \n    odd_count = 0 \n\n    # loop through the list and check if the xor of the current number and the previous number is even \n    for i in range(len(A)): \n        if (i > 0 and A[i] ^ A[i-1] == 0) or (i == 0 and A[i] ^ A[i] == 0): \n            even_count += 1 \n        else: \n            odd_count += 1 \n\n    # return the total number of even pairs \n    return even_count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] % 2 == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0: \n        return None\n    \n    # Find the smallest power of 2 greater than or equal to n\n    p = 1\n    while p < n: \n        p <<= 1\n    \n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert n to an integer\n    n = int(n)\n\n    # Find the integer logarithm base 2 of n\n    log2_n = 0\n    while n > 1:\n        n = n >> 1\n        log2_n += 1\n\n    # Return 2 raised to the power of log2_n\n    return 2 ** log2_n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the power to 1\n    power = 1\n    \n    # loop through the powers of 2 until we find one greater than or equal to n\n    while power < n:\n        power *= 2\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a counter variable to 1\n    count = 1\n    # Initialize the smallest power of 2 greater than or equal to n\n    smallest_power_of_2 = n\n    \n    # Loop until the counter variable is equal to 2^64\n    while count < 2**64:\n        # Multiply the counter by 2 and add it to the smallest power of 2\n        count *= 2\n        smallest_power_of_2 = smallest_power_of_2 + n\n        \n    return smallest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Check if n is less than 2\n    if n < 2:\n        return 2\n    \n    # Find the first power of 2 greater than or equal to n\n    p = 2\n    while p < n:\n        p <<= 1\n    \n    # Return the result\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the power of 2 that is greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Convert n to integer\n    n = int(n)\n    \n    # Loop while n is not a power of 2\n    while n & (n-1)!= 0:\n        n = n | (n & -n)\n    \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize variable to find the next power of 2\n    power = 1\n    \n    # loop until power is greater than or equal to n\n    while power >= n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the binary representation of n.\n    binary_str = bin(n)[2:]\n\n    # Pad the binary string with 0s to make it 32 bits long.\n    binary_str = '0'*(32 - len(binary_str)) + binary_str\n\n    # Convert the binary string to an integer.\n    binary = int(binary_str, 2)\n\n    # Find the next power of 2 greater than or equal to n.\n    while (binary & (binary - 1))!= 0:\n        binary = binary | (binary - 1)\n\n    # Return the result as a positive integer.\n    return binary"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable\n    result = 1\n    \n    # While the result is less than or equal to n\n    while result <= n:\n        # Increment the result by 1\n        result *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-m]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return \"The second index must be greater than or equal to the first index.\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i-1]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list.append(i)\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum_range = 0\n\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid input\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n + 1):\n        if i < len(list1):\n            sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Formula for the perimeter of a regular pentagon\n    perimeter = 5 * a\n\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    return circumference * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if'std' in s[i:i+3]:\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(item) for item in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()  # create an empty set to store data types\n    for item in test_tuple:\n        if isinstance(item, (int, float, str, bool)):\n            data_types.add(type(item).__name__)  # add type of each element to set\n        else:\n            return False  # if any element is not an integer, float, string or boolean, return False\n    return len(data_types) == 1  # check if all elements have same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    return all(t == types[0] for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n\n    return all(isinstance(t, types[0]) for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n    return len(data_types) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for elem in test_tuple:\n        data_types.add(type(elem))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count and left pointer\n    count = 0\n    left = 0\n\n    # Traverse through the array\n    while left < n:\n        # If the current element is equal to x, increment count and move the left pointer\n        if arr[left] == x:\n            count += 1\n            left += 1\n        # If the count is greater than n/2, return True\n        elif count > n//2:\n            return True\n        # If the count becomes 0, move the left pointer to the next element\n        else:\n            count = 0\n            left += 1\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialize variables\n    count = 0\n    current_count = 0\n\n    # iterate through the array and count the occurrences of x\n    for num in arr:\n        if num == x:\n            count += 1\n        elif count == 0:\n            current_count += 1\n        else:\n            current_count -= 1\n\n    # if the majority element is present, return True\n    if current_count > 0:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        n &= (n - 1) # clear the least significant bit set to 1\n        count += 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0: \n        count += n & 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # Initialize count variable to zero\n    count = 0\n    \n    # Convert binary number to integer\n    binary_num = int(bin(n)[2:])\n    \n    # Iterate over each bit in the binary number\n    for i in range(len(binary_num)):\n        # If the bit is set (i.e., has a value of 1), increment the count variable\n        if binary_num[i] == '1':\n            count += 1\n    \n    # Return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0: \n        n &= (n-1) # clear the rightmost set bit \n        count += 1 # increment the count \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string that contains only the characters with odd index values.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n    \n    # Create a new list for odd-indexed characters\n    odd_char_list = []\n    \n    # Iterate through the list of characters and append odd-indexed characters to the new list\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            odd_char_list.append(char_list[i])\n            \n    # Convert the new list of odd-indexed characters back to a string and return it\n    return ''.join(odd_char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character in the string\n    for i in range(len(str)):\n        # check if the index of the current character is odd\n        if i % 2 == 1:\n            # add the character to the result string\n            result += str[i]\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create a new string to store the result\n    result = ''\n    # Iterate over each character in the given string\n    for char in str:\n        # Check if the index of the current character is odd\n        if (ord(char) % 2) == 1:\n            # Append the current character to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of these numbers.\n    \"\"\"\n    # Finding the minimum number using if-else statement\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_bits = 0\n    for i in range(l, r+1):\n        set_bits |= n & 1 << i\n        n >>= 1\n    return set_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a mask with all bits set to 1\n    mask = (1 << 32) - 1\n\n    # Initialize the count of unset bits to 32\n    unset_count = 32\n\n    # Iterate through the given range\n    for i in range(l, r + 1):\n        # Clear the bits in the mask corresponding to the i-th element of n\n        mask &= ~(1 << i)\n\n        # Check if the mask is equal to n\n        if mask == n:\n            # If yes, then all the bits are unset in the given range\n            return True\n\n        # Check the count of unset bits\n        unset_count = min(unset_count, 32 - i)\n\n    # If all the bits are unset in the given range, then return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store whether all the bits are set or not\n    is_all_set = True\n    \n    # Iterate over all the bits in the given range (inclusive)\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if not n & (1 << i):\n            # If the bit is unset, set the boolean variable to False\n            is_all_set = False\n            # Exit the loop as all the bits have been checked\n            break\n    \n    # Return the value of the boolean variable\n    return is_all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the input range from binary to decimal\n    l_decimal = int(l, 2)\n    r_decimal = int(r, 2)\n\n    # Check if all the bits are set in the given range\n    for i in range(l_decimal, r_decimal+1):\n        if bin(i).count('1')!= 32:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return False\n    while l <= r:\n        if n & (1 << l) == 0:\n            return False\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each bit in the given range (inclusive)\n    for i in range(l, r+1):\n\n        # If the current bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n\n        # If the count becomes greater than n, return False\n        if count > n:\n            return False\n\n    # If the loop completes, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits\n    unset_bits = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If the bit is set, increment the count of unset bits\n            unset_bits += 1\n\n        # Check if all the unset bits have been counted\n        if unset_bits == 31:\n            # If all the unset bits have been counted, return True\n            return True\n\n    # If no unset bits have been counted, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the result\n    result = True\n    \n    # Iterate through all the bits in the range from l to r\n    for i in range(l, r + 1):\n        # Check if the i-th bit is set in the given number n\n        if n & (1 << i) == 0:\n            # If the i-th bit is set, the result is False\n            result = False\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize count to zero\n    count = 0\n\n    # Iterate over all bits in the range of l to r\n    for i in range(l, r + 1):\n        # If the bit is 1, increment the count\n        if n & (1 << i):\n            count += 1\n\n    # Check if count is equal to r - l + 1, which means all bits are set in the range\n    if count == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:  # base case for 0\n        return True\n    if l == 0:  # base case for l=0\n        return all_Bits_Set_In_The_Given_Range(n >> 1, r, r + 1)\n    if r == n - 1:  # base case for r=n-1\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, l - 1)\n    return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers, one for positive and one for negative elements\n    i = 0\n    j = n - 1\n    # iterate through the array from left to right\n    while i < j:\n        # check if the element at the current index is negative\n        if arr[i] < 0:\n            # if negative, swap it with the element at the previous index\n            arr[i], arr[j] = arr[j], arr[i]\n            # increment j since we just swapped the elements\n            j -= 1\n        else:\n            # if positive, increment i since we didn't swap anything\n            i += 1\n    # return the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # count the number of negative and positive elements\n    neg_count = sum(1 for x in arr[:n] if x < 0)\n    pos_count = n - neg_count\n    \n    # initialize two empty lists for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # add the negative elements to the negative list\n    for x in arr[:n]:\n        if x < 0:\n            neg_arr.append(x)\n    \n    # add the positive elements to the positive list\n    for x in arr[n:]:\n        if x >= 0:\n            pos_arr.append(x)\n    \n    # concatenate the two lists\n    result_list = neg_arr + pos_arr\n    \n    # shuffle the elements in the result list\n    random.shuffle(result_list)\n    \n    # add the shuffled elements back to the original array\n    for i in range(n):\n        arr[i] = result_list[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initializing variables for storing the negative and positive elements\n    negative = []\n    positive = []\n    \n    # Looping through the array\n    for i in range(n):\n        # If the current element is negative\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Concatenating the negative and positive arrays\n    result = negative + positive\n    \n    # Shuffling the array using Fisher-Yates algorithm\n    for i in range(n, len(arr)):\n        j = i - 1\n        k = arr[j]\n        while j > 0 and k < arr[j-1]:\n            arr[j] = arr[j-1]\n            j -= 1\n        arr[j] = k\n    \n    # Returning the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize two pointers, one for positive elements and another for negative elements\n    pos_pointer = 0\n    neg_pointer = n - 1\n    \n    # Iterate through the array and swap elements as required\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i], arr[pos_pointer] = arr[pos_pointer], arr[i]\n            pos_pointer += 1\n        elif arr[i] < 0:\n            arr[i], arr[neg_pointer] = arr[neg_pointer], arr[i]\n            neg_pointer -= 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Convert the array to a set to remove duplicates\n    arr = set(arr)\n\n    # Initialize three variables to keep track of the positive, negative, and zero counts\n    pos_count = 0\n    neg_count = 0\n    zero_count = len(arr) - pos_count - neg_count\n\n    # Initialize an empty list to hold the final re-arranged array\n    rearranged_arr = []\n\n    # Iterate through the array elements\n    for i in range(len(arr)):\n        # If the current element is negative\n        if arr[i] < 0:\n            # Add it to the negative count and subtract it from the zero count\n            neg_count += 1\n            zero_count -= 1\n            # If the negative count is greater than or equal to n\n            if neg_count >= n:\n                # Add the element to the end of the final re-arranged array\n                rearranged_arr.append(arr[i])\n                # Subtract n from the negative count to account for the negative elements\n                neg_count -= n\n        # If the current element is positive\n        elif arr[i] > 0:\n            # Add it to the positive count and subtract it from the zero count\n            pos_count += 1\n            zero_count -= 1\n            # If the positive count is greater than or equal to n\n            if pos_count >= n:\n                # Add the element to the end of the final re-arranged array\n                rearranged_arr.append(arr[i])\n                # Subtract n from the positive count to account for the positive elements\n                pos_count -= n\n        # If the current element is zero\n        else:\n            # Add it to the zero count\n            zero_count -= 1\n            # If the zero count is greater than or equal to n\n            if zero_count >= n:\n                # Add the element to the end of the final re-arranged array\n                rearranged_arr.append(arr[i])\n                # Subtract n from the zero count to account for the zero elements\n                zero_count -= n\n\n    # Convert the final re-arranged array to a list and return it\n    return list(rearranged_arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers, one for negative elements and one for positive elements\n    i, j = 0, n - 1\n    \n    # swap negative and positive elements until i >= j\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        elif arr[i] < 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        elif arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    \n    # reverse the positive elements to the end of the array\n    while i < n:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store positive and negative elements respectively\n    positive_elements = []\n    negative_elements = []\n    \n    # Loop through the array and add elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            positive_elements.append(arr[i])\n        else:\n            negative_elements.append(arr[i])\n    \n    # Merge the two lists into one, sorting the elements by absolute value in ascending order and then in descending order\n    merged_list = sorted(positive_elements + negative_elements, reverse=True)\n    \n    # Return the sorted array of size n\n    return merged_list[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize variables for negative and positive elements\n    negative_count = 0\n    positive_count = 0\n    \n    # Iterate through the array and count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n    \n    # Initialize variables for swapping\n    swapping = True\n    while swapping:\n        swapping = False\n        # Iterate through the array and swap the elements that satisfy the condition\n        for i in range(n):\n            if arr[i] < 0 and negative_count > 0:\n                # Swap the current element with the last negative element in the array\n                arr[i], arr[n-negative_count] = arr[n-negative_count], arr[i]\n                swapping = True\n                negative_count -= 1\n            elif arr[i] >= 0 and positive_count > 0:\n                # Swap the current element with the last positive element in the array\n                arr[i], arr[n-positive_count] = arr[n-positive_count], arr[i]\n                swapping = True\n                positive_count -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers - one for negative and one for positive elements\n    negative_pointer = 0\n    positive_pointer = n - 1\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current element is negative, move the negative pointer one step ahead\n        if arr[i] < 0:\n            negative_pointer += 1\n\n            # If the negative pointer is already at the end, we need to start over from the beginning\n            if negative_pointer == n:\n                negative_pointer = 0\n\n        # If the current element is positive, move the positive pointer one step ahead\n        else:\n            positive_pointer -= 1\n\n            # If the positive pointer is already at the beginning, we need to start over from the end\n            if positive_pointer < 0:\n                positive_pointer = n - 1\n\n    # Swap the elements at the negative and positive pointers\n    arr[negative_pointer], arr[positive_pointer] = arr[positive_pointer], arr[negative_pointer]\n\n    # Return the reordered array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the sorted dictionary and add elements to the respective lists\n    for elem, count in sorted_dict:\n        if count == 1:\n            if elem < 0:\n                neg_list.append(elem)\n            else:\n                pos_list.append(elem)\n        else:\n            if elem < 0:\n                for i in range(count):\n                    neg_list.append(elem)\n            else:\n                for i in range(count):\n                    pos_list.append(elem)\n\n    # Concatenate the negative and positive lists to form the final array\n    final_arr = neg_list + pos_list\n\n    # Return the final array\n    return final_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Function to replace blank spaces with a character\n    def replace_blank_helper(s, char):\n        \"\"\"\n        This helper function takes in a string and a character, replaces all blank spaces with the character, and returns the new string.\n        \"\"\"\n        # Split the string into a list of characters\n        char_list = list(s)\n        # Iterate over each character in the list\n        for i in range(len(char_list)):\n            # Check if the character is a space\n            if char_list[i] =='':\n                # Replace the space with the character\n                char_list[i] = char\n        # Join the list of characters back into a string and return it\n        return ''.join(char_list)\n    \n    # Replace blank spaces in the string with the character\n    new_str = replace_blank_helper(str1, char)\n    # Return the new string\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all occurrences of blank spaces in the string with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the n largest numbers\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappushpop(max_heap, num)\n    # Return the list of the n largest numbers\n    return list(max_heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    for i in range(n, len(list1)):\n        if -list1[i] > -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        min_heap.append(heapq.heappushpop(min_heap, -list1.pop()))\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_list = sorted(list1,reverse=True)\n    # Return the first n elements of the sorted list\n    return sorted_list[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    # Convert list to heap using max heap\n    heap = [-x for x in lst]\n    heapq.heapify(heap)\n    \n    # Extract and return the largest n elements\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n\n    # Create an empty heap with the first n elements of the sorted list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, sorted_list.pop())\n\n    # Fill the heap with the remaining elements of the sorted list\n    for item in sorted_list:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Extract the n largest elements from the heap and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # formula to find lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2*math.pi*(r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2*r*h\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    :param r: The radius of the cylinder (float).\n    :param h: The height of the cylinder (float).\n    :return: The lateral surface area of the cylinder (float).\n    \"\"\"\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h**2"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store even bits of n\n    even_bits = []\n    \n    # loop through each bit of n\n    for i in range(32):\n        # check if the i-th bit is even\n        if n & (1 << i) == 0:\n            # if it's not even, add it to the list\n            even_bits.append(i)\n    \n    # join the list of even bits into a single number\n    even_bits_number = sum([2**i for i in even_bits])\n    \n    # return the new number\n    return even_bits_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it to 1 and add it to the result\n        if int(bit) % 2 == 0:\n            result += int(bit)\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    bin_str = bin(n)[2:]\n\n    # Iterate over the bits of the binary string\n    for i in range(len(bin_str)):\n        if bin_str[i] == '1' and i % 2 == 0:\n            # Set the bit to 1\n            bin_str = bin_str[:i] + '1' + bin_str[i+1:]\n\n    # Convert the binary string back to decimal\n    return int(bin_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # initialize an empty list to store even bits\n    even_bits = []\n    \n    # loop through each bit of the number\n    for i in range(32): \n        \n        # check if the current bit is even\n        if (n >> i) & 1 == 0: \n            # if it is even, add it to the list\n            even_bits.append(i)\n    \n    # iterate through the list and set all even bits to 1\n    for i in even_bits: \n        n |= 1 << i\n        \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the even bit to 1\n    even_bit = 1\n    \n    # Set all even bits to 0\n    while even_bit & n:\n        even_bit <<= 1\n        even_bit &= n\n    \n    # Return the modified number\n    return even_bit"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the operation\n    result = 0\n\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result = result | (1 << int(bit))\n\n    # Return the result of the operation\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # iterate over all bits of the number\n    for i in range(0, 32):\n        # check if the i-th bit of the number is even\n        if (n >> i) & 1 == 0:\n            # if even, set the i-th bit of the result to 1\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n    # Convert the number to binary\n    binary_num = bin(n)\n    # Iterate over each digit of the binary number\n    for digit in binary_num:\n        # Check if the current digit is an even number\n        if int(digit) % 2 == 0:\n            # Set the corresponding bit in the result variable to 1\n            result |= 1 << (binary_num.index(digit) * 2)\n    # Return the result variable\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the even bits\n    even_bits = []\n    \n    # loop through the bits of the given number\n    for bit in bin(n)[2:]:\n        # if the bit is even, append it to the list of even bits\n        if bit == \"0\":\n            even_bits.append(bit)\n        else:\n            even_bits.append(\"1\")\n    \n    # join the even bits into a binary string and convert it back to an integer\n    even_binary = int(\"\".join(even_bits), 2)\n    \n    # return the even binary number\n    return even_binary"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n & 1)   # set all even bits to 1\n    return n\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter function from collections module to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Count the occurrences of each unique tuple using the Counter class from the collections module\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of occurrences of each tuple\n    count_dict = {}\n    # use the Counter() function from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for item in test_list:\n        count_dict[item] += 1\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Return the dictionary created by the Counter object\n    return counter.items()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter from the collections module to count the number of occurrences of each unique tuple in the list\n    count = Counter(test_list)\n    \n    # Converting the Counter object to a dictionary\n    result = dict(count)\n    \n    # Returning the dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            if str[i:j] and str[i:j]!= str[i] and str[i:j]!= str[j]:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Initialize start and end pointers to 0\n    start = 0\n    # Initialize the size of the string\n    size = len(str)\n    # Loop through the string\n    for i in range(size):\n        # If the character is a letter, increment the count and move the end pointer to the right\n        if str[i].isalpha():\n            count += 1\n            end = i + 1\n        # If the character is a space or a punctuation mark, move the start pointer to the right\n        else:\n            while i < size and (str[i].isspace() or str[i] in ['.', ',', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '<', '>', '-', '_', '\\'']):\n                i += 1\n            start = i + 1\n        # Check if the substring is not empty\n        if end - start > 0:\n            count += 1\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n\n    # Iterate through all possible substrings of the given string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty and add it to the count variable\n            if str[i:j]!= '' and str[i:j]!='':\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    def count_sequences(m,n,count,arr,i,j):\n        if i == j:\n            if arr[i] >= 2*arr[j]:\n                count += 1\n        else:\n            if arr[i] >= 2*arr[j]:\n                count_sequences(m,n,count,arr,i,j+1)\n            if arr[i] < arr[j]:\n                count_sequences(m,n,count,arr,i+1,j)\n        return count\n    \n    # find the maximum number of sequences possible with length n\n    max_count = 0\n    arr = [0]*(n+1)\n    arr[0] = 0\n    for i in range(1,n+1):\n        arr[i] = min(arr[i-1]+m,m)\n    max_count = count_sequences(m,n,0,arr,0,n)\n    \n    # calculate the number of sequences with length n that satisfy the given condition\n    count = 0\n    for i in range(1,n+1):\n        if arr[i] >= 2*arr[i-1]:\n            count += max_count\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize a list to store the number of possible sequences\n    count = [0] * (n + 1)\n    # Initialize the count of the first element as 1\n    count[1] = 1\n    \n    # Iterate over all possible lengths of sequences\n    for i in range(2, n + 1):\n        # For each length, iterate over all possible values of the i-th element\n        for j in range(2, m + 1):\n            # Check if the value of the i-th element is greater than or equal to twice the previous element and less than or equal to m\n            if j >= 2 * i and j <= m:\n                # Increment the count of this sequence\n                count[i] += count[i - 1]\n    \n    # Return the total number of possible sequences\n    return count[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, curr, i):\n        if i == n:\n            return 1\n        count = 0\n        if i > 0 and curr - prev >= 2 * prev and curr <= m:\n            count += helper(prev, curr, i + 1)\n        if i > 0 and curr - prev < 2 * prev:\n            if i < 2:\n                count += helper(prev, curr, i + 1)\n        return count\n\n    count = 0\n    prev = -1\n    for i in range(2, m + 1):\n        if i % 2 == 0:\n            count += helper(prev, i, 1)\n            prev = i\n        else:\n            count += helper(prev, i, 0)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # create a list of all possible pairs of numbers up to m\n    pairs = [(x,y) for x in range(2, m+1) for y in range(2, m+1)]\n    # create a list of all possible sequences of length n, where each element is between 2 and m-1\n    sequences = []\n    for i in range(2, m+1):\n        for j in range(i, m+1):\n            sequences.append((i, j))\n    # count the number of sequences that are within the given range and have at least one element equal to twice the previous element\n    result = 0\n    for sequence in sequences:\n        if (sequence[0] <= sequence[1] <= m-2 and \n            sequence[0] % 2 == 0 and \n            sequence[1] % 2 == 0 and \n            sequence[1] > pairs[sequence[0]-2][1] and \n            sequence[1] < pairs[sequence[0]-2][0]):\n            result += 1\n    return result"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(m, 0, -1):\n        if i >= 2 * (i - 1) <= m:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    def is_valid_sequence(seq):\n        \"\"\"\n        Helper function to check if the sequence is valid.\n        \"\"\"\n        if len(seq)!= n:\n            return False\n        prev_element = float('-inf')\n        for element in seq:\n            if element < 2 * prev_element or element > m:\n                return False\n            prev_element = element\n        return True\n\n    total_sequences = 0\n    for i in range(1, m + 1):\n        if i >= 2 * i:\n            seq = [i]\n            while len(seq) < n:\n                seq.append(2 * seq[-1] + 1)\n            if is_valid_sequence(seq):\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize variables for the number of possible sequences and the current sequence\n    possible_sequences = 0\n    current_sequence = []\n    \n    # Loop through all the values from 2 to m\n    for i in range(2, m+1):\n        \n        # Check if the current value is less than or equal to twice the previous value\n        if i <= 2*current_sequence[-1]:\n            continue\n        \n        # Check if the current value is greater than or equal to n and less than or equal to m\n        if i >= n and i <= m:\n            \n            # If the current value is greater than or equal to n and less than or equal to m,\n            # append it to the current sequence and check if the current sequence is a valid sequence.\n            \n            current_sequence.append(i)\n            is_valid_sequence = True\n            \n            # Loop through the current sequence and check if each element is greater than or equal to twice the previous element but less than or equal to m.\n            for j in range(len(current_sequence)-1):\n                if current_sequence[j] < 2*current_sequence[j+1] or current_sequence[j] > m:\n                    is_valid_sequence = False\n                    break\n            \n            if is_valid_sequence:\n                possible_sequences += 1\n            \n            # Remove the last element from the current sequence and continue the loop.\n            current_sequence.pop()\n            \n    return possible_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence_count = 0\n    sequence = []\n    for i in range(n):\n        sequence.append(2*i+1)\n    for i in range(1,m):\n        sequence_count += len(sequence)\n        sequence = [x for x in sequence if x <= 2*i]\n        sequence.append(2*i+1)\n    return sequence_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n): \n    count = 0\n    for i in range(m, 1, -1):\n        if i >= 2 * n:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # create a list to store the sequence\n    sequence = []\n    \n    # initialize the first element of the sequence\n    sequence.append(2*m)\n    \n    # initialize the remaining elements of the sequence\n    for i in range(n-1):\n        # find the next element in the sequence\n        current_element = 2*sequence[-1] + 2\n        \n        # if the current element is greater than or equal to m and less than or equal to twice the previous element\n        while current_element >= m and current_element <= 2*sequence[-1]:\n            # add the current element to the sequence\n            sequence.append(current_element)\n            # update the current element\n            current_element += 2\n        \n        # if the current element is greater than twice the previous element, increment the previous element\n        if current_element > 2*sequence[-1]:\n            sequence[-1] += 2\n    \n    # return the total number of sequences\n    return len(sequence)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the first list is empty\n    if not list1:\n        return list1\n    else:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2[-1]\n        # Remove the last elements of both lists\n        list1.pop()\n        list2.pop()\n        # Return the modified list\n        return list1 + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Check if the second list is longer than the first list\n    if len(list2) > len(list1):\n        # Replace the last element of the first list with the first elements of the second list\n        for i in range(len(list1)):\n            list1[i] = list2[0]\n        return list1\n    else:\n        # If the second list is shorter, return the original list\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2.pop(0)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the length of the second list is greater than or equal to the length of the first list\n    if len(list2) >= len(list1):\n        raise ValueError(\"Second list is too long to replace the first list.\")\n\n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return None\n    else:\n        list1[-1:] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    # Check if the length of the lists is same\n    if len(list1)!= len(list2):\n        print(\"The lists must have the same length!\")\n        return None\n    else:\n        # Iterate through the list2 and replace the last element of list1 with the elements of list2\n        for i in range(len(list2)):\n            list1[-1] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"The two lists have different lengths.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Loop through the first list and remove the last element\n    for i in range(length - 1, -1, -1):\n        list1.pop(i)\n\n    # Loop through the second list and add each element to the first list\n    for element in list2:\n        list1.append(element)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = len(str1)\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N - 1\n    y = math.sqrt(x)\n    while y*y!= x:\n        x = y*y\n        y = (x + y) / 2\n    return int(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    # Convert the given number to integer\n    N = int(N)\n\n    # Calculate the square root of the given number\n    sqrtN = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if sqrtN.is_integer():\n        # If it is an integer, move to the next integer\n        nextSqrt = int(sqrtN) + 1\n    else:\n        # If it is not an integer, move to the nearest integer\n        nextSqrt = math.ceil(sqrtN)\n\n    # Check if the next perfect square is greater than the given number\n    if nextSqrt > N:\n        # If it is, return the next perfect square\n        return nextSqrt\n    else:\n        # If not, return the given number\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n\n    while True:\n        sqrt_N += 1\n        if math.isqrt(sqrt_N*sqrt_N) == sqrt_N:\n            break\n\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    max_int = 2**31 - 1\n    if math.sqrt(N) * math.sqrt(N) == N:\n        return max_int\n    else:\n        return int(math.sqrt(N)) * int(math.sqrt(N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Check if sqrt_N is odd\n    if sqrt_N % 1 == 0:\n        sqrt_N += 1\n\n    # Find the next perfect square\n    next_sqrt_N = sqrt_N + 1\n    next_square = next_sqrt_N * next_sqrt_N\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    sqrt_N += 1\n    return int(sqrt_N**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than that number.\n    \"\"\"\n    # Initialize the variables\n    sqrt_N = int(math.sqrt(N)) + 1\n    sqrt_N_sq = int(sqrt_N ** 2)\n\n    # Check if the square root of N is an integer\n    if sqrt_N == math.floor(sqrt_N):\n        # Check if the square of the square root of N is greater than N\n        if sqrt_N_sq > N:\n            sqrt_N += 1\n        else:\n            sqrt_N -= 1\n\n    # Check if the square root of N is an odd integer\n    else:\n        if sqrt_N_sq > N:\n            sqrt_N += 1\n        else:\n            sqrt_N -= 1\n\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N):\n    # Function to check if a number is a perfect square\n    def is_perfect_square(num):\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    # Function to find the next perfect square\n    def next_square(num):\n        i = num + 1\n        while True:\n            if is_perfect_square(i):\n                return i\n            i += 1\n\n    # Initialize the starting number and find the next perfect square\n    start = N\n    while True:\n        if is_perfect_square(start):\n            break\n        start += 1\n\n    # Check if the next perfect square is greater than the starting number\n    if next_square(start) > start:\n        return next_square(start)\n    else:\n        return start"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # function to find the next perfect square greater than a given number\n    # initial value of next perfect square\n    next_square = int(math.sqrt(N))**2 + 1\n\n    # function to check if a given number is a perfect square\n    def is_perfect_square(n):\n        root = int(math.sqrt(n))\n        return root*root == n\n\n    # check if the next perfect square is a perfect square\n    while not is_perfect_square(next_square):\n        next_square += 1\n\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        while True:\n            n = n + 1\n            square = int(math.sqrt(n))\n            if math.sqrt(square*square) == int(math.sqrt(square*square)):\n                return square*square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            # Case 1: Current element is increasing. Add it to the current subsequence.\n            max_ending_here += arr[i]\n        else:\n            # Case 2: Current element is decreasing. Compare it with the maximum subsequence seen so far.\n            max_ending_here = max(max_ending_here, arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    # Find the maximum subsequence ending at each index\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            # If the current element is greater than the previous element, update the maximum ending here\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            # If the current element is smaller than the previous element, update the maximum ending here\n            max_ending_here = max(max_ending_here, arr[i])\n            \n        # Update the maximum sum so far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Find the length of the array \n    n = len(arr) \n\n    # Initialize the maximum sum and the left and right pointers \n    max_sum = arr[0] \n    left, right = 0, 1 \n\n    # Traverse the array from left to right \n    while right < n: \n\n        # If the next element is greater than the current maximum sum, update the maximum sum and update the pointers \n        if arr[right] > arr[left]: \n            max_sum = max(max_sum, arr[left] + arr[right]) \n            left += 1 \n        else: \n            max_sum = max(max_sum, arr[left] - arr[right]) \n            right += 1 \n\n    # Return the maximum sum \n    return max_sum "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    increasing = True\n    increasing_sum = 0\n    decreasing_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the current number is increasing\n        if increasing:\n            increasing_sum += num\n        else:\n            decreasing_sum += num\n\n        # Update the maximum sum\n        if increasing:\n            if num > increasing_sum:\n                max_sum = increasing_sum\n            increasing = False\n        else:\n            if num < decreasing_sum:\n                max_sum = decreasing_sum\n            increasing = True\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Initialize variables to store the maximum sum and its ending index\n    max_sum = arr[0]\n    max_end = 0\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is increasing, add it to the current maximum sum and update the ending index\n        if arr[i] > arr[i-1]:\n            max_sum += arr[i]\n            max_end = i\n\n        # If the current element is decreasing, subtract it from the current maximum sum and update the ending index\n        elif arr[i] < arr[i-1]:\n            max_sum -= arr[i-1]\n            max_end = i-1\n\n        # If the current element is neither increasing nor decreasing, update the current maximum sum and ending index\n        else:\n            max_sum = arr[i]\n            max_end = i\n\n    # Return the maximum sum and ending index\n    return max_sum, max_end"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        raise ValueError(\"Array must have at least three elements\")\n\n    # Check if the array is increasing or decreasing\n    increasing = arr[1] < arr[0]\n    decreasing = arr[n-2] > arr[n-3]\n    if not (increasing or decreasing):\n        raise ValueError(\"Array must be increasing or decreasing\")\n\n    # Check if the array is bitonic\n    if increasing and decreasing:\n        raise ValueError(\"Array is not bitonic\")\n\n    # Calculate the maximum subsequence sum\n    max_sum = arr[0]\n    for i in range(1, n-1):\n        if increasing:\n            max_sum = max(max_sum, arr[i], arr[i+1])\n        else:\n            max_sum = max(max_sum, arr[i], arr[i-1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # If the array is not bitonic, return the sum of the array\n    if arr[0] <= arr[1]:\n        if arr[-1] >= arr[-2]:\n            return sum(arr)\n        else:\n            return 0\n    # If the array is bitonic, find the maximum sum subsequence\n    else:\n        left, right = 0, 1\n        current_sum = 0\n        max_sum_subseq = []\n        # Traverse the array from left to right and update the current_sum\n        while right < n:\n            current_sum += arr[right]\n            # If the current_sum is greater than the current maximum subsequence sum, update the maximum subsequence sum\n            if current_sum > max_sum_subseq[-1]:\n                max_sum_subseq = [current_sum]\n            # If the current_sum is equal to the current maximum subsequence sum, add it to the list\n            elif current_sum == max_sum_subseq[-1]:\n                max_sum_subseq.append(current_sum)\n            # Traverse the array from right to left and update the current_sum\n            current_sum -= arr[left]\n            left += 1\n            right += 1\n        return max_sum_subseq[-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the maximum sum to the first element of the array\n    max_sum = arr[0]\n    # Initialize the sum of the increasing subsequence to be the first element of the array\n    inc_sum = arr[0]\n    # Initialize the sum of the decreasing subsequence to be the last element of the array\n    dec_sum = arr[-1]\n\n    # Traverse the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # If the element is greater than the first element, update the sum of the increasing subsequence\n        if arr[i] > arr[i-1]:\n            inc_sum += arr[i]\n        else:\n            # If the element is less than or equal to the first element, update the sum of the decreasing subsequence\n            dec_sum += arr[i]\n        # Update the maximum sum if the current sum of the increasing subsequence is greater\n        max_sum = max(max_sum, inc_sum)\n        # Update the maximum sum if the current sum of the decreasing subsequence is greater\n        max_sum = max(max_sum, dec_sum)\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Check if the array is bitonic\n    if arr[0] <= arr[1] and arr[-1] >= arr[-2]:\n        return arr[0]\n\n    # Find the maximum sum of subarrays\n    if arr[0] <= arr[1]:\n        first_sum = arr[0]\n        second_sum = max(arr[0], arr[1])\n    else:\n        first_sum = arr[1]\n        second_sum = max(arr[1], arr[0])\n\n    for i in range(2, n):\n        if arr[i] <= arr[i - 1]:\n            first_sum += arr[i]\n            second_sum = max(second_sum, first_sum)\n        else:\n            first_sum = arr[i]\n            second_sum = max(second_sum, first_sum)\n\n    return second_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n > 0 else 0\n\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = dp[i - 1] - arr[i - 1]\n\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check if number is a positive float\n    if isinstance(number, (float, int)) and number > 0:\n        # initialize variables\n        iteration = 1\n        guess = number/2\n        previous_guess = 0\n        error = 1\n\n        while error > 10**-8:\n            # calculate next guess\n            next_guess = guess - (guess**2 - number)/(2*guess)\n\n            # check if next guess is close to the correct square root\n            error = abs(next_guess - guess)\n            guess = next_guess\n\n            # check if next guess is closer to the correct square root than the previous guess\n            if abs(next_guess - previous_guess) < abs(next_guess - guess):\n                # update iteration count\n                iteration += 1\n\n            # update previous guess\n            previous_guess = guess\n\n        # return the square root and number of iterations\n        return guess, iteration\n    else:\n        # raise an error if number is not a positive float\n        raise ValueError('Number must be a positive float.')"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes square roots using the babylonian method.\n\n    Parameters:\n    number (float): The number whose square root is to be found.\n\n    Returns:\n    float: The square root of the input number using the babylonian method.\n    '''\n\n    # initialize variables\n    x = number\n    y = (x + number/x) / 2\n\n    # iterate until y is within the desired precision\n    while abs(x - y) > 1e-10:\n        x = y\n        y = (x + number/x) / 2\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    threshold = 0.00001\n    guess = number / 2  # Start with a guess of half the number\n\n    while abs(guess*guess - number) > threshold:\n        guess = (guess + number/guess) / 2  # New guess is the average of the current guess and the new guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5 * (number + 1.0)\n    while abs(guess**2 - number) > 0.0001:\n        if guess**2 < number:\n            guess += 1\n        else:\n            guess -= 1\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number, precision=0.00001):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2  # Start with a guess of the square root\n    while True:\n        new_guess = (guess + number/guess) / 2  # Refine the guess\n        if abs(guess*guess - number) < precision:\n            return guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    i = 0\n    while abs(guess*guess - number) > 0.00001:\n        i += 1\n        if guess*guess < number:\n            guess += number / guess\n        else:\n            guess -= number / guess\n    return guess, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    precision = 0.00001\n    while abs(x*x - number) > precision:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2 # initial guess\n    while True:\n        # check if the guess is a valid square root\n        if guess**2 == number:\n            return guess\n        # if not, compute the next guess\n        else:\n            guess = (guess + number/guess)/2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    prev_guess = number / 2\n    guess = prev_guess\n\n    while abs(guess * guess - number) >= epsilon:\n        prev_guess = guess\n        guess = (prev_guess + number / prev_guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        guess = (guess + number/guess) / 2\n        if abs(guess*guess - number) < 0.001:\n            break\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n    arr = [[0] * n for i in range(n)] \n  \n    # find lengths of all substrings \n    for i in range(n): \n        for j in range(i, n): \n            if i == j: \n                arr[i][j] = 1\n            elif str[i] == str[j]: \n                arr[i][j] = arr[i+1][j-1] + 2\n            else: \n                arr[i][j] = max(arr[i+1][j], arr[i][j-1]) \n  \n    # return length of longest palindrome \n    return arr[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    This function finds the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D array to store the longest palindromic subsequence lengths\n    # for all substrings of length i\n    lps_array = [[0] * n for _ in range(n)]\n\n    # find the length of the longest palindromic subsequence for all substrings of length i\n    for i in range(1, n):\n        # if the substring is a palindrome, set its length to 1\n        if str[i] == str[i-1]:\n            lps_array[i][i] = 1\n\n        # if the substring is not a palindrome, compare with its reverse and update the length\n        else:\n            lps_array[i][i] = max(lps_array[i-1][j] for j in range(i)) + 1\n\n        # update the length of the longest palindromic subsequence for all substrings of length j\n        for j in range(i-1, -1, -1):\n            if str[i] == str[j]:\n                lps_array[j][i] = lps_array[j+1][i-1] + 1\n            else:\n                lps_array[j][i] = max(lps_array[j+1][k] for k in range(j+1, i))\n\n    # return the length of the longest palindromic subsequence\n    return lps_array[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    # Create a list of character indices for each character in the string\n    indices = [0] * len(str)\n\n    # Initialize the longest palindromic subsequence length to 1\n    max_len = 1\n\n    # Iterate over the string and update the indices list\n    for i in range(1, len(str)):\n        # Check if the current character is equal to its mirror image\n        if str[i] == str[indices[i-1]]:\n            # If so, update the indices list to include the current index\n            indices[i] = indices[i-1] + 1\n\n            # Update the maximum length if the current length is greater\n            if max_len < i - indices[i-1] + 1:\n                max_len = i - indices[i-1] + 1\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence for all prefixes of the string\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and the first column of the table with 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the rest of the table using dynamic programming\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            # Check if the characters at i and j are the same\n            if str[i] == str[j]:\n                # If yes, the length of the longest palindromic subsequence ending at i and j is 2 + the length of the longest palindromic subsequence ending at i and j-1\n                table[i][j] = 2 + table[i+1][j-1]\n            # If not, the length of the longest palindromic subsequence ending at i and j is the maximum of the length of the longest palindromic subsequence ending at i and j-1 and the length of the longest palindromic subsequence ending at i+1 and j\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a 2D list to store the lengths of the longest palindromic subsequence for all prefixes of the string\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n\n    # Initialize the first column and row of the 2D list\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # Fill the rest of the 2D list\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[len(str)-1][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    # initialize variables\n    max_len = 1\n    start = 0\n    end = 0\n    \n    # iterate through each character in the string\n    for i in range(len(str)):\n        # check if the current character is at the beginning or end of the string\n        if i == 0 or i == len(str) - 1:\n            max_len = 2\n        else:\n            # check if the current character can be used to extend the current subsequence\n            if str[i] == str[i - 1]:\n                # if yes, extend the current subsequence\n                end = i\n            else:\n                # if no, update the start of the current subsequence\n                start = i - 1\n                max_len = 2\n                end = i\n                \n        # update the maximum length found so far\n        if max_len > end - start + 1:\n            max_len = end - start + 1\n            start = i - max_len + 1\n            end = i\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store the length of longest palindromic subsequence ending at each index\n    table = [[0]*n for i in range(n)]\n\n    # Base case: if the string is empty or has only one character, its longest palindromic subsequence is 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in a bottom-up manner\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [[0] * n for i in range(n)]\n        max_len = 1\n        for i in range(1, n):\n            if str[i] == str[i-1]:\n                dp[i][i] = 2\n                max_len = 2\n            else:\n                dp[i][i] = 1\n                for j in range(i-1, -1, -1):\n                    if str[i] == str[j] and dp[j+1][i-1] > 0:\n                        dp[i][j] = dp[j+1][i-1] + 2\n                        if dp[i][j] > max_len:\n                            max_len = dp[i][j]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    # Create a table to store the lengths of the longest palindromic subsequences ending at each index\n    table = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first column and the last row\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # Fill in the remaining table values\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 1:\n        return 1\n    \n    # Initialize a 2D array to store the lengths of longest palindromic subsequences for all substrings\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the first column and first row of the dp array\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill in the rest of the dp array using dynamic programming\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables\n    sum_of_n = 0\n    count = 0\n\n    # Calculate the harmonic sum\n    for i in range(1, n+1):\n        sum_of_n += 1 / i\n        count += 1\n\n    return sum_of_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    The harmonic sum of n-1 is defined as (1/n + 1/n-1 +... + 1/1)\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (2*n-1)/(2*n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    Args:\n        n (int): The number of terms in the harmonic series.\n\n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n\n    # Calculate the sum of the first n-1 terms\n    sum_n_minus_one = 0\n    for i in range(1, n):\n        sum_n_minus_one += 1 / i\n\n    # Return the sum divided by n\n    return sum_n_minus_one / n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/(n**n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the values of the arrays\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = True\n    for num in array_nums2:\n        dict2[num] = True\n    \n    # find the intersection of the two dictionaries\n    intersection = []\n    for key in dict1.keys():\n        if key in dict2.keys() and dict1[key] and dict2[key]:\n            intersection.append(key)\n    \n    # return the intersection as a list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    This function takes two arrays as input, and returns a new array containing only the elements common to both arrays.\n    \"\"\"\n    # Create two sets from the two arrays to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set to store the common elements of the two arrays\n    common_set = set(array_nums1) & set(array_nums2)\n    # create a list to store the common elements of the two arrays\n    common_list = list(common_set)\n    # sort the list in ascending order and return it\n    return sorted(common_list)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create an empty set to store the common elements\n    common_set = set()\n\n    # loop through the first array and add its elements to the set\n    for num in array_nums1:\n        common_set.add(num)\n\n    # loop through the second array and check if each element is present in the set\n    for num in array_nums2:\n        if num in common_set:\n            common_set.remove(num)\n\n    # convert the set to a list and return it as the intersection of the two arrays\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n        array_nums1 (list): A list of numbers.\n        array_nums2 (list): A list of numbers.\n\n    Returns:\n        list: A list of the common elements between the two arrays.\n    \"\"\"\n\n    # Use a dictionary to keep track of the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Find the intersection of the two dictionaries\n    intersection = []\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common.append(num)\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as inputs and returns the intersection of those arrays.\n    \"\"\"\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of unique elements in array_nums2\n    array_nums2 = set(array_nums2)\n    # Create an empty set to store the intersection of elements in both arrays\n    intersection = set()\n    # Loop through each element in array_nums1\n    for num in array_nums1:\n        # If the element is in the set of unique elements in array_nums2, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums2 and add it to the set from array_nums1\n    set_nums2 = set(array_nums2)\n    set_nums1 = set(array_nums1)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list = []\n    for i in range(len(list)):\n        result_list.append(element)\n        result_list.append(list[i])\n    return result_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n            new_list.append(list[0])\n        else:\n            new_list.append(list[i])\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    # Copy the list and insert the element in the beginning of the copy\n    new_list = list.copy()\n    new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        try:\n            a, b = cmath.polar(number)\n            print(f'{a:.2f} + {b:.2f}i')\n        except TypeError:\n            print('Invalid input')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        complex_num = complex(num)\n        polar_num = cmath.polar(complex_num)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list): List of complex numbers to be converted.\n\n    Returns:\n    polar (list): List of tuples (magnitude, phase) for each complex number in the input list.\n    \"\"\"\n    polar = []\n    for number in numbers:\n        # magnitude of the complex number\n        mag = abs(number)\n        # phase of the complex number\n        phase = cmath.phase(number)\n        # convert magnitude and phase to polar coordinates\n        polar.append((mag, phase))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        real, imag = cmath.polar(number)\n        # Append the polar coordinates to the result list\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # iterate through each number in the list\n    for num in numbers:\n        # check if the number is a complex number\n        if isinstance(num, complex):\n            # convert the complex number to polar coordinates\n            r = abs(num)\n            theta = cmath.phase(num)\n            # print the polar coordinates\n            print(f\"{r} + {theta}i\")\n        else:\n            # print the original number\n            print(num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        try:\n            r = num.real\n            theta = cmath.phase(num)\n            polar_num = (r, theta)\n            result.append(polar_num)\n        except AttributeError:\n            continue\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        real = number.real\n        imaginary = number.imag\n        polar_number = (cmath.sqrt(real**2 + imaginary**2), cmath.phase(number))\n        polar_numbers.append(polar_number)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        polar_list.append(complex(num).exp())\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        pol = abs(imag) + cmath.phase(imag)\n        result.append(pol)\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    color_combinations = list(combinations_with_replacement(colors, n))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l) - n + 1):\n        comb.append(tuple(l[i:i+n]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l) - n + 1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    color_combinations = []\n\n    for i in range(2**len(colors)):\n        color_combination = []\n        for j in range(len(colors)):\n            if (i & (1 << j)):\n                color_combination.append(colors[j])\n        color_combinations.append((color_combination))\n\n    return color_combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count+=1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return (b,a)\n\nprint(swap_numbers(5,10)) # Output: (10, 5)\nprint(swap_numbers(2,4)) # Output: (4, 2)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the first tuple is larger than the second tuple\n    if len(test_tup1) > len(test_tup2):\n        # If first tuple is larger, swap the two tuples\n        return (max(test_tup1), min(test_tup1))\n    else:\n        # If second tuple is larger, swap the two tuples\n        return (max(test_tup2), min(test_tup2))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Use if-elif-else statements to compare the elements of the tuples\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if all elements are numbers\n    if all(isinstance(elem, (int, float)) for elem in test_tup1) and all(isinstance(elem, (int, float)) for elem in test_tup2):\n        # If both tuples are empty, return the first tuple\n        if not test_tup1 and not test_tup2:\n            return test_tup1\n        # If one tuple is empty and the other is not, return the other tuple\n        elif not test_tup1 or not test_tup2:\n            return test_tup2\n        # If both tuples are not empty, compare their elements\n        else:\n            max_elem1 = max(test_tup1)\n            max_elem2 = max(test_tup2)\n            if max_elem1 > max_elem2:\n                return test_tup1\n            elif max_elem1 < max_elem2:\n                return test_tup2\n            else:\n                return test_tup1\n    else:\n        # If one or both tuples contains non-numeric elements, return None\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the two tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # loop through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return test_tup1\n        elif test_tup1[i] < test_tup2[i]:\n            return test_tup2\n    # if no element in either tuple was greater, return the tuple with the highest sum\n    return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            if test_tup1[2] > test_tup2[2]:\n                return test_tup1\n            else:\n                return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    max_num = max(max_num1, max_num2)\n    return (max_num1, max_num2, max_num)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should be of the same length.\")\n\n    # sort both tuples based on the first element\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n\n    # compare the first elements of both sorted tuples\n    max_element = max(sorted_tup1[0], sorted_tup2[0])\n\n    # return the maximum element of both tuples\n    return max_element"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    count = 1\n    prime = True\n    for num in range(2, n+1):\n        if num % 2 == 0 or num % 3 == 0:\n            prime = False\n        elif num < 9 and num % 4 == 0:\n            prime = False\n        elif num % 5 == 0:\n            prime = False\n        elif num % 6 == 0:\n            prime = False\n        elif num % 7 == 0:\n            prime = False\n        elif num % 8 == 0:\n            prime = False\n        elif num % 9 == 0:\n            prime = False\n        else:\n            count += 1\n        if count == n:\n            return num\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    count = 0\n    while count < n:\n        if is_newman_prime(a):\n            count += 1\n        a += 1\n    return a\n\ndef is_newman_prime(a):\n    '''\n    Determine if a is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if a == 2 or a == 3:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    i = 5\n    while i * i <= a:\n        if a % i == 0 or a % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nresult = newman_prime(n)\nprint(\"The\", n, \"newman-shanks-williams prime number is:\", result)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_primes = [2]  # Starting with 2, the first newman prime is 2\n    next_newman_prime = 3  # The next newman prime will be 3\n    \n    while len(newman_primes) < n:\n        is_prime = True\n        for prime in newman_primes:\n            if prime * prime > next_newman_prime:\n                break\n            if next_newman_prime % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            newman_primes.append(next_newman_prime)\n        next_newman_prime += 2\n    \n    return newman_primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize the count of primes to 0\n    count = 0\n    # initialize the number of iterations for the loop\n    i = 1\n    # loop until we reach the nth prime\n    while count < n:\n        # check if the current number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the current number is prime, increment the count and print it\n        if is_prime:\n            count += 1\n            print(i)\n        # increment the iteration counter\n        i += 1\n    # if we reach here, there were not enough prime numbers to meet the requirement\n    else:\n        print(\"Not enough prime numbers found.\")"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    p = 2\n    while count < n:\n        if is_prime(p) and is_newman_prime(p):\n            count += 1\n        p += 1\n    return p\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_newman_prime(num):\n    '''\n    Helper function to check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    p = 2\n    while p <= num:\n        if num % p == 0:\n            count += 1\n            if count == 3:\n                return True\n        p += 1\n    return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        if is_prime(p):\n            count = 0\n            for j in range(2, p):\n                if p % j == 0:\n                    count += 1\n                    if count == n:\n                        return p\n            if count == n:\n                return p\n        p += 1\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of prime numbers found so far\n    count = 0\n    # Initialize a variable to keep track of the current number being checked\n    current_prime = 1\n    # Loop through each number from 2 to n\n    while count < n:\n        # Check if the current number is prime\n        if all(current_prime % i!= 0 for i in range(2, int(current_prime**0.5) + 1)):\n            count += 1\n        # Increase the current number for the next iteration\n        current_prime += 1\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return current_prime - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # List of prime numbers up to a certain limit\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Loop through the list of primes up to the nth prime number\n    count = 0\n    for prime in primes:\n        if prime ** n > 1000:\n            break\n        count += 1\n\n    # Return the nth prime number\n    return primes[count - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    p = 3\n    while True:\n        if is_prime(p):\n            if p == 3:\n                yield p\n            else:\n                yield from newman_prime_generator(p)\n            p += 2\n        else:\n            p += 2\n\ndef newman_prime_generator(p):\n    '''\n    Generate the nth newman-shanks-williams prime number.\n    '''\n    q = 5\n    while q <= p:\n        if is_prime(p - q):\n            yield p - q\n        q += 2\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a counter variable\n    count = 1\n\n    # Initialize a boolean variable to check if the number is prime or not\n    is_prime = True\n\n    # Iterate over all numbers starting from 2\n    for i in range(2, n+1):\n\n        # Check if the current number is a prime number\n        if is_prime:\n\n            # Check if the number is divisible by any number from 2 to its square root\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n\n        # If the current number is prime and satisfies the condition, increment the count\n        if is_prime:\n            count += 1\n\n        # Check if the count has reached the nth prime number\n        if count == n:\n            return i\n\n    # If the loop completes without finding the nth prime number, return None\n    return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        try:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result_tup.append('division by zero')\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Use zip to iterate over elements of each tuple and perform division operation element-wise\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check that the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n\n    # initialize the result tuple with zeros of the same length as the input tuples\n    result_tup = [0] * len(test_tup1)\n\n    # perform element-wise division of the input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] / test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError('Cannot divide by zero')\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero\")\n            return\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the first tuple is not equal to the number of elements in the second tuple\")\n        return None\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            result = test_tup1[i] / test_tup2[i]\n            result_list.append(result)\n        return result_list"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # initialize two empty lists to hold the first and second parts of the list\n    first_part = []\n    second_part = []\n\n    # loop through the input list and add elements to the first and second parts as required\n    for i in range(L):\n        first_part.append(list1[i])\n\n    for i in range(L, len(list1)):\n        second_part.append(list1[i])\n\n    # return the two parts of the list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts where the first part has L elements\n    list1_split = list1[:L]\n    # Split the list into two parts where the second part has all the remaining elements\n    list2_split = list1[L:]\n    # Return the resulting lists in a tuple\n    return (list1_split, list2_split)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"List length is less than the value of L. Please provide a larger value for L.\")\n        return None\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to hold the first part of the list\n    part1 = []\n    \n    # Iterate through the given list and add elements to the first part of the list until its length equals L\n    while len(part1) < L:\n        part1.append(list1.pop(0))\n    \n    # Create an empty list to hold the second part of the list\n    part2 = []\n    \n    # Iterate through the given list and add elements to the second part of the list until its length is greater than L\n    while len(part2) < len(list1):\n        part2.append(list1.pop(0))\n    \n    # Return a tuple containing the two parts of the list\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If the length of the list is less than L, return the entire list as the first part\n    if len(list1) < L:\n        return (list1, [])\n\n    # Split the list into two parts and return a tuple of the two parts\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: Length of list is greater than L\"\n    elif L == 0:\n        return \"Error: Length of list is zero\"\n    else:\n        split_point = L\n        new_list1 = list1[:split_point]\n        new_list2 = list1[split_point:]\n        return (new_list1, new_list2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 30.48\n    return round(dog_years, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age / 7)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + (h_age - 5)\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (DD/MM/YYYY): \")\n    dob = dob.split('/')\n    dob = [int(x) for x in dob]\n    today = [int(x) for x in str(date.today()).split('/')]\n    age = today[0] - dob[2]\n    dog_years = age * 7\n    if h_age is not None:\n        if h_age > dog_years:\n            print(\"You have\", h_age - dog_years, \"dog years left until you are\", h_age, \"years old.\")\n        else:\n            print(\"You have already met your goal of\", h_age, \"years old.\")\n    else:\n        print(\"You have\", dog_years, \"dog years.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age / 100)\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Check if step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n    \n    # Initialize the resulting list\n    result = []\n    \n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Slice the input list and add it to the result list\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            S_split.append(S[i:i+step])\n        i += 1\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # iterate over the input list\n    for i in range(0, len(S), step):\n        # create a new list with the current element and the remaining elements\n        new_list = [S[i],]\n        # append the new list to the result list\n        result.append(new_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if step > n:\n        return []\n    else:\n        return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        raise ValueError(\"Step must be positive\")\n    n = len(S)\n    num_splits = n // step\n    if n % step!= 0:\n        num_splits += 1\n    splits = []\n    for i in range(num_splits):\n        if i == num_splits - 1:\n            splits.append(S[i * step:])\n        else:\n            splits.append(S[i * step: (i+1) * step])\n    return splits"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # creating an empty list to store the resulting lists\n    result = []\n    # iterating over the input list\n    for i in range(0, len(S), step):\n        # creating an empty list for each resulting list\n        sublist = []\n        # iterating over the input list starting from the nth element\n        for j in range(i, min(i + step, len(S))):\n            sublist.append(S[j])\n        # appending the sublist to the result list\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the input list into chunks\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    # Flatten the resulting chunks and return them as a list\n    return [chunk for sublist in chunks for chunk in sublist]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the area of the cube\n    area = 6 * l * l\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = (l * l + 2 * l * l + l * l + l * l + l * l + l * l) * l\n    return area, lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2)*6\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the total area of the cube\n    total_area = 6 * (l ** 2)\n\n    # Calculate the lateral surface area of the cube\n    lateral_area = 2 * l\n\n    # Return the total lateral surface area of the cube\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the surface area of the cube using the formula:\n    # surface area = 6 * (l^2 + l^3)\n    surface_area = 6 * (l**2 + l**3)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = l**2\n    return surface_area\n\nprint(lateralsurface_cube(5))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    # initializing the sum to 0\n    sum = 0\n    # initializing the counter to 1\n    i = 1\n    # looping until i is greater than n\n    while i <= n:\n        # adding the square of i to the sum\n        sum += i*i\n        # incrementing i by 2\n        i += 2\n    # returning the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of the squares of odd natural numbers\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of each odd natural number to the sum of squares\n        sum_of_squares += i**2\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n\n        # calculate the square of the current natural number\n        square = i*i\n\n        # add the square to the sum variable\n        sum += square\n\n    # return the sum of squares of odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable\n    sum = 0\n    # loop through odd numbers starting from 1\n    for i in range(1, n+1, 2):\n        # calculate the square of the current odd number\n        square = i ** 2\n        # add the square to the sum variable\n        sum += square\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares of odd natural numbers\n    sum_of_squares = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the square of the current odd natural number\n        square_of_i = i**2\n        \n        # Add the square of the current odd natural number to the sum of squares of odd natural numbers\n        sum_of_squares += square_of_i\n        \n    # Return the sum of squares of odd natural numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num = 1\n    num_stars = 1\n\n    # loop until n stars are found\n    while num_stars <= n:\n        # print the current number of stars\n        print(\"*\" * num)\n\n        # increment the number of stars and reset the number\n        num_stars += 1\n        num = 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"*\\n**\\n***\"\n    else:\n        result = \"\"\n        for i in range(n-1):\n            result += \" \" * (n-i) + \"*\" + \"\\n\"\n        return result[:-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n): \n        # multiply the previous star number by 2\n        star_num *= 2\n    \n    # return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        # Print the space count required to reach the current number\n        print(\" \"*(n-i)) \n        # Print the current number\n        print(\"*\"*(i*2-1))\n        # Print a new line to move to the next line\n        print() "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the string of stars\n    stars = '*' * n\n    # Print the number of stars\n    print(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # find the ascii value of the character\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    total_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total_sum = 0\n    even_index = 0\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and even_index % 2 == 0:\n            total_sum += num\n            even_index += 1\n\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                print(f\"Even number at index {i}: {arr[i]}\")\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i ** 5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize the sum to 0\n    power_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the nth power of 2\n        power = i**5\n        # add the power to the sum if it's even\n        if power % 2 == 0:\n            power_sum += power\n    \n    # return the sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_pow_five = 0\n    for i in range(n):\n        if i ** 5 % 2 == 0:\n            sum_even_pow_five += i\n    return sum_even_pow_five\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += i**5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [2**i for i in range(n+1)]\n    even_powers = [x**5 for x in even_numbers]\n    even_power_sum = sum(even_powers)\n    return even_power_sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of the first\", n, \"even natural numbers raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # checking if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # creating a list to store the result\n    result_list = []\n    \n    # iterating over the tuples and subtracting the elements\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n        \n    # returning the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    # create a new tuple with the subtraction of the elements\n    subtraction_tup = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return subtraction_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must be of the same length.\")\n    # Loop through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return\n    \n    # Subtract the elements of test_tup1 by the elements of test_tup2 with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Creating a list to store the result\n    result_list = []\n    # Looping through both tuples\n    for i in range(len(test_tup1)):\n        # Subtracting the elements of the first tuple by the elements of the second tuple with the same index\n        result = test_tup1[i] - test_tup2[i]\n        # Adding the result to the list\n        result_list.append(result)\n    # Returning the list of results\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Use a list comprehension to iterate over the tuples and compare the elements\n    result = [(test_tup1[i] - test_tup2[i]) for i in range(len(test_tup1))]\n    # Return the list as a tuple\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_binomial_sum += math.comb(n, i)\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            total += coeff\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    return math.factorial(2*n-2) - math.factorial(n-1) - math.factorial(2*n-1)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n): \n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \n    The formula for even index binomial coefficient is given as:\n    \n    binomial(n,k) = n!/(k!* (n-k)!)\n    \n    where n is the number of terms and k is the index of the term.\n    \n    To get the sum of even index binomial coefficients, we can iterate over all values of k and add up the corresponding binomial coefficients.\n    \n    Here's the implementation:\n    '''\n    \n    even_sum = 0\n    \n    for i in range(n): \n        binomial = math.factorial(n) / math.factorial(i) * math.factorial(n - i)\n        if i % 2 == 0: \n            even_sum += binomial\n            \n    return even_sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = 0\n    for i in range(1, n+1):\n        binomial_coeff += math.comb(n, i, exact=True) * (2*i-1)\n    return binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+1):\n            sum += i * math.binom(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum and two variables to store even and odd index binomial coefficients\n    sum = 0\n    even_coeff = 1\n    odd_coeff = 1\n\n    # Calculate even index binomial coefficients\n    for i in range(0, n, 2):\n        even_coeff *= i\n        even_coeff //= i + 1\n        sum += even_coeff\n\n    # Calculate odd index binomial coefficients\n    for i in range(1, n, 2):\n        odd_coeff *= i\n        odd_coeff //= i - 1\n        sum += odd_coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    even_sum = 0\n\n    # Loop through the even indices\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient\n        even_coeff = math.comb(n, i)\n\n        # Check if the coefficient is even\n        if even_coeff % 2 == 0:\n            # Add it to the sum\n            even_sum += even_coeff\n\n    # Return the sum\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Function to calculate the even index binomial coefficient\n    def even_binomial_coeff(n, k):\n        if k > n // 2:\n            k = n - k\n        if k == 0:\n            return 1\n        elif k == n:\n            return 1\n        else:\n            return (2*k+1)//2 * even_binomial_coeff(n, k-1) + (2*k-1)//2 * even_binomial_coeff(n, k-2)\n\n    # Sum of even index binomial coefficients\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        sum_even_binomial += even_binomial_coeff(n, i-1)\n\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff_sum += math.comb(n, i-1)*i\n    return coeff_sum\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r ** 2 * h / 3\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Calculate the volume using the formula V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * (3.14159265359) * (r**2) * h\n\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h # Formula for volume of a cylinder\n    return volume # Return the volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder\n    V = (1/3) * 3.14159 * r**2 * h\n    \n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (1/3) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*(r**3)+(1/2)*pi*(r**2)*h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if elem == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            break\n        num_elements += 1\n    return num_elements"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            if i == len(test_tup)-1:\n                count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(n):\n        decagonal += 2 * (2 * i + 1)\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += i*2\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # convert the input number to a string\n    n = str(n)\n    # initialize the count variable\n    count = 0\n    # loop through each digit in the string\n    for digit in n:\n        # convert the digit to an integer\n        digit = int(digit)\n        # add the integer value of the digit to the count variable\n        count += digit * (2 * digit - 1)\n    # return the value of the count variable\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Calculate the sum of the squares of the first n natural numbers\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n\n    # Calculate the decagonal number using the sum of the squares of the first n natural numbers\n    decagonal_number = sum_squares / (n + 1)\n\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    if n == 3:\n        return 12\n    if n == 4:\n        return 22\n    if n == 5:\n        return 35\n\n    decagonal = 1\n    while n > 0:\n        decagonal += n\n        n -= 1\n\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    # Define the decagonal sequence starting from 1\n    decagonal_seq = [1]\n    \n    # Loop through the sequence and calculate the nth decagonal number\n    for i in range(1, n+1):\n        decagonal_seq.append(sum(decagonal_seq[-2:]))\n    \n    # Return the nth decagonal number\n    return decagonal_seq[-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first decagonal number\n    first_decagonal = 1\n    \n    # Define the decagonal number for each nth term\n    decagonal_numbers = [first_decagonal]\n    \n    # Loop through the remaining terms\n    for i in range(1, n):\n        # Find the current decagonal number\n        current_decagonal = (first_decagonal * (2 * i - 1)) / 2\n        \n        # Add the current decagonal number to the list of decagonal numbers\n        decagonal_numbers.append(current_decagonal)\n        \n        # Update the first decagonal number\n        first_decagonal = current_decagonal\n        \n    # Return the nth decagonal number\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize counter to 1\n    counter = 1\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through the range from 1 to n\n    for i in range(1, n+1):\n        # Add counter to sum\n        sum += counter\n        # Increment counter\n        counter += 1\n    # Return the sum\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist) and dlist[index]!= item:\n        index += 1\n    if index == len(dlist):\n        return (False, -1)\n    else:\n        return (True, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # initialize index and result variables\n    index = 0\n    result = False\n    \n    # loop through array\n    while index < len(dlist) and not result:\n        # check if element matches current item\n        if dlist[index] == item:\n            # return tuple containing result and index position\n            return (True, index)\n        # increment index\n        index += 1\n        \n    # return tuple containing result and index position\n    return (result, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set()\n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, else False.\n    '''\n\n    # Initialize an empty dictionary to store the elements of the list\n    unique_dict = {}\n\n    # Iterate through each element in the list\n    for element in test_list:\n\n        # If the element is already present in the dictionary, return False\n        if element in unique_dict:\n            return False\n\n        # Else, add the element to the dictionary\n        else:\n            unique_dict[element] = True\n\n    # If no element is found in the dictionary after iterating through all the elements, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = set()\n    for item in test_list:\n        if item in unique:\n            return False\n        unique.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements are unique, False otherwise.\n    '''\n\n    # Create a set of unique elements from the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # create an empty set to store the unique elements of the list\n    unique_set = set()\n\n    # iterate over the elements of the list\n    for element in test_list:\n        # check if the element is already in the set\n        if element in unique_set:\n            # if it is, return False to indicate that the list contains duplicates\n            return False\n        # if the element is not in the set, add it to the set\n        else:\n            unique_set.add(element)\n\n    # if the loop completes without returning False, it means all the elements of the list are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n\n    :param test_list: A list of any data type.\n    :return: True if all the elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have the same length\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists have different lengths.\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Args:\n        nums1 (list): List of integers\n        nums2 (list): List of integers\n\n    Returns:\n        list: A new list containing the element-wise difference between the two input lists.\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length.\")\n    \n    # Initialize an empty list to store the element-wise difference\n    result = []\n    \n    # Iterate through each element of the two lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists should have the same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Convert the input integer to a string\n    n = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each character in the string\n    for char in n:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Loop through each digit in the string\n    for digit in freq:\n        # If the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n\n    # If no digit has a frequency greater than or equal to itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Create a dictionary to store the frequency of digits\n    freq_dict = {}\n\n    # Iterate over each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # If the digit is not in the dictionary, initialize its count to 1\n        else:\n            freq_dict[digit] = 1\n\n    # Iterate over the frequency dictionary and check whether the frequency of each digit is less than or equal to itself\n    for digit, count in freq_dict.items():\n        if count > digit:\n            return False\n\n    # If all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # convert integer to string\n    str_n = str(n)\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # loop through each character in the string\n    for char in str_n:\n        # if character is already in dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if character is not in dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # loop through each digit in the string\n    for digit in str_n:\n        # if frequency of digit is greater than the digit itself, return False\n        if freq[digit] > int(digit):\n            return False\n    # if no False is returned, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Split the integer into its digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through the digits and update the frequency of each digit in the dictionary\n    for d in digits:\n        freq[d] = freq.get(d, 0) + 1\n\n    # Iterate through the digits and check whether the frequency of each digit is greater than or equal to the digit itself\n    for d in digits:\n        if freq[d] < d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and returns True if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n    for i in range(len(str(n))):\n        count[int(str(n)[i])] += 1\n    for i in count:\n        if i > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # Initialize a list of 10 zeros to store the frequency of each digit\n\n    # Loop through each digit in the input integer\n    for d in str(n):\n        freq[int(d)] += 1  # Increment the frequency of the current digit\n\n    # Loop through each digit in the frequency list and check if its frequency is greater than the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False  # If a digit's frequency is greater than the digit itself, return False\n\n    return True  # If all digits have a frequency less than or equal to the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit\n    frequency = {}\n\n    # Loop through each digit in the integer and update the frequency dictionary\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Loop through each digit in the integer and check if it's frequency is greater than the digit itself\n    for digit in str(n):\n        if frequency[digit] > int(digit):\n            return False\n\n    # If we make it through the loop without returning False, then the input is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # count the frequency of each digit in the number\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element,\n    and False otherwise.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(lst[i] == element for i in range(len(lst))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst)!= 0:\n        if lst[0] == element:\n            for i in range(1, len(lst)):\n                if lst[i]!= element:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == element for elem in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Some items in the list are not equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    if list[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a){2,3}b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'[ab]{2,3}a')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?:b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba(?:b{2,3})\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        raise ValueError('n should be greater than or equal to k')\n\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k-1:\n            current_sum -= a[i-k+1]\n        max_ending_here = max(max_ending_here + a[i], current_sum)\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')  # Initialize max sum to negative infinity\n    current_sum = 0  # Initialize current sum to 0\n\n    # Repeat the given array k times and find the sum of each subarray\n    for i in range(k):\n        current_sum += a[i]\n\n    # Find the maximum subarray sum\n    max_sum = current_sum\n\n    # Iterate through the rest of the array and find the maximum subarray sum\n    for i in range(k, n):\n        current_sum = current_sum - a[i - k] + a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    temp_sum = sum(a[:n])\n    \n    for i in range(k):\n        for j in range(i, n):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                temp_sum -= a[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sub-array sum and the sum of the first k elements of the array\n    max_sum = float('-inf')\n    sum_first_k = sum(a[:k])\n    \n    # Initialize the sum of the first element of the modified array\n    sum_modified = a[0]\n    \n    # Loop through the remaining elements of the array\n    for i in range(1, n):\n        # Add the next element to the sum of the modified array\n        sum_modified += a[i]\n        \n        # Subtract the first element from the sum of the first k elements of the array\n        sum_first_k -= a[0]\n        \n        # Add the first element to the sum of the first k elements of the array\n        sum_first_k += a[i]\n        \n        # Update the maximum sub-array sum if the new maximum is greater\n        max_sum = max(max_sum, sum_modified)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize two variables to store the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over all possible subarrays of the array and compute the sum of each subarray\n    for i in range(k):\n        for j in range(i, n):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n    \n    # Iterate over all possible subarrays of the array and compute the sum of each subarray with k repetitions\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(i+1, n):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum of the original array and the sum of the modified array\n    sum_original = sum(a)\n    sum_modified = sum(a*k)\n\n    # Initialize the maximum sum found so far and the current sum\n    max_sum = max(sum_original, sum_modified)\n    curr_sum = sum_original\n\n    # Iterate over the array and update the sum as we go\n    for i in range(n):\n        # Update the sum of the modified array\n        if i < n-k:\n            curr_sum -= a[i]\n        curr_sum += a[i]*k\n\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the input array\n    b = a.copy()\n    \n    # Repeat the array k times\n    for i in range(k):\n        b.extend(a)\n        \n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_index = 0\n    current_sum = 0\n    current_sum_index = 0\n    \n    # Iterate through the modified array\n    for i in range(n):\n        current_sum += b[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n        \n        # Check if the current sum is greater than the current maximum sum\n        if i < n-1 and b[i+1] > 0:\n            current_sum += b[i+1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i+1\n                \n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    \n    repeated_array = [a[0]] * k\n    for i in range(1, n):\n        repeated_array.append(a[i] + repeated_array[-1])\n    \n    result = max(repeated_array)\n    \n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Calculate the sum of the original array\n    original_sum = sum(a)\n\n    # Initialize the largest sum to be negative infinity\n    max_sum = float('-inf')\n\n    # Initialize the last element of the modified array to the maximum value\n    modified_array = [max(a)] * k\n\n    # Iterate over the modified array from the last to the second last element\n    for i in range(k - 2, -1, -1): \n        # Calculate the sum of the modified array\n        modified_sum = original_sum - (modified_array[i] + a[n - 1 - i])\n\n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, modified_sum)\n\n        # Update the modified array\n        modified_array[i] = a[n - 1 - i]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # get the sum of the given array\n    total_sum = sum(a)\n\n    # initialize the max sum and current sum\n    max_sum = total_sum\n    current_sum = 0\n\n    # iterate over the array and calculate the sum of the current sub-array\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(1, k):\n            current_sum += a[(i + j) % n]\n        # update the max sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        sum_of_squares += i**2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current even natural number to the sum variable\n        sum += i*i\n\n    # return the final sum variable\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n\n    total_sum = 0\n    for num in even_numbers:\n        total_sum += num**2\n\n    return total_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i*i\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        square = count * count\n        sum += square\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum_of_squares = 0\n    # Initialize the counter variable to zero\n    count = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current number to the sum variable\n        sum_of_squares += i*i\n        # Increment the counter variable\n        count += 1\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n+1, 2):\n        # Add the square of i to sum_of_squares\n        sum_of_squares += i*i\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length to 0\n    max_length = 0\n\n    # Loop through each element in the list of lists\n    for sublist in list1:\n        # Check if the length of the sublist is greater than the current maximum length\n        if len(sublist) > max_length:\n            # Update the maximum length\n            max_length = len(sublist)\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(item) for item in sublist]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max(len(sublist), len(max_lengths) and max_lengths[-1]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths) and lst!= []:\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths) and lst!= []:\n            max_lengths.append(len(lst))\n    \n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Find the length of the first list in the list of lists\n    length1 = len(list1[0])\n\n    # Initialize a variable to store the maximum length\n    max_length = length1\n\n    # Loop through the rest of the list of lists\n    for list in list1[1:]:\n        # Find the length of the current list\n        length = len(list)\n\n        # Update the maximum length if the current length is greater\n        if length > max_length:\n            max_length = length\n\n    # Return the list of maximum length\n    return [list1[0][:max_length]]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create an empty list to store the number of ways of painting each color\n    num_ways_color = [0] * k\n\n    # Create an empty list to store the number of ways of painting each combination of colors\n    num_ways_color_combination = [0] * (k * (k-1)) // 2\n\n    # Initialize the number of ways of painting for each color to 1\n    for i in range(k):\n        num_ways_color[i] = 1\n\n    # Initialize the number of ways of painting for each combination of colors to 1\n    for i in range(k * (k - 1) // 2):\n        num_ways_color_combination[i] = 1\n\n    # Iterate through the number of ways of painting for each color and add 2 to it for each adjacent post with the same color\n    for i in range(k):\n        for j in range(i, k):\n            num_ways_color[j] += num_ways_color[i]\n\n    # Iterate through the number of ways of painting for each combination of colors and add the number of ways of painting for each color to it\n    for i in range(k * (k - 1) // 2):\n        color1, color2 = divmod(i, k)\n        num_ways_color_combination[i] = num_ways_color[color1] * num_ways_color[color2]\n\n    # Return the total number of ways of painting of the fence\n    return num_ways_color_combination[n-2]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count of ways as 0\n    count = 0\n\n    # Create a boolean array to store the color of each post\n    color = [False] * n\n\n    # Initialize the first two posts as different colors\n    color[0] = True\n    color[1] = True\n\n    # Loop through all possible ways of painting the fence\n    for i in range(2, n):\n        # For each way, check if there are at most 2 adjacent posts with the same color\n        for j in range(i):\n            if color[j] and color[j+1]:\n                # If there are, increment the count of ways\n                count += 1\n\n        # Flip the color of the current post\n        color[i] = not color[i]\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Helper function to check if two colors are the same\n    def same_color(color1, color2):\n        return color1 == color2\n\n    # Helper function to find the number of ways to paint the fence\n    def count_ways(color, remaining_posts, ways):\n        if remaining_posts == 0:\n            return 1\n        if same_color(color, remaining_posts):\n            return count_ways(color, remaining_posts - 1, ways + 1)\n        else:\n            return count_ways(color, remaining_posts - 1, ways)\n\n    # Initialize the variables for the function\n    ways = 0\n\n    # Loop through each possible color\n    for i in range(k):\n        # Initialize the variables for the current color\n        color = i\n        remaining_posts = n\n\n        # Call the helper function to count the number of ways to paint the fence\n        ways += count_ways(color, remaining_posts, 0)\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a dictionary to store the count of ways for different numbers of adjacent posts\n    ways = {}\n    for i in range(2, n+1):\n        ways[i] = [0] * k\n        for j in range(k):\n            ways[i][j] = 1\n        for j in range(1, k-1):\n            ways[i][j] = ways[i-1][j-1] + ways[i-1][j+1]\n\n    # initialize the count of ways for 0 and 1 adjacent posts\n    ways[0][0] = 1\n    ways[1][0] = ways[1][1] = 1\n\n    # count the number of ways for all the other adjacent posts\n    for i in range(2, n+1):\n        for j in range(k):\n            ways[i][j] = ways[i-1][j-1] + ways[i-1][j] + ways[i-1][j+1] + ways[i][j-1] + ways[i][j+1] + ways[i-1][j] + ways[i-1][j] + ways[i][j] + ways[i-1][j] + ways[i][j] + ways[i][j]\n\n    # return the final count of ways\n    return ways[n][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: If there are 2 adjacent posts with the same color, there is only one way to paint the fence.\n    if k == 2:\n        return n - 1\n    # Base case: If there are no more colors, there is only one way to paint the fence.\n    if k == 0:\n        return 1\n    # Recursive case: If there are k - 1 colors remaining, there are n-1 ways to paint the fence with k colors remaining.\n    # We can either paint the first or last post with the same color or paint a different color.\n    # The total number of ways to paint the fence is the sum of the two.\n    return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an array to store the count of ways\n    count = [0] * (k + 1)\n    \n    # Initialize the count of ways to 1 for k=0\n    count[0] = 1\n    \n    # Fill the count array using dynamic programming approach\n    for i in range(1, n + 1):\n        for j in range(k):\n            # If the current color is different from the previous color,\n            # then we can paint the current post with the current color\n            if i - 1 >= 0 and j - 1 >= 0 and colors[i - 1]!= colors[j - 1]:\n                count[j + 1] += count[j]\n    \n    # Return the final value in the count array\n    return count[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if k == 0:\n        return 0\n    if k == 1:\n        return n\n    # recursive case\n    # first method\n    # return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    # second method\n    # return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k-1)\n    # third method\n    return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if color[i-1]!= color[i-2]:\n                dp[i][j] = dp[i-1][j]\n            if i > 0 and j > 0 and dp[i-1][j] > 0 and color[i-1]!= color[i-2]:\n                dp[i][j] += dp[i-1][j-1]\n    return dp[n][k]\n\nThe time complexity of this algorithm is O(nk), where n is the number of posts and k is the number of colors. The space complexity is also O(nk)."
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # if k is less than 2, there can be no ways\n    if k < 2:\n        return 0\n    \n    # if n is less than or equal to 2, there can be only 1 way\n    if n <= 2:\n        return 1\n    \n    # if n is 3 or more, there can be multiple ways\n    \n    # number of ways to paint the fence with n-1 posts and k colors\n    ways1 = count_no_of_ways(n-1, k)\n    \n    # number of ways to paint the fence with n-2 posts and k-1 colors\n    ways2 = count_no_of_ways(n-2, k-1)\n    \n    # number of ways to paint the fence with n-2 posts and k colors\n    ways3 = count_no_of_ways(n-2, k)\n    \n    # sum up the three ways and return the result\n    return ways1 + ways2 + ways3"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # initialize an array to store the number of ways of painting the fence\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    \n    # iterate over the possible colors\n    for color in range(1, k + 1):\n        # iterate over the possible fence length\n        for length in range(1, n + 1):\n            # update the number of ways if the fence has the current color and the length is less than or equal to n\n            ways[length] += ways[length - 1] * (k - color + 1) * (color + 1)\n    \n    return ways[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # first, find the remainder of n divided by m\n    remainder = n % m\n\n    # if the remainder is zero, the quotient is equal to the quotient of n divided by m\n    if remainder == 0:\n        quotient = n // m\n    else:\n        # otherwise, the quotient is the integer part of the quotient of n divided by m plus one\n        quotient = (n // m) + 1\n\n    # return the result as an integer\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient\n    q = n // m\n\n    # return the quotient\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two numbers as inputs and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division\n    if quotient * m < n:  # if the quotient is less than n, round up to the nearest integer\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    This function takes two integer arguments, n and m, and returns the quotient of n divided by m.\n    It does this by first checking if m is equal to 0. If it is, then the quotient is undefined. \n    If m is not equal to 0, then we can use the following formula to find the quotient:\n    q = floor((n/m))\n    We then return the quotient as an integer.\n    '''\n    if m == 0:\n        print(\"Quotient undefined.\")\n        return None\n    else:\n        q = int(n/m)\n        print(\"Quotient:\", q)\n        return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    This function calculates the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if n % m == 0:\n        print(\"The quotient is:\", quotient)\n    else:\n        print(\"The quotient is:\", quotient + 1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate the quotient\n    quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Calculate the semi-perimeter and square of the semi-perimeter\n    s = (w+h)/2\n    s_squared = math.sqrt(s**2)\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s*(s-w)*(s-h))\n    \n    # Calculate the third side of the triangle\n    third_side = math.sqrt(w**2 + area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = (w * h) / 2\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the law of cosines to calculate the cosine of the opposite angle\n    cos_opposite_angle = (w**2 + h**2 - w*h)**0.5\n    # Using the law of cosines to calculate the cosine of the third angle\n    cos_third_angle = (w**2 + h**2 + w*h)**0.5\n    # Using the law of sines to calculate the sine of the third angle\n    sin_third_angle = math.sqrt(w**2 + h**2 - w*h) / cos_third_angle\n    # Using the law of cosines to calculate the cosine of the other two angles\n    cos_other_two_angles = (w**2 + h**2 - w*h - sin_third_angle**2)**0.5\n    # Using the law of sines to calculate the sine of the other two angles\n    sin_other_two_angles = math.sqrt(w**2 + h**2 - w*h + sin_third_angle**2) / cos_other_two_angles\n    # Using the law of cosines to calculate the cosine of the sum of the other two angles\n    cos_sum_other_angles = (w**2 + h**2 + w*h - sin_third_angle**2)**0.5\n    # Using the law of sines to calculate the sine of the sum of the other two angles\n    sin_sum_other_angles = math.sqrt(w**2 + h**2 + w*h + sin_third_angle**2) / cos_sum_other_angles\n    # Calculating the length of the third side\n    third_side_length = (sin_third_angle * cos_other_two_angles + sin_other_two_angles) / cos_third_angle\n    # Returning the value of the third side\n    return third_side_length"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = math.sqrt(w**2 + h**2)\n    b = 2 * w\n    c = math.sqrt(a**2 - b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use the formula for the semi-perimeter of a right angled triangle\n    s = (w + h) / 2\n    \n    # Use the formula for the semi-perimeter of a right triangle\n    a = math.sqrt(s**2 - h**2)\n    \n    # Use the formula for the area of a right triangle\n    area = math.sqrt(s*(s-h)*(s-w))\n    \n    # Use the formula for the square root of the area to find the length of the third side\n    third_side = math.sqrt(area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Calculate the length of the third side using Heron's formula\n    s = (w**2 + h**2)**(1/2)\n    \n    # Return the length of the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    s = math.sin(math.degrees(math.acos(w/c)))\n    third_side = c * s\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]  # assume the first element is the maximum\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max_val to the first value in the list\n    max_val = listval[0]\n\n    # Loop through the remaining values in the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(lst):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize variables to keep track of the maximum value and its position\n    max_val = None\n    max_index = None\n    \n    # Loop through the list and compare each value to the current maximum\n    for index, val in enumerate(listval):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_index = index\n    \n    # Return the value and its index of the maximum value\n    return max_val, max_index"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables for counting inversions\n    inv_count = 0\n    n = len(arr)\n\n    # Traverse the array from both ends and count inversions\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += (j-i)\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count the inversions\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            inv_count += n - i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes in an array and returns the count of inversions in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Traverse the array and count inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # If the elements are in the wrong order, increment the count\n            if arr[i] > arr[j]:\n                count += 1\n    \n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Base case\n    if n <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Count inversions in left and right halves separately\n    inv_left = get_Inv_Count(left)\n    inv_right = get_Inv_Count(right)\n    \n    # Count inversions in the two sorted halves\n    inv_sorted = 0\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            j += 1\n            inv_sorted += len(left) - i\n    \n    # Return the total number of inversions in the array\n    return inv_left + inv_right + inv_sorted"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Check if the array has less than 2 elements\n    if len(arr) < 2: \n        return 0\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Recursively count the inversions in each half\n    inv_left = get_Inv_Count(left)\n    inv_right = get_Inv_Count(right)\n    \n    # Count the inversions between the two halves\n    inv_total = 0\n    i = j = k = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            inv_total += len(left) - i\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n    \n    # Add any remaining elements in the left or right half\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n    \n    # Combine the two inversions count with the ones from the original array\n    return inv_left + inv_right + inv_total"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr[i]) - len(sorted_arr[j]) + 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # base case: if array has only one element, it is already sorted\n    if n == 1:\n        return 0\n\n    # divide the array into two halves\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n\n    # merge two sorted halves and count inversions\n    left = 0\n    right = mid\n    inv_count = left_inv + right_inv\n    sorted_arr = [0] * n\n    i = 0\n    j = mid\n    while i < mid and j < n:\n        if arr[i] <= arr[j]:\n            sorted_arr[i + j] = arr[i]\n            i += 1\n        else:\n            sorted_arr[i + j] = arr[j]\n            inv_count += mid - i\n            j += 1\n    while i < mid:\n        sorted_arr[i + j] = arr[i]\n        i += 1\n    while j < n:\n        sorted_arr[i + j] = arr[j]\n        j += 1\n\n    # copy the sorted array back to the original array\n    for i in range(n):\n        arr[i] = sorted_arr[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # step 1: sort the array in descending order\n    arr.sort(reverse=True)\n\n    # step 2: count inversions\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Base case: if the list contains only one element, return it\n    if len(list1) == 1:\n        return list1\n\n    # Recursive case: otherwise, return the first element followed by all the flattened elements of the rest of the list\n    else:\n        return [list1[0]] + flatten_list(list1[1:])"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, freq in stdata:\n        # Increment the frequency of each item\n        freq += 1\n        \n        # Check if the current frequency is greater than the maximum frequency\n        if freq > max(freq.values()):\n            max_freq = freq\n    \n    # Return the maximum aggregate\n    return max(max_freq.keys(), key=lambda x: (-max_freq[x], x))"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n\n    Parameters:\n    stdata (list): list of tuples containing the aggregate and the number of shares purchased.\n\n    Returns:\n    int: the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the aggregate and its count\n    dct = defaultdict(int)\n\n    # loop through the list of tuples\n    for agg, shares in stdata:\n        # update the count of the aggregate in the defaultdict\n        dct[agg] += shares\n\n    # find the maximum aggregate using the max() function\n    max_agg = max(dct, key=dct.get)\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each bank\n    max_aggs = defaultdict(int)\n    for name, balance in stdata:\n        # calculate the maximum aggregate for the bank\n        max_aggs[name] = max(balance, max_aggs[name])\n    # get the maximum aggregate from the defaultdict\n    max_agg = max(max_aggs.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate\n    value from the list of tuples.\n    '''\n\n    # create a defaultdict to store the aggregate and count for each transaction\n    agg_count = defaultdict(int)\n\n    # loop through each transaction in the list\n    for t in stdata:\n        # extract the aggregate and count from each transaction tuple\n        agg, count = t\n\n        # update the aggregate count for the current transaction tuple\n        agg_count[agg] += count\n\n    # extract the maximum aggregate from the aggregate count dictionary\n    max_agg = max(agg_count, key=agg_count.get)\n\n    # return the maximum aggregate value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of each item in the cart\n    item_sum = defaultdict(int)\n\n    # Iterate through the list of tuples and update the item_sum dictionary\n    for item, price in stdata:\n        item_sum[item] += price\n\n    # Iterate through the item_sum dictionary to find the maximum aggregate\n    max_agg = 0\n    for price in item_sum.values():\n        if price > max_agg:\n            max_agg = price\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_map = defaultdict(int)\n    for item in stdata:\n        agg_map[item[0]] += item[1]\n    \n    max_agg = max(agg_map.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Loop through the list of tuples and calculate the maximum aggregate\n    for item in stdata:\n        amount, customer, product = item\n        max_agg[customer] = max(max_agg[customer], amount)\n\n    # Loop through the dictionary and find the customer with the maximum aggregate\n    max_customer = None\n    max_amount = 0\n    for customer, amount in max_agg.items():\n        if amount > max_amount:\n            max_amount = amount\n            max_customer = customer\n\n    # Return the maximum aggregate for the maximum customer\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_count = defaultdict(int)\n    for item in stdata:\n        if item[1] == \"buy\":\n            max_count[item[0]] += 1\n            if max_count[item[0]] > 1:\n                max_sum -= item[2]\n        elif item[1] == \"sell\":\n            max_count[item[0]] -= 1\n            if max_count[item[0]] < 0:\n                max_sum -= item[2]\n        else:\n            raise ValueError(\"Invalid transaction type\")\n        if max_sum > max_count[item[0]]:\n            max_sum = max_count[item[0]]\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the number of times each item appears\n    freq = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, count in stdata:\n        # update the frequency count for the item\n        freq[item] += count\n\n    # initialize the maximum aggregate to negative infinity\n    max_agg = float('-inf')\n\n    # iterate through the dictionary and update the maximum aggregate if a higher count is found\n    for count in freq.values():\n        max_agg = max(max_agg, count)\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a defaultdict to store the maximum aggregate for each day\n    max_aggs = defaultdict(int)\n    \n    # iterate over the list of tuples\n    for day, value in stdata:\n        # update the maximum aggregate for the current day\n        max_aggs[day] = max(value, max_aggs[day])\n    \n    # return the maximum aggregate for each day\n    return dict(max_aggs)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    # generate all possible binary sequences of length 2n\n    seqs = [bin(i)[2:].zfill(2*n) for i in range(2**n)]\n    # count the number of sequences that satisfy the condition\n    count = 0\n    for seq in seqs:\n        if sum(seq[:n]) == sum(seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n: int\n        The length of the binary sequence to count.\n\n    Returns:\n    int\n        The count of binary sequences.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    first_sum = last_sum = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits and the last n bits of the sequence\n        seq = format(i, f'0{n}b')\n        first = seq[:n]\n        last = seq[n:]\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if int(first, 2) == int(last, 2):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:]\n        if (sum(int(bit) for bit in seq[:n]) == sum(int(bit) for bit in seq[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        binary = bin(i)[2:].zfill(n)\n        sum_first = sum([int(bit) for bit in binary[:n]])\n        sum_last = sum([int(bit) for bit in binary[n:]])\n        if sum_first == sum_last:\n            count += 1\n    return count\n\nn = 4\nprint(count_binary_seq(n)) # Output: 256"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    seq = []\n    last_seq = []\n\n    # Generate first sequence\n    seq.append(0)\n    seq.append(0)\n    for i in range(1, 2*n):\n        if seq[-1] == 1:\n            seq.append(0)\n        else:\n            seq.append(1)\n\n    # Generate last sequence\n    last_seq.append(0)\n    last_seq.append(0)\n    for i in range(1, 2*n):\n        if seq[-1] == 0:\n            last_seq.append(0)\n        else:\n            last_seq.append(1)\n\n    # Check if sum of first and last sequences is same\n    if sum(seq[:n]) == sum(last_seq[-n:]):\n        count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in num) == sum(int(bit) for bit in num[::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)+1):\n        if sum(i>>k&1 for k in range(n)) == sum(i>>k&1 for k in range(n, n+n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum_i = sum([int(j) for j in bin(i)[2:]])\n        if sum_i == sum(bin(i)[2:]:bin(i)[2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        if sum(int(x) for x in bin(i)[2:].zfill(n)) == sum(int(x) for x in bin(i)[2:].zfill(n))[::-1]: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count and sum variables\n    count = 0\n    first_sum = 0\n    last_sum = 0\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first_bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits\n        last_bits = bin(i)[-n:].zfill(n)\n        # Add the first and last sums and check if they are equal\n        if int(first_bits, 2) + int(last_bits, 2) == 2**(2*n) - 1:\n            # Increment the count\n            count += 1\n            # Add the first and last sums to the respective sum variables\n            first_sum += int(first_bits, 2)\n            last_sum += int(last_bits, 2)\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        if current_depth > depth:\n            depth = current_depth\n        if current_depth > 1:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n                else:\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n        if current_depth > max_depth:\n            max_depth = current_depth\n        current_depth = 0\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value, depth + 1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the required number of rotations\n    required_rotations = (index - 1) // n + 1\n\n    # Calculate the difference between the required number of rotations and the actual number of rotations\n    diff = required_rotations - rotations\n\n    # Calculate the element to be found\n    element = arr[index - diff * n]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a list of rotations, and an index as input.\n    It then finds the element at the given index after rotations.\n    \"\"\"\n    # Calculate the total number of rotations\n    total_rotations = sum(ranges)\n    \n    # Find the element at the given index after rotations\n    element = arr[(index + total_rotations) % len(arr)]\n    \n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list of int): Array of integers to be rotated.\n    ranges (list of tuple): List of tuples containing the range of rotations and their corresponding elements.\n    rotations (int): Number of rotations required to find the element.\n    index (int): Index of the element to be found.\n\n    Returns:\n    int: The element at the specified index after rotations.\n\n    \"\"\"\n    # Initialize the element to be found\n    element = None\n\n    # Iterate over the ranges of rotations and their corresponding elements\n    for i, range_ in enumerate(ranges):\n        # If the current index is within the range of rotations, update the element to be found\n        if index >= range_[0] and index <= range_[1]:\n            element = arr[range_[2]]\n            break\n\n    # If no element is found, return None\n    if element is None:\n        return None\n\n    # If the element is at the starting index, return it\n    if index == range_[0]:\n        return element\n\n    # If the element is at the ending index, return it\n    if index == range_[1]:\n        return element\n\n    # If the element is in the middle of the range, perform rotations to find it\n    else:\n        # Initialize the current index and the resultant index\n        current_index = index\n        resultant_index = index\n\n        # Perform the required number of rotations\n        for _ in range(rotations):\n            # Calculate the next rotation index\n            next_index = (current_index + 1) % len(arr)\n\n            # Swap the elements at the current and next indices\n            arr[current_index], arr[next_index] = arr[next_index], arr[current_index]\n\n            # Update the current and resultant indices\n            current_index = next_index\n            resultant_index = (resultant_index + 1) % len(arr)\n\n        # Return the element at the resultant index\n        return arr[resultant_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, and rotations as inputs and returns the element at a given index after rotations.\n    '''\n    arr_copy = arr.copy()\n    # Perform rotations\n    for i in range(rotations):\n        if i % 2 == 0:\n            for j in range(len(ranges)):\n                arr_copy[j] = arr_copy[j] + ranges[j]\n        else:\n            for j in range(len(ranges)):\n                arr_copy[j] = arr_copy[j] - ranges[j]\n    # Find the element at the given index after rotations\n    element = arr_copy[index]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations, and an index as input.\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n    # Initialize the current element as the first element of the array\n    current_element = arr[0]\n\n    # Iterate over the remaining rotations\n    for rotation in rotations:\n        # Calculate the new index after rotation\n        new_index = (index - rotation) % len(arr)\n\n        # If the new index is negative, add the length of the array to it\n        if new_index < 0:\n            new_index += len(arr)\n\n        # If the new index is equal to the index, return the current element\n        if new_index == index:\n            return current_element\n\n        # Otherwise, return the element at the new index\n        current_element = arr[new_index]\n\n    # If the element is not found after all rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    if index >= len(arr):\n        print(\"Index out of range\")\n        return\n    \n    if rotations == 0:\n        print(\"Element at index\", index, \"is\", arr[index])\n        return\n\n    if index == 0:\n        find_Element(arr, ranges, rotations-1, index+1)\n        return\n    \n    # Case 1: If the current element is not in the range of the previous elements\n    if arr[index] not in ranges[index-1]:\n        find_Element(arr, ranges, rotations, index-1)\n        return\n    \n    # Case 2: If the current element is in the range of the previous elements\n    else:\n        find_Element(arr, ranges, rotations-1, index-1)\n        return\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments: the array, the range of rotations, and the index of the element to be found.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize variables for the current rotation and rotation count\n    current_rotation = 0\n    rotation_count = 0\n\n    # Iterate through the array\n    while current_rotation < rotations:\n        # If the current rotation is not equal to the desired rotation, increment the rotation count and move on to the next rotation\n        if current_rotation!= index:\n            rotation_count += 1\n            current_rotation += 1\n            continue\n\n        # If the current rotation is equal to the desired rotation, return the element at the specified index\n        return arr[index]\n\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in three parameters:\n    - arr: the original array\n    - ranges: a list of tuples (start, end) representing the ranges of the original array\n    - rotations: the number of rotations to perform\n    - index: the index at which the element needs to be found\n\n    The function returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Get the start and end indices of the given index\n    start_index = ranges[index][0]\n    end_index = ranges[index][1]\n\n    # Find the index after rotations\n    new_index = (start_index + end_index) % len(arr)\n\n    # Get the element at the new index\n    element = arr[new_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n    # Find the element at the given index before the rotations\n    element_before_rotations = arr[index]\n    for i in range(rotations):\n        # Find the new element after the i-th rotation\n        # by finding the element at the rotated position\n        # modulo the length of the array\n        new_element = (i * (n - 1) + index) % n\n        # Replace the element at the rotated position with the new element\n        arr[index] = arr[new_element]\n        # Update the index to the new position\n        index = new_element\n    return element_before_rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    count = 0\n    for i in range(index):\n        count += ranges[i]\n        arr.insert(i, arr.pop(arr.index(arr[i])))\n        count += rotations[i]\n\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-zA-Z]*')\n    result = []\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            result.append(word)\n            break\n    if len(result) == 2:\n        return result\n    else:\n        return \"No words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Use a regular expression to find words starting with letter 'p'\n    pattern = re.compile(r'^p\\w+$')\n    # Use the findall() method to find all matches of the pattern in the list of words\n    matches = re.findall(pattern, words)\n    # Check if there are exactly two matches\n    if len(matches) == 2:\n        # Return the two matches\n        return matches\n    else:\n        # If there are not exactly two matches, return None\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return \"No two words starting with 'p' found in the given list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if re.match(r'^p\\w*$', word)]\n    return p_words[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p.*', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with 'p' were found in the given list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-z]*'\n    p_words = re.findall(pattern, words)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w+\\b')\n    matches = pattern.findall(words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    elif len(matches) == 1:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bP\\w+',''.join(words))\n    return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return float('-inf')\n\n    max_sum = float('-inf')\n    for i in range(index, n):\n        if i == k:\n            continue\n        subseq_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                subseq_sum += a[j]\n                if subseq_sum > max_sum:\n                    max_sum = subseq_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if index == 0:\n        return a[0]\n    max_sum = max(max_sum_increasing_subseq(a, n, index-1, k), a[index])\n    return max(max_sum, max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # base case: if k is already included in the subsequence, the maximum sum is already zero\n    if index == k:\n        return 0\n\n    # base case: if ith index is already greater than or equal to k, the maximum sum is already zero\n    if index >= k:\n        return 0\n\n    # recursive case: compute maximum sum of increasing subsequence from prefix until ith index and excluding kth element\n    left = max_sum_increasing_subseq(a, n, index, k-1)\n\n    # recursive case: compute maximum sum of increasing subsequence from prefix until ith index and including kth element\n    right = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n\n    # return maximum of the two subproblems\n    return max(left, right)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k <= 0 or index > k:\n        return 0\n\n    if k == index:\n        return a[k]\n\n    if index == 0:\n        return a[0] + max_sum_increasing_subseq(a, n, index, k-1)\n\n    if a[index] <= a[k-1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Here's the implementation of the above algorithm in Python:<|im_sep|>"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum with the first element and set its index to 0\n    max_sum = a[0]\n    max_index = 0\n    \n    # Initialize the current sum with the first element and set its index to 0\n    current_sum = a[0]\n    current_index = 0\n    \n    # Iterate from the index 1 to the index of the kth element\n    for i in range(1, k+1):\n        # Calculate the sum of the current prefix\n        current_sum += a[i]\n        \n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and its index\n            max_sum = current_sum\n            max_index = i\n        \n        # If the current sum is not greater than the maximum sum, check if it is greater than the current sum\n        elif current_sum < max_sum and a[i] > a[max_index]:\n            # Update the maximum sum and its index\n            max_sum = current_sum\n            max_index = i\n        \n        # Update the current sum and its index\n        current_sum = a[i]\n        current_index = i\n    \n    # Calculate the maximum sum of the increasing subsequence from prefix until ith index\n    max_sum_of_subseq = max_sum\n    \n    # Calculate the maximum sum of the increasing subsequence from prefix until the kth index\n    max_sum_of_subseq_with_k = max_sum\n    \n    # Iterate from the index ith index to the last index\n    for i in range(index, n-1):\n        # Calculate the sum of the current prefix\n        current_sum = max(a[i], a[i]+a[i+1])\n        \n        # Check if the current sum is greater than the maximum sum of the increasing subsequence from prefix until the kth index\n        if current_sum > max_sum_of_subseq_with_k:\n            # Update the maximum sum of the increasing subsequence from prefix until the kth index\n            max_sum_of_subseq_with_k = current_sum\n        \n        # Update the maximum sum of the increasing subsequence from prefix until ith index\n        max_sum_of_subseq = max(max_sum_of_subseq, current_sum)\n    \n    return max_sum_of_subseq, max_sum_of_subseq_with_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables to store the maximum sum and current sum\n    max_sum = float('-inf')\n    cur_sum = 0\n    \n    # Initialize the current subsequence with the first element\n    current_subseq = [a[index]]\n    \n    # Iterate through the remaining elements of the array\n    for i in range(index+1, n):\n        # If the current element is greater than the kth element and the current element is greater than or equal to the current last element, add it to the current subsequence and update the current sum\n        if a[i] > k and a[i] >= current_subseq[-1]:\n            current_subseq.append(a[i])\n            cur_sum += a[i]\n        # If the current element is less than the kth element or the current element is less than the current last element, skip it and move on to the next element\n        else:\n            continue\n        \n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables for maximum sum and subsequence\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Traverse the array from i to n-1 and check if the current element is less than or equal to k\n    for i in range(index, n):\n        if a[i] <= k:\n            # If it is, then include it in the subsequence and calculate the sum of the subsequence\n            subseq = [a[i]]\n            for j in range(i+1, n):\n                if a[j] > k:\n                    break\n                subseq.append(a[j])\n            subseq_sum = sum(subseq)\n\n            # If the sum of the subsequence is greater than the maximum sum, then update the variables accordingly\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n                max_subseq = subseq\n\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # If k is not greater than index, return 0\n    if k <= index:\n        return 0\n\n    # Initialize the maximum sum of increasing subsequence till now as 0\n    max_sum = 0\n\n    # Initialize an array to store the sum of increasing subsequence from prefix until ith index\n    sums = [0] * (n + 1)\n\n    # Traverse the array from 1 to n\n    for i in range(1, n + 1):\n\n        # If a[i] is greater than a[index], update the sum of increasing subsequence from prefix until ith index\n        if a[i] > a[index]:\n            sums[i] = sums[i - 1] + a[i]\n\n            # If the sum of increasing subsequence from prefix until ith index is greater than the maximum sum till now, update the maximum sum\n            if sums[i] > max_sum:\n                max_sum = sums[i]\n\n    # Initialize the maximum sum of increasing subsequence till now excluding the kth element which is after i\n    max_sum_excluding_k = 0\n\n    # Traverse the array from 1 to k (since kth element is after i)\n    for i in range(1, k + 1):\n\n        # If the sum of increasing subsequence from prefix until kth index is greater than the maximum sum till now excluding kth element, update the maximum sum excluding kth element\n        if sums[k - i] > max_sum_excluding_k:\n            max_sum_excluding_k = sums[k - i]\n\n    # Return the maximum sum of increasing subsequence from prefix until kth index including the kth element\n    return max_sum + max_sum_excluding_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    dp = [0] * n\n    \n    if k > index:\n        dp[index] = max(a[index], a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n        return dp[index]\n    else:\n        dp[index] = a[index]\n        for i in range(index+1, k+1):\n            dp[index] = max(dp[index], a[index] + max_sum_increasing_subseq(a, n, i, k))\n            \n        return dp[index]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new tuple to store the colon\n    colon = ()\n    \n    # Iterate through the first m elements of the tuple\n    for i in range(m):\n        # Get the i-th element of the tuple\n        el = tuplex[i]\n        \n        # Check if the element is a tuple\n        if isinstance(el,tuple):\n            # Recursively call the function with the sub-tuple and the remaining m-m elements\n            colon = colon + colon_tuplex(el,m-i-1,n)\n        else:\n            # Append the element to the colon\n            colon = colon + (el,)\n    \n    # Check if the remaining n elements are a tuple\n    if isinstance(tuplex[m:],tuple):\n        # Recursively call the function with the sub-tuple and the remaining n-m elements\n        colon = colon + colon_tuplex(tuplex[m:],m,n-m)\n    \n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes in a tuple of length m and n, where m and n are\n    positive integers, and returns a new tuple of length m x n where the\n    i-th sub-tuple contains the elements of the i-th tuple of tuplex.\n    '''\n\n    # Check if the tuple is of the correct length\n    if len(tuplex)!= m:\n        raise ValueError(\"The input tuple must have a length of m.\")\n\n    # Create a new empty tuple of length m x n\n    colon = ()\n\n    # Loop over the rows and columns of the colon\n    for i in range(m):\n        for j in range(n):\n            # If the current index is in the range of the input tuple,\n            # add the corresponding element to the colon\n            if i < len(tuplex) and j < len(tuplex[i]):\n                colon += (tuplex[i][j],)\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i*n+j])\n        col.append(tuple(row))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n    for i in range(n):\n        new_tuplex = new_tuplex[:-1]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): The tuple to get a colon from.\n    m (int): The number of columns to use in the colon.\n    n (int): The number of rows to use in the colon.\n\n    Returns:\n    list: A list containing the rows of the colon.\n    '''\n\n    # Create a deep copy of the tuple.\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple.\n    num_elements = len(tuplex)\n\n    # Calculate the number of columns and rows to use.\n    num_cols = min(m, num_elements)\n    num_rows = min(n, num_elements)\n\n    # Create the colon.\n    colon = []\n\n    # Loop through each row.\n    for i in range(num_rows):\n        # Create a new row.\n        row = []\n\n        # Loop through each column.\n        for j in range(num_cols):\n            # Get the index of the element to use.\n            index = j + i * num_cols\n\n            # If there are not enough elements in the tuple.\n            if index >= num_elements:\n                # Add a null element.\n                row.append(None)\n            else:\n                # Add the element.\n                row.append(tuplex_copy[index])\n\n        # Add the row to the colon.\n        colon.append(row)\n\n    # Return the colon.\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex: A tuple with m elements.\n        m: The number of elements to include in the colon.\n        n: The number of times to repeat the colon.\n\n    Returns:\n        A list containing the m elements of the tuple, repeated n times.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    if m > len(tuplex):\n        raise ValueError(\"m must be no greater than the length of the tuple.\")\n    return [tuplex[i] for i in range(m)]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_list = []\n    for i in range(m):\n        colon_list.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # split the tuple into lists based on the number of elements\n    new_tuplex = [new_tuplex[i:i+m] for i in range(0, len(new_tuplex), m)]\n    # create a list of lists where each element is a tuple of length n\n    colon = []\n    for i in range(len(new_tuplex)):\n        colon.append(tuple(new_tuplex[i][:n]))\n    # concatenate the tuples in the colon\n    colon_tup = tuple(tuple(col) for col in zip(*colon))\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n\n    # Slice the tuple into columns\n    colon = tuple([new_tuplex[i:i+n] for i in range(0, len(new_tuplex), n)])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m:n+1] = []\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N % 2!= 0:\n        print(\"Error: N must be an even number.\")\n        return\n    \n    largest_products = []\n    for i in range(N // 2):\n        largest_products.append(max(nums1[i] * nums2[i], nums1[N - 1 - i] * nums2[N - 1 - i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max1, max2 = 0, 0\n    for i in range(N):\n        max1 = max(max1, nums1[i])\n        max2 = max(max2, nums2[i])\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n    print(\"The largest\", N, \"products are:\", max1, max2, product1, product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the lists have equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have unequal lengths.\")\n        return\n    \n    # Initialize the maximum products and indexes\n    max_products = []\n    max_indexes = []\n    for i in range(N):\n        max_products.append(float('-inf'))\n        max_indexes.append(-1)\n    \n    # Iterate through the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the two lists at the current indices\n            product = nums1[i] * nums2[j]\n            \n            # Check if the product is larger than the current maximum product and update the maximum products and indexes\n            if product > max_products[0]:\n                for k in range(N):\n                    max_products[k] = max_products[k+1]\n                    max_indexes[k] = max_indexes[k+1]\n                max_products[0] = product\n                max_indexes[0] = i*len(nums2)+j\n    \n    # Print the maximum products\n    print(\"Maximum products:\", max_products)\n    \n    # Print the indexes of the maximum products\n    print(\"Indexes:\", max_indexes)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    products = []\n    for i in range(N):\n        product = 1\n        for j in range(len(nums1)):\n            if j == i:\n                product *= nums2[j]\n            else:\n                product *= nums1[j]\n        products.append(product)\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of both lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return None\n    \n    # Initialize a list to store the products\n    products = []\n    \n    # Loop through all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums1[j]\n            # Check if the product is greater than the current maximum\n            if len(products) < N or product > products[0]:\n                # If the product is not the maximum, remove all products that are not the maximum\n                while len(products) > 0 and products[-1] < product:\n                    products.pop()\n                # If the product is the maximum or there are less than N products left, add it to the list\n                if len(products) < N or product == products[0]:\n                    products.append(product)\n    \n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        max_product = float('-inf')\n        for num1 in nums1:\n            for num2 in nums2:\n                product = num1 * num2\n                if product > max_product:\n                    max_product = product\n        products.append(max_product)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the largest products\n    largest_products = {}\n    \n    # Loop through all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            # Check if the product is larger than the current largest product\n            if product > largest_products.get(product, 0):\n                # If it is, update the dictionary with the new largest product\n                largest_products[product] = (i, j)\n    \n    # Sort the largest products by value (i.e., by product) and return the top N products\n    return sorted(largest_products.items(), key=lambda x: x[0], reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    largest_products = []\n    max_product = float('-inf')\n    \n    # loop through all possible pairs of numbers from both lists\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # check if the product of these two numbers is greater than the current maximum\n            product = nums1[i] * nums2[j-1]\n            if product > max_product:\n                max_product = product\n                largest_products = [nums1[i], nums2[j-1]]\n    \n    # check if we have found the desired number of largest products\n    if len(largest_products) == N:\n        return largest_products\n    else:\n        raise ValueError('Not enough products found.')"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product from each list\n    max_product_1 = max(nums1)\n    max_product_2 = max(nums2)\n    \n    # Find the product of the two largest products\n    product_of_max_products = max_product_1 * max_product_2\n    \n    # Calculate the number of products to be selected from each list\n    num_of_products_to_select = N\n    \n    # Create an empty list to store the selected products\n    selected_products = []\n    \n    # Iterate through the two lists and calculate the products of each combination of two factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the i-th factor of nums1 and j-th factor of nums2\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the product of the two largest products and the product is greater than the product of the selected products so far, add the product to the selected products list\n            if product > product_of_max_products and product > selected_products[-1] if selected_products else 0:\n                selected_products.append(product)\n    \n    # Sort the selected products in descending order and return the top N products\n    return sorted(selected_products, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order of their elements\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Loop through the indices from 0 to N-1\n    for i in range(N):\n        # Compute the product of the largest i elements of both lists\n        product = nums1[i] * nums2[i]\n\n        # Update the result list with the current product\n        result[i] = product\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum value.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the larger of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    char_list = list(str1)\n    \n    # Convert list of characters to tuple of characters\n    char_tuple = tuple(char_list)\n    \n    # Return tuple of characters\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the leftmost unset bit to -1 \n    leftmost_unset_bit = -1 \n    \n    # Iterate through the binary representation of n \n    for i in range(31, -1, -1): \n        # If the ith bit is 1, the leftmost unset bit is i \n        if (n >> i) & 1 == 1: \n            leftmost_unset_bit = i \n            break \n    \n    # Set the leftmost unset bit to 1 if it's -1 \n    if leftmost_unset_bit == -1: \n        leftmost_unset_bit = 31 \n    \n    # Set the ith bit of the binary representation of n to 1 \n    n = n & ~(1 << leftmost_unset_bit) \n    \n    # Return the modified value of n \n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer n.\n    '''\n\n    # Initialize the bitwise AND mask with all set bits in n\n    bit_mask = n & ~(n-1)\n\n    # Set the leftmost unset bit in n by left shifting the bitwise AND mask by 1\n    n |= bit_mask\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # check if there is any unset bit\n        n = n >> 1 # shift to the right\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n & 1) == 0:\n        n = n >> 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable with the first unset bit\n    result = 1\n    \n    # Iterate over the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, set the result to the next bit\n        if bit == '0':\n            result = result << 1\n            \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set the left most unset bit to 1\n    while (n & 1) == 0:\n        n = n >> 1\n    # Return the updated n\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # While the leftmost bit is zero, shift right to find the rightmost unset bit\n        n >>= 1\n    return n << 1 # Left shift the rightmost unset bit to the left to set it to one."
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer as input and returns the \n    integer with its left most unset bit set.\n    '''\n    i = 1\n    while n & i == 0:\n        i <<= 1\n    \n    return n | i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n\n    Parameters:\n    n (int): The number to be modified.\n\n    Returns:\n    int: The modified number with the left most unset bit set to 1.\n    '''\n    # Initialize a mask with all set bits set to 1\n    mask = (1 << 31) - 1\n\n    # While the mask is not all set to 0, unset the leftmost unset bit\n    while mask!= 0:\n        # If the least significant bit is 0, unset it\n        if mask & n:\n            n &= ~mask\n\n        # Shift the mask to the right\n        mask >>= 1\n\n    # Return the modified number with the leftmost unset bit set to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n\n    # Loop through each bit of the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is set in n\n        if n & (1 << i):\n            # If it is set, increment the count of set bits\n            count += 1\n\n    # Calculate the number of bits to the left of the unset bit\n    left_unset_bits = 32 - count\n\n    # Set the left most unset bit to 1\n    n |= 1 << left_unset_bits\n\n    # Return the updated binary representation of n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * (r**2)\n    volume = (1/3) * area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    area_cone = math.pi * r ** 2\n    volume_cone = area_cone * h / 3\n    return volume_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Arguments:\n    r (float): radius of the cone\n    h (float): height of the cone\n    \n    Returns:\n    float: volume of the cone\n    '''\n    \n    # calculate the volume of the cone\n    v = (1/3) * math.pi * r * r * h\n    \n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the volume of the cone\n    volume = (1/3) * math.pi * r ** 2 * h\n\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    \n    # loop through numbers from 2 to n and check if each is a power of 2\n    for i in range(2, n+1):\n        if i == 2**i:\n            highest = i\n            \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n -= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i * i > n:\n            return i\n        i *= 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize highest power of 2 to be 1\n    highest_power = 1\n    \n    # Loop while highest power of 2 is less than or equal to n\n    while highest_power <= n:\n        # If highest power of 2 is less than 2^highest_power, increment highest power of 2\n        if highest_power < 2**highest_power:\n            highest_power += 1\n        # If highest power of 2 is greater than 2^highest_power, decrement highest power of 2\n        else:\n            highest_power -= 1\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return highest_Power_of_2(n >> 1) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the log base 2 of n\n    log2 = 0\n    while n > 1:\n        n >>= 1\n        log2 += 1\n    # Find the highest power of 2 less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            return 2 ** (n.bit_length() - 1)\n        else:\n            n = n // 2\n    return 0"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power * 2 <= n: \n        power *= 2\n    \n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return (4 * find_lucas(n-1)) + (2 * find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function finds the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    This function calculates the nth Lucas number using a recursive approach.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 2 ** n - 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize first two lucas numbers\n    lucas1 = 2\n    lucas2 = 1\n    for i in range(2, n+1):\n        # Calculate the next lucas number\n        lucas_next = (lucas1 + lucas2) % 1000000007\n        # Update the lucas numbers for the next iteration\n        lucas1 = lucas2\n        lucas2 = lucas_next\n    return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f'{item:{string}}' for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    :param list_list_: the list to apply the string to\n    :param string: the format string to apply to each element of the list\n    :return: a new list with the format string applied to each element of the original list\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define the nested dictionary\n    result = {}\n    \n    # Loop through the lists\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if isinstance(item, list):\n                item_dict = {}\n                for k, subitem in enumerate(item):\n                    item_dict[k] = subitem\n                result[i] = item_dict\n            else:\n                result[i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    result = {}\n    # loop through the first list\n    for i in l1:\n        # check if the element is a dictionary\n        if isinstance(i, dict):\n            # loop through the second list\n            for j in l2:\n                # check if the nested element is a dictionary\n                if isinstance(j, dict):\n                    # loop through the third list\n                    for k in l3:\n                        # check if the nested element is a dictionary\n                        if isinstance(k, dict):\n                            # add the nested dictionary to the parent dictionary\n                            result[i[k]] = {j[p]: k[q] for p, q in j.items()}\n                        else:\n                            # add the key-value pair to the parent dictionary\n                            result[i[k]] = k\n                else:\n                    # add the key-value pair to the parent dictionary\n                    result[i[j]] = j\n        else:\n            # add the key-value pair to the parent dictionary\n            result[i] = i\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            key = item[0]\n            value = item[1]\n            if key not in result:\n                result[key] = []\n            result[key].append(value)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create a dictionary to store the converted data\n    data = {}\n\n    # Iterate through the three lists and convert them to nested dictionaries\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    \n    # loop through the input lists\n    for i in range(len(l1)):\n        # create a new key-value pair in the dictionary\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    d = {}\n    \n    # Iterate through each list\n    for i in range(len(l1)):\n        # Create a new key for the dictionary\n        key = l1[i] + '_' + l2[i] + '_' + l3[i]\n        \n        # Add the value to the dictionary\n        d[key] = l1[i]\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if isinstance(l1[i], list):\n            if l1[i]:\n                result[l2[i]] = convert_list_dictionary(l1[i], l3[i])\n        else:\n            result[l2[i]] = l1[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize empty dictionary\n    result = {}\n    # Loop through each list and add elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    # Return the resulting dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Creating an empty dictionary to store the nested dictionary\n    result = {}\n    \n    # Iterating through the lists\n    for i in range(len(l1)):\n        # Adding the first list to the dictionary with key as 'list1'\n        result['list1'] = l1[i]\n        # Adding the second list to the dictionary with key as 'list2'\n        result['list2'] = l2[i]\n        # Adding the third list to the dictionary with key as 'list3'\n        result['list3'] = l3[i]\n    \n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return n\n\n    elif n == 2:\n        return n\n\n    elif n % 2 == 0:\n        return get_max_sum(n // 2) + n\n\n    else:\n        return max(get_max_sum(n // 2) + n, get_max_sum(n // 2 - 1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        half_sum = get_max_sum(n/2)\n        third_sum = get_max_sum(n/3)\n        fourth_sum = get_max_sum(n/4)\n        fifth_sum = get_max_sum(n/5)\n        if half_sum > third_sum and half_sum > fourth_sum and half_sum > fifth_sum:\n            return half_sum\n        elif third_sum > half_sum and third_sum > fourth_sum and third_sum > fifth_sum:\n            return third_sum\n        elif fourth_sum > half_sum and fourth_sum > third_sum and fourth_sum > fifth_sum:\n            return fourth_sum\n        else:\n            return fifth_sum + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, f):\n        if n == 1:\n            return n\n        elif n == 2:\n            return f[2]\n        else:\n            return max(helper(n//2, f) + f[n//2] + helper(n//3, f) + f[n//3] + helper(n//4, f) + f[n//4] + helper(n//5, f) + f[n//5], n)\n\n    return helper(n, [1] * 5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, then the maximum sum possible is n\n    if n == 1:\n        return n\n\n    # Recursive case: calculate the maximum sum possible using the given equation\n    max_sum = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    \n    # Find maximum sum possible using the given equation\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    f = get_max_sum(n//2)\n    \n    if n % 2 == 0:\n        return max(f + 2*f*f + 2*f*f*f + n, n)\n    else:\n        return max(f + 2*f*f + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize maximum length\n    max_length = len(input_list[0])\n    \n    # loop through all lists and find the maximum length\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    \n    # create a new list with maximum length\n    new_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) == max_length:\n            new_list.append(input_list[i])\n    \n    return new_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return input_list[input_list.index(input_list[max_len])]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(item) for item in input_list]\n    max_length = max(lengths)\n    max_index = lengths.index(max_length)\n    return input_list[max_index]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Using the set() function to remove duplicates\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n\n    # check if set is empty\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to list to be able to use set() method\n    test_lst = list(test_tup)\n    # Convert list to set to check for duplicates\n    if len(set(test_lst)) == len(test_lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character in the dictionary\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the first non-repeated character in the frequency dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Iterate over the characters in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # Iterate over the characters in the string again to find the first non-repeated character\n    for char in str1:\n        # If the character is not in the dictionary, it's the first non-repeated character\n        if char not in char_count:\n            return char\n    # If no non-repeated character was found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate over the dictionary and find the first character that appears only once\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(string):\n    # create a dictionary to store the count of each character\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # iterate through the string and check if each character has a count of 1\n    for char in string:\n        if count[char] == 1:\n            return char\n    \n    # if all characters have a count greater than 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If no non-repeating character is present in the string, it returns None.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character in the dictionary with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeating character in the given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # Find the first non-repeated character in the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not re.match(regex, string):\n        return \"The given string does not match the required pattern.\"\n\n    return \"The given string starts and ends with the same character.\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.search(pattern, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # First, we need to sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the sum of the three numbers\n    total = sum(sorted_numbers)\n\n    # Calculate the middle index and the middle number\n    mid = total // 2\n    middle_num = sorted_numbers[mid]\n\n    # Calculate the median\n    median = middle_num\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        median = nums[len(nums)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Check if the sorted list has an odd or even number of elements\n    if len(sorted_list) % 2 == 0:\n        # If the list has an even number of elements,\n        # return the average of the two middle elements\n        middle_index = len(sorted_list) // 2\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        # If the list has an odd number of elements,\n        # return the middle element\n        return sorted_list[len(sorted_list) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers and returns the median of the numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    length = len(sorted_numbers)\n    \n    # Calculate the median\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        median = sorted_numbers[length//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n    \n    # Calculate the median\n    median = num_list[1]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    median = numbers[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted array\n    length = len(sorted_numbers)\n    \n    # Calculate the median of the sorted array\n    if length % 2 == 0:\n        # If the length of the array is even, take the average of the middle two numbers\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        # If the length of the array is odd, take the middle number\n        median = sorted_numbers[length//2]\n    \n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate through each number in the list\n    total = 0\n    for num in nums:\n        # convert the number to a string and split into a list of digits\n        digits = list(str(num))\n        # add up the digits\n        total += sum(map(int, digits))\n    # return the sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        for digit in str(num):\n            sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = sum(int(digit) for digit in str(num))\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_str = str(num)\n        total += sum(int(digit) for digit in num_str)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop over each number in the list\n    for num in nums:\n        # Convert the number to a string and loop over each digit\n        for digit in str(num):\n            total += int(digit)\n    \n    # Return the total\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(d) for d in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        for digit in str(num):\n            result += int(digit)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number in a list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of integers, where each integer is the sum of its digits.\n    \"\"\"\n    digit_sums = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        digit_sums.append(digit_sum)\n    return digit_sums"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and performs the bitwise xor operation on each element.\n\n    Args:\n        test_tup1 (tuple): The first tuple to perform bitwise xor on.\n        test_tup2 (tuple): The second tuple to perform bitwise xor on.\n\n    Returns:\n        The result of performing the bitwise xor operation across the given tuples.\n    \"\"\"\n\n    # Perform bitwise xor operation on each element of the tuples\n    result_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with 0's\n    result_tup = (0, 0, 0)\n    \n    # loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert each tuple element to a list\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Initialize the result list with the same length as the first tuple\n    result = [0] * len(list1)\n    # Perform bitwise xor on each pair of elements in the tuples\n    for i in range(len(list1)):\n        result[i] = list1[i] ^ list2[i]\n    # Convert the result list to a tuple and return it\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Get the corresponding element from the second tuple\n        j = test_tup2[i]\n        # Perform the bitwise xor operation between the elements and add the result to the result list\n        result.append(i ^ j)\n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # make sure the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples must have the same length.')\n    # perform the bitwise xor operation across the tuples\n    result_tup = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables for the sum and carry\n    sum = 0\n    carry = 0\n    \n    # loop through the tuples and perform bitwise xor operation\n    for i in range(len(test_tup1)):\n        sum = (test_tup1[i] ^ test_tup2[i]) ^ carry\n        carry = (test_tup1[i] & test_tup2[i]) | (test_tup1[i] & carry) | (test_tup2[i] & carry)\n        \n    # check for any carry remaining\n    if carry > 0:\n        sum = sum ^ 1\n        \n    \n    # return the sum as the result\n    return sum"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        unique_tuples.add(tuple(i))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # if the tuple is not in the freq dictionary, add it with a count of 1\n        if tup not in freq:\n            freq[tup] = 1\n        # if the tuple is already in the dictionary, increment its count by 1\n        else:\n            freq[tup] += 1\n    \n    # return the number of unique tuples in the dictionary\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item not in freq_dict):\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store unique tuples\n    freq_dict = {}\n\n    # Loop through the list of tuples and add each tuple to the dictionary\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n\n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_freq = {}\n    for item in test_list:\n        if item not in unique_freq:\n            unique_freq[item] = 1\n        else:\n            unique_freq[item] += 1\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if isinstance(item, tuple):\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Get the length of the first tuple\n    length1 = len(test_tup1)\n\n    # Get the length of the second tuple\n    length2 = len(test_tup2)\n\n    # Check if the length of both tuples is equal\n    if length1!= length2:\n        print(\"Error: The two nested tuples are not of equal length.\")\n        return None\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Loop through both tuples simultaneously and add the elements at each index\n    for i in range(length1):\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        result_tup = result_tup + (element1 + element2,)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    result_tup = []\n\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the result\n    result_tup = ()\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the elements at the current index\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    # return the new tuple as the result\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(sum(x) for x in zip(test_tup1[i], test_tup2[i])))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with the same number of elements as the input tuples\n    result_tup = ()\n    # Loop through the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Add the elements at the same index in the input tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize a new empty list to store the result\n    result_list = []\n\n    # Iterate through each element of the first tuple and add it to the corresponding element of the second tuple\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Convert the list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initializing an empty list to store the final sum\n    final_sum = []\n\n    # iterating over each element of both tuples and adding the elements at that index in the sum list\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            # if the element is a tuple, recursively calling the function for that tuple\n            final_sum.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # if the element is not a tuple, adding it to the final sum list\n            final_sum.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(final_sum)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_result = []\n        for j in range(len(test_tup1[i])):\n            temp_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(temp_result)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result_tup = []\n    # loop through the first tuple and add each element to the resultant tuple\n    for i in range(len(test_tup1)):\n        # if the length of the second tuple is less than the length of the first tuple, then we need to add additional None values to the resultant tuple to match the length of the first tuple\n        if len(test_tup2) < len(test_tup1):\n            result_tup.append(None)\n        # add the corresponding element from both tuples and append it to the resultant tuple\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    # return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length')\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            if isinstance(test_tup1[i][j], tuple):\n                test_tup1[i][j] = add_nested_tuples(test_tup1[i][j], test_tup2[i][j])\n            else:\n                test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as arguments and checks whether the first element of the first tuple exists in the second tuple.\n    '''\n    for element in tuple1:\n        if element == tuplex[0]:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            print(f\"{element} exists within {tuple1}\")\n            break\n    else:\n        print(f\"{tuplex} does not exist within {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(tuplex, \"exists in tuple1\") \n    else: \n        print(tuplex, \"does not exist in tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is even.\") \n    else: \n        print(\"The parity of\", x, \"is odd.\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2  # this line calculates the remainder of the number divided by 2\n    \n    if parity == 0:  # if the remainder is 0, then the number is even\n        return \"The number is even.\"\n    else:  # if the remainder is 1, then the number is odd\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0: # If x is even\n        parity = \"Even\"\n    else: # If x is odd\n        parity = \"Odd\"\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return 'Even'\n    else: \n        return 'Odd'"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    \n    # initialize the result variable\n    result = \"\"\n    \n    # loop through each digit in the number\n    for digit in num_str:\n        \n        # convert the digit to an integer\n        digit_int = int(digit)\n        \n        # if the digit is a single digit number\n        if digit_int >= 10:\n            \n            # get the digits in the order of largest to smallest\n            digits_int = [int(digit) for digit in str(digit_int)]\n            digits_int.sort(reverse=True)\n            \n            # convert the digits back to a string\n            digits_str = \"\".join(str(digit) for digit in digits_int)\n            \n            # add the digits to the result string\n            result += digits_str\n        \n        # if the digit is a single digit number\n        else:\n            \n            # add the digit to the result string\n            result += digit\n    \n    # convert the result string to an integer\n    result = int(result)\n    \n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the number to a string\n    s = str(n)\n    \n    # Rearrange the digits of the string and convert it back to an integer\n    new_num = int(''.join([s[i] for i in range(len(s)-1, -1, -1)]))\n    \n    # Increment the new number until it is greater than the original number\n    while new_num <= n:\n        new_num += 1\n        \n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_num = 10 ** len(str(n))\n    base = 10\n    \n    # convert the number to a string of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # rearrange the digits of the number in ascending order\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] < digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n    \n    # create the next bigger number by concatenating the digits of the number in ascending order\n    next_bigger = digits.copy()\n    for digit in digits:\n        if digit == max_num:\n            next_bigger.append(digit)\n            break\n    \n    # convert the next bigger number to an integer\n    next_bigger = int(''.join(map(str, next_bigger)))\n    \n    # check if the next bigger number is less than the given number\n    if next_bigger < n:\n        # if not, we continue with the next smaller number\n        next_bigger = rearrange_bigger(next_bigger)\n    \n    # if the next bigger number is equal to the given number, we return None\n    if next_bigger == n:\n        next_bigger = None\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a dictionary to store the number of digits for each number\n    digit_count = {}\n\n    # Loop through all numbers from 1 to n and count the digits\n    for i in range(1, n + 1):\n        count = len(str(i))\n        digit_count[i] = count\n\n    # Find the number with the highest number of digits\n    max_digits = max(digit_count, key=digit_count.get)\n\n    # Loop through the digits of the maximum number of digits and add them to a string\n    max_digit_count = digit_count[max_digits]\n    next_bigger = max_digits\n    for i in range(max_digit_count):\n        digit = next_bigger % 10\n        next_bigger //= 10\n        next_bigger *= 10\n        next_bigger += digit\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    number = str(n)\n    # Find the length of the number\n    length = len(number)\n    # Find the index of the maximum digit in the number\n    max_index = number.index(max(number))\n    # Reverse the digits from the max index to the end of the number\n    reversed_digits = number[max_index:][::-1]\n    # Combine the reversed digits with the original digits in reverse order\n    combined_digits = reversed_digits + number[max_index:][::-1]\n    # Convert the combined digits back to an integer\n    next_bigger = int(combined_digits)\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the number to a string\n    num = str(n)\n    \n    # initialize a list to store the digits of the number\n    digits = []\n    \n    # loop through each digit of the number\n    for digit in num:\n        # append the digit to the list of digits\n        digits.append(digit)\n    \n    # loop through the digits and swap them if necessary\n    for i in range(len(digits) - 1):\n        # check if the digits are already in the correct order\n        if digits[i] > digits[i+1]:\n            # swap the digits\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n    \n    # convert the list of digits back to a string and return the result\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_bigger = int(''.join(n_list))\n    return n_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Initialize the result variable\n    result = ''\n    \n    # Loop through each digit of the number\n    for digit in str(n):\n        \n        # Check if the digit is a 9\n        if digit == '9':\n            \n            # Check if there is a 9 in the result\n            if result.count('9') > 0:\n                # If there is, add a 0 to the result\n                result += '0'\n            else:\n                # If there isn't, add a 1 to the result\n                result += '1'\n        \n        else:\n            # If the digit is not a 9, add it to the result as is\n            result += digit\n    \n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    biggest = max(digits)\n    index = digits.index(biggest)\n    for i in range(index + 1, 10):\n        if digits[i] < biggest:\n            break\n    digits[index] = digits[i]\n    digits[i] = biggest\n    return int(\"\".join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]  # convert number to list of digits\n    \n    # find index of largest digit\n    max_index = digits.index(max(digits))\n    \n    # reverse digits to form smaller number\n    small_digits = digits[:max_index] + digits[max_index+1:] + digits[:max_index+1]\n    \n    # convert back to string and return as integer\n    return int(''.join(str(digit) for digit in small_digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    # create a min heap of size k to keep track of the smallest k pairs\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if nums1[i] + nums2[j] > min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n    # extract the k smallest pairs from the min heap\n    result = []\n    while len(min_heap) > 0:\n        result.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    i, j = 0, 0\n    \n    while len(pairs) < k:\n        if heap1 and (heap1[0] > nums1[i] or (heap1[0] == nums1[i] and heap2[0] < nums2[j])):\n            heapq.heappushpop(heap1, -heap1[0])\n        else:\n            heapq.heappush(heap1, nums1[i])\n            if len(pairs) < k:\n                heapq.heappush(heap2, -heap2[0])\n        if heap2 and (heap2[0] > nums2[j] or (heap2[0] == nums2[j] and heap1[0] < nums1[i])):\n            heapq.heappushpop(heap2, -heap2[0])\n        else:\n            heapq.heappush(heap2, nums2[j])\n            if len(pairs) < k:\n                heapq.heappush(heap1, -heap1[0])\n        i += 1\n        j += 1\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize min heap and two pointers\n    min_heap = []\n    i, j = 0, 0\n    # loop until k pairs found or both pointers out of range\n    while len(min_heap) < k and i < len(nums1) and j < len(nums2):\n        # compare the current smallest elements from both arrays\n        if nums1[i] < nums2[j]:\n            if not min_heap or nums1[i] < min_heap[0]:\n                heapq.heappush(min_heap, nums1[i])\n            i += 1\n        else:\n            if not min_heap or nums2[j] < min_heap[0]:\n                heapq.heappush(min_heap, nums2[j])\n            j += 1\n    # extract k smallest pairs from min heap\n    return heapq.nsmallest(k, min_heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n\n    # Build a min heap of pairs\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if j == 0 or (i == 0 and j == 1):\n                heapq.heappush(min_heap, (-nums1[i] - nums2[j], (i, j)))\n\n    # Extract k pairs from the min heap\n    pairs = []\n    while k > 0:\n        _, pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n        k -= 1\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of length k to store the k smallest elements\n    heap = []\n    # Initialize two pointers i and j to 0\n    i, j = 0, 0\n    # Initialize the result list\n    result = []\n    \n    while k > 0:\n        # If we have not found enough pairs, add the next smallest element to the heap\n        if len(heap) < k:\n            if i < len(nums1) and j < len(nums2):\n                smallest = min(nums1[i], nums2[j])\n                heapq.heappush(heap, smallest)\n                # If we have found a pair, update i and j\n                if smallest == nums1[i]:\n                    i += 1\n                if smallest == nums2[j]:\n                    j += 1\n                # If we have found the kth smallest pair, add it to the result list\n                if len(heap) == k:\n                    pair = heapq.heappop(heap)\n                    result.append((pair, nums1[i-1], nums2[j-1]))\n        # If we have found enough pairs, update the next smallest element to the heap\n        else:\n            smallest = heapq.heappop(heap)\n            if i < len(nums1) and j < len(nums2):\n                next_smallest = min(nums1[i], nums2[j])\n                heapq.heappush(heap, next_smallest)\n                # If we have found a pair, update i and j\n                if next_smallest == nums1[i]:\n                    i += 1\n                if next_smallest == nums2[j]:\n                    j += 1\n                # If we have found the kth smallest pair, add it to the result list\n                if len(heap) == k:\n                    pair = heapq.heappop(heap)\n                    result.append((pair, nums1[i-1], nums2[j-1]))\n                    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # create a min heap to store the pairs of elements with the smallest sum\n    heap = []\n    # iterate through the two arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the sum of the elements and add it to the heap\n            heapq.heappush(heap, (num1+num2, (num1, num2)))\n            # if the size of the heap becomes greater than k, remove the smallest element and its corresponding pair\n            if len(heap) > k:\n                heapq.heappop(heap)\n    # create a result list to store the k smallest pairs\n    result = []\n    # iterate through the heap and add the smallest k pairs to the result list\n    while heap:\n        pair, _ = heapq.heappop(heap)\n        result.append(pair)\n        # if the size of the heap becomes greater than k, remove the smallest element and its corresponding pair\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List of integers, first array.\n    nums2: List of integers, second array.\n    k: integer, number of pairs required.\n\n    Returns:\n    A list of tuples, where each tuple contains two elements, where the first element is an element from nums1 and the second element is an element from nums2, and the value of the tuple is the sum of the two elements.\n\n    Time Complexity:\n    O(nlogn + klogk)\n\n    \"\"\"\n    # Create a min heap to store the smallest k elements from nums1 and nums2\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # Iterate over the first array and insert the smallest k elements into the min heap\n    for num1 in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        else:\n            if num1 > heapq.heappop(min_heap):\n                heapq.heappush(min_heap, num1)\n\n    # Iterate over the second array and find the k smallest pairs which consist of one element from nums1 and one element from nums2\n    result = []\n    for num2 in nums2:\n        if len(result) < k:\n            while len(min_heap) > 0 and heapq.heappop(min_heap) > num2:\n                pass\n            if len(min_heap) > 0:\n                pair = (heapq.heappop(min_heap), num2)\n                if len(result) < k or pair[1] < result[-1][1]:\n                    result.append(pair)\n        else:\n            if num2 > result[-1][1]:\n                while len(min_heap) > 0 and heapq.heappop(min_heap) > num2:\n                    pass\n                if len(min_heap) > 0:\n                    pair = (heapq.heappop(min_heap), num2)\n                    if pair[1] < result[-1][1]:\n                        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Loop through each element in nums1\n    for num1 in nums1:\n        # Initialize a variable to keep track of the number of pairs found so far\n        count = 0\n        \n        # Loop through each element in nums2\n        for num2 in nums2:\n            # Check if the current pair is the smallest one found so far\n            if len(min_heap) == 0 or num1 + num2 > min_heap[0][0]:\n                # If it is, add it to the min heap\n                heapq.heappush(min_heap, (num1 + num2, (count, (num1, num2))))\n                count += 1\n                # If we have found k pairs, break out of the inner loop\n                if count == k:\n                    break\n        \n        # If we have found k pairs, break out of the outer loop\n        if count == k:\n            break\n    \n    # Extract the k smallest pairs from the min heap\n    k_smallest_pairs = []\n    for i in range(k):\n        k_smallest_pairs.append(heapq.heappop(min_heap)[1])\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap with the first k elements from the first array\n    min_heap = []\n    for num in nums1[:k]:\n        heapq.heappush(min_heap, num)\n    \n    # Initialize the result list and the count of pairs found\n    pairs = []\n    count = 0\n    \n    # Iterate through the second array\n    for num2 in nums2:\n        # If the min heap is not empty and the current number is smaller than the minimum element in the heap, add it to the result list and increment the count\n        if min_heap and num2 < min_heap[0]:\n            pairs.append((min_heap[0], num2))\n            heapq.heappop(min_heap)\n            count += 1\n        \n        # Add the current number to the min heap\n        heapq.heappush(min_heap, num2)\n        \n        # If the count of pairs is equal to k, break out of the loop\n        if count == k:\n            break\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three arguments:\n    nums1: A list of integers representing the first array.\n    nums2: A list of integers representing the second array.\n    k: An integer representing the number of pairs to find.\n\n    This function finds k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    It returns a list of tuples, where each tuple contains an element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Create a list of tuples, where each tuple contains an element from the first array and one element from the second array\n    pairs = [(x, y) for x in nums1 for y in nums2]\n    \n    # Sort the list of tuples based on the first element of each tuple\n    pairs.sort()\n    \n    # Use a heap to find the k smallest elements in the list of tuples\n    heap = []\n    for pair in pairs:\n        if len(heap) < k:\n            heapq.heappush(heap, pair)\n        else:\n            if pair[0] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, pair)\n    \n    # Convert the heap to a list of tuples and return it\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of two tuples from the list.\n    \"\"\"\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it is smaller than the current minimum product\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < min_product:\n                min_product = (list1[i][0] * list1[j][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n                \n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            products.append(list1[i][0] * list1[j][1])\n    return min(products)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product and the list of pairs\n    min_product = float('inf')\n    pairs = []\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product and the list of pairs if the product is smaller\n            if product < min_product:\n                min_product = product\n                pairs = [(i, j), (j, i)]\n\n    # Return the list of pairs and the minimum product\n    return pairs, min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables for minimum product and minimum element\n    min_product = float('inf')\n    min_element = None\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Check if the product is less than the minimum product\n            if product < min_product:\n                min_product = product\n                min_element = (list1[i], list1[j])\n    \n    # Return the minimum element and the minimum product\n    return min_element, min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = 1\n    for i in range(1, len(list1)):\n        min_product *= list1[i]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and finds the minimum product of the pairs of tuples within the list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_value = listval[0]\n    for item in listval:\n        if item < min_value:\n            min_value = item\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # loop through the list, comparing each element to the current minimum\n    for element in listval[1:]:\n        if element < min_val:\n            min_val = element\n    \n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for item in listval[1:]:\n            if item < min_val:\n                min_val = item\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the values in the list\n    for i in range(1, len(listval)):\n        # if the current value is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to be the first element in the list\n    min_val = listval[0]\n    # loop through the remaining elements in the list\n    for i in range(1, len(listval)):\n        # if current element is smaller than minimum value, update minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Use a loop to iterate over the list and find the minimum value\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    elif len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for num in listval[1:]:\n            if num < min_val:\n                min_val = num\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove all underscores and split the word into words\n    words = re.findall(r'\\w+', word)\n\n    # Convert the first word to camel case\n    first_word = words[0]\n    first_word = first_word.title()\n    camel_word = first_word\n\n    # Convert the remaining words to camel case\n    for word in words[1:]:\n        camel_word += word[0].upper()\n        camel_word += word[1:]\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Initialize a new list to store the camel case words\n    camel_case_words = []\n    \n    # Convert the first word to camel case\n    camel_case_words.append(words[0].capitalize())\n    \n    # Loop through the remaining words\n    for i in range(1, len(words)):\n        # Check if the next word starts with a number\n        if words[i].isdigit():\n            # If it does, add a space between the current word and the next number word\n            camel_case_words.append(words[i])\n        else:\n            # If it doesn't, capitalize the first letter and join the rest of the letters together\n            camel_case_words.append(words[i].capitalize())\n    \n    # Join the camel case words back together with an underscore\n    camel_case_word = '_'.join(camel_case_words)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into list of words\n    words = re.findall(r'(\\b\\w+\\b)', word)\n\n    # Convert the words to camel case\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', r'_\\1', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for char in word:\n        if char.isupper():\n            camel_case_word += char.lower()\n        else:\n            camel_case_word += char.upper()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif re.match('[A-Z]', word[i]):\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace snake case with camel case\n    word = re.sub(r'_(\\w)', lambda m: m.group(1).upper(), word)\n    # Capitalize the first letter\n    return word[0].upper() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word into words using underscores as word separators\n    words = re.findall(r'_(.)', word)\n\n    # Convert the first letter of each word to uppercase and join them together\n    camel_word = ''.join(x.upper() for x in words).lstrip('_')\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first word\n    words[0] = words[0].capitalize()\n    # Join the words into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with odd numbers removed.\n    \"\"\"\n    # create an empty list to store the odd numbers\n    odd_list = []\n    # loop through the input list\n    for num in l:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if it is, add it to the odd list\n            odd_list.append(num)\n    # return the new odd list\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store the odd numbers\n    odd_list = []\n    # loop through the list and add odd numbers to odd_list\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        # Check if the input is a list of tuples\n        if isinstance(list1, list) and all(isinstance(tup, tuple) for tup in list1):\n            # Check if the input is a valid index\n            if n >= 0 and n < len(list1):\n                # Extract the nth element from the list of tuples\n                return list1[n]\n            else:\n                # Raise an IndexError if the index is out of range\n                raise IndexError(\"Index out of range\")\n        else:\n            # Raise a TypeError if the input is not a list of tuples\n            raise TypeError(\"Input must be a list of tuples\")\n    except Exception as e:\n        # If an exception occurs, print the error message\n        print(\"Error:\", e)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    # Check if the given list of tuples is empty or not\n    if not list1:\n        return \"List is empty.\"\n\n    # Check if the given element is a tuple or not\n    if isinstance(list1[0], tuple):\n        return \"The given element is not a list.\"\n\n    # Check if the nth element exists in the list\n    if n < 1 or n > len(list1):\n        return \"The given index is out of range.\"\n\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # check if the given list is valid\n    if not isinstance(list1, list) or not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"The input list must be a list of tuples.\")\n\n    # check if the nth element is valid\n    if n < 1 or n > len(list1):\n        raise IndexError(\"The nth element must be between 1 and the length of the list.\")\n\n    # extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        print(\"The given index is out of range.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Invalid index\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert the input lists to sets to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # compare the two sets to check if there are any overlapping values\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: The first sequence of values to search in.\n    :type list1: list\n    :param list2: The second sequence of values to search in.\n    :type list2: list\n    :return: True if any value exists in both sequences, False otherwise.\n    :rtype: bool\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:  \n        if i in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # To check if any value exists in the list1 in list2\n    for i in list1:\n        if i in list2:\n            print(\"Value exists in list1 and list2.\")\n            break\n    # If no value exists in list1, then check if any value exists in list2 in list1\n    else:\n        for i in list2:\n            if i in list1:\n                print(\"Value exists in list1 and list2.\")\n                break\n    # If no value exists in list1 or list2, then print \"No overlap found.\"\n    else:\n        print(\"No overlap found.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf') # initialize max_product to negative infinity\n    max_pair = (0, 0) # initialize max_pair to first two elements of the array\n    \n    for i in range(len(arr)): # iterate over all elements of the array\n        for j in range(i+1, len(arr)): # iterate over all elements after the current element\n            \n            # calculate product of the subarray starting from i and ending at j\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n                \n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    if len(arr)%2 == 0:\n        # even length\n        return max(arr[-1] * arr[-2], arr[0] * arr[1])\n    else:\n        # odd length\n        return max(arr[-1] * arr[-2], arr[-2] * arr[-3])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_pair = [0, 0]\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = [-float('inf'), -float('inf')]  # initialize the pair with minimum value\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:  # check if the current pair is greater than the previous maximum\n                max_pair[0] = arr[i] * arr[j]\n            elif arr[i] * arr[j] < max_pair[0] * max_pair[1]:\n                max_pair[1] = arr[i] * arr[j]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, returns a tuple of two integers representing the\n    maximum product pair from the array. If there is no pair with the highest product,\n    returns None.\n    \"\"\"\n    # initialize the maximum product and indices of the two elements in the array\n    max_product = arr[0] * arr[1]\n    max_index = 0\n\n    # iterate through the rest of the array\n    for i in range(2, len(arr)):\n        # calculate the product of the current element with the previous maximum\n        product = arr[i] * max_product\n\n        # if the current product is greater than the previous maximum, update both\n        if product > max_product:\n            max_product = product\n            max_index = i\n\n        # if the current product is less than the previous maximum, update the first element\n        elif product < max_product:\n            max_product = arr[i]\n            max_index = i\n\n    # if there is no pair with the highest product, return None\n    if max_product == arr[0] * arr[1]:\n        return None\n\n    # otherwise, return a tuple of the maximum product and the indices of the two elements\n    else:\n        return (max_product, (max_index, len(arr)-1))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the two integers that \n    have the highest product.\n    '''\n    # Initialize variables to store the two integers with the highest product\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    # Iterate through the array and update the max and min values\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    # Return the two integers with the highest product\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]  # Initialize max1, max2, min1, min2 with the first element of the array\n    max3, min3 = arr[0], arr[0]   # Initialize max3, min3 with the first element of the array\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n        \n        if arr[i] < min1:\n            min3 = min2\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min3 = min2\n            min2 = arr[i]\n        elif arr[i] < min3:\n            min3 = arr[i]\n    \n    return (max1, max2)  # Return tuple of the highest product pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = max(arr[0], arr[1])\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = -float('inf')\n    max_pair = (float('inf'), float('inf'))\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function finds a pair with the highest product from a given array of integers.\n    \"\"\"\n    max_1 = arr[0]\n    max_2 = arr[0] * arr[1]\n    min_1 = arr[0]\n    min_2 = arr[1]\n\n    for i in range(2, len(arr)):\n        product = max(arr[i], min_1 * arr[i], min_2 * arr[i])\n        if product > max_2:\n            max_2 = product\n            max_1 = min_1\n            max_1 = min_2\n            min_2 = arr[i]\n        elif product > max_1:\n            max_2 = min_2\n            max_1 = arr[i]\n        elif product > min_2:\n            max_2 = min_1\n            max_1 = min_1\n            min_2 = arr[i]\n        elif product > min_1:\n            max_2 = min_2\n            max_1 = min_2\n            min_2 = min_1\n            min_1 = arr[i]\n\n    return (max_1, max_2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns the common first element among them.\n    '''\n    common = None\n    for tup in Input:\n        if tup[0] == common:\n            common = tup[0]\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    \n    for item in Input: \n        if item[0] == common_first: \n            break \n        else: \n            common_first = item[0]\n    \n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # create an empty list to store common elements\n    common_elements = []\n    \n    # iterate over the list of tuples\n    for item in Input:\n        \n        # get the first element of the tuple\n        first_element = item[0]\n        \n        # check if the first element is not already in the common_elements list\n        if first_element not in common_elements:\n            \n            # add the first element to the common_elements list\n            common_elements.append(first_element)\n    \n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        first_element = tup[0]\n        if first_element in common_elements:\n            common_elements.remove(first_element)\n        else:\n            common_elements.add(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # Initialize an empty dictionary to store the counts of first element for each tuple\n    first_counts = {}\n\n    # Iterate through the input list of tuples\n    for t in Input:\n        # If the first element of the tuple is not in the dictionary, add it with a count of 1\n        if t[0] not in first_counts:\n            first_counts[t[0]] = 1\n        # Otherwise, increment the count of the first element in the dictionary\n        else:\n            first_counts[t[0]] += 1\n\n    # Find the first element with the highest count\n    max_first = None\n    max_count = 0\n    for first, count in first_counts.items():\n        if count > max_count:\n            max_first = first\n            max_count = count\n\n    # Return the tuple with the maximum count\n    return (max_first, max_count)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary containing the common first element in each tuple.\n    '''\n    common_dict = {}\n    for tup in Input:\n        if tup[0] in common_dict:\n            common_dict[tup[0]].append(tup)\n        else:\n            common_dict[tup[0]] = [tup]\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_first = set()\n    for tup in Input:\n        if len(tup) > 0:\n            common_first.add(tup[0])\n\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], Input[i][1], Input[i][2]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    # initialize an empty list to store common elements\n    common = []\n    # iterate over all tuples in the input list\n    for tup in Input:\n        # check if the first element of the tuple is already in the common list\n        if tup[0] not in common:\n            # if it's not, add it to the list\n            common.append(tup[0])\n    # return the list of common elements\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_elem = ''\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n\n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n\n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # initialize max_length to the length of the first element of the list\n    max_length = len(lst[0])\n\n    # iterate through the rest of the list\n    for elem in lst[1:]: \n        # if the length of the current element is greater than max_length, update max_length\n        if len(elem) > max_length: \n            max_length = len(elem)\n\n    # return the element with maximum length\n    return lst[lst.index(max(lst, key=len))], max_length"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with the maximum length.\n    '''\n    max_length = max(len(lst), key=len)\n    return max(lst, key=lambda x: lst.index(x))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    total_sum = sum(round(x) for x in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize a variable to store the total sum\n    total_sum = 0\n    \n    # Loop through the list of numbers\n    for num in list1:\n        # Round the number to the nearest integer\n        rounded_num = round(num)\n        \n        # Add the rounded number to the total sum\n        total_sum += rounded_num\n    \n    # Print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    \n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and returns the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    length = len(list1)\n\n    for num in list1:\n        total_sum += round(num)\n\n    print(total_sum * length)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        cube_num = i * i * i \n        sum += cube_num\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    count = 0\n    num = 2\n    while count < n:\n        cube = num ** 3\n        sum_of_cubes += cube\n        count += 1\n        num += 2\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of cubes of first n even natural numbers.\n    '''\n    # initialize the sum of cubes to 0\n    sum_cubes = 0\n    \n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the current number\n        cube = i ** 3\n        # add the cube to the sum of cubes\n        sum_cubes += cube\n    \n    # return the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of the first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings or integers.\n    delimiter (str): The delimiter to use to concatenate the elements.\n\n    Returns:\n    str: A string with all the elements of the tuple concatenated by the delimiter.\n    '''\n    # Concatenate all the elements of the tuple by the delimiter\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = delimiter.join([str(x) for x in test_tup])\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # concatenate the tuple by delimiter\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + ','\n    return concatenated_str[:-1]  # remove the last comma"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) +''\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_tuple = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_tuple"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer 'n' as input and returns the average of cubes of the first n natural numbers.\n    '''\n    # calculating the sum of cubes of the first n natural numbers\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    # finding the average of cubes\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    average = sum/n\n    return average\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / (n * 2)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initializing sum of cubes and count of cubes to 0\n    sum_of_cubes = 0\n    count_of_cubes = 0\n\n    # iterating n times\n    for i in range(1, n+1):\n        # finding cube of the number\n        cube = i ** 3\n\n        # adding cube to sum of cubes\n        sum_of_cubes += cube\n\n        # incrementing count of cubes\n        count_of_cubes += 1\n\n    # finding average of cubes\n    average_of_cubes = sum_of_cubes / count_of_cubes\n\n    # printing the result\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    \n    average = cube_sum / (n**2)\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = []\n    for index in range(len(test_tuple)):\n        if index == len(test_tuple)-1:\n            rear_index_tuple.append(test_tuple[index])\n        else:\n            rear_index_tuple.append(test_tuple[index][-1])\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_index.append(test_tuple[i])\n        else:\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [elem[-1] for elem in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_list = []\n    # Loop through each string in the tuple\n    for string in test_tuple:\n        # Get the index of the last character in the string\n        rear_index = len(string) - 1\n        # Extract the rear character of the string\n        rear_char = string[rear_index]\n        # Append the rear character to the rear_list\n        rear_list.append(rear_char)\n    # Return the rear_list\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    # create an empty list to store odd numbers\n    odd_nums = []\n    \n    # iterate through the list of numbers\n    for num in nums:\n        # if the number is odd, add it to the odd_nums list\n        if num % 2!= 0:\n            odd_nums.append(num)\n    \n    # return the odd_nums list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list.\n\n    :param nums: A list of numbers.\n    :return: A new list with only the odd numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list of odd numbers from the input list.\n    \"\"\"\n    # Initialize an empty list to store odd numbers\n    odd_numbers = []\n    # Loop through the input list\n    for num in nums:\n        # If the number is odd, append it to the odd_numbers list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    # Return the filtered list\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of the date format in the input string\n    matches = re.findall(pattern, dt)\n\n    # If there are no matches, return the original input string\n    if not matches:\n        return dt\n\n    # Split the matches into year, month, and day components\n    year, month, day = matches[0]\n\n    # Convert the year and month components to integers and then to strings\n    year = str(int(year))\n    month = str(int(month))\n\n    # If the month component has a length of 1, prepend a zero to make it two digits\n    if len(month) == 1:\n        month = '0' + month\n\n    # Convert the day component to a string\n    day = str(day)\n\n    # Join the year, month, and day components back into a date string in the desired format\n    new_dt = '-'.join([day, month, year])\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for a valid date in yyyy-mm-dd format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n\n    # Check if the input date matches the pattern\n    if re.match(pattern, dt):\n        # Extract the year, month, and day from the date string\n        year, month, day = re.findall(pattern, dt)\n        # Format the date string as dd-mm-yyyy\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = dt.replace('-', '/')\n    mm_dd_yyyy = yyyy_mm_dd.replace('/', '-')\n    return mm_dd_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub('-', '/', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Convert to yyyy-mm-dd format\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n\n    # Convert to dd-mm-yyyy format\n    dt = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\1-\\2', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replace_string = r'\\3-\\2-\\1'\n    return re.sub(pattern, replace_string, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match a date in the yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    # If there is at least one match, convert the date to dd-mm-yyyy format\n    if matches:\n        # Convert the matched date to datetime object and format it in the dd-mm-yyyy format\n        date_obj = datetime.strptime(matches[0], '%Y-%m-%d')\n        formatted_date = date_obj.strftime('%d-%m-%Y')\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the date format in the string and replace it with the new format\n    new_date_format = r'\\2-\\1-\\3'\n    dt = re.sub(pattern, new_date_format, dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    year, month, day = match.groups()\n    new_format = f\"{day}-{month}-{year}\"\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = dt[:4] + '-' + dt[4:6] + '-' + dt[6:]\n    dd_mm_yyyy = yyyy_mm_dd[-2:] + '-' + yyyy_mm_dd[5:-2] + '-' + yyyy_mm_dd[0:4]\n    return dd_mm_yyyy"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-gap]\n                my_list[j-gap] = temp\n                j -= gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    # Find the largest gap in the array\n    n = len(my_list)\n    largest_gap = n//2\n    while largest_gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(largest_gap, n):\n            j = i\n            while j >= largest_gap and my_list[j] < my_list[j-largest_gap]:\n                my_list[j], my_list[j-largest_gap] = my_list[j-largest_gap], my_list[j]\n                j -= largest_gap\n        # Decrease the gap size\n        largest_gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the largest power of 2 that is less than or equal to the length of the list\n    n = len(my_list)\n    while n // 2 >= 1:\n        # Perform insertion sort on sublists of size n\n        for i in range(n // 2):\n            key = my_list[i]\n            j = i\n            while j >= n // 2 and my_list[j - n // 2] > key:\n                my_list[j] = my_list[j - n // 2]\n                j -= n // 2\n            my_list[j] = key\n        n //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the step size\n    n = len(my_list)\n    step = n // 2\n\n    # Sort the array using the step size\n    while step > 0:\n        for i in range(step, n):\n            temp = my_list[i]\n            j = i\n            while j >= step and my_list[j - step] > temp:\n                my_list[j] = my_list[j - step]\n                j -= step\n            my_list[j] = temp\n        step //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # define the increment for each step of the sort\n    inc = len(my_list) // 2\n    # iterate until the increment is less than 1\n    while inc > 0:\n        # iterate over the list using the increment\n        for i in range(inc, len(my_list)):\n            # compare the current element with the previous elements\n            # using the previous increment\n            j = i\n            while j >= inc and my_list[j] < my_list[j - inc]:\n                # swap the elements if they are not in the correct order\n                my_list[j], my_list[j - inc] = my_list[j - inc], my_list[j]\n                j -= inc\n        # decrement the increment\n        inc = len(my_list) // inc\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # define the increment sequence for each sublist\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # calculate the gap sequence based on the length of the array\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        # do a gapped insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match\")\n    \n    # initialize empty tuples\n    result_tup1 = ()\n    result_tup2 = ()\n    \n    # iterate through the tuples and extract the elementwise and pairs\n    for i in range(len(test_tup1)):\n        result_tup1 += (test_tup1[i] & test_tup2[i],)\n        result_tup2 += (test_tup1[i] & test_tup2[i],)\n        \n    # return the result as a tuple\n    return result_tup1, result_tup2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize variables for the elementwise and tuple\n    elementwise_and_tuple = []\n    and_tuple = []\n    \n    # check if both tuples have equal lengths\n    if len(test_tup1) == len(test_tup2):\n        # loop through each element in the two tuples\n        for i in range(len(test_tup1)):\n            # calculate the elementwise and of the corresponding elements\n            elementwise_and = test_tup1[i] & test_tup2[i]\n            # append the elementwise and to the elementwise_and_tuple list\n            elementwise_and_tuple.append(elementwise_and)\n            # append the elementwise and to the and_tuple list\n            and_tuple.append(and_tuple)\n    else:\n        # if the tuples do not have the same length, return an error message\n        return \"Error: The two tuples do not have the same length.\"\n    \n    # return the elementwise and tuple\n    return elementwise_and_tuple, and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result_tup = tuple(bool(x) & bool(y) for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    # Initialize the result tuple\n    result_tup = ()\n    # Extract the elementwise and tuples from the input tuples\n    for i in range(len(test_tup1)):\n        # Get the elementwise and tuple\n        and_tup = (test_tup1[i] & test_tup2[i])\n        # Add the and_tup to the result tuple\n        result_tup += (and_tup,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as inputs and returns the elementwise and tuple of the two input tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Initialize empty lists to store the elementwise and tuples\n    and_list = []\n    and_tuple = ()\n\n    # Extract the elementwise and tuples from the two input tuples\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n        and_tuple = and_tuple + (test_tup1[i] & test_tup2[i],)\n\n    return and_list, and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    else:\n        print(\"The given equation does not have a real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots.\"\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula to find the directrix of a parabola \n    # is given by: \n    # directrix = (-b +/- sqrt(b^2 - 4ac)) / 2a \n    # where a, b and c are the coefficients of the parabola.\n    \n    # Calculate the discriminant \n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative \n    if disc > 0: \n        # Compute the root of the discriminant \n        root1 = (-b + disc**0.5) / (2*a) \n        root2 = (-b - disc**0.5) / (2*a) \n        \n        # Sort the roots in ascending order \n        if root1 > root2: \n            temp = root1 \n            root1 = root2 \n            root2 = temp \n        \n        # Return the directrix of the parabola \n        return root1\n    \n    elif disc == 0: \n        # If the discriminant is zero, then the directrix \n        # is at a point, and it is given by the value of b \n        return b\n    \n    else: \n        # If the discriminant is negative, then the directrix \n        # lies on a line, and it is given by the point of intersection \n        # of the line with the x-axis and the equation of the parabola \n        x = (-b) / (2*a) \n        y = -(a*x**2) + c \n        return (x, y)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant >= 0:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n        \n        # Calculate the directrix\n        directrix = (root1 + root2)/2\n        \n        # Return the directrix\n        return directrix\n    \n    else:\n        # Return a message if the discriminant is negative\n        return \"The parabola has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        print(\"The directrix is:\", root1)\n        print(\"The directrix is:\", root2)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        return (-b) / (2*a)\n    else:\n        return \"Complex root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        return (-b + (delta**0.5))/(2*a)\n    elif delta == 0:\n        return (-b)/(2*a)\n    else:\n        return \"The equation does not have a unique solution.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc == 0:\n        directrix = (-b)/(2*a)\n    elif disc > 0:\n        directrix = ((-b)+disc**0.5)/(2*a)\n    else:\n        directrix = ((-b)-disc**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    else:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Return the directrix\n        return root1, root2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if the intersection of the two sets is non-empty\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    # Use a set to store the elements of list1 and remove duplicates\n    set1 = set(list1)\n    # Use a set to store the elements of list2 and remove duplicates\n    set2 = set(list2)\n    # Find the intersection of the two sets and convert it to a list\n    common_list = list(set1.intersection(set2))\n    # Check if the list is empty and return the result\n    if len(common_list) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = set(list1) & set(list2)\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Using set() function to remove duplicates from both lists\n    list1_set = set(list1)\n    list2_set = set(list2)\n    # Using intersection() function to find common elements between the two sets\n    common_elements = list1_set.intersection(list2_set)\n    # If the length of the common elements is greater than 0, then the two lists have at least one common element\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are not empty\n    if not list1 or not list2:\n        return False\n    \n    # Use a set to remove duplicates from the first list\n    list1_set = set(list1)\n    \n    # Iterate through the second list and check if each element is in the set of the first list\n    for item in list2:\n        if item in list1_set:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the base of the trapezium\n    base = (base1 + base2) / 2\n\n    # Calculate the length of the base of the trapezium\n    length = 2 * area / base\n\n    # Sort the two base lengths and the height\n    sorted_base = sorted([base1, base2, height])\n\n    # Calculate the median of the sorted base lengths\n    median_base = sorted_base[1]\n\n    # Calculate the median of the sorted base lengths\n    median_length = sorted_base[2]\n\n    # Calculate the median of the sorted base lengths\n    median = (median_base + median_length) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezium rule.\n\n    base1: the length of the first base of the trapezium\n    base2: the length of the second base of the trapezium\n    height: the height of the trapezium\n\n    Returns: the median length of the trapezium\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    s1 = 0.5 * area\n    s2 = s1 + 0.5 * base1\n\n    # Sort the sides of the trapezium in descending order\n    sides = sorted([s1, s2], reverse=True)\n\n    # Calculate the median length of the trapezium\n    median_length = sides[1]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the length of the median of a trapezium.\n\n    Parameters:\n    - base1: float, the length of the base of the first half of the trapezium\n    - base2: float, the length of the base of the second half of the trapezium\n    - height: float, the height of the trapezium\n\n    Returns:\n    - float, the length of the median of the trapezium\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the length of the smaller half of the trapezium\n    smaller_half_length = 0.5 * (base1 + base2)\n\n    # calculate the length of the larger half of the trapezium\n    larger_half_length = 0.5 * (base1 + base2) + 0.5 * (base1 + base2 - 2 * height)\n\n    # check which half of the trapezium has a higher area\n    if area > (0.5 * (base1 + base2) * (height - 0.5 * height)):\n        return smaller_half_length\n    else:\n        return larger_half_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n\n    # Calculate the height of the trapezium\n    trapezium_height = height\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2 * semi_perimeter - base1 - base2\n\n    # Calculate the area of the lower half of the trapezium\n    lower_half_area = 0.5 * base1 * trapezium_height\n    upper_half_area = 0.5 * base2 * trapezium_height\n\n    # Calculate the area of the upper half of the trapezium\n    half_trapezium_area = lower_half_area + upper_half_area\n\n    # Calculate the difference in areas between the two halves of the trapezium\n    area_difference = abs(area - half_trapezium_area)\n\n    # Calculate the median length of the trapezium\n    if area_difference < 0.0001:\n        median = 0.5 * (base1 + base2)\n    elif area_difference < 0.001:\n        median = (base1 + base2) / 2\n    else:\n        # Calculate the coefficients for the quadratic formula\n        a = (lower_half_area + upper_half_area) / 2\n        b = lower_half_area - upper_half_area\n        c = 2 * area - half_trapezium_area\n\n        # Calculate the roots of the quadratic equation\n        discriminant = b * b - 4 * a * c\n\n        # Calculate the median length\n        if discriminant > 0:\n            root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n            root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n\n            if root1 < 0:\n                root1 = -root1\n                root2 = -root2\n\n            median = 0.5 * (root1 + root2)\n        else:\n            root = -b / (2 * a)\n            if root < 0:\n                root = -root\n\n            median = 0.5 * (root + base1 + base2)\n\n    # Calculate the area of the trapezium at the median length\n    median_area = area_trapezium(base1, base2, height, median)\n\n    return median, median_area\n\ndef area_trapezium(base1, base2, height, median):\n    '''\n    Calculate the area of a trapezium with the given base, height, and median length.\n    '''\n\n    return 0.5 * base1 * median + 0.5 * base2 * median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the length of the median trapezium given its base and height.\n    \"\"\"\n    base_sum = base1 + base2\n    mid_point = (base_sum / 2)\n    mid_height = height / 2\n\n    # Check if the base is taller than the height\n    if mid_height > mid_point:\n        return base_sum - (mid_height * 2)\n    else:\n        return mid_height * 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each side of the trapezium\n    length1 = base1 + base2\n    length2 = height\n    \n    # Calculate the length of the midpoint of the trapezium\n    midpoint = (length1 + length2) / 2\n    \n    # Calculate the area of each half of the trapezium\n    area1 = base1 * height / 2\n    area2 = (base2 * height) / 2\n    \n    # Calculate the area of the trapezium\n    trapezium_area = area1 + area2\n    \n    # Calculate the median area of the trapezium\n    median_area = trapezium_area / 2\n    \n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = (midpoint * (midpoint - length1) + (midpoint - length1) * (midpoint - length2)) / (midpoint - length1)\n    \n    # Calculate the length of the other half of the trapezium\n    other_half_length = (midpoint * (midpoint - length2) - (midpoint - length1) * (midpoint - length2)) / (midpoint - length2)\n    \n    # Find the median length of the trapezium\n    median_length = hypotenuse * (other_half_length + midpoint) / (2 * hypotenuse)\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the base of the first half\n    half_base1 = base1 / 2.0\n\n    # Calculate the length of the base of the second half\n    half_base2 = base2 / 2.0\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the base of the trapezium\n    trapezium_base = half_base1 + half_base2\n\n    # Calculate the height of the trapezium\n    trapezium_height = 0.5 * height\n\n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * trapezium_base * trapezium_height\n\n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * base1 * trapezium_height + 0.5 * base2 * trapezium_height\n\n    # Calculate the ratio of the area of the trapezium to the area of the square of the base\n    ratio = trapezium_area / (area * base_area)\n\n    # Calculate the length of the median\n    median = 0.5 * trapezium_base * (1 + ratio)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    trapezium_area = (base1 * height) / 2 + (base2 * height) / 2\n    \n    # Calculate the median length of the trapezium\n    median_length = trapezium_length * (2 * trapezium_area) / (4 * height**2)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * height\n    perimeter = base1 + base2\n    median = 0.5 * perimeter\n\n    if area > 0:\n        hypotenuse = math.sqrt(area)\n        semi_perimeter = 0.5 * perimeter\n        mid_point = 0.5 * (semi_perimeter - hypotenuse)\n        return abs(mid_point - median)\n    else:\n        return 0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height + height * height)\n    # find the median length of the trapezium\n    if area > 0:\n        median_length = 0.5 * (trapezium_length + height)\n    else:\n        median_length = 0.5 * (trapezium_length - height)\n    # return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than = False\n\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_elements = []\n    for i in arr:\n        if i > number:\n            greater_elements.append(i)\n    if len(greater_elements) > 0:\n        print(\"The entered number is greater than the following elements in the array:\", greater_elements)\n    else:\n        print(\"The entered number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than\", i)\n            break\n    else:\n        print(\"The number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(\"True\")\n            return True\n    print(\"False\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a+b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\b\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a[b]*\"\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b){1,}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'[a][b]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer number as input and returns the last digit of the number.\n    '''\n    # Convert the input number to a string\n    str_n = str(n)\n    \n    # Convert the string to a list of characters\n    lst_n = list(str_n)\n    \n    # Extract the last character of the list\n    last_char = lst_n[-1]\n    \n    # Convert the last character to an integer\n    last_int = int(last_char)\n    \n    # Return the last digit of the input number\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    # Get the last digit of the number using integer division operator //\n    last_digit = n % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number into a string and get the last character\n    last_char = str(n)[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list with all negative numbers.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of the negative numbers in the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if ord(char) % 2!= 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum() or char == \" \":\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = ''\n    for char in str1:\n        if char.isalnum():\n            odd_chars += char\n    return odd_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create a new string to store the result\n    result = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if odd, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and removes all odd characters from it.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isdigit() or char == \".\":\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if char.isalpha() and int(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two elements.\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] and (test_list[j], test_list[i]) in test_list[:j] and (test_list[j], test_list[i]) not in test_list[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j] or (test_list[j][0], test_list[i][1]) in test_list[i]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][0]) and (test_list[i][1] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list or (test_list[i][1], test_list[j][0]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for i in L:\n        single *= i\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable with the first element of the list\n    result = L[0]\n    # Loop through the rest of the list\n    for i in range(1, len(L)):\n        # Check if the current element is a multiple of 5\n        if L[i] % 5 == 0:\n            # If it is, add it to the result\n            result += L[i]\n        else:\n            # If it's not, return the result\n            return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for number in L:\n        single_integer *= number\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string of numbers separated by commas\n    s = \",\".join(map(str, L))\n    # Convert the string to an integer\n    result = int(s)\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern for finding the adverbs\n    pattern = re.compile(r'\\b(\\w+)(\\W+)(\\w+)(\\W+)(\\w+)(\\W+)(\\w+)\\b')\n    # Find all the matches in the given text\n    matches = pattern.finditer(text)\n    # Initialize a list to store the adverb and their positions\n    adverbs = []\n    # Loop through all the matches and extract the adverbs and their positions\n    for match in matches:\n        if match.group(1).lower() in ['a', 'an', 'the']:\n            adverbs.append((match.group(1).lower(), len(match.group(0))))\n        elif match.group(2).lower() in ['not', 'n\\'t', 'noted', 'noticed', 'noticed']:\n            adverbs.append(('not', len(match.group(0))))\n        elif match.group(3).lower() in ['again', 'further', 'increased', 'increased', 'increased']:\n            adverbs.append(('increased', len(match.group(0))))\n        elif match.group(4).lower() in ['less', 'lesser','reduced','reduced']:\n            adverbs.append(('reduced', len(match.group(0))))\n        elif match.group(5).lower() in ['more', 'greater', 'increased', 'increased']:\n            adverbs.append(('increased', len(match.group(0))))\n        elif match.group(6).lower() in ['most','mostly','mostly','mostly']:\n            adverbs.append(('mostly', len(match.group(0))))\n        elif match.group(7).lower() in ['least', 'leastly', 'leastly', 'leastly']:\n            adverbs.append(('leastly', len(match.group(0))))\n    # Sort the adverbs based on their positions in the text\n    adverbs.sort(key=lambda x: x[1])\n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the first adverb in the text\n    match = re.search(r'\\b(\\w+(\\s\\w+)*)(\\s*(\\w+)(\\s\\w+)*\\b)', text)\n    \n    # If no adverb is found, return None\n    if match is None:\n        return None\n    \n    # Split the adverb into words and store their positions\n    words = match.group(1).split()\n    pos = [match.start(i) for i in range(len(words))]\n    \n    # Find the index of the first adverb in the list of words and its position\n    index = pos.index(min(pos))\n    \n    # Return the adverb and its position\n    return match.group(1), index"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_adverb_position(text):\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b(?:adverb|adv|advmod|advphrase|adverbial)\\b'\n\n    # Find all adverbs in the text using the regex pattern\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Loop through all the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w*[a-zA-Z]*adverb\\w*[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.index(match)\n        print(f'{match} appears at position {start}.')\n    print(f'There are {len(matches)} adverbs in the text.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:adv|adv_adj|adv_adv|adv_conj|adv_part|adv_prep|adv_prepc)\\b'\n\n    # Use the regular expression pattern to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Iterate over the adverbs and print their positions in the sentence\n    for index, adv in enumerate(adverbs):\n        print(f'{adv} found at index {index} in the sentence')\n\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence using regular expressions\n    adverbs = re.findall(r'\\b[A-Z][a-z]*\\b', text)\n    \n    # Initialize an empty dictionary to store the adverb and its position in the sentence\n    adverb_position = {}\n    \n    # Iterate through all the adverbs\n    for i in range(len(adverbs)):\n        # If the current adverb is not already in the dictionary, add it with its position in the sentence\n        if adverbs[i] not in adverb_position:\n            adverb_position[adverbs[i]] = i\n    \n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:(?:after|against|along|among|around|at|before|behind|below|beneath|beside|between|beyond|but|by|during|except|for|from|in|inside|into|like|near|of|off|on|onto|outside|over|past|regarding|round|since|than|through|to|toward|under|underneath|until|up|upon|with|within|without)\\b)\\b'\n    \n    # Use the re.search() function to find all adverbs in the text\n    matches = re.search(pattern, text)\n    \n    # If there are no adverbs, return an empty list\n    if matches is None:\n        return []\n    \n    # Extract the position(s) of the first adverb(s) from the match object\n    position = matches.span()[0]\n    \n    # Return a list of tuples containing the adverb and its position(s)\n    adverbs = [(match.group(0), position)]\n    while True:\n        # Use the re.search() function to find the next adverb in the text\n        matches = re.search(pattern, text, position)\n        if matches is None:\n            break\n        # Update the position to the position of the next adverb\n        position = matches.span()[0]\n        # Add the adverb to the list of adverbs\n        adverbs.append((matches.group(0), position))\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    adverb_pattern = re.compile(r'\\b(\\w+)\\s*([^\\w])\\b')\n    \n    # Find all matches of the adverb pattern in the text\n    matches = adverb_pattern.findall(text)\n    \n    # Sort the matches by position in the sentence\n    matches.sort(key=lambda x: x[1])\n    \n    # Print the adverbs and their positions\n    print(\"Adverbs:\")\n    for i, match in enumerate(matches):\n        print(f\"{match[0]} at position {match[1]}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(a|an|the|at|on|in|on)\\b\\s+(adverb)'\n\n    # Use re.findall() to find all matches in the sentence\n    matches = re.findall(pattern, text)\n\n    # Print the matches and their positions in the sentence\n    for i, match in enumerate(matches):\n        print(f'{match[0]} at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for adverbs\n    pattern = r'\\b(?:[A-Z]+\\.)+[A-Z]+\\b'\n\n    # Find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Create a dictionary to store the adverb and its position in the sentence\n    adverb_positions = {}\n\n    # Iterate over all adverbs found and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Split the adverb into its constituent parts\n        parts = adverb.split('.')\n\n        # If there are more than one part, add the adverb and its position to the dictionary\n        if len(parts) > 1:\n            position = len(adverb) - len(parts[1])\n            if position not in adverb_positions:\n                adverb_positions[position] = [adverb]\n            else:\n                adverb_positions[position].append(adverb)\n\n    # Return the sorted dictionary of adverb positions\n    return sorted(adverb_positions.items())"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Formula for surface area of a cube: 6 * s * l\n    s = (l * l * l) ** (1/3)\n    return 6 * s * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube using the formula: s = 6*l^2\n    s = 6*l**2\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2 # formula for surface area of cube\n    return surface_area # return surface area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize arrays to keep track of positive and negative numbers\n    positive_arr = array('i')\n    negative_arr = array('i')\n\n    # loop through each number in the array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # add the number to the positive array\n            positive_arr.append(num)\n        else:\n            # add the number to the negative array\n            negative_arr.append(num)\n\n    # calculate the length of the arrays and the sum of all numbers\n    pos_len = len(positive_arr)\n    neg_len = len(negative_arr)\n    sum_nums = pos_len + neg_len\n\n    # calculate the ration of positive numbers\n    pos_ratio = pos_len / sum_nums\n\n    # return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function finds the ratio of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of integers\n    nums = array('i', nums)\n    # Initialize count to 0\n    count = 0\n    # Loop through the array\n    for num in nums:\n        # If the number is positive, increment the count\n        if num > 0:\n            count += 1\n    # Calculate the ratio of positive numbers\n    ratio = count / len(nums)\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_type = array('i')\n    for num in nums:\n        num_type.append(num)\n    pos_count = 0\n    for num in num_type:\n        if num > 0:\n            pos_count += 1\n    return float(pos_count) / len(num_type)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list for easier manipulation\n    nums_list = list(nums)\n\n    # Initialize counters\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the list\n    for num in nums_list:\n        # Check if the number is positive\n        if num > 0:\n            pos_count += 1\n        # Otherwise, it must be negative\n        else:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a set to remove any duplicates\n    nums = set(nums)\n    \n    # Count the number of positive numbers\n    pos_count = sum(1 for num in nums if num > 0)\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0.0\n    else:\n        return float(pos_count) / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the positive numbers\n    positive_nums = array('i')\n\n    # Iterate through the input array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # Calculate the ration of positive numbers\n    positive_count = len(positive_nums) / len(nums)\n\n    # Return the ration of positive numbers\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the positive numbers\n    arr = array('i')\n    # loop through the array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            arr.append(num)\n    # calculate the length of the array\n    length = len(arr)\n    # find the total number of elements in the array\n    total = sum(arr)\n    # calculate the ration of positive numbers\n    ration = round(len(arr) / total, 2)\n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < 0 and lst[i] > max_neg:\n            max_neg = lst[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and finds the largest negative number in the list.\n    '''\n    largest_num = list1[0] # Assuming the first element in the list is the largest negative number\n    for num in list1: \n        if num < 0 and num > largest_num: # If the current number is negative and is greater than the current largest negative number\n            largest_num = num # Update the largest negative number\n    return largest_num # Return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = float('-inf')  # initialize largest negative number variable\n    \n    for num in list1: \n        if num < 0 and num > largest_neg_num: \n            largest_neg_num = num  # update largest negative number if a smaller negative number is found\n    \n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = -999999999\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize the largest negative number variable\n    largest = float('-inf')\n\n    # Iterate through the list and check for the largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # get the tuple elements\n        tup = test_list[i]\n        # get the first k elements of the tuple\n        first_k_elem = tup[:K]\n        # append the first k elements to the trimmed list\n        trimmed_list.append(first_k_elem)\n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], tuple(test_list[i][1][:K]))"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # Iterate through each tuple in the input list\n    for tuple_item in test_list:\n        # Initialize a new tuple with only the first k items of the current tuple\n        trimmed_tuple = tuple(tuple_item[:K])\n        # Add the trimmed tuple to the new list\n        trimmed_list.append(trimmed_tuple)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(len(tup)))\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i > 0:\n                test_list[i][j] = test_list[i-1][j]\n            if j > 0:\n                test_list[i][j] = test_list[i][j-1]\n            if i > 0 and j > 0:\n                test_list[i][j] = test_list[i-1][j-1]\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i == j:\n                test_list[i] = tuple(test_list[i])\n                break\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # creating two empty lists for multiplication of tuple elements\n    result_list1 = []\n    result_list2 = []\n    # iterating over each index of the two tuples\n    for i in range(len(test_tup1)):\n        # multiplying the elements of each tuple at the current index and appending the result to the appropriate list\n        result_list1.append(test_tup1[i] * test_tup2[i])\n        result_list2.append(test_tup2[i] * test_tup1[i])\n    # returning the multiplication results as a tuple\n    return tuple(result_list1), tuple(result_list2)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # check if both tuples have equal number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have equal number of elements\")\n        return\n\n    # perform index wise multiplication\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the length of the two tuples are equal or not\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths\")\n        return None\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Perform the index wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary of \n    elements and their count in the tuple.\n    '''\n    count = Counter(lst) \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Count the occurrences of each element in the list in the tuple.\n    count = Counter(tup)\n\n    # Iterate through the list and count the occurrences of each element.\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n    # Convert the dictionary to a list of tuples.\n    result = list(count.items())\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    count_tup = tuple(count_dict.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    for num in tup: \n        if num in counter: \n            print(num, counter[num]) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict = {k: count_dict[k] for k in count_dict if k in lst}\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) # create a counter object to count the occurrences of each element in the list\n    new_tup = tuple(tup) # convert the tuple to a list so we can modify it\n    for i in range(len(tup)): # iterate over each element in the tuple\n        if new_tup[i] in count_dict: # if the element is in the list\n            count_dict[new_tup[i]] += 1 # increment its count in the dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for item in tup:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary\n    where the keys are the elements of the list and the values are the number of times\n    each element occurs in the tuple.\n    \"\"\"\n    # Creating a Counter object to count the occurrences of each element in the list in the tuple\n    count_dict = Counter(lst)\n\n    # Creating a dictionary where the keys are the elements of the tuple and the values are the counts\n    count_tup = {}\n\n    # Looping through the tuple and adding the counts to the dictionary\n    for i in range(len(tup)):\n        count_tup[tup[i]] = count_dict[tup[i]]\n\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    count = Counter()\n    for item in lst:\n        count[item] = c.get(item, 0) + 1\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through each element in the list and cube it\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    # Return the modified list\n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    perrin_list = [1, 4, 16, 64, 256, 1024]\n    sum_list = []\n\n    for i in perrin_list:\n        sum_list.append(i ** n)\n\n    return sum(sum_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    \n    while n > 0:\n        if n % 2 == 1:\n            sum += p\n        p = p * 3 + 1\n        n = n // 2\n        \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    sum_of_numbers = 0\n    \n    for i in range(n):\n        sum_of_numbers += perrin_numbers[i]\n    \n    return sum_of_numbers\n\nn = int(input(\"Enter the number of Perrin numbers: \"))\nprint(\"The sum of the first\", n, \"Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of perrin numbers.\n    '''\n    # Initialize sum variable\n    sum_perrin = 0\n    \n    # Loop through the range of n numbers\n    for i in range(1, n+1):\n        # Calculate the sum of the i-th perrin number\n        sum_perrin += i\n    \n    # Return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perrin(n):\n    '''\n    A function to check if a number is a Perrin number or not.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**2\n    return s == n**2\n\ndef sum_of_perrin_numbers(n):\n    '''\n    A function to calculate the sum of Perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if is_perrin(i):\n            perrin_sum += i\n    return perrin_sum\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum_of_perrin_numbers(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of Perrin numbers up to\", n, \"is\", cal_sum(n))"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), l):\n        result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), l):\n        result.extend(str_list[i:i+l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[0:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list with\n    the specified size of strings from the original list.\n    '''\n    new_list = []\n    for string in str_list:\n        new_list.append(string[:size])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) > size:\n            result.append(str_list[i][0:size])\n        else:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a list of string values.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:l]\n    return str_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    \n    # Remove leading and trailing whitespaces from the string\n    text1 = text1.strip()\n    \n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s]+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove all single quotes from the string\n    text1 = text1.replace(\"'\", \"\")\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 10 # Assume loss percentage is 10%\n    loss_amount = sale_amount * (loss_percent/100)\n    if actual_cost >= sale_amount - loss_amount:\n        return 0\n    else:\n        return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = actual_cost - sale_amount\n    if loss_percent > 0:\n        return loss_percent\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost <= sale_amount:\n        loss_percentage = (actual_cost/sale_amount)*100\n        return round(loss_percentage,2)\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n\n    # initialize variables\n    even_sum = 0\n    num = n\n    \n    # loop through odd numbers up to square root of number\n    while num >= 2:\n        if num % 2 == 0:\n            even_sum += num\n        num -= 1\n    \n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Using a set to eliminate duplicates of factors\n    factors = set()\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add it to the factors set\n            factors.add(i)\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all even factors in the set\n    for factor in factors:\n        # Add the factor to the sum\n        sum += factor\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n/i == int(n/i):\n                sum += n/i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes an integer as an input and returns the sum of even factors of the input number. \n    '''\n    count = 0\n    sum = 0\n    \n    # Loop through all possible factors of n\n    for i in range(2, int(math.sqrt(n))+1): \n        if n%i == 0: \n            if n%2 == 0: \n                sum += n\n            count += 1\n    \n    # Add the last factor of n (if it's even)\n    if n%2 == 0: \n        sum += n\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += n/i\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactorsSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactorsSum += i\n    return evenFactorsSum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes in a string as input and returns a list of all words containing the letter 'z'.\n    '''\n    words = re.findall(r'\\b[a-zA-Z]+z\\b', text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w{1}z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz_pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(wordz_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z0-9]+\\b\\s*z\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern for matching words containing 'z'\n    pattern = r'\\b[A-Za-z]+\\sz\\b'\n    \n    # Use the re.findall() method to find all words containing 'z' in the given text\n    result = re.findall(pattern, text)\n    \n    # Return the list of matched words\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Check if the month number is a number\n    if not isinstance(monthnum2, int):\n        raise TypeError(\"The argument must be a number.\")\n\n    # Check if the month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        raise ValueError(\"The argument must be between 1 and 12.\")\n\n    # Check if the month number is divisible by 3 (divisible by 31)\n    if monthnum2 % 3!= 0:\n        return False\n\n    # Check if the month number is divisible by 100 (not divisible by 3) and divisible by 400 (divisible by 400)\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number!\"\n\n    # Check the month number\n    if monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum2 in [2]:\n        return \"28 or 29 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum == 2 and not (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum in [4,6,9,11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in range(1,13):\n        if monthnum2 in [1,3,5,7,8,10,12]:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid input!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n            if monthnum2 in range(4, 12):\n                return True\n            elif monthnum2 in range(2, 4):\n                return False\n            else:\n                return False\n        else:\n            if monthnum2 in range(1, 2):\n                return False\n            else:\n                return True\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    # Check if the given month number is a valid integer between 1 and 12\n    if not isinstance(monthnum2, int) or monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # Map month numbers to their number of days\n    month_to_day_mapping = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    # Check if the month contains 31 days\n    if month_to_day_mapping[monthnum2] == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n\n    Args:\n    monthnum: The month number to be checked.\n\n    Returns:\n    True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < len(min_sublist):\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length to infinity\n    min_length = float('inf')\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the current sublist has a smaller length\n        if len(sublist) < min_length:\n            # Update the minimum length\n            min_length = len(sublist)\n\n    # Return the sublist with the minimum length\n    return lst[lst.index(min_length)]\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_length = float('inf')  # initialize minimum length to infinity\n    min_sublist = []  # initialize minimum sublist\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    # Create a dictionary to store the length of each sublist\n    sublists = {}\n    # Initialize the minimum sublist as the entire list\n    min_sublist = lst\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Find the length of the current sublist\n        sublist = lst[i:]\n        # Append the length of the current sublist to the dictionary\n        sublists[i] = len(sublist)\n        # Check if the current sublist has the minimum length\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with the minimum length.\n    \"\"\"\n    min_len = float('inf')  # initialize minimum length to infinity\n    min_sublist = []        # initialize empty list for minimum sublist\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = float('inf') # initialize the minimum length to infinity\n    min_sublist = [] # initialize an empty list to store the sublist having minimum length\n\n    for sublist in lst:\n        if len(sublist) < min_length: # check if the current sublist has a smaller length\n            min_length = len(sublist) # update the minimum length\n            min_sublist = sublist # update the sublist with minimum length\n\n    return min_sublist # return the sublist with minimum length"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes two arguments, l and b, which represent the length and the breadth of a rectangle respectively.\n    It calculates the area of the rectangle using the formula area = length * breadth.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes in two parameters, length and breadth, which represent the length and breadth of a rectangle respectively.\n    The function returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z]+\\b')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]')\n    # use the pattern to find all uppercase letters in the string\n    matches = pattern.findall(str1)\n    # loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase = re.findall(r'[A-Z]+', str1)\n    for i in uppercase:\n        str1 = str1.replace(i, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use a regular expression to find all uppercase substrings in the string\n    pattern = r'\\b[A-Z]+\\b'\n    uppercase_substrings = re.findall(pattern, str1)\n    # Loop through each uppercase substring and remove it from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase to simplify the regular expression\n    str1 = str1.lower()\n    # Define the regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]'\n    # Use the re.findall() method to find all occurrences of uppercase substrings\n    matches = re.findall(pattern, str1)\n    # Loop through the matches list and remove them from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns a new string that removes all uppercase substrings from it.\n    '''\n    # Use regex to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # Iterate through the list of uppercase substrings and remove them from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # regular expression pattern for uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z][a-z]+')\n\n    # replace all uppercase substrings with empty string\n    str1 = pattern.sub('', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to search for uppercase substrings in the input string\n    result = pattern.sub('', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_list = []\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Extract the first element of the sublist and append it to the extracted_list\n            extracted_list.append(sublist[0])\n        else:\n            # If the sublist is empty, append None to the extracted_list\n            extracted_list.append(None)\n    # Return the extracted_list\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0])"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    result = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            k = j + i - 1\n            temp = lst[j:k+1]\n            result.append(temp)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    result = []\n\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            temp = []\n            for k in range(j, j + i):\n                temp.append(list1[k])\n            result.append(temp)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combinations = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            combinations.append(list1[i-1:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    list1 = list1 + [0]  # append 0 to the list to include it as a base case\n    result = []\n\n    def backtrack(start, curr_comb):\n        if start == len(list1):\n            result.append(curr_comb[:])\n            return\n        backtrack(start+1, curr_comb)\n        backtrack(start+1, curr_comb + [list1[start]])\n\n    backtrack(0, [])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n    # Iterate through all possible indices of the first list\n    for i in range(len(list1)):\n        # Create a new list to store the current combination\n        current_combination = []\n        # Append the element at the current index to the current combination\n        current_combination.append(list1[i])\n        # Iterate through all possible indices of the remaining list\n        for j in range(i+1, len(list1)):\n            # Append the element at the current index to the current combination\n            current_combination.append(list1[j])\n            # Append the current combination to the combinations list\n            combinations.append(current_combination)\n            # Remove the last element from the current combination to generate the next combination\n            current_combination.pop()\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(list1[j-1:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    \n    result = []\n    for i in range(len(list1)):\n        for j in combinations_list(list1[:i] + list1[i+1:]):\n            result.append([list1[i]] + j)\n            \n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    if len(lst) < 2:\n        return []\n    comb = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            comb.append(lst[i:j])\n    return comb"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(max_ending_here, 0)\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here, min_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if current_product < 0:\n            current_product = num\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n\n    # Initialize the maximum subarray product and the current subarray product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate over the array\n    for num in arr:\n\n        # Update the current subarray product\n        current_product *= num\n\n        # If the current subarray product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n\n        # Update the maximum subarray product if it is greater than the current subarray product\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > result:\n            result = max_ending_here\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the value\n    value = None\n    \n    # Loop through the dictionary and check if all values are same\n    for i in dict:\n        if value is None:\n            value = dict[i]\n        elif value!= dict[i]:\n            return False\n    \n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    if len(dict) < 2:\n        return True\n\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return False\n    elif dict.values() == set(dict.values()) and len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the first value in the dictionary\n    first_value = dict.values()[0]\n    # Loop through each value in the dictionary\n    for value in dict.values():\n        # If any value is not equal to the first value, return False\n        if value!= first_value:\n            return False\n    # If all values are equal to the first value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a list to store the unique values\n    values = []\n    # iterate through the dictionary and add unique values to the list\n    for value in dict.values():\n        if value not in values:\n            values.append(value)\n    # check if all the values in the list are the same\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create an empty list to store the non-empty items from the dictionary\n    result = []\n    # loop through each item in the dictionary\n    for item in dict1.items():\n        # if the item is not empty\n        if item[1]!= '':\n            # add the item to the result list\n            result.append(item)\n    # return the result list as the new dictionary\n    return dict(result)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create a new dictionary\n    dict2 = {}\n    # Iterate through the keys of the original dictionary\n    for key in dict1:\n        # If the key is not empty, add it to the new dictionary\n        if dict1[key] is not None and dict1[key]!= '':\n            dict2[key] = dict1[key]\n    # Return the new dictionary\n    return dict2"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the length of the largest subsequence\n    max_len = 1\n    for i in range(1, n):\n        if i + arr[i] > max_len:\n            max_len = i + arr[i]\n\n    # Create a matrix to store the max product of each subsequence ending at each index\n    dp = [[0] * max_len for _ in range(n)]\n\n    # Initialize the first row and column with 1\n    for i in range(max_len):\n        dp[0][i] = arr[0] * arr[1:i+2]\n\n    # Fill in the remaining matrix\n    for i in range(1, n):\n        for j in range(max_len):\n            if j + arr[i] > max_len:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+arr[i]] * arr[i])\n\n    # Find the maximum product\n    max_product = 0\n    for i in range(max_len):\n        max_product = max(max_product, dp[n-1][i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    if not arr: \n        return 0\n\n    max_product = float('-inf')\n    max_product_ending_here = 1\n\n    for i in range(len(arr)):\n        if i == 0:\n            max_product_ending_here = arr[i]\n        else:\n            max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here * arr[i], arr[i])\n\n        max_product = max(max_product, max_product_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr):\n        n = len(arr)\n        dp = [1] * n\n\n        for i in range(1, n):\n            for j in range(i):\n                if arr[j] < arr[i]:\n                    dp[i] = max(dp[i], dp[j] * arr[i])\n\n        return dp\n\n    def max_product_subsequence(arr, dp):\n        n = len(arr)\n        result = 0\n\n        for i in range(n):\n            result = max(result, dp[i])\n\n        return result\n\n    dp = increasing_subsequence(arr)\n    return max_product_subsequence(arr, dp)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables to store the maximum and current products and the index of the maximum product\n    max_product = float('-inf')\n    current_product = 1\n    max_index = 0\n\n    # Iterate through the array and find the maximum product\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_index = i\n        elif current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # initialize max_product with the first element\n    max_product = arr[0]\n    \n    # create a list to store products of increasing subsequences\n    products = [1] * n\n    \n    # compute the products of increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                products[i] = max(products[i], products[j] * arr[i])\n    \n    # return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_prod = float('-inf')\n    \n    # Calculate the prefix sum array\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            # Check if the current subsequence is increasing\n            if prefix_sum[j] - prefix_sum[i-1] > 0:\n                subseq_prod = arr[i-1] * arr[j-1]\n                if subseq_prod > max_prod:\n                    max_prod = subseq_prod\n                    \n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0]*arr[1], arr[0]*arr[2], arr[1]*arr[2])\n\n    dp = [0]*n\n\n    # calculate dp[i] as the maximum product of the first i elements of arr\n    dp[0] = max(arr[0], arr[1])\n    dp[1] = max(arr[0]*arr[1], arr[2])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-2]*arr[i], dp[i-1]*arr[i], arr[i])\n\n    return dp[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables for the maximum product and the current product and the current subsequence\n    max_product = float('-inf')\n    current_product = 1\n    current_subsequence = [1]\n    \n    # Loop through the array\n    for num in arr:\n        # If the current number is smaller than the previous number, add it to the current subsequence and update the current product\n        if num < current_subsequence[-1]:\n            current_subsequence.append(num)\n            current_product *= num\n        # If the current number is greater than the previous number, subtract the previous number from the current product and add the current number to the current subsequence\n        elif num > current_subsequence[-1]:\n            current_product = current_product * current_subsequence[-1] - current_subsequence[-2]\n            current_subsequence.append(num)\n        # If the current number is equal to the previous number, add it to the current subsequence\n        else:\n            current_subsequence.append(num)\n        \n        # Update the maximum product if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 0\n    min_product = 0\n\n    for i in range(n):\n        if i == 0:\n            max_product = arr[0]\n            min_product = arr[0]\n        elif i == 1:\n            max_product = max(arr[0], arr[1])\n            min_product = min(arr[0], arr[1])\n        else:\n            max_product = max(max_product, arr[i], arr[i-1]*arr[i])\n            min_product = min(min_product, arr[i], arr[i-1]*arr[i])\n\n        if max_product > 0:\n            max_product_list.append(max_product)\n            if max_product > max_product_all:\n                max_product_all = max_product\n\n        if min_product < 0:\n            min_product_list.append(min_product)\n            if min_product < min_product_all:\n                min_product_all = min_product\n\n    return max_product_all\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(1, len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num_elements = len(test_tup)\n    pairwise_sum = 0\n    for i in range(num_elements-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return None\n    else:\n        pairwise_sum = 0\n        for i in range(1, n):\n            pairwise_sum += test_tup[i]\n        return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Loop through the tuple and add the neighboring elements\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i+1]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to store the sum of the pairs\n    pair_sum = 0\n    # initialize variables to store the current element being processed\n    current_element = test_tup[0]\n    # iterate over the tuple from the second element to the last element\n    for i in range(1, len(test_tup)-1):\n        # calculate the sum of the current element and the next element\n        pair_sum += test_tup[i] + test_tup[i+1]\n        # update the current element for the next iteration\n        current_element = test_tup[i+1]\n    # return the total sum of the pairs\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the pairwise additions\n    pairwise_sum = 0\n    # Loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # Return the final sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    result = 0\n    for i in range(n - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize the sum to 0\n    result = 0\n\n    # Iterate over the tuple and add the pairwise addition of each adjacent elements\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Initialize variables to store the product and the remainder\n    product = 1\n    remainder = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Multiply the current element with the current product modulo n\n        current_product = (product * arr[i]) % n\n        \n        # Add the current element to the product and the remainder\n        product = (product + arr[i]) % n\n        remainder = (remainder + current_product) % n\n        \n    # Return the remainder\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr: \n        product = (product * i) % n\n    return product "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Base case: if the array is empty, return 0\n    if len(arr) == 0:\n        return 0\n\n    # Base case: if the array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n\n    # Initialize the remainder to be the first element of the array\n    remainder = arr[0]\n\n    # Initialize the power to be the second element of the array\n    power = arr[1]\n\n    # Initialize the modulo to be n\n    modulo = n\n\n    # Initialize the result to be the first element of the array\n    result = arr[0]\n\n    # Perform the extended Euclidean algorithm\n    for i in range(2, len(arr)):\n        # Calculate the quotient and the remainder using the extended Euclidean algorithm\n        quotient, remainder = divmod(remainder, modulo)\n\n        # Update the result\n        result = (result * power) % modulo\n\n        # Update the power and the modulo\n        power = (power * power) % modulo\n        modulo = (modulo * modulo) % modulo\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers `arr` and an integer `n` as input.\n    It computes the product of the array multiplication modulo `n` and returns the result.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    # Initialize result to 1 \n    result = 1 \n  \n    # Perform modular exponentiation \n    for i in range(len(arr)): \n        result = (result * arr[i]) % n \n  \n    # Return result \n    return result "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result variable\n    result = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Multiply the result with the current number modulo n\n        result = (result * num) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number `n` as input and returns the product of the array multiplied modulo `n`.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the remainder\n    of the product of the array multiplied modulo n.\n    '''\n\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if count == 0 and l[i]!= l[i-1]+1:\n            count += 1\n        elif l[i] == l[i-1]+1:\n            count += 1\n        elif count > 0 and l[i]!= l[i-1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i + 1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]-1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        else:\n            i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        elif l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n): \n        if l[i]!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the second list to remove duplicates\n    set_list2 = set(test_list2)\n    # Use list comprehension to find the intersection of first and second lists\n    intersection_list = [tup for tup in test_list1 if tup in set_list2]\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns a new list containing the tuple\n    intersection of elements from both input lists.\n    \"\"\"\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersection.append(tup1)\n                break\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the list to a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets using set intersection\n    intersection = set1.intersection(set2)\n    # convert the intersection back to a list\n    result = list(intersection)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2 and i not in result:\n            result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes in two lists of tuples and returns a list of tuples containing all the tuples that are present \n    in both lists, irrespective of their order.\n    '''\n    intersection_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                intersection_list.append(tuple1)\n                break\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize an empty list to store the intersection of tuples\n    intersection = []\n\n    # Loop through the first tuple list\n    for t1 in test_list1:\n        # Loop through the second tuple list\n        for t2 in test_list2:\n            # Check if the two tuples have the same elements, regardless of their order\n            if t1 == t2:\n                # If they do, add the tuple to the intersection list\n                intersection.append(t1)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set from each tuple list and find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    common_set = set1.intersection(set2)\n\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the given lists to sets to remove duplicates\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n    # Find the intersection between the two sets\n    intersection_set = set_1.intersection(set_2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of tuples from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Filter out the tuples with duplicates\n    filtered_list = list(set(test_list1) & set(test_list2))\n    # Sort the tuples in ascending order\n    sorted_list = sorted(filtered_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters:\n        str1 (str): The input string.\n        ch (str): The character to replace.\n        newch (str): The new character to replace each occurrence of ch.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize a variable to store the modified string\n    mod_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is the original character to be replaced\n        if char == ch:\n            # replace it with the new character\n            mod_str += newch\n        else:\n            # if the character is not the original character to be replaced, add it to the modified string\n            mod_str += char\n    # return the modified string\n    return mod_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string where all occurrences of the old character are replaced by the new character\n    new_str = str1.replace(ch, newch)\n    # Return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string where all occurrences of 'ch' are replaced by 'newch'\n    new_str = str1.replace(ch, newch)\n    # Return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(counter):\n    sorted_dict = Counter(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to list of tuples\n    sorted_list = [(key, value) for key, value in dict1.items()]\n    # sort list of tuples based on value\n    sorted_list.sort(key=lambda x: x[1])\n    # create a dictionary from the sorted list\n    sorted_dict = dict(sorted_list)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a list of tuples\n    lst = dict1.items()\n    # sort the list of tuples by value in descending order\n    lst.sort(key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted list of tuples\n    sorted_dict = dict(lst)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Convert the dictionary into a list of tuples\n    list_of_tuples = [(k, v) for k, v in dict1.items()]\n\n    # Use the Counter class to count the frequency of each value\n    freq = Counter(list_of_tuples)\n\n    # Sort the dictionary based on the values\n    sorted_dict = dict(sorted(freq.items(), key=lambda x: x[1], reverse=True))\n\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Given an array of integers, return the sum of the largest and smallest values.\n    \"\"\"\n    largest = smallest = float('-inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the largest and smallest values\n    max_sum = nums[0] + nums[1]\n    min_sum = nums[-1] + nums[-2]\n\n    return max_sum, min_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the sum of the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Return the sum\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return \"Array is empty\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values\n    largest = nums[len(nums)-1]\n    smallest = nums[0]\n    \n    # Return the sum of largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    result = largest + smallest\n    \n    # Return the result\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    # Check if the string is a string\n    if not isinstance(string, str):\n        return \"Invalid input. Please enter a string.\"\n\n    # Convert the string to lower case\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are lowercase,\n    and False otherwise.\n    \"\"\"\n    lower_case = True\n    for char in string:\n        if not char.islower():\n            lower_case = False\n            break\n    return lower_case"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    if string == string.lower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'(?<!\\w)[a-z]+(?!\\w)')\n    # Find all lowercase substrings using regular expression pattern\n    matches = pattern.findall(str1)\n    # Iterate through all matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into a list of substrings\n    substrings = re.findall(r'\\b[a-zA-Z]+\\b', str1)\n    \n    # Initialize an empty list to store the non-lowercase substrings\n    non_lowercase_substrings = []\n    \n    # Iterate through the substrings\n    for substring in substrings:\n        # If the substring is all uppercase, add it to the non_lowercase_substrings list\n        if substring.isupper():\n            non_lowercase_substrings.append(substring)\n        # If the substring contains only lowercase letters, append it to the non_lowercase_substrings list\n        elif substring.islower():\n            non_lowercase_substrings.append(substring)\n    \n    # Join the non-lowercase substrings into a single string\n    non_lowercase_substrings_str =''.join(non_lowercase_substrings)\n    \n    # Return the string with non-lowercase substrings removed\n    return non_lowercase_substrings_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use the re.sub() method to replace all lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Replace all occurrences of lowercase letters with spaces\n    str1 = re.sub('[a-z]+','', str1)\n    # Remove leading and trailing spaces\n    str1 = str1.strip()\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+', re.IGNORECASE)\n\n    # Use search() to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n\n    # Loop over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    result = lowercase_pattern.sub('', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use the pattern to find all lowercase substrings in the given string\n    matches = re.findall(pattern, str1)\n    # use a loop to remove all lowercase substrings from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings\n    str2 = re.sub(r'[a-z]+', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert string to lowercase\n    str1 = str1.lower()\n    \n    # Find all lowercase substrings\n    lowercase_substrings = re.findall('[a-z]+', str1)\n    \n    # Remove the lowercase substrings from the string\n    for substr in lowercase_substrings:\n        str1 = re.sub(r'\\b'+re.escape(substr)+r'\\b', '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    str_num = str(n)\n    # convert the first digit to integer and return it\n    return int(str_num[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is an integer\n    if type(n)!= int:\n        return None\n    # Convert the number to string\n    str_n = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = int(str_n[0])\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Finding the length of the number\n    length = len(str(n))\n    # Finding the first digit of the number\n    first_digit = str(n)[0]\n    # Returning the first digit of the number\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Check if the string has only one character\n    if len(n) == 1:\n        return n\n    else:\n        # If the string has more than one character, return the first character\n        return n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    str_num = str(n)\n    # get the first character of the string\n    first_char = str_num[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer digit\n    return first_int"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Create an empty list to store the odd numbers\n    odd_list = []\n\n    # Loop through the list and add odd numbers to the odd_list\n    for number in list:\n        if number % 2!= 0:\n            odd_list.append(number)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst): \n    '''\n    This function takes a list of integers and returns only the odd integers.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2 == 1:\n            result.append(i)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate sum of cubes\n    def sum_cubes(n):\n        sum_cubes = 0\n        for i in range(1, n+1):\n            sum_cubes += i*i*i\n        return sum_cubes\n    \n    # Calculate sum of cubes of first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n    \n    # Calculate sum of first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # Calculate difference between the two sums\n    difference = sum_cubes_n - sum_n\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes\n    def sum_of_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n\n    # Function to calculate the sum of natural numbers\n    def sum_of_numbers(n):\n        return sum(range(1, n+1))\n\n    # Calculate the sum of cubes and natural numbers\n    sum_cubes = sum_of_cubes(n)\n    sum_natural = sum_of_numbers(n)\n\n    # Calculate the difference\n    diff = sum_cubes - sum_natural\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # Calculate the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum([x**3 for x in range(1, n+1)])\n    natural_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n_cubes = sum([x**3 for x in range(n+1)])\n    first_n = sum(range(n+1))\n    return first_n_cubes - first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # calculate the difference\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A and an integer N and counts the number of pairs whose xor value is odd.\n    \"\"\"\n    xor_sum = 0\n    count = 0\n\n    # Calculate the xor sum of all elements in the array A\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n\n    # Iterate through all possible pairs of elements in the array A\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2!= 0:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n                if count == N:\n                    break\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i, N):\n            xor_sum ^= A[j]\n        if xor_sum & 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function counts the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        if xor_value % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # initialize a new string to hold the toggled version of the input string\n    toggled_string = \"\"\n    # iterate through each character in the input string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # otherwise, convert it to uppercase\n        else:\n            toggled_string += char.upper()\n    # return the toggled version of the input string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize a new string to store the toggled characters\n    toggled_string = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # Determine if the character is lowercase or uppercase\n        if char.islower():\n            # Convert the character to uppercase and append it to the new string\n            toggled_string += char.upper()\n        elif char.isupper():\n            # Convert the character to lowercase and append it to the new string\n            toggled_string += char.lower()\n        else:\n            # Append the character as is to the new string\n            toggled_string += char\n    \n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Create a new string with all characters toggled\n    new_string = ''\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert it to lowercase\n            new_char = char.lower()\n        else:\n            # Convert it to uppercase\n            new_char = char.upper()\n        # Append the toggled character to the new string\n        new_string += new_char\n    # Return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff_sum = 0\n    for i in range(10):\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        digit_diff_sum += digit_diff\n        n1 //= 10\n        n2 //= 10\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    while n1!= 0 and n2!= 0:\n        if n1 - n2!= 0:\n            count += 1\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Initialize the sum to 0\n    sum_diff = 0\n\n    # Loop through each digit in the lists\n    for i in range(len(digits1)):\n        # Subtract the current digit from the next digit in the lists\n        diff = digits1[i] - digits2[i]\n\n        # Add the per-digit difference to the sum\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # initialize a variable to store the sum of the per-digit differences\n    digit_sum = 0\n    \n    # loop through each digit in the strings\n    for digit1, digit2 in zip(str1, str2):\n        # calculate the absolute difference between the digits\n        digit_diff = abs(int(digit1) - int(digit2))\n        \n        # add the digit difference to the total sum\n        digit_sum += digit_diff\n    \n    # return the total sum of per-digit differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_of_diff = 0\n    while diff > 0:\n        digit = diff % 10\n        sum_of_diff += digit ** 2\n        diff //= 10\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_diff = 0\n\n    for digit in str(diff):\n        sum_diff += int(digit)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = list(map(int, str(n1)))\n    num2 = list(map(int, str(n2)))\n    \n    # Initialize the sum of differences to zero\n    diff_sum = 0\n    \n    # Loop through the digits of both numbers\n    for i in range(max(len(num1), len(num2))):\n        # Calculate the difference between the two digits\n        diff = abs(num1[i] - num2[i])\n        \n        # Add the difference to the sum of differences\n        diff_sum += diff\n    \n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = n1 - n2\n    sum_of_differences = 0\n    for i in range(10):\n        sum_of_differences += abs(difference % 10)\n        difference //= 10\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Calculate the per-digit difference between the strings\n    digit_diff_sum = 0\n    for i in range(max(len(s1), len(s2))):\n        if i < len(s1):\n            digit_diff = abs(ord(s1[i]) - ord(s2[i]))\n        else:\n            digit_diff = abs(ord(s2[i]))\n        digit_diff_sum += digit_diff\n\n    # Return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    \n    # calculate the sum of per-digit differences between the two lists\n    digit_diff_sum = 0\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n    \n    # return the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    # Iterate through the list and update the max_sum and current_sum\n    for i in range(len(a)):\n        current_sum += a[i]\n        \n        # If the current sum is greater than max_sum, update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n        # If the current sum is negative, reset the current_sum\n        elif current_sum < 0:\n            current_sum = 0\n            \n    # Return the sum of the largest contiguous sublist\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list of integers and the size of a sublist as input and returns the sum of the largest contiguous sublist in the list.\n\n    Args:\n    a (list of integers): A list of integers.\n    size (integer): The size of a sublist.\n\n    Returns:\n    (integer): The sum of the largest contiguous sublist in the list.\n\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"Size cannot be greater than the length of the input list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= a[i - size + 1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list a and a size parameter. The size parameter represents the length of the sublist\n    that needs to be maximized. The function calculates the sum of the largest contiguous sublist in the given\n    list.\n\n    The function first initializes two variables: max_sum and current_sum. The max_sum variable stores the\n    sum of the largest contiguous sublist found so far, while the current_sum variable stores the sum of\n    the current sublist being considered.\n\n    The function then iterates through the list a, adding each element to the current_sum variable. If the\n    current_sum becomes negative, it is reset to 0.\n\n    If the current_sum is greater than or equal to the max_sum, the max_sum is updated to the current_sum.\n\n    Once the loop is finished, the function returns the value of max_sum.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum < 0:\n            current_sum = 0\n\n        if current_sum >= max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size-1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    i = 0\n    while i < size:\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i == 0:\n            max_sum = curr_sum\n        if i == size-1:\n            max_sum = curr_sum\n        i += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_start = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_start = i\n    \n    for i in range(curr_start, len(a) - size + 1):\n        curr_sum = 0\n        for j in range(i, i + size):\n            curr_sum += a[j]\n            \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Initialize an empty set to store the unique elements\n    unique_elements = set()\n\n    # Union the two tuples into a set to get the unique elements\n    unique_elements = unique_elements.union(set(test_tup1).union(set(test_tup2)))\n\n    # Convert the set back to a list and sort it in ascending order\n    unique_elements = sorted(list(unique_elements))\n\n    # Print the union of the two tuples in sorted order\n    print(\"The union of the two tuples is:\", unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Find the union of the two given tuples\n    union_set = test_tup1.union(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(\"The union of the elements of the given tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the elements of the union tuple in ascending order\n    union_tup.sort()\n\n    # Print the union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union list in ascending order\n    union.sort()\n\n    # Print the union list\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # Find the unique elements in the combined list\n    unique_elements = list(set(combined_list))\n    \n    # Sort the unique elements in ascending order\n    unique_elements.sort()\n    \n    # Return the sorted list of unique elements\n    return unique_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = test_tup1 | test_tup2  # find the union of two sets using the \"|\" operator\n    union_list = sorted(list(union_set))  # convert the set to a list and sort it using the \"sorted\" function\n    print(\"Union of elements of two given tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty list to store the union of the two tuples\n    union_list = []\n    # loop through each element in the first tuple\n    for i in test_tup1:\n        # check if the element is not already in the union list\n        if i not in union_list:\n            # add the element to the union list\n            union_list.append(i)\n    # loop through each element in the second tuple\n    for i in test_tup2:\n        # check if the element is not already in the union list\n        if i not in union_list:\n            # add the element to the union list\n            union_list.append(i)\n    # sort the union list in ascending order\n    union_list.sort()\n    # output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty list to store the union\n    union_list = []\n\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # If the element is not already in the union list, add it to the list\n        if element not in union_list:\n            union_list.append(element)\n\n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # If the element is not already in the union list, add it to the list\n        if element not in union_list:\n            union_list.append(element)\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(union_set))\n\n    # print the sorted list\n    print(\"Union of elements of the two given tuples: \", sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the unique elements\n    union_set = set()\n\n    # add the elements of test_tup1 to the union_set\n    union_set.update(test_tup1)\n\n    # add the elements of test_tup2 to the union_set\n    union_set.update(test_tup2)\n\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # print the union_list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, j - i + 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            maxLength = max(maxLength, len(lst[i:j+1]))  \n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist found so far\n    max_length = 0\n\n    # Initialize a variable to store the current sublist length\n    cur_length = 0\n\n    # Iterate through the list of sublists\n    for sublist in lst:\n\n        # Iterate through the sublist\n        for item in sublist:\n\n            # Increment the current sublist length by 1\n            cur_length += 1\n\n            # If the current sublist length is greater than the current maximum length, update the maximum length\n            if cur_length > max_length:\n                max_length = cur_length\n\n        # Reset the current sublist length to 0\n        cur_length = 0\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_of_sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            length_of_sublists.append(len(lst[i:j]))\n    return max(length_of_sublists)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            current_length = 1\n            max_length = 1\n        elif lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        if current_length > max_length:\n            max_length = current_length\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n    for i in lst:\n        for j in range(length, len(i)):\n            length = j + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 0\n    for i in range(len(lst)):\n        currentLength += 1\n        if i == len(lst)-1:\n            if currentLength > maxLength:\n                maxLength = currentLength\n            currentLength = 0\n        else:\n            if currentLength > maxLength:\n                maxLength = currentLength\n            currentLength = 0\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 1 # initialize longest sublist length as 1\n    for i in range(1, len(lst)):\n        if len(lst[i]) > longest: # if the length of the sublist is longer than the current longest sublist\n            longest = len(lst[i]) # update the longest sublist length\n    return longest # return the longest sublist length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    return pattern.findall(text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define the pattern to find values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # find all matches in the text using the pattern\n    matches = re.findall(pattern, text)\n\n    # loop through the matches and extract the values between quotes\n    values = []\n    for match in matches:\n        # remove any leading/trailing whitespace from the value\n        value = match.strip('\"')\n        # add the value to the values list\n        values.append(value)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'(?<=\\\")\\w+(?:(?=\\s+)|(?=\\s+\\S+))(?=\\\")'\n    matches = re.findall(pattern, text)\n    # Remove whitespace from the matches and return a list of values\n    return [match.strip() for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip() for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Using regular expression to extract values between quotation marks\n    values = re.findall(r'\"(.*?)\"', text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through the list\n    for i in range(n):\n        # Loop through the list from the next element to the end\n        for j in range(i+1, n):\n            # Check if the elements at these positions are equal\n            if arr[i] == arr[j]:\n                # If they are equal, increment count by 1\n                count += 1\n    \n    # Return the count of unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as an argument and returns a list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit of the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Initialize a variable to store the sum of the digits\n    total = 0\n    \n    # Loop through each character in the string and add it to the total\n    for digit in num_str:\n        total += int(digit)\n    \n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    n = str(n)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through each character in the string\n    for digit in n:\n        # Convert the character to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert integer to list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum the digits\n    sum_digits = sum(digits)\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit in the integer\n    while n > 0:\n        # add the current digit to the sum\n        sum += n % 10\n        \n        # remove the last digit from the integer\n        n //= 10\n    \n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and loop through each digit\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # loop through each character in the string\n    for digit in num_str:\n        # convert each character to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    '''\n    Check if a list is sorted or not.\n\n    Args:\n    lst (list): The list to check if it is sorted or not.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # compare the first two elements of the list\n    if list1[0] > list1[1]:\n        return False\n    \n    # check the rest of the elements of the list recursively\n    for i in range(2, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    # if we reach here, the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in `sorted` function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define a function to sort a sublist of strings\n    def sort_sublist(sublist):\n        return sorted(sublist)\n\n    # Use map to apply the sort_sublist function to each sublist in the list\n    sorted_list = list(map(sort_sublist, list1))\n\n    return sorted_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert all lists to sets to remove duplicates\n    nums = [set(num) for num in nums]\n    # join sets into single list\n    unique_nums = [num for num in nums[0] | set(nums[1:])]\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        elif num in unique_nums and unique_nums.count(num) == 1:\n            unique_nums.remove(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert the lists to sets to remove duplicate numbers\n    unique_nums = set(nums)\n\n    # convert the sets back to lists and return the unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create a set of unique numbers\n    unique_set = set(nums)\n\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create an empty list to store unique numbers\n    unique_nums = []\n    \n    # iterate through each list in the input list of lists\n    for lst in nums:\n        # iterate through each number in the current list\n        for num in lst:\n            # check if the number is not already in the unique_nums list\n            if num not in unique_nums:\n                # if it's not, add it to the list of unique numbers\n                unique_nums.append(num)\n    \n    # return the list of unique numbers\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for sublist in nums:\n        result.append(list(set(sublist)))\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Remove duplicates from the list\n    list_data = list(set(list_data))\n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for num in list_data:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    return unique_numbers[0] * unique_numbers[-1]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to get only unique numbers\n    product = 1  # initialize the product to 1\n    \n    for number in unique_numbers:\n        product *= number  # multiply the product by each unique number\n    \n    return product  # return the product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert list_data to a set to remove duplicates\n    unique_set = set(list_data)\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Filter out duplicates from the list_data and convert it to a set\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers and return it as a single value\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers and returns the product of the unique numbers.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \"\"\"\n    return 2 * (r**2 + h**2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    volume = (1/3) * pi * r ** 2 * h\n    return area, volume"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * h * r"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Use the formula for the surface area of a circle to find the surface area of the cylinder\n    area_circle = 3.14159 * r ** 2\n    # Multiply the surface area of the circle by the height of the cylinder\n    surface_area = area_circle * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r**2 + 2 * pi * r * h + 2 * pi * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    '''\n\n    return 2*pi*r*h + 2*pi*r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculating the surface area of the cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    \n    # Returning the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    volume = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*r*h + math.pi*r*h + 2*math.pi*h*h\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if B is in A\n    if all(item in A for item in B):\n        # Check if B is a subset of A\n        return all(item in A for item in B)\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)]==B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    j=0\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0 #index of list A\n    j=0 #index of list B\n    \n    while i<len(A) and j<len(B): #while both lists are not empty\n        if A[i]==B[j]: #if element of list A is equal to element of list B\n            j+=1 #increment index of list B\n        i+=1 #increment index of list A\n        \n    if j==len(B): #if list B is completely matched with list A\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # Check if the first list is sublist of second list.\n    if A in B:\n        return True\n    else:\n        # Check if the second list is sublist of first list.\n        if B in A:\n            return True\n        else:\n            # If none of the above conditions are True, return False.\n            return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(B)): \n        if A.count(B[i])!= B[i]: \n            return False \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i:].startswith(B):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Create an empty list to store all possible sublists \n    all_sublists = [] \n    # Initialize the length of sublist \n    n = len(B) \n    # Loop through all possible starting points of A \n    for i in range(len(A) - n + 1): \n        # Check if the sublist A[i:i+n] is a sublist of B \n        if A[i:i+n] == B: \n            # If yes, add the sublist to all_sublists \n            all_sublists.append(A[i:i+n]) \n    # Check if the list A is a sublist of any sublist in all_sublists \n    for sublist in all_sublists: \n        if A == sublist: \n            return True \n    return False \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        if B == A:\n            return True\n        else:\n            for i in range(len(A)-len(B)+1):\n                if B == A[i:i+len(B)]:\n                    return True\n            return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if the input number is positive\n    if n < 0:\n        print(\"Input number must be a positive integer.\")\n        return\n\n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # Calculate the factorial\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and returns the last digit of its factorial.\n    '''\n    # initialize the last digit and the factorial\n    last_digit = 0\n    factorial = 1\n\n    # loop through all the digits of the number\n    while n > 0: \n        # find the last digit of the factorial\n        last_digit = n % 10\n        # multiply the factorial by 10 to move to the next digit\n        factorial *= 10\n        # remove the last digit of the number\n        n //= 10\n\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return last_Digit_Factorial(n//10) + n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Initialize the result variable to 0\n    result = 0\n    \n    # Convert the given number to a string\n    str_n = str(n)\n    \n    # Convert the first digit of the string to an integer\n    first_digit = int(str_n[0])\n    \n    # Initialize the factorial variable to 1\n    factorial = 1\n    \n    # Calculate the factorial of the given number\n    for i in range(2, first_digit+1):\n        factorial *= i\n    \n    # Convert the factorial to a string and store it in a list\n    factorial_str = str(factorial)\n    factorial_list = list(factorial_str)\n    \n    # Extract the last digit from the list\n    last_digit = int(factorial_list[-1])\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # convert the input number to a string\n    num_str = str(n)\n    # extract the last digit of the number as a string\n    last_digit = num_str[-1]\n    # convert the last digit to an integer\n    last_digit_int = int(last_digit)\n    # calculate the factorial of the input number and store it in a variable\n    factorial = 1\n    for i in range(1, last_digit_int + 1):\n        factorial *= i\n    # calculate the last digit of the factorial and store it in a variable\n    last_digit_factorial = factorial % 10\n    # return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    \n    # initialize the last digit as 0\n    last_digit = 0\n    \n    # iterate through the digits of the factorial of n\n    while n > 0:\n        # extract the last digit of n\n        last_digit = n % 10\n        \n        # multiply n by the factorial of the current last digit\n        n = n // 10 * (last_digit * (last_digit - 1))\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize the result variable with 0\n    result = 0\n    #iterate through each digit of the factorial of n and add it to the result variable\n    while n>0:\n        result += (n%10)\n        n //= 10\n    #return the last digit of the result variable\n    return result%10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    # Initialize a variable to keep track of the index of the current list\n    i = 0\n    # Loop over each element in the 3 input lists\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        # Append the current element to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        # Increment the index of the current list\n        i += 1\n    # Append any remaining elements from the lists to the result list\n    result.extend(list1[i:])\n    result.extend(list2[i:])\n    result.extend(list3[i:])\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single list containing all the elements of the first list followed by the elements of the second list and then the elements of the third list.\n    \"\"\"\n    # Create a new empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Iterate through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of the same length and returns a single flat list\n    that contains all the elements from all the input lists interleaved together.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Initialize a variable to keep track of the current index in the input lists\n    i = 0\n    # Loop through each element in the input lists\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        # Add the current element from each input list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        # Increment the index by 1 for the next iteration\n        i += 1\n    # If there are not enough elements in any of the input lists, append None values to fill the gap\n    if i < len(list1):\n        interleaved_list.extend([None] * (len(list2) + len(list3) - i))\n    elif i < len(list2):\n        interleaved_list.extend([None] * (len(list1) + len(list3) - i))\n    else:\n        interleaved_list.extend([None] * (len(list1) + len(list2) - i))\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # Flatten the lists using list concatenation\n    flat_list = list1 + list2 + list3\n    \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    result += list1[min(len(list1), len(list2), len(list3)):]\n    result += list2[min(len(list1), len(list2), len(list3)):]\n    result += list3[min(len(list1), len(list2), len(list3)):]\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a dictionary to store the count of each element in the two tuples\n    count_dict = {}\n    \n    # Loop through each element in the two tuples\n    for elem in test_tup1:\n        # If the element is already in the dictionary, increment its count\n        if elem in count_dict:\n            count_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[elem] = 1\n    \n    # Loop through each element in the second tuple\n    for elem in test_tup2:\n        # If the element is already in the dictionary, decrement its count\n        if elem in count_dict:\n            count_dict[elem] -= 1\n        # If the element is not in the dictionary, add it with a count of -1\n        else:\n            count_dict[elem] = -1\n            \n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the count dictionary\n    for elem, count in count_dict.items():\n        # If the count is greater than 0, add the element to the dissimilar list\n        if count > 0:\n            dissimilar_list.append(elem)\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a set from the first tuple to find the unique values\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to find the unique values\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets to find the common values\n    common = set1.intersection(set2)\n    # Find the elements in set1 that are not in common\n    dissimilar_1 = set1 - common\n    # Find the elements in set2 that are not in common\n    dissimilar_2 = set2 - common\n    # Create a set of dissimilar elements for each tuple\n    dissimilar = {dissimilar_1, dissimilar_2}\n    # Return the set of dissimilar elements for each tuple\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    diff_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_elements.append(test_tup1[i])\n    return diff_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initializing variables\n    dissimilar_list = []\n\n    # Iterating over the tuples and finding the dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Returning the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even or odd\n    def is_even(x):\n        return x % 2 == 0\n    \n    # Remove even elements from the nested mixed tuple using the defined even_fnc function\n    result = [even_fnc(x) for x in test_tuple if not is_even(x)]\n    \n    # Return the result as a new tuple\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    result = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            filtered_list.append(item)\n    return filtered_list\n\ndef even_num(num):\n    return num % 2 == 0\n\ndef odd_num(num):\n    return num % 2!= 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    for i in range(len(test_tuple)): \n        if isinstance(test_tuple[i], tuple): \n            even_ele(test_tuple[i], even_fnc) \n            test_tuple[i] = tuple(even_fnc(test_tuple[i])) \n        else: \n            test_tuple[i] = even_fnc(test_tuple[i]) "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    -----------\n    test_tuple: tuple\n        A nested tuple containing a mix of even and odd elements.\n\n    even_fnc: function\n        A function that takes an element from the nested tuple and returns True if it is even and False otherwise.\n\n    Returns:\n    --------\n    new_tuple: tuple\n        A new tuple containing only the even elements of the original tuple.\n    \"\"\"\n    # Create a new empty tuple to store the even elements\n    new_tuple = []\n    \n    # Iterate through each element of the test tuple\n    for elem in test_tuple:\n        # If the element is even, append it to the new tuple\n        if even_fnc(elem):\n            new_tuple.append(elem)\n    \n    # Return the new tuple with only even elements\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(i) for i in test_tuple if isinstance(i, tuple) and all(isinstance(j, int) for j in i) and all(isinstance(j, (int, float)) for j in i)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef even_fnc(x):\n    if type(x) == int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_list.append(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            new_list.append([even_fnc(j) for j in i])\n        else:\n            new_list.append(even_fnc(i))\n    return tuple(new_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, list) and len(element) > 0:\n            result.append(even_fnc(element))\n        elif isinstance(element, tuple) and len(element) > 0:\n            result.append(even_ele(element, even_fnc))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        print('Input must be a tuple.')\n        return None\n    \n    # Loop through the tuple and check if each element is an iterable\n    for item in test_tuple:\n        if not isinstance(item, (list, tuple)):\n            print('All elements in the input tuple must be iterable.')\n            return None\n    \n    # Loop through the tuple and filter out even elements using a custom function\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    \n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    perimeter = 4 * b\n    return area, perimeter"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of each pyramid\n    area_1 = (b**2)*s\n    area_2 = (b**2)*s\n    area_3 = (b**2)*s\n    \n    # Add up all the surface areas\n    total_area = area_1 + area_2 + area_3\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*b + s*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s)/2 # calculate the area of the base\n    surface_area = (2 * b * b + 2 * s * s + 2 * b * s + 2 * (b * b) + 2 * (s * s)) # calculate the surface area\n    return area, surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * base * height + 2 * height * (base ** 2) + 2 * (base ** 2) * (base ** 2) + 2 * base * (base ** 2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * (b * s + s * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base and side of the pyramid\n    base_area = b*b\n    side_area = b*s\n    \n    # Calculate the surface area of the entire pyramid\n    pyramid_area = base_area + side_area\n    \n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2*b*s + 2*b*b + 2*b*b + 2*s*b + 2*s*s + 2*s*s\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    # Calculate the total number of sides of the pyramid\n    n = 4\n    # Calculate the area of each side\n    area = (b * s) / 2\n    # Calculate the total area of the pyramid\n    total_area = area * n\n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty.\"\n    else:\n        return \"The dictionary is not empty.\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    '''\n    # check if the dictionary is empty or not\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the factorial list\n    factorial_list = [1]\n\n    # Generate the factorial list up to num\n    for i in range(2, num + 1):\n        factorial_list.append(factorial_list[i-1] * i)\n\n    # Return the nth catalan number\n    return factorial_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(2*num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula:\n    C(n) = binomial(2n, n) / (2^n * (n+1)!)\n    \"\"\"\n    from math import factorial\n    \n    # Calculate the factorial of 2n\n    fact2n = factorial(2*n)\n    \n    # Calculate the factorial of n\n    factn = factorial(n)\n    \n    # Calculate the factorial of (n+1)\n    factn1 = factorial(n+1)\n    \n    # Calculate the binomial coefficient using the formula binomial(2n, n)\n    binom2n = (2*n) * fact2n / factn / factn1\n    \n    return binom2n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number using the formula:\n    \n    C(n) = (2n)! / (n! * (n-1)!)\n    \n    where (2n)! is the factorial of 2n.\n    \n    Args:\n    n (int): The index of the catalan number to be calculated.\n    \n    Returns:\n    int: The nth catalan number.\n    \"\"\"\n\n    # Initialize variables\n    num = 1\n    den = 1\n    temp = 1\n\n    # Calculate the factorial of 2n\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n\n    # Calculate C(n)\n    for i in range(1, n+1):\n        num *= i\n        den *= n - i\n        temp *= (2*i)\n\n    return factorial // num // den // temp"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 2**(num-1) / (2*num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (factorial(2*num)/(factorial(num)*factorial(2*num-num)))\n\ndef factorial(n):\n    '''\n    Write a function which returns n!\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number using dynamic programming.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_table = [0] * 21\n        catalan_table[0] = 1\n        catalan_table[1] = 1\n        for i in range(2, 21):\n            catalan_table[i] = (1 + 4 * catalan_table[i-1]) / i\n        return catalan_table[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        c = (1 + 1/n)**n / (1 - 1/n)**(n-1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return \"Invalid input\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r'\\b[A-Z][a-z]*ly\\b', text)\n    \n    # Initialize empty list to store adverb positions\n    positions = []\n    \n    # Loop through each adverb and find its position in the text\n    for i, adverb in enumerate(adverbs):\n        # Find the position of the first occurrence of the adverb\n        position = text.index(adverb)\n        # Add the position to the positions list\n        positions.append(position)\n    \n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for matching adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Print the positions and lengths of the matches\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print('Match:', start, '-', end, ':', len(match), 'characters')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all matches of \"ly\" at the end of a word\n    ly_pattern = re.compile(r'\\b\\w+ly\\b', re.IGNORECASE)\n    matches = ly_pattern.findall(text)\n    \n    # Iterate over matches and return the first adverb ending with ly and its positions\n    for match in matches:\n        # Get the word before the adverb\n        pre_word = text[:text.index(match)-1]\n        # Check if the pre_word ends with a preposition (i.e. \"of\", \"from\", etc.)\n        preposition_pattern = re.compile(r'\\b\\w+(?:of|from|at|in|to|by|against|for)\\b', re.IGNORECASE)\n        if preposition_pattern.search(pre_word):\n            # Return the adverb and its position\n            return match, text.index(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the pattern for finding adverbs ending with ly\n    pattern = r'(?<=\\b)(\\w+ly)(?=\\b)'\n    \n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return the list of positions and adverbs\n    return [(match.start(), match) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for finding adverbs ending with 'ly'\n    pattern = re.compile(r'\\bly\\b', re.IGNORECASE)\n\n    # Find all non-overlapping matches of the pattern in the input text\n    matches = pattern.findall(text)\n\n    # Initialize empty list to store adverb positions\n    positions = []\n\n    # Loop through each match and add its position to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Create a dictionary to store the adverbs and their positions in the text\n    positions = {}\n    \n    # Loop through all the adverbs found and store their positions in the dictionary\n    for i, adverb in enumerate(adverbs):\n        positions[adverb] = i\n    \n    # Return the dictionary of adverbs and their positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define regex pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w+(ly)\\b'\n    # find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # return a list of tuples containing adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Return a list of tuples with the adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'(?<=\\W)(?:ly|lys|lyse|lyst|lysh|lysi|lysti|lysiw|lysie|lysin|lyssi|lysih|lysic|lysih|lysia|lysei|lysiu|lysiw|lysiei|lysiuh|lysieic|lysiy|lysieiu|lysieiu|lysiyu|lysiyu|lysiyus|lysiyus|lysiyusi|lysiyusi|lysiyusin|lysiyusin|lysiyusini|lysiyusini|lysiyusinin|lysiyusinin)'\n    # Find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Initialize a dictionary to store the adverb positions and their lengths\n    positions = {}\n    # Loop through all matches and extract the position and length of the adverb\n    for match in matches:\n        # Extract the position of the adverb in the input text\n        position = text.find(match)\n        # Extract the length of the adverb in the input text\n        length = len(match)\n        # Add the adverb position and length to the dictionary\n        positions[position] = length\n    # Sort the dictionary by position in ascending order\n    sorted_positions = dict(sorted(positions.items()))\n    # Return the sorted dictionary\n    return sorted_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n and returns a list of the n most expensive items.\n    \"\"\"\n    # Create a min heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    # Extract and return the n most expensive items\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, items[i])\n    \n    # Add the remaining items to the heap in sorted order\n    for i in range(n, len(items)):\n        min_heapq.heappushpop(min_heap, items[i])\n    \n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n as input\n    and returns a list containing the n most expensive items in the dataset.\n    '''\n    # Sort the dataset in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Use heapq to find the n most expensive items\n    return heapq.nlargest(n, sorted_items)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a min heap of size n to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add each one to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the size of the heap exceeds n, remove the item with the lowest price\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a positive integer n as input\n    and returns the n most expensive items in the dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappushpop(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item)) # negative sign because we want to sort in descending order\n    \n    result = []\n    while n > 0 and heap:\n        price, item = heapq.heappop(heap)\n        result.append(item)\n        n -= 1\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a min heap to store n most expensive items\n    min_heap = []\n    # Add the first n items to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, sorted_items.pop(0))\n    # Extract the n most expensive items from the min heap and return them\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n\n    :param items: A list of items.\n    :param n: The number of most expensive items to find.\n    :return: A list of the n most expensive items.\n    \"\"\"\n\n    # Create a min heap to store the n most expensive items.\n    heap = []\n\n    # Iterate through the items and add them to the min heap.\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the smallest item.\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items.\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns the n most expensive items.\n    \"\"\"\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest element\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n    # Return the n most expensive items\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_half = l[:n]\n    second_half = l[n:]\n    # Concatenate the first part to the end of the second part\n    return second_half + first_half"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"n is greater than the length of the list\")\n        return None\n    \n    if n == 0:\n        return l[0:]\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Get the length of the list\n    len_list = len(l)\n    # Check if the nth element is valid\n    if n > len_list:\n        print(\"Invalid input\")\n        return\n    # Split the list at the nth element\n    first_part = l[:n]\n    last_part = l[n:]\n    # Add the first part to the end of the last part\n    final_list = first_part + last_part\n    return final_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List is smaller than the specified index.\")\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        l_new = first_part + second_part\n        print(\"First Part:\", first_part)\n        print(\"Second Part:\", second_part)\n        print(\"New List:\", l_new)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        l.append(l.pop(0))\n    else:\n        split_Arr(l[:n-1], n-1)\n        l.append(l.pop(0))"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < len(l):\n        # Split the list at the nth element\n        mid = n\n        while mid < len(l):\n            mid = mid + 1\n\n        # Add the first part to the end of the list\n        l.extend(l[:mid])\n\n        # Remove the first part from the list\n        l = l[mid:]\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    # Add the first part of the list to the end of a new list\n    new_list = l[:n] + l[n:]\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple\n    tupx = tuple(listx)\n    return tupx"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n    # Return the difference between the minimum and maximum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        print(\"The list is empty\")\n        return\n    \n    # Find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    # Print the result\n    print(f\"The difference between the largest and smallest values is: {diff}\")"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the smallest and largest values in the list\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is smaller than the current smallest value, update it\n        if num < smallest:\n            smallest = num\n        # If the number is larger than the current largest value, update it\n        elif num > largest:\n            largest = num\n    \n    # Return the difference between the smallest and largest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list in ascending order\n    nums.sort()\n    \n    # Finding the difference between the largest and smallest values\n    diff = abs(nums[len(nums)-1] - nums[0])\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # Return the difference between the second and first element of the sorted list\n    return nums[1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the list to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize list to store perfect squares\n    perfect_squares = []\n    # loop through each number between a and b\n    for num in range(a, b+1):\n        # check if the square root of the number is an integer\n        if int(num ** 0.5) ** 2 == num:\n            # add the square to the list of perfect squares\n            perfect_squares.append(num)\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the result\n    result = []\n    \n    # Loop through all the numbers between a and b\n    for i in range(a, b+1):\n        # Calculate the square root of the current number\n        square_root = i ** 0.5\n        \n        # Check if the square root is an integer\n        if square_root.is_integer():\n            # If it is, add it to the result list\n            result.append(square_root)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through each number in the range a to b (inclusive)\n    for i in range(a, b+1):\n        # Check if the square of the number is equal to the number itself\n        if i**2 == i:\n            # If it is, add the number to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == int(square):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i * i\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find all perfect squares between a and b\n    squares = []\n    for i in range(a, b+1):\n        if i ** 2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Iterate through the range of values between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if the current value is a perfect square\n        square = i ** 0.5\n        if square.is_integer() and square ** 2 == i:\n            perfect_squares_list.append(square)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Set up two lists to store the perfect squares\n    perfect_squares_a = []\n    perfect_squares_b = []\n\n    # Check if the first number is a perfect square\n    if a < 0:\n        a = -a\n        perfect_squares_a.append(a)\n    else:\n        i = 0\n        sqrt_a = a\n        while i * i <= sqrt_a:\n            perfect_squares_a.append(i * i)\n            i += 1\n\n    # Check if the second number is a perfect square\n    if b < 0:\n        b = -b\n        perfect_squares_b.append(b)\n    else:\n        i = 0\n        sqrt_b = b\n        while i * i <= sqrt_b:\n            perfect_squares_b.append(i * i)\n            i += 1\n\n    # Combine the two lists to find all perfect squares between the two numbers\n    all_perfect_squares = perfect_squares_a + perfect_squares_b\n\n    # Return the list of perfect squares\n    return all_perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        square = num ** 2\n        if square == num:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the radius and angle in polar coordinates and returns\n    the corresponding rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Polar radius\n    theta (float): Polar angle in radians\n\n    Returns:\n    x (float): Rectangular x coordinate\n    y (float): Rectangular y coordinate\n    \"\"\"\n    # Convert polar angle to degrees\n    theta_deg = cmath.phase(theta) * 180.0 / cmath.pi\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Convert degrees to radians\n    theta_rad = theta_deg * cmath.pi / 180.0\n\n    # Return rectangular coordinates\n    return x, y, theta_rad"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = cmath.phase(x+1j*y)\n    magnitude = abs(x+1j*y)\n    rect_x = magnitude * cmath.cos(angle)\n    rect_y = magnitude * cmath.sin(angle)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): the radial component of the polar coordinates.\n    theta (float): the angle of the polar coordinate (in radians).\n\n    Returns:\n    x (float): the rectangular x-coordinate.\n    y (float): the rectangular y-coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) >= 2:\n        # swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The list must have at least two elements to swap.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"Swapped List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input list is empty\n    if not newList:\n        return None\n    \n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has only one element\n    if length == 1:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0, last_element)\n    newList.insert(0, first_element)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of product of consecutive binomial co-efficients\n    sum_product = 0\n\n    # Calculate the binomial coefficient of n and k\n    if k > n - k: \n        return 0\n    else: \n        binomial_coeff = 1\n        for i in range(1, k+1): \n            binomial_coeff *= n - i + 1\n            binomial_coeff //= i\n        for i in range(1, k+1): \n            binomial_coeff *= i\n        for i in range(1, n-k+1): \n            binomial_coeff *= i\n        for i in range(1, n+1): \n            binomial_coeff //= i\n\n        # Calculate the sum of the product of consecutive binomial co-efficients\n        for i in range(1, k+1): \n            product = 1\n            for j in range(1, i+1): \n                product *= j\n            sum_product += product * binomial_coeff // (i*(i+1))\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) * (n-k+1) / k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum_prod = 0\n\n    # Calculate the factorial of n\n    n_fact = 1\n    for i in range(1,n+1):\n        n_fact *= i\n\n    # Calculate the factorial of k\n    k_fact = 1\n    for i in range(1,k+1):\n        k_fact *= i\n\n    # Calculate the factorial of n-k\n    n_k_fact = 1\n    for i in range(1,n-k+1):\n        n_k_fact *= i\n\n    # Calculate the product of the above three factors\n    prod_fact = n_fact / (k_fact * n_k_fact)\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        sum_prod += (prod_fact**(i-1) * (n_fact-k_fact)**(n-i+1))\n\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_coeffs = 0\n    for i in range(1,n+1):\n        if i <= k:\n            sum_coeffs += (n-i+1)*binomial_Coeff(n-i,k-i)\n        else:\n            sum_coeffs += binomial_Coeff(n-i,i-k)\n    return sum_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to zero\n    sum = 0\n\n    # Initialize the product to 1\n    product = 1\n\n    # Loop from k to n\n    for i in range(k, n+1):\n\n        # Calculate the binomial coefficient\n        coefficient = (n-i+1) * i / math.factorial(i)\n\n        # Update the sum and product\n        sum += coefficient\n        product *= coefficient\n\n    return sum * product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i * (n - i + 1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1 or k == n-1:\n        return n\n\n    if k % 2 == 0:\n        return binomial_Coeff(n, k//2) + binomial_Coeff(n, k//2)\n\n    else:\n        return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    for i in range(k):\n        sum_product += n - i - 1\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    # Calculate the product of binomial co-efficients\n    bin_coeff = 1\n    for i in range(k+1):\n        bin_coeff = bin_coeff * (n - i + 1) / i\n    return bin_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\d+\\.\\d+\\.\\d+','\\1',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from IP address using regular expression\n    pattern = r'^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return re.sub(r'^\\d+\\.', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+(?=\\d)\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove leading zeroes from each octet of the ip address\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        ip_parts[i] = re.sub('^0+', '', ip_parts[i])\n    ip_address = '.'.join(ip_parts)\n\n    return ip_address"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Replace all leading zeroes with a single zero\n    ip = re.sub(r'(\\b0\\b)+', '0', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes using regular expression\n    ip = re.sub(r'^0+', '', ip)\n\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Define a regular expression to match leading zeroes in the IP address\n    pattern = re.compile(r'^0+')\n    \n    # Use the `re.sub` method to replace any leading zeroes with an empty string\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    return re.sub(ip_pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\.0)+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an argument and returns the difference between the first even and first odd numbers in the list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = abs(even_num - num)\n        elif num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = abs(odd_num - num)\n    return even_num, odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = None\n    odd_first = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_first is None:\n                even_first = num\n            else:\n                even_first -= num\n        else:\n            if odd_first is None:\n                odd_first = num\n            else:\n                odd_first -= num\n    return abs(odd_first - even_first) if even_first is not None and odd_first is not None else None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # iterate over the list\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                # update even_num if it's found twice\n                even_num = None\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                # update odd_num if it's found twice\n                odd_num = None\n\n    # check if even and odd numbers are found\n    if even_num is None or odd_num is None:\n        return \"The list doesn't contain any even or odd numbers.\"\n\n    # calculate the difference between even and odd numbers\n    diff = even_num - odd_num\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    # iterate through the list to count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # calculate the difference between the two counts\n    diff = even_count - odd_count\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    If there are an even and an odd number in the list, the function returns the difference of the even and odd numbers.\n    If there are only odd numbers in the list, the function returns 0.\n    \"\"\"\n    if len(lst) % 2 == 0:\n        return 0\n    else:\n        even_num = lst[0]\n        odd_num = lst[1]\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the index of the first even number\n    even_index = None\n    for index, value in enumerate(list1):\n        if value % 2 == 0:\n            even_index = index\n            break\n    \n    # Find the index of the first odd number\n    odd_index = None\n    for index, value in enumerate(list1):\n        if value % 2!= 0:\n            odd_index = index\n            break\n    \n    # If even and odd numbers are not found, return None\n    if even_index is None or odd_index is None:\n        return None\n    \n    # Calculate the difference between the first even and first odd numbers\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return 'The list must have at least 2 elements.'\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0 and odd % 2 == 1:\n            diff = even - odd\n            return diff\n        else:\n            return 'The first even and first odd number are not even and odd.'"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate over the bits of both numbers\n    for i in range(32):\n        # If the bits are different, increment the minimum number of swaps\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            min_swaps += 1\n\n        # If the bits are the same, check if the bit of the first number is not equal to the bit of the second number\n        if (num1 & (1 << i)) == (num2 & (1 << i)) and (str1[i]!= str2[i]):\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the binary strings to integers \n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    \n    # calculate the length of the binary strings \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # initialize the minimum number of swaps required to convert both binary numbers to integers \n    swap_count = 0\n    \n    # loop through the binary strings from right to left \n    for i in range(n2-1, -1, -1): \n        # if the i-th digit of num1 is not equal to the i-th digit of num2 \n        if num1 % 2!= num2 % 2: \n            # increment the swap count \n            swap_count += 1 \n            # swap the i-th digit of num1 with the i-th digit of num2 \n            temp = num1 % 2 \n            num1 = num1 // 2 \n            num2 = num2 // 2 * 10 + temp\n    \n    # return the minimum number of swaps required \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '1' and str2[i] == '0':\n                str1[i], str2[i] = '0', '1'\n                swaps += 1\n            elif str1[i] == '0' and str2[i] == '1':\n                str1[i], str2[i] = '1', '0'\n                swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the binary numbers into arrays of bits\n    arr1 = [int(bit) for bit in str1]\n    arr2 = [int(bit) for bit in str2]\n\n    # Find the minimum number of swaps required to convert the binary numbers into one another\n    n = len(arr1)\n    dp = [[float('inf')] * (n + 1) for _ in range(2)]\n    dp[0][0] = 0\n\n    for i in range(1, 2):\n        for j in range(n + 1):\n            if i == 0:\n                if j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n            else:\n                if j == 0:\n                    dp[i][j] = dp[1 - i][j]\n                else:\n                    if arr1[j - 1] == arr2[j - 1]:\n                        dp[i][j] = dp[i - 1][j - 1]\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n\n    # Print the minimum number of swaps required to convert the binary numbers into one another\n    return dp[1][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Calculate the difference between the two numbers\n    diff = num1 ^ num2\n    # Find the number of leading zeros in the binary representation of the difference\n    zeros = len(bin(diff)[2:])\n    # Calculate the minimum number of swaps required to convert the two numbers\n    swaps = zeros // 2\n    # Add the swaps required for each leading zero to the total number of swaps\n    for i in range(zeros):\n        swaps += diff & 1\n        diff >>= 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to lists\n    l1 = [int(i) for i in str1]\n    l2 = [int(i) for i in str2]\n\n    # check if length of lists is equal\n    if len(l1)!= len(l2):\n        return \"Error: Input strings have different lengths.\"\n\n    # initialize two pointers\n    i = 0\n    j = 0\n\n    # count number of swaps required\n    count = 0\n\n    # loop while both pointers are less than the length of lists\n    while i < len(l1) and j < len(l2):\n        # compare the current elements of lists\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            # if elements are equal, move both pointers\n            i += 1\n            j += 1\n\n        # increment count if elements were swapped\n        if i < len(l1) and j < len(l2):\n            count += 1\n\n    # return count of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to lists of integers\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n\n    # Find the length of the binary strings\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Initialize the minimum swaps variable\n    min_swaps = float('inf')\n\n    # Traverse through all possible swaps and check if the resulting binary number is equal to the target binary number\n    for i in range(n1):\n        for j in range(n2):\n            if list1[i] == 1 and list2[j] == 0:\n                list1[i], list2[j] = list2[j], list1[i]\n                if str(list1) == str2:\n                    min_swaps = min(min_swaps, i + j)\n                list1[i], list2[j] = list1[i], list2[j]\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings as input and returns the minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n    # Initialize a list to store the swaps required\n    swaps = []\n    \n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables to keep track of the bits in each number\n    i, j = 0, 0\n    \n    # Compare the bits of both numbers\n    while i < len(str1) or j < len(str2):\n        # If the bits are not equal, add a swap to the list\n        if str1[i]!= str2[j]:\n            swaps.append((str1[i], str2[j]))\n            i += 1\n            j += 1\n        # If the bits are equal, move both pointers to the next bit\n        else:\n            i += 1\n            j += 1\n            \n    # Return the minimum number of swaps required\n    return len(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one number to another.\n    \"\"\"\n\n    # Function to count number of set bits in a binary number\n    def count_bits(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Function to swap the bits of two numbers\n    def swap_bits(a, b):\n        return ((a & b) << 1) | ((a ^ b) & ~(a & b))\n\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate over all possible swaps\n    for i in range(32):\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # Swap the i-th bit of num1 and num2\n            num1 = swap_bits(num1, num1 & (1 << i))\n            num2 = swap_bits(num2, num2 & (1 << i))\n\n            # Update the minimum number of swaps\n            min_swaps = min(min_swaps, count_bits(num1) + count_bits(num2))\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes in two binary numbers represented as strings and calculates the minimum number of swaps required to convert them.\n\n    Parameters:\n    str1 (str): The first binary number represented as a string.\n    str2 (str): The second binary number represented as a string.\n\n    Returns:\n    int: The minimum number of swaps required to convert the two binary numbers.\n    \"\"\"\n\n    # Convert both strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the number of swaps required\n    swaps = 0\n\n    # Compare the two integers\n    while num1!= num2:\n\n        # If num1 is greater, swap the bits of num1 and num2\n        if num1 > num2:\n            num1 = num1 ^ (num1 & -num1)\n            num2 = num2 ^ (num2 & -num2)\n            swaps += 1\n\n        # If num1 is less than or equal to num2, swap the bits of num1 and num2\n        else:\n            num2 = num2 ^ (num2 & -num2)\n            num1 = num1 ^ (num1 & -num1)\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns their size in bytes.\n    '''\n    # Convert the list of tuples to bytes\n    byte_list = bytearray(sys.getsizeof(tuple_list))\n    \n    # Calculate the size in bytes of each tuple\n    tuple_size_list = [sys.getsizeof(tuple_) for tuple_ in tuple_list]\n    \n    # Calculate the total size of all the tuples\n    total_size = sum(tuple_size_list)\n    \n    # Return the total size of all the tuples in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = 0\n    for element in tuple_list:\n        size_in_bytes += sys.getsizeof(element)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple to 0\n    size = 0\n    \n    # Iterate through the tuple and calculate the size in bytes\n    for i in tuple_list:\n        # Get the size in bytes of the element and add it to the total size\n        size += sys.getsizeof(i)\n    \n    # Return the total size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to keep track of the size in bytes of the tuple\n    size = 0\n\n    # Loop through each element of the tuple\n    for item in tuple_list:\n        # Check the type of the item\n        if isinstance(item, str):\n            # Add the length of the string to the size variable\n            size += len(item.encode('utf-8'))\n        elif isinstance(item, int):\n            # Add the size of the integer to the size variable\n            size += sys.getsizeof(item)\n        elif isinstance(item, float):\n            # Add the size of the float to the size variable\n            size += sys.getsizeof(item)\n        elif isinstance(item, tuple):\n            # Recursively call the function for the tuple\n            size += tuple_size(item)\n        else:\n            # If the item is not a string, integer, float, or tuple, add the size of the object to the size variable\n            size += sys.getsizeof(item)\n\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1: A list of integers\n    arr2: A list of integers\n    k: An integer\n\n    Returns:\n    An integer, the kth element of arr1 and arr2\n    \"\"\"\n\n    if len(arr1) < k or len(arr2) < k:\n        return \"Arrays should have at least k elements.\"\n\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr1[i], arr2[j]\n            else:\n                return \"Invalid value for k.\"\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if k == 1:\n        return arr1[i]\n    elif k == 2:\n        return arr1[i], arr2[j]\n    else:\n        return \"Invalid value for k.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k and returns the kth smallest element.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a value k as input.\n    It returns the kth smallest element from the arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the position of k in the first array\n    while i < n1 and k > arr1[i]:\n        i += 1\n    # Find the position of k in the second array\n    while j < n2 and k > arr2[j]:\n        j += 1\n\n    # If k is not found in either array, return None\n    if i == n1 and j == n2:\n        return None\n\n    # If k is found in the first array, return its value\n    if i == n1:\n        return arr2[j]\n\n    # If k is found in the second array, return its value\n    if j == n2:\n        return arr1[i]\n\n    # If k is not found in both arrays, return the element at position k in both arrays\n    if k == arr1[i]:\n        return arr1[i]\n    if k == arr2[j]:\n        return arr2[j]\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1, arr2[j:], k)\n    return find_kth(arr1[i+1:], arr2, k-arr1[i])"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left = 0\n    right = len(arr2)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[mid]:\n            left = mid + 1\n        elif arr1[mid] < arr2[mid]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return arr2[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of both arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # If k is greater than the total length of both arrays\n    if k > n1 + n2:\n        print(\"k is greater than the total length of both arrays\")\n        return\n\n    # If one array is longer than the other\n    if n1 > n2:\n        # Start searching from the end of the second array\n        i = n1 - 1\n        j = k - n1\n    else:\n        # Start searching from the end of the first array\n        i = n2 - 1\n        j = k - n2\n\n    while i >= 0 and j >= 0:\n        if arr1[i] == arr2[j]:\n            return arr1[i]\n        elif arr1[i] < arr2[j]:\n            i -= 1\n        else:\n            j -= 1\n\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_squares = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum_of_squares += digit ** 3\n        num //= 10\n    return number == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a list of digits\n    num_digits = [int(digit) for digit in str(number)]\n    # Calculate the sum of the cubes of each digit\n    num_sum = sum([cube(digit) for digit in num_digits])\n    # Compare the sum with the original number\n    if num_sum == number:\n        return True\n    else:\n        return False\n\ndef cube(num):\n    \"\"\"\n    Calculate the cube of a given number.\n    \"\"\"\n    return num ** 3"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize the sum variable\n    sum = 0\n    # loop through the digits of the number and add them up\n    for digit in str(number):\n        digit = int(digit)\n        sum += digit**3\n    # if the sum is equal to the original number, it's an armstrong number\n    if sum == number:\n        return True\n    # otherwise, it's not\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number = str(number)\n\n    # Initialize the sum of the digits\n    sum_digits = 0\n\n    # Loop through each digit of the number\n    for digit in number:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit) ** len(number)\n\n    # Return True if the sum is equal to the original number, otherwise False\n    return sum_digits == int(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Add the digit to the sum\n        sum_digits += int(digit)\n    # Compare the sum with the original number\n    return sum_digits == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, and False otherwise.\n    \"\"\"\n    n = str(n)\n    sum_of_cubes = 0\n    power = len(n)\n    for digit in n:\n        sum_of_cubes += int(digit)**power\n    return sum_of_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number whose sum of its own digits raised to the power of the number of digits is equal to the number itself.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = 0\n\n    # Calculate the sum of digits of the given number\n    for digit in num_str:\n        sum_of_digits += int(digit)\n\n    # Check if the sum of digits raised to the power of the number of digits is equal to the original number\n    result = sum_of_digits ** num_digits\n    if result == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Define a function to check whether a number is armstrong or not\n    def is_armstrong(num):\n        # Initialize variables\n        temp = num\n        sum = 0\n        # Calculate the sum of the cube of the digits of the number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        # Compare the sum with the original number\n        return num == sum\n    \n    # Check whether the given number is armstrong or not\n    if is_armstrong(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    return num == total\n\nnum = int(input(\"Enter a number: \"))\nif is_armstrong(num):\n    print(f\"{num} is an Armstrong number.\")\nelse:\n    print(f\"{num} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the string and calculate the sum of squares of each digit\n    for digit in number_str:\n        digit_int = int(digit)\n        sum_of_squares += digit_int ** 2\n\n    # Return True if the sum of squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    sum_numbers = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n        count += 1\n    average = sum_numbers/count\n    print(\"Sum of first {} natural numbers is: {}\".format(n, sum_numbers))\n    print(\"Average of first {} natural numbers is: {}\".format(n, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        print(\"Please enter a valid number greater than or equal to 1.\")\n    else:\n        sum = 0\n        count = 0\n        for i in range(1, number+1):\n            sum += i\n            count += 1\n        average = sum/count\n        print(\"The sum is:\", sum)\n        print(\"The average is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    n = 0\n    while n < number:\n        n += 1\n        sum_of_numbers += n\n    average = sum_of_numbers / number\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Compute the sum and average of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to sum and average.\n\n    Returns:\n        tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    \"\"\"\n    # Initialize the sum and count to zero\n    sum_of_numbers = 0\n    count_of_numbers = 0\n\n    # Compute the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count_of_numbers += 1\n\n    # Compute the average of the first n natural numbers\n    average = sum_of_numbers / count_of_numbers\n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check whether the input is integer or not\n    if type(n)!= int:\n        print(\"Input must be an integer!\")\n        return\n\n    # check whether the input is even or not\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is Even.\")\n    else:\n        print(n, \"is Odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Loop through the dictionary to find the first repeated character\n    for char, freq in freq.items():\n        if freq > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert string to list\n    str_list = list(str1)\n    \n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through the list of characters\n    for char in str_list:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character and its count\n    for char, count in char_count.items():\n        if count > 1:\n            return char, count\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the counts of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character that appears more than once in the string\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Given a string, return the first repeated character or None if no character is repeated.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first repeated character by iterating over the dictionary and comparing the frequency\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again and find the first repeated character\n    for char in str1:\n        # If the character is already in the dictionary and its count is greater than 1, return the character\n        if char in char_count and char_count[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the character with the highest frequency\n    max_freq = 0\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n            repeated_char = freq_dict.keys()[freq_dict.values().index(max_freq)]\n    \n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    if num == 0:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_set.add(i)\n    return lucid_set\n\ndef is_lucid(num):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i * i <= n:\n        if i == 1:\n            i += 1\n        elif n % i == 0:\n            lucid_numbers.append(i)\n        else:\n            i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    digits = [int(d) for d in str(n)]\n    lucid_sum = 0\n    for i in range(len(digits)):\n        lucid_sum += digits[i]*(i+1)\n    return lucid_sum == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    for i in range(3, n+1):\n        j = 0\n        while i**j <= n:\n            lucid.append(i**j)\n            j += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # create an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # loop through all numbers between 1 and n\n    for i in range(1, n+1):\n\n        # check if the number is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # if the number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    reversed_words = [word[::-1] for word in words]  # Reverse each word using slicing\n    reversed_string = \" \".join(reversed_words)  # Join the reversed words into a new string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using space as the delimiter\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back together with space as the delimiter\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the words\n    words.reverse()\n    # Join the words back into a string\n    result =''.join(words)\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # check if the given number is a positive integer\n    if num <= 0 or not isinstance(num, int):\n        print(\"Please enter a positive integer.\")\n        return\n\n    # check if the number is divisible by 1 or itself\n    if num == 1 or num == 0:\n        print(num, \"is not a prime number.\")\n        return\n    \n    # check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            print(num, \"is not a prime number.\")\n            return\n    \n    # if none of the above conditions are met, then the number is a prime number\n    print(num, \"is a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number to check if it's a prime number: \"))\n\nif is_prime(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is divisible by any number between 2 and num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        return \"Input must be an integer.\"\n    # Check if the input is less than 2\n    elif num < 2:\n        return \"Input must be greater than 1.\"\n    # Check if the input is divisible by any number from 2 to the square root of the input number\n    elif num in range(2, int(num**0.5)+1):\n        return \"Input is a prime number.\"\n    else:\n        return \"Input is not a prime number.\"\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # loop through all numbers from 2 to the square root of the given number\n    for i in range(2, int(num**0.5) + 1):\n        # if the number is divisible by i, it is not a prime number\n        if num % i == 0:\n            return False\n\n    # if the loop completes without finding any divisors, the number is a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    match = matches.pop()\n    return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in a given string. It returns the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern = re.compile(pattern)\n    \n    # Search for the pattern in the string\n    result = pattern.search(text)\n    \n    # If pattern is found, return the matching subtring, start index, and end index\n    if result:\n        return result.group(), result.start(), result.end()\n    \n    # If pattern is not found, return None for all values\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        start, end = matches[0].span()\n        return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            literal = match.group(0)\n            start_index = match.start()\n            end_index = match.end()\n            return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append(match.group())\n        results.append(match.start())\n        results.append(match.end())\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1]\n    while len(bell_numbers) < n:\n        last_term = bell_numbers[-1]\n        for i in range(len(bell_numbers) - 1):\n            bell_numbers.append(bell_numbers[i] + bell_numbers[i + 1])\n        bell_numbers.append(last_term * 2)\n    return bell_numbers[n - 1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        bell_numbers = [1]\n        for i in range(1, n+1):\n            bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n        return bell_numbers[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first few bell numbers\n    bell_numbers = [0, 1]\n    # Loop through the remaining bell numbers\n    for i in range(2, n):\n        # Find the nth term of the bell sequence using the formula Bell(n) = Bell(n-1) + Bell(n-2)\n        next_bell_number = bell_numbers[i-1] + bell_numbers[i-2]\n        # Append the next term to the list of bell numbers\n        bell_numbers.append(next_bell_number)\n    # Return the nth term of the bell sequence\n    return bell_numbers[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [0] * n\n    bell_list[0] = 1\n    bell_list[1] = 1\n    \n    for i in range(2, n):\n        bell_list[i] = bell_list[i-1] + bell_list[i-2]\n    \n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 0\n    d = 0\n    # Iterate till n is equal to 0\n    while n > 0:\n        # Calculate the next number in the sequence\n        c = a + b\n        # Calculate the next bell number\n        d = c - b + 1\n        # If the current bell number is equal to n, return it\n        if d == n:\n            return c\n        # If the current bell number is greater than n, decrement n and set a, b, c and d to their previous values\n        elif d > n:\n            n -= 1\n            a, b, c, d = a, b, c, d\n    # If the loop ends without returning the desired bell number, return None\n    return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [0, 1] # first two bell numbers are 0 and 1\n    while len(bell_seq) < n: # if length of bell sequence is less than n, generate more numbers\n        temp = bell_seq[-1] + bell_seq[-2] # calculate the next number in the sequence\n        if temp not in bell_seq: # if new number is not already in sequence, add it\n            bell_seq.append(temp)\n    return bell_seq[-1] # return the nth bell number"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L-1\n    i = 0\n    j = 0\n\n    while j < n:\n        if i == k:\n            j += 1\n        elif i < k:\n            list1[i] = list1[j]\n            i += 1\n        else:\n            j += 1\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            del list1[i]\n        else:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(list1)\n    \n    # Initialize variables for the index of the first and last elements\n    first_index = 0\n    last_index = len(sorted_list) - 1\n    \n    # Initialize a variable for the count of elements to be removed\n    count = 0\n    \n    # Loop through the list until the k'th element is found\n    while count < L:\n        first_index += 1\n        count += 1\n        \n    # Remove the k'th element and return the sorted list\n    del sorted_list[first_index]\n    return sorted_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return list1\n\n    new_list = list1[:L]\n    for i in range(L, len(list1)):\n        new_list[i - L] = list1[i]\n\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L # assume L is the value of k\n    kth_element = list1[k-1] # get the value of the k'th element from the list\n    list1.remove(kth_element) # remove the k'th element from the list\n    return list1 # return the updated list without the k'th element"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return list1\n    else:\n        # check if the length of the list is equal to L-1\n        if len(list1) == L-1:\n            # remove the kth element from the end of the list\n            list1.pop()\n            return list1\n        else:\n            # find the index of the kth element\n            k = L-1\n            for i in range(len(list1)-1):\n                if list1[i] > list1[i+1]:\n                    k = i+1\n            # remove the kth element from the list\n            list1.pop(k)\n            return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    for i in range(n):\n        if i == N:\n            continue\n        max_val = max(test_list[i])\n        test_list[i] = [x if x == max_val else -1 for x in test_list[i]]\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n\n    # Check if then'th column exists\n    if N > num_cols:\n        return None\n\n    # Loop through the rows and find the max of then'th column\n    max_value = None\n    for row in test_list:\n        if N > len(row):\n            continue\n        if max_value is None or row[N-1] > max_value:\n            max_value = row[N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    for i in range(n):\n        max_val = test_list[0][i]\n        for j in range(1, len(test_list)):\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n        print(f'The max of the {N}th column of the matrix is {max_val}')"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N-1]))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    result = []\n    for i in range(n):\n        max_val = max([row[i] for row in test_list])\n        result.append(max_val)\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Finding the length of the list of lists\n    length = len(test_list)\n    \n    # Looping through all the lists in the matrix\n    for i in range(length):\n        # Getting then'th column of the list\n        column = [row[i] for row in test_list]\n        # Finding the maximum value in the column\n        max_value = max(column)\n        # Printing the maximum value of then'th column\n        print(\"Maximum value of the {}'th column in the matrix is {}\".format(N, max_value))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = []\n    for i in range(len(test_list)):\n        max_num.append(max(test_list[i][N-1], test_list[i][N-2]))\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Check if the N value is valid\n    if N < 1 or N > num_rows:\n        return None\n    \n    # Initialize the max value\n    max_val = None\n    \n    # Loop through each row in the matrix\n    for i in range(num_rows):\n        # Get the nth column value\n        col_val = test_list[i][N-1]\n        \n        # Check if this is the first time we have found a max value\n        if max_val is None:\n            max_val = col_val\n        # If this value is greater than the current max value, update the max value\n        elif col_val > max_val:\n            max_val = col_val\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = float('-inf')\n    for row in test_list:\n        value = row[N-1]\n        if value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)  # number of rows in the matrix\n    m = len(test_list[0])  # number of columns in the matrix\n    max_val = float('-inf')  # initialize the max value to negative infinity\n    \n    # iterate over each column in the matrix\n    for i in range(m):\n        if i == N-1:  # if we're looking at then'th column\n            for j in range(n):  # iterate over each row in the matrix\n                if test_list[j][i] > max_val:  # if the value in the current row is greater than the current max\n                    max_val = test_list[j][i]  # update the max value\n    \n    return max_val  # return the max value of then'th column"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through the tuple list\n    for num in test_list:\n        # Add the current number to the cumulative sum\n        cum_sum += num\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][0]\n\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize sum variable with the first element of the list\n    cum_sum = test_list[0]\n    # loop through the list and add the current value to the cumulative sum\n    for i in range(1, len(test_list)):\n        cum_sum += test_list[i]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            cum_sum += sum(test_list[i])\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    # Iterate through the tuple list\n    for i in range(len(test_list)):\n        # Add the current value to the cumulative sum\n        cum_sum += test_list[i]\n        # Print the cumulative sum at each iteration\n        print(\"Cumulative sum at iteration\", i+1, \":\", cum_sum)\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        num_list = []\n        for num in num_tuple:\n            num_list.append(num)\n        average = sum(num_list) / len(num_list)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup)/len(tup)\n        # Add the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for tup in nums:\n        total += sum(tup)\n        count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        average = sum(nums[i])/len(nums[i])\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # Perform element-wise modulo operation on the two tuples\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Checking if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n\n    # Initializing the result tuple\n    result_tup = []\n\n    # Performing the element wise modulo operation\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    # Returning the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Function to check if point is within the boundary of the plane\n    def is_valid_point(x, y):\n        return x >= 0 and x <= d and y >= 0 and y <= d\n    \n    # Function to check if point is reachable from origin\n    def is_reachable(x, y):\n        return (x == 0 and y == 0) or (x > 0 and y == 0) or (x == 0 and y > 0) or (x > 0 and y > 0)\n    \n    # Function to check if we can reach the given point from origin\n    def can_reach_point(x, y):\n        if is_valid_point(x, y):\n            if is_reachable(x, y):\n                if is_valid_point(x+1, y-1):\n                    if is_reachable(x+1, y-1):\n                        if is_valid_point(x+2, y-2):\n                            if is_reachable(x+2, y-2):\n                                return True\n        return False\n    \n    # Function to check if we can reach the given point from origin with one jump\n    def can_reach_point_with_one_jump(x, y):\n        if is_valid_point(x, y):\n            if is_reachable(x, y):\n                if is_valid_point(x+1, y):\n                    if is_reachable(x+1, y):\n                        return True\n        return False\n    \n    # Function to check if we can reach the given point from origin with two jumps\n    def can_reach_point_with_two_jumps(x, y):\n        if is_valid_point(x, y):\n            if is_reachable(x, y):\n                if is_valid_point(x+2, y):\n                    if is_reachable(x+2, y):\n                        return True\n        return False\n    \n    # Initialize variables\n    count = 0\n    temp_count = 0\n    \n    # Check for one jump\n    while can_reach_point(steps, 0):\n        if can_reach_point_with_one_jump(steps, 0):\n            count += 1\n        steps += 1\n        temp_count = count\n    \n    # Check for two jumps\n    while can_reach_point(steps, 0):\n        if can_reach_point_with_two_jumps(steps, 0):\n            count += 1\n        steps += 2\n        temp_count = count\n        \n    # Return the number of jumps\n    return temp_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check for edge cases\n    if steps <= 0 or d <= 0:\n        return -1\n    \n    # Initialize variables\n    i = 0\n    count = 0\n    \n    while i < steps:\n        # If we reach a point of form (d, 0), then increment count and move to next index\n        if i > 0 and abs(i - d) == 0:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    end_point = (d, 0)\n    steps_taken = 0\n\n    while steps_taken < steps:\n        if end_point == (0, 0):\n            break\n        steps_taken += 1\n        if end_point[0] > 0:\n            end_point = (end_point[0] - 1, end_point[1])\n            jumps += 1\n        else:\n            end_point = (end_point[0], end_point[1] + 1)\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_pos = 0 # current position\n    current_jump = 0 # number of jumps required\n    \n    # Check if (d, 0) is reachable\n    if steps >= d:\n        return -1\n    \n    # Loop until (d, 0) is reachable or no more jumps are required\n    while current_pos < steps:\n        current_jump += 1\n        if current_pos + d <= steps:\n            current_pos += d\n        else:\n            current_pos = steps\n    \n    # Return the number of jumps required\n    return current_jump"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function takes two arguments: steps (an integer representing the number of steps needed to reach the point (d, 0)) and d (an integer representing the distance from the origin to reach the point).\n    It returns the minimum number of jumps required to reach the point (d, 0) from the origin.\n    \"\"\"\n    # Initialize variables to store the steps taken and the number of jumps required\n    steps_taken = 0\n    jumps = 0\n\n    # Check if the distance is greater than or equal to the number of steps\n    if d >= steps:\n        return \"No solution possible\"\n\n    # Iterate until the distance is less than the number of steps\n    while d < steps:\n        # If the distance is less than or equal to the remaining steps, move to the next step\n        if d <= steps - d:\n            d += 1\n            steps_taken += 1\n        # If the distance is greater than the remaining steps, move to the next step and jump\n        else:\n            d += 1\n            jumps += 1\n            steps_taken += 1\n            d = 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables for step count and distance travelled \n    step_count = 0\n    dist_travelled = 0\n    # Loop through all the steps \n    for i in range(steps): \n        # If the distance travelled is less than the distance to reach destination \n        if dist_travelled < d: \n            # Update the step count and distance travelled \n            step_count += 1\n            dist_travelled += 1\n            # If the distance travelled is greater than the distance to reach destination \n            if dist_travelled == d: \n                # Return the step count \n                return step_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef min_Jumps(steps, d):\n    # Priority queue for Dijkstra's algorithm\n    priority_queue = []\n    heapq.heappush(priority_queue, (0, (0, 0)))\n    \n    # Dictionary to store visited nodes\n    visited = {}\n    \n    # Dictionary to store the shortest distance to the target node\n    shortest_distances = {}\n    \n    # Initialize the shortest distance to the target node to infinity\n    shortest_distances[(0, 0)] = float('inf')\n    \n    # Initialize the visited node set\n    visited[(0, 0)] = True\n    \n    # Initialize the number of jumps to infinity\n    num_jumps = float('inf')\n    \n    while priority_queue:\n        current_priority, current_coordinates = heapq.heappop(priority_queue)\n        \n        # Check if we have reached the target node\n        if current_coordinates == (d, 0):\n            num_jumps = min(num_jumps, steps - current_priority)\n            continue\n        \n        # Explore neighboring nodes with higher priority\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            neighbor_coordinates = (current_coordinates[0] + dx, current_coordinates[1] + dy)\n            \n            if neighbor_coordinates in visited and neighbor_coordinates!= current_coordinates:\n                if shortest_distances[current_coordinates] + 1 < shortest_distances[neighbor_coordinates]:\n                    shortest_distances[neighbor_coordinates] = shortest_distances[current_coordinates] + 1\n                    heapq.heappush(priority_queue, (shortest_distances[neighbor_coordinates], neighbor_coordinates))\n                    visited[neighbor_coordinates] = True\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    n = len(steps)\n    steps_arr = []\n    min_jumps = 0\n    max_reach = d\n\n    # Loop through the list of steps and calculate the reach at each point\n    for i in range(n):\n        reach = 0\n        curr_reach = steps[i]\n\n        # If we have not reached the top of the dungeon, we can move to the next step and calculate the reach\n        if steps[i][1]!= 0:\n            reach += 1\n\n        # Check if we have reached the top of the dungeon and calculate the min number of jumps required\n        if steps[i][1] == 0:\n            if reach > max_reach:\n                max_reach = reach\n            if reach + i + 1 < min_jumps:\n                min_jumps = reach + i + 1\n\n    # If the maximum reach is less than d, then it means we need a single jump to reach the top of the dungeon\n    if max_reach < d:\n        min_jumps = 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Creating a list of jumps required for each length of step\n    jumps = []\n    for step in steps:\n        if step % d == 0:\n            jumps.append(step // d)\n        else:\n            jumps.append(step // d + 1)\n\n    # Finding the minimum number of jumps required\n    min_jumps = min(jumps)\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps < 1:\n        return -1\n\n    # Create a 2d array to store the number of jumps required to reach each point from origin\n    jump_array = [[-1]*steps for _ in range(steps)]\n\n    # Initialize the first point from origin\n    current_point = (0, 0)\n    current_jumps = 0\n    jump_array[0][0] = 0\n\n    # Check if the current point is at the destination point (d, 0)\n    while current_point!= (d, 0):\n        # Check the valid moves for the current point\n        moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        valid_moves = []\n        for move in moves:\n            new_x = current_point[0] + move[0]\n            new_y = current_point[1] + move[1]\n            if 0 <= new_x < steps and 0 <= new_y < steps:\n                valid_moves.append((new_x, new_y))\n\n        # If no valid moves, return -1\n        if not valid_moves:\n            return -1\n\n        # Find the minimum number of jumps required to reach a valid point\n        min_jumps = float('inf')\n        for move in valid_moves:\n            new_jumps = jump_array[current_point[0]][current_point[1]] + 1\n            if new_jumps < min_jumps:\n                min_jumps = new_jumps\n\n        # Update the number of jumps required to reach the current point\n        current_jumps += min_jumps\n\n        # Update the current point and its corresponding number of jumps\n        current_point = valid_moves[0]\n        jump_array[current_point[0]][current_point[1]] = current_jumps\n\n    # Return the total number of jumps required\n    return current_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Create a new list to store the result\n    result = []\n    \n    # Divide each element of nums1 by its corresponding element of nums2\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Division by zero error.\")\n            return\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    # Initialize a new list to store the result\n    result = []\n    \n    # Loop through both lists\n    for i in range(len(nums1)):\n        try:\n            # Perform the division\n            result.append(nums1[i]/nums2[i])\n        except ZeroDivisionError:\n            # If the second number is zero, divide by zero error is raised\n            # and we print an error message and return None\n            print(\"Error: The second number is zero.\")\n            return None\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length!\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(\"Error: Division by zero\")\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists must have the same length.\"\n    # Divide each element of the lists and append the result to a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # list comprehension to convert all letters to numbers\n    numbers = [int(i) for i in test_str if i.isdigit()]\n    # join the numbers to the end of the string\n    return ''.join(str(i) for i in numbers) + test_str[test_str.find(str(numbers[-1]))+len(str(numbers[-1])):]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    \n    # Loop through each character in the given string\n    for char in test_str:\n        # If the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n    \n    # Return the original string with the numbers appended at the end\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of characters\n    lst = list(test_str)\n    # Initialize a variable to keep track of the position of the next number\n    next_number_position = 0\n    # Loop through the list of characters and move all the numbers to the end\n    for i in range(len(lst)):\n        # If the current character is a number, move it to the next position in the list\n        if lst[i].isdigit():\n            lst[i], lst[next_number_position] = lst[next_number_position], lst[i]\n            next_number_position += 1\n    # Join the characters in the list back into a string\n    result_str = ''.join(lst)\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # otherwise, leave it as it is\n        else:\n            # if the current string doesn't end with a number, add it to the end\n            if not test_str[-1].isdigit():\n                test_str = test_str[:-1] + char + test_str[-1]\n    # join the numbers list to form a string and return it\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    num_str = ''\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, append it to the end of the test_str\n        else:\n            test_str += char\n    # Return the modified test_str with all numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Separate the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize variables to keep track of the position of digits and non-digits\n    pos_digit = 0\n    pos_non_digit = 0\n\n    # Loop through the list of characters\n    for i in range(len(char_list)):\n        # If the character is a digit, move it to the end of the list and increment the position of digits\n        if char_list[i].isdigit():\n            char_list[i], char_list[pos_digit] = char_list[pos_digit], char_list[i]\n            pos_digit += 1\n        # If the character is not a digit, move it to the end of the list and increment the position of non-digits\n        else:\n            char_list[i], char_list[pos_non_digit] = char_list[pos_non_digit], char_list[i]\n            pos_non_digit += 1\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Initialize two pointers - one to traverse the string from end and one to traverse the string from start\n    end_ptr = len(char_list) - 1\n    start_ptr = 0\n    # Traverse the string from end to start\n    while start_ptr <= end_ptr:\n        # If the current character is a number, swap it with the first non-number character in the string\n        if char_list[start_ptr].isdigit():\n            char_list[start_ptr], char_list[end_ptr] = char_list[end_ptr], char_list[start_ptr]\n            end_ptr -= 1\n        # Move the start pointer to the next character\n        start_ptr += 1\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = ''.join([c for c in test_str if c.isdigit()])\n    nums_len = len(nums)\n    for i in range(nums_len):\n        test_str = test_str.replace(nums[i], '')\n    test_str += nums\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize two pointers - one for the current character and the other for the end of the list\n    curr_pos = 0\n    end_pos = len(char_list) - 1\n    \n    # Iterate through the characters in the list\n    while curr_pos < end_pos:\n        # If the character is a digit, move it to the end of the list\n        if char_list[curr_pos].isdigit():\n            # Swap the current character with the character at the end of the list\n            char_list[curr_pos], char_list[end_pos] = char_list[end_pos], char_list[curr_pos]\n            # Move both pointers to the next positions\n            curr_pos += 1\n            end_pos -= 1\n        # If the character is not a digit, move to the next position\n        else:\n            curr_pos += 1\n    \n    # Join the characters in the list to form the new string\n    new_str = ''.join(char_list)\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # Sort the input list in descending order\n    a.sort(reverse=True)\n    # Initialize variables to keep track of the largest subset size found so far and the current subset size\n    largest = 0\n    current = 0\n    # Loop over the sorted list\n    for num in a:\n        # If the current number is not divisible by the largest number, add it to the current subset size and update the largest subset size if necessary\n        if num % largest!= 0:\n            current += 1\n            largest = max(largest, current)\n        else:\n            # Otherwise, if the current subset size is greater than the largest subset size, update the largest subset size to the current subset size\n            largest = max(largest, current)\n            # Reset the current subset size to 1\n            current = 1\n    # Return the largest subset size found\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    largest_set = 1\n    current_set = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            current_set += 1\n        else:\n            if current_set > largest_set:\n                largest_set = current_set\n            current_set = 1\n    if current_set > largest_set:\n        largest_set = current_set\n    return largest_set"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    # Create a dictionary to store the size of the largest subset for each element\n    subsets = {}\n\n    # Initialize the size of the largest subset to 0\n    largest_size = 0\n\n    # Iterate over the list of numbers\n    for num in a:\n        # Check if the number is already in the dictionary\n        if num in subsets:\n            # If it is, check if the size of the subset is greater than the current largest size\n            if subsets[num] > largest_size:\n                # If it is, update the largest size and remove the current largest subset\n                largest_size = subsets[num]\n                del subsets[num]\n        else:\n            # If it's not, add the size of the subset as the current largest size\n            largest_size += 1\n            # Add the number as the key and the current largest size as the value in the dictionary\n            subsets[num] = largest_size\n\n    # Return the largest size of the subset\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    if len(a) == 0:\n        return 0\n\n    # Keep track of the maximum size of the subset seen so far\n    max_size = 0\n\n    # Initialize an array to keep track of the indices of the elements in the subset\n    subset = [0]\n\n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # If the current number is divisible by the next element, add the current element to the subset and update the max_size\n        if a[i] % a[subset[-1]] == 0:\n            subset.append(i)\n            max_size = max(max_size, len(subset))\n        # If the next element is not divisible by the current element, remove the last element of the subset and update max_size\n        else:\n            subset.pop()\n            max_size = max(max_size, len(subset))\n\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    largest = 0\n    \n    for i in range(2, n+1):\n        for j in range(n-i+1):\n            subset = sorted(a[j:j+i])\n            for k in range(len(subset)-1):\n                if subset[k] % subset[k+1]!= 0:\n                    subset = subset[:k]\n                    break\n            if len(subset) > largest:\n                largest = len(subset)\n    \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the numbers such that every pair is divisible.\n    \"\"\"\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Sort the numbers in decreasing order of frequency\n    sorted_nums = sorted(freq.keys(), key=lambda x: (-freq[x], x))\n    \n    # Initialize a variable to keep track of the size of the largest subset\n    max_size = 0\n    \n    # Iterate through the sorted list and check if the frequency of each number is divisible by 2\n    for i in range(len(sorted_nums)):\n        for j in range(i+1, len(sorted_nums)):\n            if sorted_nums[i] % 2 == 0 and sorted_nums[j] % 2 == 0:\n                # If both numbers are divisible by 2, check if the frequency of both numbers is divisible by 2\n                if freq[sorted_nums[i]] % 2 == 0 and freq[sorted_nums[j]] % 2 == 0:\n                    # If both numbers are divisible by 2 and the frequency of both numbers is also divisible by 2, update the max_size\n                    max_size = max(max_size, i-j+1)\n    \n    # Return the largest subset size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # initialize variables\n    current_sum = 0\n    current_size = 0\n    # iterate through the list\n    for i in range(len(a)):\n        # add the current element to the sum and increase the size of the subset\n        current_sum += a[i]\n        current_size += 1\n        # check if the current sum is divisible by 2\n        if current_sum % 2 == 0:\n            # if it is, return the size of the subset\n            return current_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # create a new list that will hold the pairs with divisible elements\n    pairs = []\n    # loop through the list and find pairs with divisible elements\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                pairs.append((a[i], a[j]))\n    # create a new list to hold the size of each subset\n    subsets = []\n    # loop through the pairs and find the size of each subset\n    for pair in pairs:\n        subset = [pair[0], pair[1]]\n        for subset_size in range(2, n+1):\n            if all(pair[0] % subset_size == 0 for _ in range(subset_size-1)) and all(pair[1] % subset_size == 0 for _ in range(subset_size-1)):\n                subset.extend(pair)\n                subsets.append(subset)\n                break\n    # find the largest subset and return its size\n    return max(len(subset) for subset in subsets)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Create a list to store the result\n    result = []\n    # Sort the array\n    a.sort()\n    # Initialize two pointers for left and right pointers\n    left = 0\n    right = n - 1\n    # While left pointer is less than right pointer\n    while left < right:\n        # If the current element is divisible by the difference between the right and left pointers\n        if a[left] % (a[right] - a[left]) == 0:\n            # Append the current element to the result list and move the left pointer to the right\n            result.append(a[left])\n            left += 1\n        # If the current element is not divisible by the difference between the right and left pointers\n        else:\n            # Move the left pointer to the right\n            left += 1\n    # Return the length of the result list\n    return len(result)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two lists\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # Calculate the difference between the length of the two lists\n    diff = abs(len(sorted_arr1) - len(sorted_arr2))\n    \n    # If the length of the two lists are equal, return the average of the two middle elements\n    if len(sorted_arr1) == len(sorted_arr2):\n        middle_index = len(sorted_arr1) // 2\n        return (sorted_arr1[middle_index - diff] + sorted_arr1[middle_index + diff]) / 2\n    \n    # If the length of the two lists are different, return the middle element of the longer list\n    if len(sorted_arr1) > len(sorted_arr2):\n        return sorted_arr1[len(sorted_arr1) // 2]\n    else:\n        return sorted_arr2[len(sorted_arr2) // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists and their sizes as input and returns the median of the two lists.\n    '''\n    if n % 2 == 0:\n        # If the list size is even, we take the average of the middle two elements\n        median = (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # If the list size is odd, we take the middle element\n        median = arr1[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Check if both arrays are sorted\n    if arr1[0] > arr2[-1] or arr2[0] > arr1[-1]:\n        raise ValueError(\"Both arrays must be sorted.\")\n\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n\n    # Iterate over both arrays and compare elements\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            # Element found, compare to middle of arrays\n            if n == 1:\n                return arr1[i]\n            elif n == 2:\n                return (arr1[i] + arr2[j]) / 2\n            else:\n                # Element found more than once, increment pointers\n                i += 1\n                j += 1\n\n    # If element not found, return None\n    return None"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    arr.extend(arr1)\n    arr.extend(arr2)\n    arr.sort()\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length // 2 - 1] + arr[length // 2]) / 2\n    else:\n        return arr[length // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        mid = n // 2\n        # If the length of both arrays is odd, find the middle element of both arrays\n        if arr1[mid-1] > arr2[mid]:\n            return find_median(arr1[:mid], arr2[mid:])\n        else:\n            return find_median(arr1[mid:], arr2[:mid])\n    else:\n        # If the length of both arrays is even, find the average of middle two elements of both arrays\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        if arr1[mid1-1] > arr2[mid2]:\n            return (find_median(arr1[:mid1], arr2[mid1:mid2+1]) + find_median(arr1[mid1:], arr2[:mid2+1])) / 2\n        else:\n            return (find_median(arr1[mid1:], arr2[:mid1-1]) + find_median(arr1[:mid1], arr2[mid1:mid2+1])) / 2\n\ndef find_median(arr, n):\n    '''\n    Helper function to find the median of a sorted array.\n    '''\n    if n % 2 == 1:\n        return arr[n//2]\n    else:\n        mid = n // 2\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2])/2\n    else:\n        median = merged_list[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid = n // 2\n        median1 = find_median(arr1, mid)\n        median2 = find_median(arr2, mid)\n        return (median1 + median2) / 2\n    else:\n        mid = (n - 1) // 2\n        median = find_median(arr1, n)\n        return median\n\ndef find_median(arr, n):\n    '''\n    Helper function to find the median of a list of size n.\n    '''\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the size of the list\n    size = len(arr1)\n\n    # Find the median of the two lists\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    arr1: a list of integers\n    arr2: a list of integers\n    n: the size of both input lists\n    \n    It returns the median of the two sorted lists.\n    \"\"\"\n    # First, merge the two lists in a single list\n    merged_list = arr1 + arr2\n    \n    # Then, sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    \n    # Finally, calculate the median\n    if n % 2 == 0:\n        # If the length of the sorted list is even, return the average of the middle two elements\n        mid = n // 2\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        # If the length of the sorted list is odd, return the middle element\n        mid = n // 2\n        return sorted_list[mid]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the n-th power of the number\n        power = num ** n\n        # Print the result\n        print(f\"{num}^{n} = {power}\")"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert string to uppercase\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"New List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    \n    # interchange first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: The list must have at least two elements\"\n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # Return the new list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        # Swap the first and last element of the list\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n        # Recursively call the function on the new list\n        return swap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Constants\n    PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the hypotenuse of the triangle\n    h = r * 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = 0.5 * r * r * h / (2 * h)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from sympy import tan, sqrt, pi\n\n    # Find the perimeter of the largest triangle that can be inscribed in a semicircle with the given radius\n    perimeter = 2 * r * tan(math.pi/5)\n\n    # Use the Heron's formula to find the area of the triangle\n    area = 0.5 * sqrt(perimeter ** 2 - r ** 2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    s = 2 * r * math.sin(math.pi/3)\n    area = math.sqrt(s * (s - r) * (s - r) + r * r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Convert radius from meters to centimeters\n    r *= 100\n\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of a right triangle with sides of length r\n    area_right_triangle = 0.5 * r * r\n\n    # Calculate the area of a right triangle with sides of length semi_perimeter\n    area_right_triangle_semi_perimeter = 0.5 * semi_perimeter * semi_perimeter\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = area_right_triangle\n\n    # If the area of a right triangle with sides of length semi_perimeter is greater than the area of the largest triangle, update max_area\n    if area_right_triangle_semi_perimeter > max_area:\n        max_area = area_right_triangle_semi_perimeter\n\n    return max_area / 100  # Convert max_area from centimeters to meters"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import cmath\n    \n    # function to find the area of a triangle\n    def triangle_area(a, b, c):\n        s = (a + b + c) / 2.0\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n    \n    # function to find the semi-circle inscribed by a triangle and a radius\n    def inscribed_circle(a, b, c, r):\n        # calculate the lengths of the sides of the triangle\n        ba = math.sqrt(b * b + a * a)\n        bc = math.sqrt(b * b + c * c)\n        ca = math.sqrt(c * c + a * a)\n        # calculate the area of each triangle\n        area_ba = triangle_area(ba, b, c)\n        area_bc = triangle_area(bc, b, c)\n        area_ca = triangle_area(ca, b, c)\n        # calculate the semi-circle inscribed by each triangle\n        cir_ba = ((ba + r) ** 2 - (r ** 2 - ba ** 2) ** 0.5) / (2 * r)\n        cir_bc = ((bc + r) ** 2 - (r ** 2 - bc ** 2) ** 0.5) / (2 * r)\n        cir_ca = ((ca + r) ** 2 - (r ** 2 - ca ** 2) ** 0.5) / (2 * r)\n        # calculate the areas of the largest three triangles that can be inscribed in the semicircle\n        max_area = area_ba\n        max_cir = cir_ba\n        if area_bc > max_area:\n            max_area = area_bc\n            max_cir = cir_bc\n        if area_ca > max_area:\n            max_area = area_ca\n            max_cir = cir_ca\n        # calculate the area of the largest triangle that can be inscribed in the semicircle\n        max_area_tri = max_area * r\n        # return the maximum area and the semi-circle\n        return max_area_tri, max_cir\n    \n    # find the largest triangle inscribed in the semicircle and its area and semi-circle\n    max_area_tri, max_cir = inscribed_circle(1, 1, 1, r)\n    \n    # print the results\n    print(\"The area of the largest triangle inscribed in the semicircle is: \" + str(max_area_tri))\n    print(\"The semi-circle inscribed by the triangle and the radius is: \" + str(max_cir))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    a = (3 * r ** 2) ** 0.5\n    b = 2 * a\n    c = r\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle area\n    area = 2*r*r\n    \n    # calculate the area of the largest triangle\n    base = r\n    height = r*r\n    area_max = 0.5*base*height\n    \n    return area_max"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1+min(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) and returns the smallest missing number.\n    \n    Parameters:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the array.\n        end (int): The ending index of the array.\n    \n    Returns:\n        int: The smallest missing number from the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i] - i!= i - start:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end < start:\n        return end+1\n    if array[start]!= start:\n        return start\n    for i in range(start+1,end):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and finds the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number in it.\n    \"\"\"\n\n    # Check if the array is sorted\n    if start < 0 or end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] < mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = max(array)\n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if i+1!= array[i]:\n            return i+1\n\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i!=array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Initialize an empty list to store even numbers\n    even_list = []\n    # Loop through each number in the list\n    for num in list:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is, add it to the even_list\n            even_list.append(num)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers in the original list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    sub = sub or []\n    if len(ele) == 2:\n        return [(ele[0], ele[1]), (ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]),\n                (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    elif len(ele) == 3:\n        return [(ele[0], ele[1], ele[2]), (ele[0] + 1, ele[1], ele[2]), (ele[0] - 1, ele[1], ele[2]),\n                (ele[0], ele[1] + 1, ele[2]), (ele[0], ele[1] - 1, ele[2]),\n                (ele[0], ele[1], ele[2] + 1), (ele[0], ele[1], ele[2] - 1)]\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if x < len(grid)-1:\n        adj.append((x+1, y))\n    if y < len(grid[0])-1:\n        adj.append((x, y+1))\n    sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    if x > 0:\n        result.append((x-1, y))\n    if x < 9:\n        result.append((x+1, y))\n    if y > 0:\n        result.append((x, y-1))\n    if y < 9:\n        result.append((x, y+1))\n    return sub + result\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if y > 0:\n        adj_coords.append((x, y-1))\n    if x < 3:\n        adj_coords.append((x+1, y))\n    if y < 3:\n        adj_coords.append((x, y+1))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y)) # add top right corner\n    sub.append((x-1, y)) # add top left corner\n    sub.append((x, y+1)) # add bottom right corner\n    sub.append((x, y-1)) # add bottom left corner\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 29:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 29:\n        adj.append((x, y+1))\n    adj = adj + sub\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    res = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i == x and j == y:\n                continue\n            res.append((i,j))\n    return res"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Define a dictionary to store the adjacent coordinates\n    adjacent = {}\n\n    # Get the row and column indices of the current element\n    i, j = ele\n\n    # Iterate over all possible moves (up, down, left, right)\n    for k in range(4):\n        # Calculate the new row and column indices for the adjacent element\n        r, c = i + dr[k], j + dc[k]\n\n        # Check if the new element is within the boundaries of the grid\n        if 0 <= r < rows and 0 <= c < cols:\n            # Add the adjacent element to the list of adjacent elements\n            if (r, c) not in sub:\n                adjacent[(r, c)] = (i, j)\n\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    # get all adjacent x-coordinates\n    if x > 0:\n        adj_list.append((x-1, y))\n    if x < 3:\n        adj_list.append((x+1, y))\n    # get all adjacent y-coordinates\n    if y > 0:\n        adj_list.append((x, y-1))\n    if y < 3:\n        adj_list.append((x, y+1))\n    # add all adjacent coordinates to the sublist\n    sub += adj_list\n    # return the updated sublist\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all whitespaces to underscores\n    text = text.replace(\" \", \"_\")\n    # Convert all underscores to whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscore = \"_\"\n    new_text = spaces.join(underscore.join(text.split()).split())\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input string into words\n    words = text.split()\n\n    # Iterate through the words and replace spaces with underscores\n    for i in range(len(words)):\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n\n    # Join the words back into a string and return the result\n    result =''.join(words)\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index-1, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1  # initialize index for zeroes\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break  # if a zero is found, break out of loop\n    if zero_index!= -1:  # if a zero was found\n        num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n        for i in range(len(num_list)-2, -1, -1):\n            if num_list[i]!= 0:\n                num_list[i+1] = num_list[i]\n            else:\n                break  # if a non-zero element is found, break out of loop\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - count - 1] = num_list[len(num_list) - count - 1], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize pointers for zeroes and non-zeroes\n    zero_pointer = 0\n    non_zero_pointer = 0\n    \n    # Iterate through the list\n    while non_zero_pointer < len(num_list):\n        # If the current element is zero, move it to the end of the list\n        if num_list[non_zero_pointer] == 0:\n            # Move the zero element to the end of the list\n            num_list[zero_pointer], num_list[non_zero_pointer] = num_list[non_zero_pointer], num_list[zero_pointer]\n            # Increment the zero pointer\n            zero_pointer += 1\n        # Increment the non-zero pointer\n        else:\n            non_zero_pointer += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    else:\n        print(\"List does not contain any zeroes.\")\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    \n    while index < len(num_list):\n        if num_list[index]!= 0:\n            break\n        index += 1\n        \n    for i in range(index, len(num_list)):\n        num_list[i-1] = num_list[i]\n        \n    for i in range(len(num_list)-1, 0, -1):\n        if num_list[i]!= 0:\n            break\n        num_list[i] = 0\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1  # initialize index for zeroes\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break  # stop iterating if zero found\n    if zero_index!= -1:\n        num_list[len(num_list) - 1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list) - 1]\n        move_zero(num_list)  # call the function recursively until all zeroes are moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # use two pointers to find the first non-zero element\n    i = 0\n    while i < len(num_list) and num_list[i]!= 0:\n        i += 1\n    \n    # use two pointers to find the last non-zero element\n    j = len(num_list) - 1\n    while j >= 0 and num_list[j] == 0:\n        j -= 1\n    \n    # swap the non-zero elements\n    while i < j:\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        i += 1\n        j -= 1"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    \"\"\"\n    This function takes a list of n integers and returns the sum of xor of all pairs of numbers in the list.\n\n    :param arr: A list of n integers.\n    :param n: The length of the list.\n    :return: The sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum = xor_sum ^ arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # XOR of all numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of all pairs of numbers in the list\n    xor_sum2 = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum2 ^= arr[i] ^ arr[j]\n\n    return xor_sum + xor_sum2"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    n = len(iterable)\n    # Create a max heap of size n\n    h = [hq.heappushpop(iterable, x) for x in iterable[:n]]\n    # Sort the list by removing and adding elements to the heap\n    for i in range(n):\n        iterable[i] = hq.heappop(h)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a heap\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    \n    # Sort the heap using a heapsort algorithm\n    while heap:\n        yield hq.heappop(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    iterable = list(iterable)\n\n    # Create a max-heap from the iterable\n    for i in range(len(iterable) // 2, -1, -1):\n        hq.heapify(iterable, i, len(iterable))\n\n    # Extract the maximum element from the heap and add it to the end of the result list\n    result = []\n    for i in range(len(iterable)):\n        # Extract the maximum element from the heap\n        max_val = hq.heappop(iterable)\n        result.append(max_val)\n\n    # Convert the result list to an iterable and return it\n    return iter(result)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a list of tuples, where each tuple contains an element and its index in the original list\n    list_of_tuples = [(x, i) for i, x in enumerate(iterable)]\n    # Use the heapify function from the heapq library to convert the list of tuples into a min heap\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to a new list\n    sorted_list = [x[0] for x in list_of_tuples]\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    # Remove the first element from the list of tuples\n    list_of_tuples = list_of_tuples[1:]\n    # Rebuild the heap from the updated list of tuples, using the same key function as before\n    hq.heapify(list_of_tuples)\n    # Extract the minimum element from the heap and add it to the end of the new list\n    sorted_list.append(list_of_tuples[0][0])\n    "
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    n = len(iterable)\n    # Build max heap from iterable\n    for i in range(n//2, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from max heap and store in another list\n    result = []\n    for i in range(n-1, -1, -1):\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the iterable to a list to modify it in place\n    original_list = list(iterable)\n    heapq.heapify(original_list)\n    i = len(original_list) - 1\n    while i >= 0:\n        original_list[0], original_list[i] = original_list[i], original_list[0]\n        heapq.heapify(original_list[:i])\n        i -= 1\n    return original_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given iterable using heap sort algorithm.\n    \"\"\"\n    # convert the iterable to a list to make the algorithm more efficient\n    lst = list(iterable)\n    heap_size = len(lst)\n    while heap_size > 1:\n        # remove the max element from the heap and append it to the result list\n        max_val = lst[0]\n        lst[0] = lst[heap_size-1]\n        lst[heap_size-1] = max_val\n        heap_size -= 1\n        # re-build the heap after the element has been removed\n        for i in range(heap_size):\n            parent = (i-1)//2\n            child = 2*i + 1\n            if child < heap_size and lst[child] < lst[child+1]:\n                swap = child + 1\n            else:\n                swap = child\n            if lst[i] < lst[swap]:\n                lst[i], lst[swap] = lst[swap], lst[i]\n    return lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit <= 0 and loss <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        # If yes, then there is no profit and no loss\n        return True\n    else:\n        # If no, then there is a loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    elif actual_cost - sale_amount > 0:\n        return False\n    else:\n        return 'Error: Invalid input'\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = sale_amount - actual_cost\n\n    if profit_loss > 0:\n        return False\n    elif profit_loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost == 0:\n        return True\n\n    profit = sale_amount - actual_cost\n    loss = sale_amount - actual_cost + actual_cost\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check for profit and loss\n    if profit == 0 and loss == 0:\n        print(\"No profit or loss!\")\n    elif profit > 0 and loss == 0:\n        print(\"Profit!\")\n    elif profit == 0 and loss > 0:\n        print(\"Loss!\")\n    elif profit < 0 and loss < 0:\n        print(\"Profit and loss!\")\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v)\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * math.sin(math.radians(t))\n    w_cr = 23.6 * math.log(w) + 11.3\n    w_cr = math.ceil(w_cr)\n    return w_cr"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the temperature in fahrenheit\n    fahrenheit = (t * 1.8) + 32\n    \n    # calculate the wind chill index using the formula for temperature based on wind speed and temperature in fahrenheit\n    wind_chill_index = math.floor((13.12 + 0.6215 * v + 11.37 * (t - 273.15) + 0.3965 * v * (t - 273.15)) / (22.75 - 0.1002 * v + 0.0078 * v * (t - 273.15) + 0.000325 * v * v))\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_rounded = round(wind_chill_index)\n    \n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the next integer\n    :rtype: int\n    \"\"\"\n\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate wind chill\n    chill = 2 * v / (math.sqrt(10) * t_f)\n\n    # Round wind chill to the nearest integer\n    return int(chill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n\n    # Calculate the heat capacity\n    cp_water = 4186.8 # J/kg/K\n    cp_dry = 1004.6 # J/kg/K\n    \n    # Calculate the temperature difference between the water and dry conditions\n    delta_t = t_k - cp_water/cp_dry * v**2\n    \n    # Calculate the effective temperature\n    t_eff = t_k - delta_t\n    \n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215*v + 10.37*t_eff - 17.62*math.log(t_eff)\n    \n    # Round the wind chill index to the nearest integer\n    wci_int = round(wci)\n    \n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill in celsius\n    wc = 35.74 + 0.6215*t - 35.75*math.exp((17.625*t)/(t+243.5))\n    \n    # Calculate the wind chill index\n    wci = math.ceil(wc/(v*0.621972))\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Converting temperature to kelvin\n    t = t + 273.15\n    # Calculating the wind chill index\n    wci = 35.74 + 0.6215 * v + 35.75 * math.log(v) - 0.4275 * t + 0.0006 * t * t\n    # Returning the wind chill index rounded to the next integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v)\n    return math.ceil(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74  # temperature coefficient (Celsius to Kelvin)\n    k = 0.6219  # Bolton's constant (Kelvin to Celsius)\n    alpha = (21.67 * (c/k)) / (v * 0.447) # formula for wind chill\n    wind_speed = v / 1.60934  # convert km/h to m/s\n    wind_chill_temp = math.ceil((wind_speed * 1.8) - 459.67) # convert celsius to kelvin and use formula for wind chill\n    wind_chill_index = math.ceil((wind_chill_temp - 273.15) / (17.625 * alpha))  # convert kelvin to celsius and convert to index\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v + 17.624 * (t - 273.15) - 4.379 * (t - 273.15) ** 2 + 0.5682 * v ** 2 - 0.00034 * t * v + 0.0008 * t ** 2\n    # Round the result to the nearest integer\n    wc = int(round(wc))\n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if not name[0].isupper():\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to zero\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # Add the length of the name to the sum\n        total_length += len(name)\n    \n    # Return the total length of the names that did not start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper(): # check if the name starts with a lowercase letter\n            name_lengths.append(len(name)) # append the length of the name if it does\n        else:\n            continue # skip the name if it doesn't start with a lowercase letter\n    return sum(name_lengths) # return the sum of the lengths of the names that start with a lowercase letter"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the total sum of lengths\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the total sum of lengths\n        total_length += len(name)\n        \n    # Return the total sum of lengths\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and continue to the next name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_parenthesis(items):\n    # Remove all the parenthesis from the string\n    items = re.sub('\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis using regular expressions\n    pattern = re.compile('\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parentheses from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    # Remove the enclosing quotes from the string\n    items = re.sub(r'\\\"', '', items)\n    # Remove the single quotes from the string\n    items = re.sub(r\"\\'\", '', items)\n    # Remove any trailing white spaces\n    items = items.strip()\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)') # regex pattern to match parenthesis\n    result = re.sub(pattern, '', items) # removing parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]+\\)'  # regular expression pattern for finding parenthesis\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return (is_nonagonal(n-2) + 1) * (2*n-1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a, b = 1, 1\n    i = 1\n    while i < n:\n        c = a + b\n        a = b\n        b = c\n        i += 1\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input!\"\n    elif n == 1:\n        return 1\n    else:\n        nonagonal = 2\n        for i in range(2, n):\n            nonagonal += i\n        return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 2\n    for i in range(2, n):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (is_nonagonal(n-1) + is_nonagonal(n-2))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    \n    # Iterate through the values of a, b, and c\n    while c <= n:\n        # Check if the current value of c is a nonagonal number\n        if c!= 1 and c % 2 == 1:\n            return c\n        \n        # Update the values of a, b, and c\n        a += 1\n        b += 2\n        c += 1\n    \n    # If we reach this point, it means we haven't found a nonagonal number\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer\")\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (2 ** (n-2)) + 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the sum of nonagonal numbers to 0\n    total = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is nonagonal\n        if (i ** 2) % (i + 1) == 0:\n            # Add the nonagonal number to the total\n            total += i\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables for the nonagonal number and the number of rows\n    nonagonal_num = 0\n    row_num = 1\n\n    # Check if the nth nonagonal number is greater than the square root of n\n    while nonagonal_num**2 > n:\n        # Increment the nonagonal number and row number by 1 for each nonagonal row\n        nonagonal_num += 1\n        row_num += 1\n\n    # Return the nth nonagonal number\n    return nonagonal_num\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize a counter variable\n    counter = 1\n\n    # loop through each row\n    for row in range(1, n+1):\n        # loop through each column\n        for col in range(1, row+1):\n            # increment the counter\n            counter += 1\n\n    # return the counter\n    return counter"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b') #\\b matches word boundary and [zZ] matches z\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<![a-z])(z)(?![a-z])\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-zA-Z0-9]+[zZ][a-zA-Z0-9]+'\n    words = re.findall(pattern, text)\n    if words:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*(z)(z))(?!.*(?<=z)(?=(z)))\\w+\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Check each word for the pattern 'z'\n    for word in words:\n        # Check if the word starts or ends with 'z'\n        if word[0] == 'z' or word[-1] == 'z':\n            # If the word contains 'z', return True\n            return True\n    \n    # If no word contains 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' except at the start and end of a word\n    pattern = r\"(?<![a-zA-Z])[zZ](?![a-zA-Z])\"\n\n    # Use the re.search() method to search for the pattern in the input text\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return True, otherwise return False\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Using regex to extract all words from the string\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Using a loop to check if 'z' exists only at the middle of a word\n    for word in words:\n        if 'z' not in word:\n            return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # find all the words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # loop through each word\n    for word in words:\n        # if the word contains 'z' and is not at the start or end of the word\n        if 'z' in word and not (word.startswith('z') or word.endswith('z')):\n            # return True\n            return True\n    # if no word contains 'z' and is not at the start or end of the word, return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse the first k elements of an array.\n    \"\"\"\n    n = len(input)\n    if k > n or k < 0:\n        return input\n    else:\n        return input[n-k:n] + input[:n-k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a value k as input and returns the reversed array upto position k.\n    \"\"\"\n    if k > len(input):\n        return input\n    else:\n        # Reverse the array from index 0 to k-1\n        for i in range(k):\n            input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n        # Reverse the rest of the array from index k to end\n        for i in range(k, len(input)//2+1):\n            input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n        # Reverse the entire array\n        for i in range(len(input)//2, -1, -1):\n            input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n        # Reverse the first k elements of the array\n        for i in range(len(input)//2):\n            input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the input array\n    n = len(input)\n\n    # Check if the given position is valid\n    if k > n or k < 1:\n        print(\"Invalid position!\")\n        return\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the input array is empty\n    if len(input) == 0: \n        return []\n    \n    # Reverse the array from index 0 to k-1\n    reverse_array = input[:k][::-1] + input[k:]\n    \n    # Reverse the array from k to the end\n    reverse_array += input[k-1:][::-1]\n    \n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k >= n:\n        return input\n    \n    for i in range(k, n):\n        input[i], input[k] = input[k], input[i]\n    \n    return input[:k] + input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array from the first element to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Define the starting position and the end position of the array\n    start = 0\n    end = k - 1\n    \n    # Reverse the array from the starting position to the end position\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    # Reverse the array from the end position to the last position\n    while start < len(input) // 2:\n        input[start], input[len(input) - start - 1] = input[len(input) - start - 1], input[start]\n        start += 1\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes two arguments: the input array and the position up to which the array needs to be reversed.\n    The function reverses the array upto the given position and returns the reversed array.\n    \"\"\"\n    n = len(input)\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and a position k as input.\n    It reverses the array upto the given position.\n    '''\n    \n    # initialize variables\n    n = len(input)\n    start = 0\n    end = k - 1\n    \n    # swap elements upto the given position\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the test_dict as its value\n    new_dict = {k: v for k, v in test_dict.items()}\n    # Merge the test_tup and the new_dict into a new tuple\n    new_tup = test_tup + new_dict.items()\n    # Return the new tuple\n    return tuple(new_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Iterate through the dictionary and add the key-value pairs to the tuple\n    for key, value in test_dict.items():\n        test_tup = (test_tup, key, value)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the same keys as the original dictionary\n    new_dict = {key: test_dict[key] for key in test_dict}\n    # create a new tuple with the original tuple elements followed by the new dictionary\n    new_tup = tuple(test_tup) + (new_dict,)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup + test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    dict_list = [(key, value) for key, value in test_dict.items()]\n    # concatenate the original tuple and the new list of tuples\n    return test_tup + tuple(dict_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Get the keys of the dictionary\n    keys = test_dict.keys()\n    # Create a new dictionary that contains the keys and values of the tuple and dictionary\n    new_dict = dict(zip(keys, test_tup))\n    # Update the new dictionary with the values of the dictionary\n    new_dict.update(test_dict)\n    # Create a new tuple with the updated dictionary\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = dict(test_dict)\n    new_tup = tuple(test_tup)\n    for key, value in new_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, total_cost, visited, current_path):\n        if i == n - 1 and j == m - 1:\n            if visited[i][j]:\n                return total_cost\n            return max(total_cost, current_path[-1] + total_cost)\n\n        if i < n and j < m and visited[i][j] == 0:\n            visited[i][j] = 1\n            current_path.append(cost[i][j])\n            total_cost = dfs(i + 1, j, total_cost + cost[i][j], visited, current_path)\n            total_cost = dfs(i, j + 1, total_cost, visited, current_path)\n            current_path.pop()\n            visited[i][j] = 0\n        return total_cost\n\n    n, m = len(cost), len(cost[0])\n    visited = [[0] * m for _ in range(n)]\n    total_cost = 0\n    current_path = []\n    max_average = float('-inf')\n\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == 0:\n                total_cost = dfs(i, j, cost[i][j], visited, current_path)\n                current_path = []\n                max_average = max(max_average, total_cost / len(current_path))\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # calculate the size of the matrix\n    N = len(cost)\n    # initialize variables\n    max_avg = float('-inf')\n    # loop through all possible paths\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                # if we reach the bottom right cell, check the current path's cost and update max_avg if necessary\n                if sum(cost[i][j]) > max_avg:\n                    max_avg = sum(cost[i][j])\n            else:\n                # if we are not at the bottom right cell, move down or right and check the current path's cost and update max_avg if necessary\n                if i < N-1:\n                    if cost[i+1][j] > max_avg:\n                        max_avg = cost[i+1][j]\n                if j < N-1:\n                    if cost[i][j+1] > max_avg:\n                        max_avg = cost[i][j+1]\n    # return max_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_avg = 0\n    n = len(cost)\n    m = len(cost[0])\n    total_cost = 0\n    visited = [[0]*m for i in range(n)]\n    prev_cell = (n-1, m-1)\n    total_visited = 0\n    path_len = 1\n\n    # Find all possible paths\n    for i in range(n):\n        for j in range(m):\n            # Move right\n            if i+1 < n and visited[i+1][j] == 0:\n                new_cost = cost[i][j] + cost[i+1][j]\n                total_cost += new_cost\n                visited[i+1][j] = 1\n                visited[i][j] = 1\n                path_len += 1\n\n            # Move down\n            if j+1 < m and visited[i][j+1] == 0:\n                new_cost = cost[i][j] + cost[i][j+1]\n                total_cost += new_cost\n                visited[i][j+1] = 1\n                visited[i][j] = 1\n                path_len += 1\n\n            # Check if path is longer than previous longest path\n            if path_len > max_path_len:\n                max_path_len = path_len\n                max_avg = total_cost/total_visited\n                prev_cell = (i, j)\n\n    # Return maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = cost[i-1][j] + cost[i][j-1] - dp[i-1][j-1]\n    max_avg = float('-inf')\n    for i in range(n-1, -1, -1):\n        for j in range(m-1, -1, -1):\n            if i == n-1 and j == m-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                if i == n-1:\n                    avg = max_avg - dp[i][j-1]\n                else:\n                    avg = max_avg - dp[i][j]\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    visited = [[0]*n for _ in range(n)]\n    max_avg = 0\n    max_path = []\n\n    def dfs(i, j, path):\n        nonlocal max_avg, max_path\n        visited[i][j] = 1\n        path.append((i,j))\n\n        if i == n-1 and j == n-1:\n            total_cost = 0\n            for x, y in path:\n                total_cost += cost[x][y]\n            avg = total_cost / len(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            return\n\n        if i < n-1:\n            dfs(i+1, j, path)\n        if j < n-1:\n            dfs(i, j+1, path)\n\n        path.pop()\n\n    dfs(0, 0, [])\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(i, j, path, visited, res):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            res = max(res, sum(cost[path[0][0]][path[-1][0]] for path in visited))\n            return\n        \n        visited.append((i, j))\n        if i < len(cost) and j < len(cost[0]):\n            dfs(i + 1, j, path + [(i, j)], visited, res)\n            dfs(i, j + 1, path + [(i, j)], visited, res)\n        \n        visited.pop()\n    \n    N = len(cost)\n    res = 0\n    visited = [(0, 0)]\n    dfs(0, 0, [], visited, res)\n    return res"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            # Calculate the average of the next four cells in the path\n            if i+1 < N:\n                avg = (cost[i][j] + cost[i+1][j] + cost[i][j+1] + cost[i+1][j+1]) / 4\n                max_avg = max(avg, max_avg)\n            if j+1 < N:\n                avg = (cost[i][j] + cost[i][j+1] + cost[i+1][j] + cost[i+1][j+1]) / 4\n                max_avg = max(avg, max_avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n\n    # Base case: if cost is 0, then no path can have cost 0\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # Fill the rest of the dp table\n    for k in range(2, N):\n        for i in range(N-k):\n            j = i + k\n            dp[i][j] = dp[i][j-1] + cost[i][j-1]\n\n    # Find the maximum average over all paths\n    max_avg = 0\n    for k in range(2, N):\n        for i in range(N-k):\n            j = i + k\n            avg = dp[i][j]/k\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_path_sum = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                path_sum = cost[i][j] + maxAverageOfPath(cost[i+1:n,j])\n            elif j == 0:\n                path_sum = cost[i][j] + maxAverageOfPath(cost[i,j+1:n])\n            else:\n                path_sum = cost[i][j] + min(maxAverageOfPath(cost[i+1:n,j]), maxAverageOfPath(cost[i,j+1:n]))\n            if path_sum > max_path_sum:\n                max_path_sum = path_sum\n    return max_path_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                avg = dp[i][j] / (N*N)\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum = 0\n    # loop through each digit of the base string and add the digit to the sum\n    for digit in base_str:\n        sum += int(digit)\n    # multiply the sum by the power\n    sum *= power\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to 0\n    total = 0\n    \n    # Convert base to a string\n    base_str = str(base)\n    \n    # Iterate through each character in the string and add its value to the sum\n    for char in base_str:\n        total += int(char) ** power\n    \n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum of digits to zero\n    sum_digits = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # add the digit to the sum of digits\n        sum_digits += int(digit)\n    # calculate the power of the sum of digits\n    power_sum = sum_digits ** power\n    # return the result\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and convert each digit to an integer\n    base_str = str(base)\n    base_int = sum([int(digit) for digit in base_str])\n    # calculate the sum of digits raised to the power\n    power_sum = sum([base_int ** i for i in range(1, power + 1)])\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize a variable to store the sum of digits of base to the power\n    total = 0\n    \n    # Calculate the sum of digits of base to the power\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power //= 10\n    \n    # Return the sum of digits of base to the power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num_str = str(base)\n    for digit in num_str:\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # iterate over each character in the base string\n    for char in base_str:\n        # convert the character to an integer\n        digit = int(char)\n        # add the digit to the sum of digits\n        sum_of_digits += digit\n    # calculate the final sum of digits to the specified power\n    final_sum = sum_of_digits ** power\n    # return the final sum\n    return final_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power -= 1\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Find all the matches of the pattern '(?<=\\w+)\"(.+)\"(?=\\w+)' in the string\n    matches = re.findall('(?<=\\w+)\"(.+)\"(?=\\w+)', text1)\n\n    # Extract all the values between quotation marks\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression pattern to match the quotation marks and their content\n    pattern = r'(?<=\\\").*(?=\\\"|$\\s)'\n    # Use the pattern to search for all occurrences of quotation marks\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Using regular expression to extract values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n\n    # Using re.findall() method to find all the matches\n    matches = re.findall(pattern, text)\n\n    # Creating an empty list to store the extracted values\n    extracted_values = []\n\n    # Iterating over all the matches and appending the values to the extracted_values list\n    for match in matches:\n        extracted_values.append(match.strip())\n\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use search() method to search for the pattern in the string\n    matches = re.findall(pattern, text)\n    # Return the values between the quotation marks as a list\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"' # find values between quotation marks\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1) # return the value found between quotation marks\n    else:\n        return None # if no value is found, return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regex to find all instances of quotation marks\n    pattern = r'(?<=\").*(?=\")'\n    matches = re.findall(pattern, text1)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\").*?(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to hold the result\n    result = ()\n    # Loop through the tuple of numbers\n    for i in range(len(test_tup)-1):\n        # Add the product of the current number and the next number to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # define the length of the tuple\n    N = len(test_tup) - 1\n    # initialize the output tuple\n    result = ()\n    # loop through the elements of the input tuple starting from the second one\n    for i in range(N):\n        # multiply the current element with the next one and append the result to the output tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    # return the output tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * (test_tup[i+1] if i < len(test_tup)-1 else 1) for i in range(len(test_tup))])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup) - 1\n    result_tup = ()\n    \n    for i in range(N):\n        element = test_tup[i] * test_tup[i+1]\n        result_tup = result_tup + (element,)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    multiplied_tup = (test_tup[0]*test_tup[1], test_tup[0]*test_tup[2], test_tup[0]*test_tup[3], test_tup[0]*test_tup[4], test_tup[0]*test_tup[5], test_tup[0]*test_tup[6], test_tup[0]*test_tup[7], test_tup[0]*test_tup[8], test_tup[0]*test_tup[9])\n    return multiplied_tup[:N]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    t_6 = test_tup[5]\n    t_7 = test_tup[6]\n    t_8 = test_tup[7]\n    t_9 = test_tup[8]\n    t_10 = test_tup[9]\n    t_11 = test_tup[10]\n    t_12 = test_tup[11]\n    t_13 = test_tup[12]\n    t_14 = test_tup[13]\n    t_15 = test_tup[14]\n    t_16 = test_tup[15]\n    t_17 = test_tup[16]\n    t_18 = test_tup[17]\n    t_19 = test_tup[18]\n    t_20 = test_tup[19]\n\n    result_tup = (t_1 * t_2, t_3 * t_4, t_5 * t_6, t_7 * t_8, t_9 * t_10, t_11 * t_12, t_13 * t_14, t_15 * t_16, t_17 * t_18, t_19 * t_20)\n\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = tuple(t_i * test_tup[i+1] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to hold the results\n    result = ()\n    \n    # Loop over the tuple elements from second to last\n    for i in range(1, len(test_tup)):\n        # Multiply the current element with the next element\n        result += (test_tup[i-1] * test_tup[i],)\n    \n    # Return the resulting tuple of multiplied elements\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = [test_tup[0]]\n    for i in range(N):\n        new_tup.append(test_tup[i+1] * test_tup[i])\n    return tuple(new_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # return a list containing the sum of each element of lst1 and lst2\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through each element in the two input lists\n    for i in range(len(lst1)):\n        # add the corresponding elements from the two lists and append to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x in lst1 for y in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    # Define a new list to store the consecutive duplicates\n    new_list = []\n    \n    # Iterate through the original list and group consecutive duplicates together\n    for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1):\n        # If the group contains two or more elements, add the first element to the new list\n        if len(list(group)) > 1:\n            new_list.append(list(group)[0])\n    \n    return new_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [x for key, group in groupby(sorted(set(nums)))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x, _ in groupby(sorted(nums)) if not x]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # group the list by consecutive numbers\n    grouped = groupby(nums)\n\n    # loop through each group and remove the first and last element\n    for group in grouped:\n        if not group[0] == group[-1]:\n            yield group[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [k for k, g in groupby(enumerate(nums), lambda x: x[1] == x[0]+1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h + 2 * math.pi * r * h * (h/2)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*math.tan(math.pi/6) + 2*r*h + 2*h*math.tan(math.pi/6)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # formula for lateral surface area of a cone\n    lateral_area = math.pi * (r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (2*math.pi*r*h)/3 # Formula for the lateral surface area of a cone\n    \n    return area # Return the lateral surface area of the cone"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5 * r**2 * math.sin(math.pi/3) # this formula assumes the cone is flattened and has a vertical axis with an angle of 60 degrees"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area using the formula\n    lateral_surface_area = math.pi * r ** 2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,\\n]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern to match all special characters\n    pattern = r'[^\\w\\s]'\n    # Use re.sub() method to replace special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)  # remove all non-word characters and spaces\n    text = re.sub(r'\\s+', ':', text)  # replace multiple spaces with a single colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s+|\\.\\s+|,+|\\.|,|\\s|,|\\.|\\s+|:+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match all special characters\n    pattern = re.compile(r'[,.]')\n    # Replace all matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[., ]')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([,.])', r':\\1', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize a counter and a variable to store the index of the first occurrence of x\n    first_occurrence = 0\n    i = 0\n\n    # Loop through the sorted array\n    while i < len(A) and A[i] < x:\n        first_occurrence = i\n        i += 1\n\n    # If x is not in the array, return -1\n    if i == len(A):\n        return -1\n\n    # If x is in the array, return the index of the first occurrence of x\n    else:\n        return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) - 1 and A[i] == x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if A[mid] == x:\n            j = mid - 1\n        elif A[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    j = i + 1\n    while j < n and A[j] == x:\n        j += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the left pointer to the first element of the array\n    left = 0\n    # initialize the right pointer to the last element of the array\n    right = len(A) - 1\n    # initialize the result to -1\n    result = -1\n    # while left is less than or equal to right, keep searching for x\n    while left <= right:\n        # compute the middle index\n        mid = (left + right) // 2\n        # if the middle element is equal to x, update the result and the left pointer\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        # if the middle element is greater than x, update the right pointer\n        elif A[mid] > x:\n            right = mid - 1\n        # if the middle element is less than x, update the left pointer\n        else:\n            left = mid + 1\n    # return the result\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # if we find the x at mid, then check if it's the first occurrence or not\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            # otherwise, we need to search for the first occurrence\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if we reach here, then x is not in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Iterate through the array and check if the current element is equal to x\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the current element is equal to x, update the first occurrence index\n            first_occurrence_index = i\n            break\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_len = 2*n\n    dp = [0]*(max_len+1)\n    dp[0] = 1\n\n    for i in range(1, max_len+1):\n        for j in range(n):\n            if i>=j+1:\n                dp[i] += arr[i-j-1] * dp[i-j-1]\n\n    return dp[-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    count = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i):\n            count[i][j] = count[i-1][j] + count[i-1][j+1]\n\n    def helper(i, j):\n        if i == 0:\n            return 1\n\n        if i == j:\n            return 1\n\n        return count[i][j] - count[i-1][j] - count[i][j-1] + count[i-1][j-1]\n\n    def subarray_product(arr, i, j):\n        subarray_sum = 1\n        subarray_prod = 1\n\n        for k in range(i, j+1):\n            subarray_sum *= arr[k]\n            subarray_prod *= subarray_sum\n\n        return subarray_prod\n\n    subarray_prod = 0\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            subarray_prod += helper(j, n) * subarray_product(arr, i, j-1)\n\n    return subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n\n    def helper(arr, start, end, k):\n        if start > end:\n            return 0\n\n        if start == end:\n            return 1\n\n        if arr[start] == arr[end]:\n            return helper(arr, start + 1, end - 1, k)\n\n        if k == 1:\n            return helper(arr, start + 1, end, k)\n\n        sub_sum_prod = helper(arr, start + 1, end, k - 1)\n        if k == 2:\n            return helper(arr, start, end - 1, k)\n\n        product = 1\n        for i in range(start, end):\n            product *= arr[i]\n\n        if arr[start] == arr[end]:\n            sub_sum_prod += helper(arr, start + 1, end, k)\n        else:\n            sub_sum_prod -= helper(arr, start + 1, end, k)\n\n        return sub_sum_prod + product\n\n    return helper(arr, 0, len(arr) - 1, len(arr))"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [1]*n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1]*arr[i-1]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += prefix_product[j]*prefix_product[j-i]*arr[i]*arr[j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    def subarray_product(arr, start, end):\n        if start == end:\n            return 1\n        else:\n            return arr[start] * subarray_product(arr, start+1, end)\n    \n    n = len(arr)\n    result = sum(subarray_product(arr, 0, n-1))\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            dp[i][j] = dp[i][j-1] + prod\n    return sum(dp[0][n-1])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Initialize all subarray products\n    subarray_products = [1] * (n + 1)\n\n    # Calculate all subarray products\n    for i in range(1, n + 1):\n        for j in range(i):\n            subarray_products[i] += subarray_products[j] * arr[j]\n\n    # Calculate sum of all products\n    sum_of_products = 0\n    for i in range(n + 1):\n        sum_of_products += subarray_products[i]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the result\n    result = 0\n    \n    # Initialize the prefix sum array\n    prefix_sum = [0] * len(arr)\n\n    # Calculate the prefix sum of the array\n    for i in range(1, len(arr)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Initialize the left and right pointers for the current subarray\n    left, right = 0, 0\n\n    # Iterate through the array\n    while right < len(arr):\n        # Calculate the product of the current subarray\n        product = prefix_sum[right] * arr[right]\n\n        # Check if the current subarray can be formed with other subarrays\n        while left <= right and prefix_sum[left] >= product:\n            left += 1\n\n        # Add the sum of products of the left subarray\n        result += sum(prefix_sum[left:right+1])\n\n        # Move the right pointer to the right of the current subarray\n        right += 1\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the size of the array\n    n = len(arr)\n\n    # Initialize the result list\n    result = []\n\n    # Traverse through all possible sublists of the array\n    for i in range(1, n+1):\n\n        # Initialize the product array\n        product = [1] * n\n\n        # Traverse through all possible sublists of the given array\n        for j in range(n-i+1):\n\n            # Traverse through all possible elements of the sublist\n            for k in range(i):\n\n                # Multiply the current element with the product of the current sublist and previous elements\n                product[j] *= arr[j+k] * arr[j+k+i]\n\n            # Add the current product of the sublist to the result list\n            result.append(product[j])\n\n    # Return the sum of the products\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    \n    # calculate prefix sum of array\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    # initialize result\n    result = 0\n    \n    # iterate through all possible subarrays\n    for i in range(n):\n        left, right = i, i\n        prod_left = 1\n        prod_right = 1\n        \n        # iterate through all elements in the subarray\n        while left >= 0 and right < n:\n            prod_left *= arr[left]\n            prod_right *= arr[right]\n            result += prod_left * prod_right\n            \n            left -= 1\n            right += 1\n            \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the given number to binary string\n    binary_str = bin(n)[2:]\n    # get the length of the binary string\n    length = len(binary_str)\n    # find the position of first and last bits\n    first_bit_index = length - 2\n    last_bit_index = length - 1\n    # reverse the string\n    binary_str = binary_str[::-1]\n    # toggle middle bits\n    toggled_str = ''\n    for i in range(length):\n        if i == first_bit_index or i == last_bit_index:\n            toggled_str += binary_str[i]\n        elif binary_str[i] == '1':\n            toggled_str += '0'\n        else:\n            toggled_str += '1'\n    # convert the toggled string to integer\n    return int(toggled_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Initialize the first and last bit of the number\n    first_bit = n & 1\n    last_bit = n >> (len(bin(n)) - 2)\n    \n    # Toggle the middle bits and set the first and last bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n    \n    # Combine the first and last bits with the middle bits and return the result\n    return middle_bits | first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # get the positions of the first and last bits\n    first_bit = num_bits - 1\n    last_bit = 0\n    \n    # get the middle bits of the number\n    middle_bits = n ^ ((1 << (num_bits - 2)) - 1)\n    \n    # toggle the middle bits of the number except the first and the last bit\n    toggled_middle_bits = (middle_bits << 1) ^ ((middle_bits >> 1) & ((1 << (num_bits - 2)) - 1))\n    \n    # get the updated number by applying the toggled middle bits\n    updated_number = n ^ (toggled_middle_bits << first_bit)\n    \n    # check if the updated number is negative\n    if updated_number < 0:\n        updated_number = updated_number + (1 << num_bits)\n    \n    return updated_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # first, we get the first and last bits of the number and extract them into two variables\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n    \n    # next, we toggle the first and last bits using bitwise XOR operator\n    n ^= first_bit ^ last_bit\n    \n    # finally, we return the number with its middle bits toggled\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first and the last bit to 1\n    n = n ^ 0xFFFFFFFFFFFFFFFF\n    # Set the middle bits to 0\n    n = n ^ ((n >> 1) & 0x5555555555555555)\n    n = n ^ ((n << 1) & 0x3333333333333333)\n    n = n ^ ((n >> 2) & 0x0F0F0F0F0F0F0F0F)\n    n = n ^ ((n << 2) & 0x00FF00FF00FF00FF)\n    n = n ^ ((n >> 4) & 0x0000FFFF0000FFFF)\n    n = n ^ ((n << 4) & 0x00000000FFFFFFFF)\n    # Set the last bit to 0\n    n = n ^ 0xFFFFFFFFFFFFFFFF\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit_mask = 1\n    last_bit_mask = 1 << (n.bit_length() - 1)\n    \n    # Toggle the middle bits except for first and last bit\n    n ^= first_bit_mask\n    n ^= last_bit_mask\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n\n    # Toggle the middle bit\n    mid_bit = n & ((1 << (num_bits - 1)) | (1 << (num_bits - 2)))\n\n    # Set the first and last bits\n    n = n & ~(1 << (num_bits - 1)) & ~(1 << (num_bits - 2))\n\n    # Set the middle bit\n    n = n | mid_bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # converting binary to decimal and extracting first and last bits\n    dec_num = int(n, 2)\n    first_bit = dec_num & 1\n    last_bit = dec_num >> 31\n    # toggling middle bits\n    middle_bit = (first_bit ^ last_bit) & 1\n    # creating new binary number\n    binary_num = bin(dec_num ^ middle_bit)[2:].zfill(32)\n    # converting binary to decimal\n    new_num = int(binary_num, 2)\n    return new_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Take the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Find the length of the binary representation\n    length = len(binary_n)\n    # Find the middle index of the binary representation\n    middle_index = length // 2\n    # Loop through the binary representation and toggle the middle bits\n    for i in range(middle_index):\n        if binary_n[i] == '0':\n            binary_n[i] = '1'\n        else:\n            binary_n[i] = '0'\n    # Convert the binary representation back to an integer\n    n = int(binary_n, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the binary string of n to a list of integers\n    n_list = [int(bit) for bit in bin(n)[2:]]\n\n    # Toggle the middle bits except the first and last bit\n    for i in range(1, len(n_list) - 1):\n        n_list[i] = not n_list[i]\n\n    # Convert the list of integers back to a binary string\n    n_str = ''.join(str(bit) for bit in n_list)\n\n    # Convert the binary string to an integer and return it\n    return int(n_str, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1]!= x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high if a[high] < x else high + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search to locate the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    \n    # If x is already in the list, index will be the index of x + 1\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x - 1)\n    \n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the leftmost index i such that a[i] >= x\n    i = bisect.bisect_left(a, x)\n\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # Binary search for the first element greater than or equal to x\n    j = i\n    while j < len(a) and a[j] < x:\n        j += 1\n\n    return j"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    left_index = bisect.bisect_left(a, x)\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex) \n    match = pattern.match(string)\n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"The string starts with a vowel.\"\n    else:\n        return \"The string does not start with a vowel.\""
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    Args:\n        n (int): The value of n.\n\n    Returns:\n        float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n\nprint(geometric_sum(10))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    \n    # Initialize variables\n    minTriangularNum = 10 ** (n - 1)\n    \n    # Check if the smallest triangular number with n digits exists\n    while minTriangularNum < 10 ** n:\n        # Calculate the next triangular number with n digits\n        nextTriangularNum = 3 * minTriangularNum + 1\n        \n        # Check if the next triangular number with n digits is smaller than the smallest triangular number with n digits\n        if nextTriangularNum < minTriangularNum:\n            # Update the smallest triangular number with n digits\n            minTriangularNum = nextTriangularNum\n        \n        # Check if the next triangular number with n digits is smaller than the smallest triangular number with n digits\n        if nextTriangularNum < 10 ** n:\n            # Update the smallest triangular number with n digits\n            minTriangularNum = nextTriangularNum\n    \n    # Return the index of the smallest triangular number with n digits\n    return math.log10(minTriangularNum)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of smallest triangular number with n digits.\n    '''\n    \n    # If n is less than or equal to 1, return 1\n    if n <= 1:\n        return 1\n    \n    # If n is greater than or equal to 2, find the smallest triangular number with n digits\n    else:\n        # Set the starting number as 1\n        smallest_triangular_number = 1\n        \n        # Initialize the count as 0\n        count = 0\n        \n        # Loop through each digit in the number from 2 to n\n        for digit in range(2, n+1):\n            \n            # Multiply the previous smallest triangular number by 10 to get the current digit\n            current_digit = smallest_triangular_number * 10\n            \n            # Add the current digit to the count\n            count += current_digit\n            \n            # Set the smallest triangular number to the current digit\n            smallest_triangular_number = current_digit\n        \n        # Return the count of digits\n        return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        return None\n    \n    triangular = 0\n    triangular_digits = 0\n    while triangular_digits < n:\n        triangular += 1\n        triangular_digits = len(str(triangular))\n    \n    return triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Function to calculate the index of the smallest triangular number with n digits\n    def index(n): \n        index = 1 \n        for i in range(2, int(math.sqrt(n))+1): \n            if n % i == 0: \n                index += i \n                if i!= int(math.sqrt(n)): \n                    index += 1 \n        return index \n    \n    # Find the index of the smallest triangular number with n digits\n    index_of_smallest_triangular = index(n)\n    \n    # Return the index of the smallest triangular number with n digits\n    return index_of_smallest_triangular "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        index = 1\n        while index <= n:\n            triangular_num = (index ** 2) // 2\n            if triangular_num < 10**n:\n                return triangular_num\n            index += 1\n        return triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Define a function to check if a number is a triangular number \n    def is_triangular(num): \n        '''\n        Function to check if a number is a triangular number \n        '''\n        # Get the digits of the number \n        num_str = str(num) \n        # Check if the length of the digits is n \n        if len(num_str) == n: \n            # Convert the digits to an integer \n            num_int = int(num_str) \n            # Check if the integer is a triangular number \n            if num_int > 1 and num_int == sum(int(digit) ** (n-1) for digit in num_str): \n                return True \n            else: \n                return False \n        else: \n            return False \n\n    # Initialize a variable to keep track of the index of smallest triangular number \n    index = 0 \n    # Iterate through all numbers between 1 and 10^n-1 \n    for i in range(1, int(10**(n-1))+1): \n        # Check if the current number is a triangular number \n        if is_triangular(i): \n            # If it is, update the index variable \n            index = i \n            break \n    # Return the index of the smallest triangular number with n digits \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n): \n    index = 0\n    while index*index <= n: \n        index += 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Find the value of the first n digits of triangular number\n    first_n_digits = math.factorial(n)\n    # Calculate the value of the smallest triangular number\n    min_triangular = (first_n_digits**2 - math.sqrt(first_n_digits**2 - 1))//2\n    # Find the index of the smallest triangular number with n digits\n    for i in range(1, n+1):\n        triangular_number = i*min_triangular\n        triangular_number_digits = len(str(triangular_number))\n        if triangular_number_digits == n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def smallest_triangular_number(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 3 * (2**n-1)\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def index_of_smallest_triangular_number(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            d = 1\n            while d**2 <= n:\n                if is_prime(d):\n                    if gcd(d, smallest_triangular_number(d)) == 1:\n                        return d\n                d += 1\n            return d\n\n    return index_of_smallest_triangular_number(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Find the number of digits in n\n    digits = len(str(n))\n    \n    # Initialize the variables for the index of smallest triangular number\n    i = 0\n    smallest_triangular_number = 0\n    \n    # Loop through the first n digits\n    for j in range(digits):\n        # Find the smallest triangular number for the current digit\n        triangular_number = math.factorial(n-1) // math.factorial(j)\n        \n        # If the current smallest triangular number is smaller than the current smallest triangular number found so far, update the variables\n        if triangular_number < smallest_triangular_number:\n            i = j\n            smallest_triangular_number = triangular_number\n    \n    # Return the index of the smallest triangular number\n    return i"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dict_data = {}\n\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        dict_data[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Invalid tuple length. Please provide an even length tuple.\"\n    else:\n        return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: The input tuple must have an even length.\"\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    result = {}\n    # iterate over the tuple and add adjacent pairs to the dictionary\n    for i in range(len(test_tup)-1):\n        # add the key and the value of the adjacent pair to the dictionary\n        result[i] = test_tup[i], test_tup[i+1]\n    # return the final dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Use zip() function to convert tuple to adjacent pair of elements\n    pairs = list(zip(test_tup[0::2], test_tup[1::2]))\n    # Create an empty dictionary\n    result = {}\n    # Iterate over the adjacent pair of elements\n    for key, value in pairs:\n        # Use key as the dictionary key and value as the value\n        result[key] = value\n    # Return the dictionary\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        return True\n    \n    # get the first character of the string\n    first_char = s[0]\n    \n    # iterate over the string starting from the second character\n    for char in s[1:]:\n        # check if the character is not equal to the first character\n        if char!= first_char:\n            # if the character is not equal, return False\n            return False\n    \n    # if the loop completes without returning False, then all the characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are the same or not.\n    '''\n    # Check if the string is empty\n    if not s:\n        return True\n\n    # Get the first character of the string\n    first_char = s[0]\n\n    # Loop through the remaining characters of the string\n    for char in s[1:]:\n        # If the current character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if all characters in the string are same or not\n    if s[0] == s[-1]:\n        # if all characters are same, return True\n        return True\n    # if any character is different, return False\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # First, check if the string is empty\n    if len(s) == 0:\n        return True\n    \n    # If the string is not empty, find the first character in the string\n    first_char = s[0]\n    \n    # Loop through the rest of the characters in the string\n    for char in s[1:]:\n        # If the character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all the characters are the same as the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * (side**2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2.0\n    area = (1.0 / 6.0) * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (1/6) * math.sqrt(s**2 + s**2 + s**2 + s**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side**2\n    return math.sqrt(s*(s-side**2)*(s-side**3)*(s-side**4))\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a, b, c = side, side, side\n    s = (a + b + c) / 2\n    area = (1/6) * s * (s-a) * (s-b) * (s-c)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    return math.sqrt(s*(s-1)*(s-2)*(s-3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    area = (1 + math.sqrt(5)) / 2 * (s**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side + math.sqrt(3) * side) / 2\n    \n    # Calculate the area of the tetrahedron\n    area = math.sqrt(semi_perimeter ** 2 + side ** 2 + (3/2) * side ** 2)\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than n, then rotate the entire list to the left by m items\n    if m > n:\n        m = m % n\n    # If m is equal to 0, then there is no need to rotate the list\n    if m == 0:\n        return list\n    # Find the index of the last element of the first sublist\n    i = n - m\n    # Create a new sublist starting from the i-th element\n    sublist = list[i:]\n    # Append the i-th element of the original list to the sublist\n    sublist.append(list[0])\n    # Append the original list to the sublist\n    sublist.extend(list[n:])\n    # Replace the original list with the rotated sublist\n    list[:] = sublist\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    # rotate m items to the right\n    for i in range(m):\n        temp = list[i]\n        list[i] = list[n-1-i]\n        list[n-1-i] = temp\n    # reverse the list from m to end\n    for i in range(m, n):\n        temp = list[i]\n        list[i] = list[m-1]\n        list[m-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        last = list[n-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Args:\n    list (list): List to be rotated.\n    m (int): Number of items to be rotated.\n\n    Returns:\n    list: Rotated list.\n    \"\"\"\n    n = len(list)\n    # Check if m is valid input or not\n    if m >= n or m < 0:\n        return list\n    # If m is not zero, then perform the rotation\n    for i in range(m):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    n = len(list)\n    # Calculate the required number of rotations\n    k = m % n\n    # If k is 0, no rotation is required\n    if k == 0:\n        return list\n    # Reverse the first k items\n    list = list[k:] + list[:k]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    \n    if m == 0:\n        return list\n    \n    for i in range(m):\n        last = list[-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m] = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Finding the number of rotations required\n    rotations = n // m\n\n    # If m is greater than n, then all the elements will be rotated\n    if rotations == 0:\n        return list\n\n    # Rotating the list by m elements to the right direction\n    for i in range(rotations):\n        # Copying the last element to the first position\n        list[i] = list[n-1]\n        # Shifting the rest of the elements by 1 position to the right\n        for j in range(n-2, i, -1):\n            list[j] = list[j-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if m is greater than n\n    if m > n:\n        m = m % n\n    \n    # Iterate over the list\n    for i in range(n-m):\n        # Take the last item and append it to the first position\n        list.insert(0, list.pop())\n    \n    # Print the list after rotation\n    print(list)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains any None value, else False.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two numbers `startnum` and `endnum` and returns a list of numbers that meet the condition.\n    \"\"\"\n    numbers_divisible_by_digits = []\n    for num in range(startnum, endnum+1):\n        digits_of_num = [int(digit) for digit in str(num)]\n        are_digits_divisible = all(digit in digits_of_num for digit in range(10))\n        if are_digits_divisible:\n            numbers_divisible_by_digits.append(num)\n    return numbers_divisible_by_digits"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit % num == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_list = []\n\n    # iterate over the range of numbers\n    for i in range(startnum, endnum+1):\n        # convert the number to a string\n        number_str = str(i)\n        # split the string into a list of digits\n        digit_list = [int(d) for d in number_str]\n        # check if all the digits in the number are divisible by 1, 2, 3, 4, 5, 6, 7, 8, 9\n        if all(d % 1 in [0, 1] for d in digit_list):\n            # if the number is divisible by every digit, add it to the list of divisible numbers\n            divisible_list.append(i)\n\n    return divisible_list"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Helper function to check if a number is divisible by a digit\n    def is_divisible_by_digit(num, digit):\n        return num % digit == 0\n    \n    # Helper function to find the digits of a number\n    def get_digits(num):\n        return [int(d) for d in str(num)]\n    \n    # Loop through all numbers in the range and check if they are divisible by every digit in their digits list\n    divisible_numbers = [num for num in range(startnum, endnum+1) if all(is_divisible_by_digit(num, d) for d in get_digits(num))]\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters, startnum and endnum, which represent the start and end of the range from which the function will search for numbers that are divisible by every digit in the number.\n    \n    The function first iterates through each number in the given range, then checks if it is divisible by every digit in the number using a lambda function. If the number is divisible by every digit, it is added to a list of divisible numbers.\n    \n    Finally, the function returns the list of divisible numbers.\n    \n    \"\"\"\n    \n    divisible_nums = []\n    \n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        is_divisible = all(lambda x: x % digit == 0 for digit in digits)\n        \n        if is_divisible:\n            divisible_nums.append(num)\n            \n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Convert the start and end numbers to strings\n    startnum_str = str(startnum)\n    endnum_str = str(endnum)\n\n    # Define a lambda function to check if a number is divisible by a specific digit\n    is_divisible = lambda x, digit: x % digit == 0\n\n    # Iterate through each digit in the range of startnum to endnum\n    for digit in range(10):\n        # Check if the digit is divisible by any number in the range\n        if any(is_divisible(num, digit) for num in range(startnum, endnum + 1)):\n            # If it is, return True\n            return True\n\n    # If no digit is divisible by any number in the range, return False\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        This function checks whether a given number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n    \n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    :param startnum: starting number of the range (inclusive)\n    :type startnum: int\n    :param endnum: ending number of the range (inclusive)\n    :type endnum: int\n    :return: a list of numbers within the given range that are divisible by every digit it contains\n    :rtype: list\n    \"\"\"\n\n    # create a lambda function that checks if a number is divisible by every digit it contains\n    check_divisible = lambda x: all(int(digit) % int(digit) == 0 for digit in str(x))\n\n    # use the filter() function to find numbers within the given range that are divisible by every digit\n    result = list(filter(check_divisible, range(startnum, endnum + 1)))\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(digit) % int(digit) for digit in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * math.sin(math.acos(a/r))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (1 - (a / 360))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a table to store the lengths of LCS for all prefixes of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D table to store the lengths of LCS for all prefixes of X, Y, Z and XY, XZ, and YZ\n    dp = [[[0] * (o+1) for j in range(m+1)] for i in range(n+1)]\n\n    # fill the 3D table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif Y[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j-1][k]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # backtrack to find the longest common subsequence\n    lcs = []\n    i, j, k = n, m, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a list of lists to store the lengths of the LCS for each i in X, j in Y, and k in Z\n    # Initialize the first row and first column to be 0 for all i, j, and k\n    LCS_lengths = [[0 for j in range(len(Y)+1)] for k in range(len(Z)+1)]\n\n    # Iterate over all possible indices i, j, and k\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                # If the characters at i-1 and j-1 in X and Y are the same, and the characters at k-1 and j-1 in Z are the same,\n                # then the length of the LCS is 1 more than the length of the LCS for the substrings X[:i-1], Y[:j-1], and Z[:k-1]\n                if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n                    LCS_lengths[i][j] = LCS_lengths[i-1][j-1] + 1\n                else:\n                    LCS_lengths[i][j] = max(LCS_lengths[i-1][j], LCS_lengths[i][j-1], LCS_lengths[i-1][j-1])\n\n    # Extract the longest common subsequence from the list of lists\n    LCS = []\n    i, j = len(X), len(Y)\n    k = len(Z)\n    while i > 0 and j > 0 and k > 0:\n        # If the characters at i-1 and j-1 in X and Y are the same, and the characters at k-1 and j-1 in Z are the same,\n        # then add the character to the LCS and move to the next index in each string\n        if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        # Otherwise, the LCS is the longest of the three subsequences that end at that index\n        else:\n            LCS_lengths[i][j] = max(LCS_lengths[i-1][j], LCS_lengths[i][j-1], LCS_lengths[i-1][j-1])\n            i -= 1\n            j -= 1\n            k -= 1\n\n    return ''.join(LCS[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    \n    # Create a table to store lengths of LCS of three sequences.\n    T = [[0] * (p+1) for i in range(m+1)]\n    \n    # Fill the table in bottom up manner.\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    T[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else: \n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i][j][k-1])\n    \n    # Find the length of the LCS.\n    lcs_length = T[m][n][p]\n    \n    # Backtrack to find the LCS.\n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs\n            i, j, k = i-1, j-1, k-1\n        elif T[i-1][j][k] == T[i][j][k-1]: \n            i -= 1\n        elif T[i][j-1][k] == T[i-1][j][k]: \n            j -= 1\n        else: \n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Function to find the length of the longest common subsequence of X and Y\n    def length_of_lcs(X, Y): \n        m = len(X) \n        n = len(Y) \n        L = [[0] * (n + 1) for _ in range(m + 1)] \n\n        for i in range(m + 1): \n            for j in range(n + 1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i - 1] == Y[j - 1]: \n                    L[i][j] = L[i - 1][j - 1] + 1 \n                else: \n                    L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n        return L[m][n]\n\n    # Function to find the longest common subsequence of X, Y and Z\n    def lcs_of_three_helper(X, Y, Z, i, j, k): \n        if i == 0 or j == 0 or k == 0: \n            return \"\" \n        elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n            return X[i - 1] + lcs_of_three_helper(X, Y, Z, i - 1, j - 1, k - 1) \n        else: \n            return max(lcs_of_three_helper(X, Y, Z, i - 1, j, k), \n                       lcs_of_three_helper(X, Y, Z, i, j - 1, k), \n                       lcs_of_three_helper(X, Y, Z, i, j, k - 1)) \n\n    # Find the length of the longest common subsequence of X, Y and Z\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = length_of_lcs(X, Y) + length_of_lcs(Y, Z) + length_of_lcs(X, Z) - length_of_lcs(X, Y) - length_of_lcs(Y, Z) - length_of_lcs(X, Z)\n\n    # Find the longest common subsequence of X, Y and Z\n    lcs = lcs_of_three_helper(X, Y, Z, m, n, o) \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n        L = [[0] * (n+1) for i in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n        return L\n\n    def lcs_length(X, Y):\n        L = lcs(X, Y)\n        return L[len(X)][len(Y)]\n\n    L1 = lcs(X, Y)\n    L2 = lcs(X, Z)\n    L3 = lcs(Y, Z)\n\n    L1_length = lcs_length(X, Y)\n    L2_length = lcs_length(X, Z)\n    L3_length = lcs_length(Y, Z)\n\n    L = max(L1, L2, L3)\n    L_length = max(L1_length, L2_length, L3_length)\n\n    lcs_list = []\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    while L[i][j] > 0:\n        if L[i][j] == L[i-1][j]:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i][j] == L[i][j-1]:\n            lcs_list.append(Y[j-1])\n            i -= 1\n        else:\n            lcs_list.append(Z[k-1])\n            i -= 1\n            j -= 1\n            k -= 1\n\n    return ''.join(lcs_list)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n                \n    lcs = []\n    i = n\n    j = m\n    \n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D array to store the lengths of LCS for all prefixes of X, Y and Z\n    lcs_matrix = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # fill the first row and column with 0's\n    for i in range(m+1):\n        lcs_matrix[i][0] = 0\n    for j in range(p+1):\n        lcs_matrix[0][j] = 0\n\n    # fill the rest of the matrix\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n            else:\n                lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1])\n\n    # trace back the LCS\n    lcs = \"\"\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif lcs_matrix[i-1][j] > lcs_matrix[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store the length of LCS for all possible substrings\n    L = [[0] * (o + 1) for i in range(m + 1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif L[i - 1][j][k] >= L[i][j - 1][k]:\n                    L[i][j][k] = L[i - 1][j][k]\n                else:\n                    L[i][j][k] = L[i][j - 1][k]\n\n    # store the result in a list\n    result = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n            result.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] >= L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    return ''.join(reversed(result))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Step 1: Initialize a 2D array to store the lengths of longest common subsequences of X, Y, and Z.\n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n    lcs_length = [[0 for j in range(p+1)] for i in range(n+1)] \n\n    # Step 2: Fill the lengths of longest common subsequences of X, Y, and Z using dynamic programming.\n    for i in range(1, n+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1]: \n                lcs_length[i][j] = lcs_length[i-1][j-1] + 1 \n            else: \n                lcs_length[i][j] = max(lcs_length[i-1][j], lcs_length[i][j-1]) \n\n    # Step 3: Backtrack to find the actual longest common subsequence.\n    i = n \n    j = p \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif lcs_length[i-1][j] > lcs_length[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Return the longest common subsequence.\n    return lcs "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # function to replace all non-alphanumeric characters with spaces\n    def replace_special_chars(s):\n        return re.sub(r'[^a-zA-Z0-9\\s]','', s)\n\n    # replace all non-alphanumeric characters with spaces\n    str1 = replace_special_chars(str1)\n\n    # split the string into words using whitespace as the delimiter\n    words = str1.split()\n\n    # loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n\n    # join the words back into a string with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Find all matches of word boundaries\n    word_boundaries = re.finditer(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word\n    for word in word_boundaries:\n        # Get the index of the start of the word and its length\n        start_index = word.start()\n        length = len(word.group())\n\n        # Capitalize the first letter of the word\n        capitalized_word = word.group()[0].upper() + word.group()[1:].lower()\n\n        # Replace the old word with the capitalized version\n        str1 = str1[:start_index] + capitalized_word + str1[start_index+length:]\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces and split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it does, add a space before it\n            words[i] ='' + words[i]\n    \n    # Join the words back together and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Capitalize the first letter of each word and join the words with spaces\n    capitalized_words =''.join(word.capitalize() for word in words)\n    \n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # use a regular expression to find all capital letters at the beginning of a word\n    pattern = re.compile(r'^[A-Z]')\n    # split the string into words\n    words = string.split()\n    # loop through each word and add spaces before capital letters\n    for i, word in enumerate(words):\n        # if the first character is capital letter, add a space before it\n        if i == 0 or not pattern.match(words[i-1]):\n            words[i] ='' + word\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through the words and insert spaces between the capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Join the words back into a string and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    capitalized_words = [' '.join(w.capitalize() for w in word.split()) for word in words]\n    # Join the capitalized words with spaces\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Function to replace all the words starting with capital letters with spaces\n    str1 = re.sub(r'\\b([A-Z])', r' \\1', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define regex pattern for capital letters followed by a space\n    pattern = r'\\b([A-Z])(?=\\s)'\n\n    # find all matches in the string using the pattern\n    matches = re.findall(pattern, str1)\n\n    # iterate through all matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match +'')\n\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # split the list into a list of lists, where each inner list contains a string of digits\n    digits_list = [[s for s in num if s.isdigit()] for num in nums_str]\n\n    # sort the inner lists numerically\n    digits_list = sorted(digits_list)\n\n    # join the sorted lists into a list of strings of digits\n    sorted_nums = [\"\".join(num) for num in digits_list]\n\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    # Split the strings into numbers and convert them to numbers\n    nums = [float(num) for num in nums_str]\n\n    # Sort the numbers numerically\n    nums.sort()\n\n    # Convert the sorted numbers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Split the list of strings into individual numeric strings and sort them\n    nums_str = sorted(set(nums_str))\n    \n    # Convert the sorted numeric strings back to floating point numbers and return the list\n    return [float(num_str) for num_str in nums_str]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums_int]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the list of strings to a list of integers\n    nums_int = [int(i) for i in nums_str]\n    # Sort the list of integers using the built-in sort function\n    nums_int.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(i) for i in nums_int]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums_sorted = sorted(nums)\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as an input and sorts them numerically.\n    The function first converts each string of numbers into a numeric value using the `float()` function.\n    Then, it sorts the list using the `sorted()` function and returns the sorted list.\n    '''\n    nums_float = [float(x) for x in nums_str]\n    sorted_nums = sorted(nums_float)\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = [int(num) for num in nums_str]\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a list of numeric strings\n    nums = []\n    for i in range(len(nums_str)):\n        # Check if the current string is a numeric string\n        try:\n            float(nums_str[i])\n            nums.append(nums_str[i])\n        except ValueError:\n            continue\n\n    # Sort the numeric strings numerically\n    nums.sort(key=lambda x: float(x))\n\n    # Join the sorted numeric strings back into a single string\n    sorted_nums_str = ''.join(nums)\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Add the tuple to the list\n    test_list.extend(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # create a copy of the list to avoid modifying the original list\n    new_list = test_list.copy()\n    # add the tuple to the new list\n    new_list.append(test_tup)\n    # return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list using the + operator\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + test_tup\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.extend(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the two tuples into a new tuple\n    combined_tup = tuple(test_list + test_tup)\n\n    # Return the new tuple\n    return combined_tup"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i  # Initialize smallest as root\n\n    # If left child is smaller than root\n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n\n    # If right child is smaller than smallest so far\n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n\n    # If smallest is not root\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]  # Swap root and smallest\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # Call helper function to check if array is a min heap or not\n    check_min_heap_helper(arr, 0)\n\n    # Check if array is a min heap or not\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if i is the root\n    if i == 0:\n        return True\n    # check if the left child of i is smaller than the parent\n    if arr[i] < arr[i//2]:\n        return False\n    # check if the right child of i is smaller than the parent\n    if i!= len(arr)-1 and arr[i] < arr[2*i+1]:\n        return False\n    # recursively check the left and right sub-arrays\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes an array and an index as input and returns True if the array represents a min heap, and False otherwise.\n    '''\n\n    # Base case: if the index is out of bounds, the array represents a min heap\n    if i >= len(arr):\n        return True\n\n    # Compare the root element with its children\n    if arr[i] > min(arr[2 * i + 1], arr[2 * i + 2]):\n        return False\n\n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 1:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function is used to check if the given array represents a min heap or not.\n    It returns True if the given array is a min heap and False otherwise.\n    '''\n\n    if i > len(arr) // 2:\n        return True\n\n    if arr[i] > arr[2 * i] and arr[i] > arr[2 * i + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] >= arr[i//2]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    '''\n    Given an array of integers, check if it represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case: if the current index is out of range, return True\n    if i < 0:\n        return True\n\n    # Check if the parent node is less than or equal to the child nodes\n    if arr[i] > arr[(i - 1) // 2]:\n        return False\n\n    # Recursively call the function for the parent node\n    return check_min_heap_helper(arr, i - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2] and arr[i] < arr[(i//2)+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    j = 0\n    while n > 0:\n        j = j * (2 * n - 1) // (2 * j + 1)\n        n -= 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 43\n    elif n == 8:\n        return 85\n    elif n == 9:\n        return 171\n    elif n == 10:\n        return 341\n    elif n == 11:\n        return 683\n    elif n == 12:\n        return 1365\n    elif n == 13:\n        return 2731\n    elif n == 14:\n        return 5461\n    elif n == 15:\n        return 10925\n    elif n == 16:\n        return 21853\n    elif n == 17:\n        return 43711\n    elif n == 18:\n        return 87427\n    elif n == 19:\n        return 174863\n    elif n == 20:\n        return 349733\n    elif n == 21:\n        return 699472\n    elif n == 22:\n        return 1398952\n    elif n == 23:\n        return 2797911\n    elif n == 24:\n        return 5595831\n    elif n == 25:\n        return 11191671\n    elif n == 26:\n        return 22383351\n    elif n == 27:\n        return 44766711\n    elif n == 28:\n        return 89533431\n    elif n == 29:\n        return 179066871\n    elif n == 30:\n        return 358133761\n    elif n == 31:\n        return 716267531\n    elif n == 32:\n        return 1432535071\n    elif n == 33:\n        return 2865070151\n    elif n == 34:\n        return 5730140311\n    elif n == 35:\n        return 11460280631\n    elif n == 36:\n        return 22920561271\n    elif n == 37:\n        return 45841122551\n    elif n == 38:\n        return 91682245111\n    elif n == 39:\n        return 183364490241\n    elif n == 40:\n        return 366728980491\n    elif n == 41:\n        return 733457960981\n    elif n == 42:\n        return 1466915921971\n    elif n == 43:\n        return 2933831843951\n    elif n == 44:\n        return 5867663687911\n    elif n == 45:\n        return 11735327375831\n    elif n == 46:\n        return 23470654751671\n    elif n == 47:\n        return 46941309503351\n    elif n == 48:\n        return 93882619006711\n    elif n == 49:\n        return 187765238013431\n    elif n == 50:\n        return 375530476026871\n    elif n == 51:\n        return 751060952053751\n    elif n == 52:\n        return 1502121904107511\n    elif n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, (2 * a * b) % 1000000\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initializing first two jacobsthal numbers\n    j1, j2 = 0, 1\n    # calculating nth jacobsthal number\n    for i in range(2, n+1):\n        j = j1 + j2\n        if i % 2 == 0:\n            j1, j2 = j2, j\n        else:\n            j1, j2 = j1, j\n    return j1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacob_num = 0\n    jacob_prev = 0\n    for i in range(n):\n        jacob_num = (jacob_num * (2*jacob_prev + 1)) // (i + 1)\n        jacob_prev = jacob_num\n    return jacob_num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list of tuples): List of tuples containing student_id and score\n    K (int): number of records to find the minimum for\n    \n    Returns:\n    list: list of tuples containing student_id and score for the minimum k records found in the test_list\n    '''\n    \n    test_list.sort(key=lambda x: x[1], reverse=True) # sort the list based on the second element (score) in descending order\n    \n    min_records = []\n    \n    for i in range(K):\n        min_records.append(test_list[i])\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # create a list of tuples containing the frequency of each item and the item itself\n    item_freq = [(freq[item], item) for item in freq]\n    \n    # sort the list in descending order based on frequency\n    item_freq.sort(reverse=True)\n    \n    # find the minimum k records and return them as a list\n    min_k_records = [item_freq[i][1] for i in range(K)]\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum counter\n    min_count = 0\n\n    # Traverse through the sorted list\n    for i in range(K):\n        # Increment the minimum counter if the current element has a smaller first element\n        if sorted_list[i][0] < min_count:\n            min_count = sorted_list[i][0]\n        # If the current element is equal to the minimum counter, add it to the result list\n        elif sorted_list[i][0] == min_count:\n            return_list.append(sorted_list[i][1])\n\n    # Return the result list\n    return return_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize minimum k value and minimum index\n    min_k_val = float('inf')\n    min_k_idx = None\n    \n    # Iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # Calculate the sum of the current tuple\n        curr_sum = sum(test_list[i])\n        \n        # If the current sum is smaller than the minimum k value, update minimum k value and index\n        if curr_sum < min_k_val:\n            min_k_val = curr_sum\n            min_k_idx = i\n    \n    # Check if minimum k index is not None\n    if min_k_idx is None:\n        return None\n    else:\n        # Create a new list containing only minimum k records from the original list\n        min_k_list = []\n        for j in range(len(test_list)):\n            if j!= min_k_idx:\n                min_k_list.append(test_list[j])\n        \n        # Return the minimum k list\n        return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the tuple list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to keep track of minimum k records\n    min_k_records = []\n    count = 0\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(test_list)):\n\n        # If we have found minimum k records so far, stop\n        if count == K:\n            break\n\n        # If the current record is not already in the min_k_records, add it and increment the count\n        if test_list[i] not in min_k_records:\n            min_k_records.append(test_list[i])\n            count += 1\n\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and returns the minimum K records.\n    '''\n    min_list = []\n    count = 0\n\n    for tup in test_list:\n        min_list.append(tup)\n        count += 1\n\n        if count == K:\n            break\n\n    min_list.sort()\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize a dictionary to store the count of each element in the test_list\n    count_dict = {}\n\n    # Iterate over the test_list and count the occurrences of each element in the dictionary\n    for element in test_list:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Initialize a list to store the minimum k records\n    min_list = []\n\n    # Iterate over the count_dict and append the k elements with the minimum count to min_list\n    for element in sorted(count_dict, key=lambda x: count_dict[x]):\n        if len(min_list) < K:\n            min_list.append(element)\n        else:\n            break\n\n    # Return the minimum k records from the test_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[0])\n    result = []\n    for i in range(K):\n        result.append(test_list[i][1])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_len = float('inf')\n\n    for item in test_list:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_list = [item]\n        elif len(item) == min_len:\n            min_list.append(item)\n\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    min_value = sorted_list[K-1][1]\n    min_list = []\n    for i in range(len(sorted_list)):\n        if sorted_list[i][1] == min_value:\n            min_list.append(sorted_list[i])\n            if len(min_list) == K:\n                break\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through each element in l1\n    for element in l1:\n        # Check if the element exists in all the other lists\n        if element in l2 and element in l3:\n            # If it does, add it to the common_elements list\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # iterate over each element in l1\n    for i in range(len(l1)):\n        # check if the element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    # return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # Iterate through each index of the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is common for all three lists\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through each index in the three lists\n    for i in range(len(l1)):\n        # Check if the current element is in both lists l1 and l2\n        if l1[i] in l2 and l2[i] in l3:\n            # Check if the current element is in both lists l1 and l3\n            if l1[i] in l2 and l1[i] in l3:\n                # If the element is common for all three lists, append it to the list of common elements\n                common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_list = []\n    \n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is common for all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    # Create a set of unique elements from each list\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n\n    # Find the intersection of the three sets\n    intersect = set1.intersection(set2, set3)\n\n    # Iterate through the intersection and add any common elements to a new list\n    for element in intersect:\n        if element in l1 and element in l2 and element in l3:\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = None\n    second_smallest = None\n    \n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least 2 elements\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List must have at least two elements.\"\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements to find the second smallest.\"\n    \n    numbers.sort() # sort the list in ascending order\n    return numbers[1] # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number in the list\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'ab*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*a'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab*')\n    return pattern.match(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+b?'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings and returns the count of pairs of reverse strings in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the current substring is a reverse of the previous substring\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n    \"\"\"\n\n    # Create a dictionary to store the count of each string\n    count_dict = {}\n\n    # Iterate through each string in the list\n    for string in test_list:\n\n        # If the string has less than 2 characters, skip it\n        if len(string) < 2:\n            continue\n\n        # Reverse the string\n        reverse_string = string[::-1]\n\n        # If the reverse string exists in the dictionary, increment the count\n        if reverse_string in count_dict:\n            count_dict[reverse_string] += 1\n        else:\n            # Otherwise, add the string to the dictionary with a count of 1\n            count_dict[string] = 1\n\n    # Initialize the count of reverse pairs\n    reverse_count = 0\n\n    # Iterate through the dictionary and count the reverse pairs\n    for string, count in count_dict.items():\n        for i in range(count):\n            for j in range(i+1, count):\n                reverse_count += 1\n\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of each tuple in the list\n    count_dict = {}\n\n    # Iterate over the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the count_dict\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple not in count_dict:\n            count_dict[item_tuple] = 0\n        count_dict[item_tuple] += 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize a dictionary to store the count of each tuple of lists\n    count = {}\n    # loop through each element of the list\n    for item in list1:\n        # if the element is not a list, ignore it\n        if not isinstance(item, list):\n            continue\n        # convert the list to a tuple and increment the count in the dictionary\n        count[tuple(item)] = count.get(tuple(item), 0) + 1\n    # return the dictionary\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    \n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # increment the count of the sublist in the dictionary\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n            \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = [(tuple(sublist), len(sublist)) for sublist in list1]\n    sublist_count = {}\n    for sublist_tuple in list_tuples:\n        if sublist_tuple[0] in sublist_count:\n            sublist_count[sublist_tuple[0]] += sublist_tuple[1]\n        else:\n            sublist_count[sublist_tuple[0]] = sublist_tuple[1]\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist = tuple(sorted(sublist))\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list1[:]\n    count_dict = {}\n    for item in list2:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in count_dict:\n                    count_dict[sub_item] += 1\n                else:\n                    count_dict[sub_item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for i in range(len(list1)):\n        list_dict[tuple(list1[i])] = list_dict.get(tuple(list1[i]), 0) + 1\n    return list_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Split the input string by '.'\n    parts = num.split('.')\n    # Check if there are exactly two parts\n    if len(parts)!= 2:\n        return False\n    # Check if the last part contains only digits and has a precision of 2\n    if not parts[1].isdigit() or len(parts[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into digits\n    digits = list(num)\n    \n    # Check if the first digit is non-zero\n    if not digits[0].isdigit():\n        return False\n    \n    # Check if all the digits are non-zero and less than 10\n    for digit in digits:\n        if not digit.isdigit() or int(digit) >= 10:\n            return False\n    \n    # Check if the precision of the number is 2\n    if len(digits) > 3 or len(digits) < 2:\n        return False\n    \n    # Check if the number has a decimal point\n    if '.' not in num:\n        return True\n    \n    # Split the string into integer and decimal parts\n    int_part, dec_part = num.split('.')\n    \n    # Check if the integer part is non-empty and only contains digits\n    if not int_part.isdigit():\n        return False\n    \n    # Check if the decimal part is only contains digits\n    if not dec_part.isdigit():\n        return False\n    \n    # Check if the decimal part has a precision of 2\n    if len(dec_part)!= 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_places = 0\n    for i in range(len(num)):\n        if num[i] == '.':\n            decimal_places += 1\n    if decimal_places < 2:\n        return False\n    for i in range(len(num)):\n        if num[i] == '.' or (num[i].isdigit() and decimal_places > 0):\n            decimal_places -= 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.count('.') > 1:\n        return False\n    if '.' in num and num.count('.') == 1 and len(num.split('.')[1]) > 2:\n        return False\n    if '.' not in num and len(num) > 2:\n        return False\n    if '.' not in num and len(num) == 2:\n        if '0' in num or '1' in num:\n            return True\n    if '.' not in num and len(num) == 1:\n        if '0' == num:\n            return True\n        elif '1' in num:\n            return False\n        else:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if \".\" in num:\n        if len(num.split(\".\")[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if num.count('.') > 1:\n            return False\n        else:\n            decimal_part = num.split('.')[-1]\n            if len(decimal_part)!= 2:\n                return False\n            else:\n                return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number is a string and has a length of 2 or more\n    if isinstance(num, str) and len(num) >= 2:\n        # Check if the string contains only digits and at least one decimal point\n        if all(char.isdigit() for char in num) and '.' in num:\n            # Check if the decimal point is followed by exactly 2 digits\n            if len(num.split('.')[1]) == 2:\n                # Convert the string to float and return True if it's a valid decimal number\n                try:\n                    decimal_number = float(num)\n                    return True\n                except ValueError:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    # If the input string is empty, return True\n    if not num:\n        return True\n    # If the input string has less than 2 digits, return False\n    if len(num) < 2:\n        return False\n    # Split the input string into a list of digits and check for the presence of a decimal point\n    if '.' in num:\n        # If the decimal point is present, check if the remaining digits are less than or equal to 99\n        remaining_digits = num.split('.')[1]\n        return remaining_digits.isdigit() and int(remaining_digits) <= 99\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = str(num)  # Convert the number to a string\n    if '.' in num and len(num.split('.')[1]) == 2:  # Check if the number contains a decimal point and has a precision of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        elif abs(num - round(num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the array is less than or equal to 1\n    if len(arr) <= 1:\n        return True\n\n    # Initialize a dictionary to store the count of each element in the array\n    element_count = {}\n\n    # Iterate over the array and count the number of occurrences of each element\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Check if the length of the dictionary is 1\n    if len(element_count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    distinct_elements = []\n    for num in arr:\n        if num not in distinct_elements:\n            distinct_elements.append(num)\n        else:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    # create a set of unique elements to check for uniqueness\n    unique_set = set(arr)\n\n    # check if the length of the set is exactly one\n    if len(unique_set) == 1:\n        # if the length is one, the list contains only one distinct element\n        return True\n    else:\n        # if the length is greater than one, the list contains more than one distinct element\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == 1:\n        return True\n    else:\n        unique_flag = True\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                unique_flag = False\n                break\n        if unique_flag:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        unique = True\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                unique = False\n                break\n        if unique == True:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    # Check if the given month number is valid\n    if not 1 <= monthnum3 <= 12:\n        return \"Invalid month number. Please enter a number from 1 to 12.\"\n\n    # Check if the given month number contains 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"This month has 30 days.\"\n    elif monthnum3 in [2]:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return \"This month has 29 days.\"\n        else:\n            return \"This month has 28 days.\"\n    else:\n        return \"This month does not have 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check if the given month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # convert the month number to its corresponding string name\n    monthname = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # check if the given month number has 30 days\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"30 days in \" + monthname[monthnum3-1]\n    else:\n        return \"31 days in \" + monthname[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 30 days, and False otherwise.\n    \"\"\"\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    if monthnum3 in month_days:\n        if month_days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Dictionary to store the number of days in each month\n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    # Check if the month number is valid\n    if monthnum3 in days_in_month:\n        # If the month number is valid, check if the month contains 30 days or not\n        if days_in_month[monthnum3] == 30:\n            # If the month contains 30 days, return True\n            return True\n        else:\n            # If the month doesn't contain 30 days, return False\n            return False\n    else:\n        # If the month number is not valid, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = str(monthnum3)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]:\n        if monthnum3 % 2 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n            days_in_month[1] = 29\n        return True\n    elif monthnum in [\"02\"]:\n        if monthnum3 % 4 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n            days_in_month[1] = 29\n        return True\n    else:\n        return days_in_month[int(monthnum)-1] == 30"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    if monthnum3 in [4,6,9,11]:\n        return False\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    # check if the month number is between 1 and 12\n    if not (1 <= monthnum3 <= 12):\n        return \"Invalid month number\"\n\n    # lookup the number of days in each month\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # check if the month has 30 days\n    if month_days[monthnum3] == 30:\n        return \"This month has 30 days\"\n    else:\n        return \"This month has 31 or 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in months:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 100 == 0:\n        if monthnum3 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days[1] = 29\n    return days[monthnum-1]"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    diff = float('inf')  # initialize the minimum difference variable\n\n    # traverse the array\n    for i in range(1, n):\n        diff = min(diff, arr[i] - arr[i-1])  # calculate the difference between two adjacent elements\n\n    return diff  # return the minimum difference between any two elements in the array"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n\n    min_diff = float('inf')  # initialize minimum difference as infinite\n\n    for i in range(n - 1):  # iterate over all pairs of elements\n        diff = arr[i+1] - arr[i]  # calculate difference between i and i+1\n        if diff < min_diff:  # update minimum difference if found a smaller one\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i]-arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n        else:\n            min_val = min(min_val, arr[i])\n            max_val = max(max_val, arr[i])\n\n        diff = max_val - min_val\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    else:\n        arr.sort()\n        diff = arr[1] - arr[0]\n        for i in range(1, n-1):\n            if arr[i+1] - arr[i] < diff:\n                diff = arr[i+1] - arr[i]\n        return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    :param arr: The given array.\n    :param n: The size of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    \n    # initialize the minimum difference and the two indices of the minimum difference\n    min_diff = abs(arr[1] - arr[0])\n    min_idx = 0\n    \n    # iterate over the array\n    for i in range(1, n):\n        # calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n        \n        # update the minimum difference if it's smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n    \n    # return the minimum difference and the two indices of the minimum difference\n    return min_diff, (min_idx, min_idx+1)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')  # initialize minimum difference to positive infinity\n    min_indices = []  # initialize list to store indices of minimum difference pairs\n\n    # loop through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the difference between the i-th and j-th elements\n            diff = abs(arr[i] - arr[j])\n\n            # update the minimum difference if the current pair is smaller\n            if diff < min_diff:\n                min_diff = diff\n                min_indices = [i, j]\n\n    # convert the list of indices into a tuple and return the minimum difference\n    return (min_diff, tuple(min_indices))"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) < min_diff:\n            min_diff = abs(arr[i] - arr[i - 1])\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    i = 2\n    while True:\n        if i % 2!= 0:\n            if n == 1:\n                return i\n            elif n % i == 0:\n                return i\n            i += 1\n        else:\n            i += 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the first polite number as 100\n    polite_num = 100\n    \n    # Check if the nth polite number is less than or equal to 100\n    while n > 100:\n        # Update the polite number by incrementing the digits by 1\n        polite_num += 1\n        \n        # Add the sum of the digits raised to the power of 2\n        digits = [int(digit) for digit in str(polite_num)]\n        polite_sum = sum([digit ** 2 for digit in digits])\n        \n        # Update the polite number with the new value\n        polite_num = polite_sum\n    \n    # Return the nth polite number\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer 'n' as input and returns True if it is a nth polite number, False otherwise.\n    '''\n    if n < 1:\n        return False\n\n    # if n is even, then it is a polite even number\n    if n % 2 == 0:\n        return is_polite(n//2)\n\n    # calculate the nth polite number using the formula:\n    # n^2 + 1001/n\n    # where n is the given input number\n    numerator = n**2 + 1001\n    denominator = n\n    nth_polite = (numerator/denominator)**(1/2)\n\n    # if the nth polite number is an integer, then it is a polite number\n    if int(nth_polite) == nth_polite:\n        return True\n\n    # otherwise, it is not a polite number\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                return False \n        return True\n    \n    def nth_prime(n): \n        count = 0 \n        i = 2 \n        while count < n: \n            if is_prime(i): \n                count += 1 \n            i += 1 \n        return i - 1\n    \n    polite_num = nth_prime(n) \n    return polite_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return False\n\n    polite_numbers = {1: 1, 2: 3, 3: 5, 4: 7, 5: 9, 6: 11, 7: 13, 8: 15, 9: 17}\n\n    if n in polite_numbers:\n        return polite_numbers[n]\n    else:\n        if n % 2 == 0:\n            return is_polite(n // 2) + is_polite(n // 2)\n        else:\n            return is_polite(n // 2) + is_polite((n // 2) + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize a list to store the polite numbers \n    polite_numbers = []\n\n    # Initialize two variables to keep track of current and next polite numbers\n    current = 1\n    next = 2\n\n    while len(polite_numbers) < n:\n        # If the next polite number is not a palindrome, add it to the list \n        if str(next)!= str(next)[::-1]:\n            polite_numbers.append(next)\n\n        # Calculate the next polite number by adding the current and next numbers\n        current = next\n        next += 1\n\n    # If the nth polite number is not present in the list, return False \n    if n-1 >= len(polite_numbers):\n        return False\n    else:\n        return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n % 5 == 0: \n        return False\n    elif n % 7 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize count variable\n    count = 1\n    # initialize first_polite variable\n    first_polite = 1\n    # loop until count reaches n\n    while count < n:\n        # check if first_polite is not prime\n        if first_polite > 1:\n            prime = True\n            for i in range(2, int(math.sqrt(first_polite))+1):\n                if first_polite % i == 0:\n                    prime = False\n                    break\n            if prime:\n                count += 1\n                first_polite += 1\n        else:\n            count += 1\n            first_polite += 1\n    # return the nth polite number\n    return first_polite - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize count and polite_number\n    count = 1\n    polite_number = 1\n    \n    # loop until count reaches n\n    while count <= n:\n        # check if polite_number is a prime number\n        if all(polite_number % i!= 0 for i in range(2, int(math.sqrt(polite_number))+1)):\n            # increment polite_number and count\n            polite_number += 1\n            count += 1\n        # check if polite_number is a palindrome\n        elif str(polite_number) == str(polite_number)[::-1]:\n            # increment polite_number and count\n            polite_number += 1\n            count += 1\n            \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables for the polite number and the index\n    polite = 0\n    index = 1\n    \n    # Loop through the numbers until we find the nth polite number\n    while index <= n:\n        # Calculate the current polite number\n        polite = (2 * index - 1) / 2\n        \n        # If it's not a prime number, increase the index and the polite number\n        while not is_prime(polite):\n            polite += 1\n            index += 1\n        \n        # If we found the nth polite number, return True\n        if index == n:\n            return True\n    \n    # If we didn't find the nth polite number, return False\n    return False\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    if len(l1) < 2:\n        return pair_list\n    \n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n        \n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    if len(l1) < 2:\n        return result\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Create an empty list to store the pairs\n    pairs = []\n    \n    # Loop through the list and add pairs of consecutive items to the list\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n        \n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs in the list whose sum is equal to the input sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as input. It returns the count of pairs whose sum is equal to the sum input.\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes in two lists and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns a new list with the difference between the two lists.\n    '''\n    # First, we need to create a set of all the elements from both lists\n    common_elements = set(li1).intersection(set(li2))\n    # Then, we need to create a new list with the difference between the two original lists\n    diff_list = []\n    for elem in li1:\n        if elem not in common_elements:\n            diff_list.append(elem)\n    for elem in li2:\n        if elem not in common_elements:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing only the elements that are in the first list, but not in the second list.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return odd_num_sum(n-1) + 4**(n-1)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total_sum += i ** 4\n            count += 1\n    return total_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # Loop from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add fourth power of the current number to sum\n            sum += i ** 4\n            # Increment count\n            count += 1\n\n    # Return the sum of fourth power of first n odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize variables to store sum and current number\n    sum_of_powers = 0\n    current_num = 1\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1):\n        # Check if current number is odd\n        if i % 2 == 1:\n            # Find fourth power of current number and add it to sum\n            sum_of_powers += current_num ** 4\n            # Increment current number\n            current_num += 1\n\n    # Return the sum of fourth powers of odd numbers\n    return sum_of_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return \"Not Balanced\"\n            last_char = stack.pop()\n            if last_char in ['(', '{', '[']:\n                if char not in [')', '}', ']']:\n                    return \"Not Balanced\"\n    if stack:\n        return \"Not Balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        else:\n            if len(stack) == 0 or (char == ')' and stack[-1]!= '(') or (char == ']' and stack[-1]!= '[') or (char == '}' and stack[-1]!= '{'):\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j > i:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if (exp[i], stack[-1]) in [(')', '('), ('}', '{'), (']', '['), ('}', '['), ('}', '(')]:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {'(': ')', '[': ']', '{': '}'}\n    balance_map = {'(': 0, '[': 0, '{': 0}\n    balance = 0\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char!= bracket_map[top_char]:\n                return False\n            if char in balance_map.keys():\n                balance += balance_map[char]\n            balance_map[char] = balance\n            balance = 0\n            \n    if stack:\n        return False\n    return balance == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i.isdigit():\n            continue\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if top_element == '(':\n                continue\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the words without k length\n    result = []\n    \n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the result list\n            result.append(word)\n    \n    # Join the words back into a string and return the result\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Initialize a list to store the words to be removed\n    to_remove = []\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the length of the word is equal to K, append it to the to_remove list\n        if len(words[i]) == K:\n            to_remove.append(words[i])\n\n    # Loop through the to_remove list and remove the words from the words list\n    for i in range(len(to_remove)):\n        words.remove(to_remove[i])\n\n    # Join the words list back into a string and return the result\n    result =''.join(words)\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with length K\n    result = [word for word in words if len(word)!= K]\n\n    # Join the remaining words into a string\n    final_result =''.join(result)\n\n    return final_result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words using whitespace as the separator\n    words = test_str.split()\n    # create a list to store the words with k length\n    result = []\n    # loop through each word and check if its length is greater than K\n    for word in words:\n        if len(word) > K:\n            result.append(word)\n    # join the remaining words into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the non-K-length words\n    non_k_length_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, add it to the non-K-length list\n        if len(word)!= K:\n            non_k_length_words.append(word)\n    # Join the non-K-length words back into a string\n    result =''.join(non_k_length_words)\n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the length of the word is equal to K\n        if len(words[i]) == K:\n            # If it is, remove the word from the list\n            words.pop(i)\n            \n            # Reduce the index of all subsequent words by 1\n            for j in range(i+1, len(words)):\n                words[j-1] = words[j]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        match = re.search(pattern,text)\n        if match:\n            return (match.group(),match.start(),match.end())\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n\n    result = []\n    for match in matches:\n        result.append({\n            'occurrence': match.start(),\n            'position': match.start(),\n           'substring': match.group(0)\n        })\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Check if pattern is a regex pattern\n    if re.search(r'^\\^', pattern) or re.search(r'$', pattern):\n        raise ValueError('Pattern cannot start or end with a ^ or $')\n\n    # Search for pattern in the text using re.search()\n    match = re.search(pattern, text)\n\n    # If no match is found, return None\n    if not match:\n        return None\n\n    # Extract the index of the match and the length of the pattern\n    index = match.start()\n    length = len(pattern)\n\n    # Return the match and the position of the pattern in the text\n    return match.group(), index, length"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of a substring within a string.\n    Return a tuple (match_count, match_position) or None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(nums[i] % 2 for _ in range(len(nums) // 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers and returns True if every odd index contains odd numbers. Otherwise, it returns False.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        count = 0\n        for num in nums:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # loop through the list and check if the odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    # if all odd indexes contain odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if odd_count < 2:\n                odd_count += 1\n                if nums[i] % 2 == 0:\n                    return False\n    return odd_count == 2"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Loop through each index of the list\n    for i in range(0, len(nums)):\n        # Check if the number at the current index is odd\n        if nums[i] % 2 == 1:\n            # If it is, check if the number at the current odd position is odd\n            if nums[i+1] % 2 == 1:\n                # If it is, continue to the next index\n                continue\n            # If it is not, return False\n            else:\n                return False\n    # If all numbers at odd positions are even, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # check if the current odd index is empty\n            if nums[i] == '':\n                continue\n            # check if the current odd index contains odd numbers\n            elif sum(int(digit) for digit in nums[i]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # check if the input list is empty\n    if not nums:\n        return True\n    \n    # loop through the list and check if the index is odd\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if the index is odd\n            # check if the number at the index is odd\n            if nums[i] % 2!= 0:\n                return False\n    \n    return True  # if all checks pass, return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i - 1] not in vowels) and (i == len(test_str) - 1 or test_str[i + 1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Create a list to store the non-repeated elements\n    non_repeated_list = []\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_list.append(key)\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(non_repeated_list)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    \n    # Convert the set to a list and sort it in ascending order\n    unique_list = sorted(list(unique_set))\n    \n    # Initialize the sum variable to 0\n    sum_variable = 0\n    \n    # Iterate through the unique list and add the elements to the sum variable\n    for element in unique_list:\n        sum_variable += element\n    \n    return sum_variable"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # Initialize a variable to store the sum of the unique elements\n    unique_sum = sum(unique_set)\n    \n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Convert the set to a list to store the unique elements in the original order\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique elements\n    total_sum = sum(unique_list)\n    # Return the sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    sum = 0\n    for num in arr:\n        if num not in seen:\n            sum += num\n            seen.add(num)\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num in arr:\n        if count_dict[num] == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # use the len() function to get the length of the unique set\n    length = len(unique_set)\n    # initialize a variable to store the sum of the non-repeated elements\n    sum_of_non_repeated_elements = 0\n    # iterate through the unique set\n    for element in unique_set:\n        # add the element to the sum of non-repeated elements if it is not the first occurrence of the element\n        if element not in arr:\n            sum_of_non_repeated_elements += element\n    # return the sum of non-repeated elements\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # sum of unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of the elements in the array to remove duplicates\n    unique_arr = set(arr)\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_arr)\n    # return the sum\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n\n    # Loop through each element in the set and add its value to the sum of non-repeated elements\n    for element in unique_set:\n        sum_of_non_repeated += element\n\n    return sum_of_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by the first element of each group\n    grouped_list = groupby(list1)\n    # initialize an empty list to store sublists\n    sublists = []\n    # iterate over each group\n    for key, group in grouped_list:\n        # if the group has consecutive duplicates, append them to the sublist\n        if len(list(group)) > 1:\n            sublists.append(list(group))\n    # return the sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(iterable):\n        '''\n        Helper function to group consecutive duplicates of elements into sublists.\n        '''\n        return [list(group) for _, group in groupby(iterable)]\n\n    # Pack consecutive duplicates into sublists\n    return pack_duplicates(list1)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n\n    # Group the elements of the list based on their value\n    grouped_list = groupby(list1)\n\n    # Create an empty list to store the sublists\n    result = []\n\n    # Iterate over each group of consecutive elements\n    for key, group in grouped_list:\n        # If the group has more than one element, add it as a sublist to the result\n        if len(group) > 1:\n            result.append(list(group))\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby to group elements by their keys (i.e. consecutive duplicates)\n    grouped = groupby(list1)\n    # Flatten the list to obtain sublists with consecutive duplicates\n    result = list(chain.from_iterable(grouped))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Define a function to find consecutive duplicates\n    def consecutive_duplicates(lst):\n        return [(k, list(g)) for k, g in groupby(lst)]\n\n    # Apply the function to the input list\n    packed_list = consecutive_duplicates(list1)\n\n    # Return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in list1:\n        if item in result:\n            for k, g in groupby(result, key=lambda x: x[0]):\n                if len(list(g)) == 1:\n                    result.remove(k)\n                    result.append([k[0]] + list(g))\n        else:\n            result.append([item])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append([k for k, _ in group])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in unique_lists:\n            unique_lists[item_tuple] += 1\n        else:\n            unique_lists[item_tuple] = 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in unique_list:\n            unique_list.append(tuple(list1[i]))\n    count_dict = {}\n    for i in unique_list:\n        count_dict[i] = list1.count(i)\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    sublist_count = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        # Check if the item is a list and is not a sublist of another item\n        if isinstance(item, list) and all(not isinstance(sublist, list) for sublist in item):\n            # Turn the item into a tuple and add it to the dictionary\n            sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary\n    counts = {}\n    \n    # iterate through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # increment the count of the tuple in the dictionary\n            counts[tuple(sublist)] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for item in list1:\n        if item not in unique_list:\n            unique_list[item] = 1\n        else:\n            unique_list[item] += 1\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    sublists = {}\n    \n    # loop through each list in the list1\n    for sublist in list1:\n        # turn the sublist into a tuple and check if it's already in the dictionary\n        if sublist not in sublists:\n            # if it's not, add it and set its value to 1\n            sublists[sublist] = 1\n        else:\n            # if it's already in the dictionary, increment its value by 1\n            sublists[sublist] += 1\n            \n    # return the dictionary\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the number of occurrences of each unique sublist\n    unique_sublists_count = {}\n    \n    # Loop through each element in the list1\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in unique_sublists_count:\n            # If it is, increment its count by 1\n            unique_sublists_count[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            unique_sublists_count[sublist_tuple] = 1\n    \n    # Return the dictionary of unique sublist counts\n    return unique_sublists_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_dict = {}\n    \n    for i in range(len(list1)):\n        tuple_list = tuple(list1[i])\n        if tuple_list in unique_dict:\n            unique_dict[tuple_list] += 1\n        else:\n            unique_dict[tuple_list] = 1\n            \n    return unique_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    tuples_list = []\n    for i in range(1, total_sum+1):\n        tuples_list.append((i,))\n\n    combos = []\n    for combo in combinations(tuples_list, r=2):\n        if sum(combo) == total_sum:\n            combos.append(combo)\n\n    return combos"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    n = len(test_list)\n    k = len(test_list[0])\n    total_sum = sum(sum(x) for x in test_list)\n\n    if k > n:\n        return []\n\n    # find all possible combinations of k distinct integers\n    for i in range(n-k+1):\n        # find the sum of the current combination\n        current_sum = sum(test_list[i][j] for j in range(k))\n        # check if the current combination is equal to the target sum\n        if current_sum == total_sum:\n            # find all possible combinations of remaining elements\n            remaining = []\n            for l in range(i+1, n):\n                remaining.extend(test_list[l])\n            # find the combinations of sums with remaining elements\n            comb = combinations(remaining, k)\n            for combination in comb:\n                yield tuple(sorted(combination))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Sorting the list of tuples\n    test_list.sort()\n    \n    # Using itertools to generate all the combinations of sums\n    for combination in combinations(test_list, len(test_list)):\n        # Converting the tuple to a list\n        combination = list(combination)\n        # Checking if the combination is valid or not\n        valid = True\n        for i in range(len(combination)):\n            if sum(combination[:i]) > combination[i]:\n                valid = False\n                break\n        # If the combination is valid, printing it\n        if valid:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n\n    # Sort the given list of tuples in ascending order\n    test_list = sorted(test_list)\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n\n            # Calculate the sum of the current combination\n            sum_of_combination = sum(test_list[i][0:j+1])\n\n            # If the sum is present in the given list, add it to the combinations list\n            if sum_of_combination in test_list:\n                combinations.append(test_list[i][0:j+1])\n\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                print(\"Sum of tuples\", test_list[i], \"and\", test_list[j], \"is\", sum(test_list[i])+sum(test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)):\n        for j in range(i):\n            combinations_list.extend(combinations(test_list, i))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Function to calculate sum of a tuple\n    def tuple_sum(tup):\n        return sum(tup)\n\n    # Creating a list of tuples with unique elements\n    unique_tuples = list(set(test_list))\n\n    # Using itertools to find combinations of sums of tuples\n    combinations_sum = set(combinations(unique_tuples, len(unique_tuples)))\n\n    # Filtering combinations with tuples in the test_list\n    filtered_combinations = set()\n    for combo in combinations_sum:\n        if all(tup in test_list for tup in combo):\n            filtered_combinations.add(combo)\n\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i])+sum(test_list[j])+sum(test_list[k]) == 0:\n                    print(tuple(sorted([test_list[i], test_list[j], test_list[k]])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total = sum(test_list)\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum([test_list[i][0], test_list[j][1], test_list[k][2]]) == total:\n                    count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the count of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    \n    # Check whether the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even,\n    and False otherwise.\n    \"\"\"\n    def count_div(n):\n        \"\"\"\n        This helper function takes an integer n as input and returns the count of divisors of n.\n        \"\"\"\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        if n > 1:\n            count += 1\n        return count\n\n    count1 = count_div(n)\n    count2 = sum(1 for i in range(1, n+1) if n % i == 0)\n    if count1 == count2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate number of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    # check if count is even or odd\n    if count % 2 == 0:\n        print(n, \"has even number of divisors.\")\n    else:\n        print(n, \"has odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    ''' \n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php \n    '''\n    # count the number of divisors \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n    if n > 1: \n        count += 1\n    # check whether the count of divisors is even or odd \n    if count % 2 == 0: \n        print(\"The count of divisors of\", n, \"is even.\") \n    else: \n        print(\"The count of divisors of\", n, \"is odd.\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    num = 1\n    \n    while num <= n:\n        if n % num == 0:\n            count += 1\n        num += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n and returns whether its count of divisors is even or odd.\n    '''\n\n    # Calculate the number of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 1\n            if n // i!= i:\n                divisors += 1\n\n    # Check whether the count of divisors is even or odd\n    if divisors % 2 == 0:\n        print(f'{n} has an even count of divisors.')\n    else:\n        print(f'{n} has an odd count of divisors.')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n    if n > 1:\n        divisors_count += 1\n    return divisors_count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, min(i+5, n)+1, 2):\n            if j == i+1:\n                count += 1\n                sum_odd += arr[j]\n            else:\n                count -= 1\n                if count == 0:\n                    sum_odd -= arr[i]\n                    sum_odd += arr[j]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a dictionary to store the cumulative sum of odd length subarrays\n    cum_sum = {}\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is odd, check if its sum is already in the dictionary\n        if arr[i] % 2 == 1 and (i - len(cum_sum)) in cum_sum:\n            # If it is, add the sum to the sum of odd length subarrays\n            sum_odd += cum_sum[(i - len(cum_sum))]\n        # If the current element is odd and its sum is not in the dictionary, add it to the dictionary\n        elif arr[i] % 2 == 1:\n            cum_sum[i] = arr[i]\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            sum_odd += sum(arr[i:j])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    start = 0\n    end = 0\n    max_end = 0\n    \n    while end < n:\n        if end - start + 1 % 2 == 1:\n            res += arr[end]\n            max_end = max(max_end, end)\n        end += 1\n    \n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        if i%2!=0:\n            temp_sum = 0\n            for j in range(i, n):\n                temp_sum += arr[j]\n                if j-i+1%2==0:\n                    sum_odd += temp_sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i)%2 == 1:\n                sum += sum_of_subarray(arr, i, j)\n\n    return sum\n\ndef sum_of_subarray(arr, i, j):\n    return sum(arr[i:j+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        if i == 0:\n            sum += arr[i]\n        elif i % 2 == 1:\n            sum -= arr[i-1]\n            sum += arr[i]\n\n        if i == n-1:\n            sum -= arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2!= 0:\n                sum += arr[j] - arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_subarrays_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2 == 1:\n            odd_subarrays_sum += arr[i]\n        else:\n            odd_subarrays_sum -= arr[i-1]\n    return odd_subarrays_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters, r, g, b, representing the red, green, and blue components of a color.\n    It converts the RGB color model to HSV color model and returns the values of hue, saturation, and value in the HSV color model.\n    \"\"\"\n    # Convert the RGB color to the HSV color model\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    else:\n        if cmax == r:\n            hue = (g - b) / delta\n        elif cmax == g:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        if hue < 0:\n            hue += 6\n        hue /= 6\n        if delta == 0:\n            saturation = 0\n        else:\n            saturation = delta / (1 - abs(2 * cmax - 1))\n\n    value = (cmax + cmin) / 2\n    # Return the values of hue, saturation, and value in the HSV color model\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h, s, v = 0, 0, max_val\n\n    if max_val!= 0:\n        delta = max_val - min_val\n        s = delta / max_val\n\n    if max_val == min_val:\n        h = 0\n    elif r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, and b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Convert r, g, and b to the interval [0, 1]\n    r, g, b = r if r <= 1 else r / 255, g if g <= 1 else g / 255, b if b <= 1 else b / 255\n\n    # Convert r, g, and b to the interval [0, 6]\n    r, g, b = r * 6, g * 6, b * 6\n\n    # Calculate the chroma and hue components\n    chroma = max(r - b, g - b, r - g)\n    if chroma == 0:\n        hue = 0\n    elif r == g:\n        hue = (b - r) / chroma\n    elif r == b:\n        hue = 2 + (g - r) / chroma\n    else:\n        hue = 4 + (r - g) / chroma\n\n    hue = hue if hue >= 0 else hue + 6\n\n    # Calculate the saturation and value components\n    saturation = chroma / (1 - abs(2 * hue - 1))\n    value = chroma\n\n    # Convert the hue component from [0, 6] to [0, 1]\n    hue = hue / 6 if hue <= 1 else hue / 6 - 1\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Convert r, g, b to floats\n    r, g, b = map(float, (r, g, b))\n\n    # Find the minimum and maximum values in the RGB color\n    min_val, max_val = min(r, g, b), max(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta) + 120\n    else:\n        hue = 60 * ((r - g) / delta) + 240\n\n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        if max_val == 0:\n            saturation = 0\n        elif max_val == r:\n            saturation = delta / max_val\n        elif max_val == g:\n            saturation = (max_val - b) / delta\n        else:\n            saturation = (max_val - r) / delta\n\n    # Calculate the value\n    value = max_val\n\n    # Convert the HSV values to floats and return\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integers representing the red, green, and blue \n    components of an RGB color and returns the Hue, Saturation, and Value (HSV) \n    components of the color.\n    \n    Hue: The color is categorized as belonging to a cyclical spectrum. The hue \n            variable represents the position of the color on the cyclical spectrum. \n            The hue variable ranges from 0 to 360 degrees. For example, a hue of \n            0 degrees is red, a hue of 120 degrees is green, and a hue of 240 degrees \n            is blue.\n    \n    Saturation: The color's brightness or lightness. The saturation variable ranges \n                from 0 (black) to 100 (white). A value of 0 means the color is completely \n                black, and a value of 100 means the color is completely white.\n    \n    Value: The color's opacity or transparency. The value variable ranges from 0 (transparent) \n            to 100 (opaque). A value of 0 means the color is completely transparent, and \n            a value of 100 means the color is completely opaque.\n    \n    \"\"\"\n    \n    # Convert r, g, b to floats\n    r, g, b = map(float, (r, g, b))\n    \n    # Convert r, g, b to fractions of 1\n    r, g, b = r/255, g/255, b/255\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g-b)/max_val)\n    elif max_val == g:\n        hue = 60 * ((b-r)/max_val) + 120\n    else:\n        hue = 60 * ((r-g)/max_val) + 240\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val)/max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    # Return a tuple containing the hue, saturation, and value\n    return (int(hue), int(saturation*100), int(value*100))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r/255, g/255, b/255 # normalize rgb values to range [0, 1]\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60 # convert from degrees to radians\n\n    if h < 0:\n        h += 360\n\n    s = delta / max_val\n\n    if s == 0:\n        v = 0\n    elif delta == 0:\n        v = max_val\n    else:\n        v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert to decimal values between 0 and 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Convert to float values between 0 and 1\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the value of h (hue)\n    h = None\n    \n    # Check the range of r, g, b values\n    if max_val == min_val:\n        # If r, g, b are all equal, h is undefined\n        h = 0\n    elif r == max_val:\n        # If r is max_val, h = (g - b) / (max_val - min_val)\n        h = (g - b) / (max_val - min_val)\n    elif g == max_val:\n        # If g is max_val, h = 2 + (b - r) / (max_val - min_val)\n        h = 2 + (b - r) / (max_val - min_val)\n    else:\n        # If b is max_val, h = 4 + (r - g) / (max_val - min_val)\n        h = 4 + (r - g) / (max_val - min_val)\n    \n    # If h is less than 0, add 6 to it to make it between 0 and 6\n    if h < 0:\n        h += 6\n    \n    # Calculate the value of s (saturation)\n    if max_val == 0:\n        # If max_val is 0, s is 0\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n    \n    # Calculate the value of v (value)\n    v = max_val\n    \n    # Return a tuple of h, s, and v values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert R, G, and B to floats\n    r, g, b = [float(x) for x in [r, g, b]]\n\n    # Find the maximum and minimum values among R, G, and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the range of values among R, G, and B\n    range_val = max_val - min_val\n\n    # Calculate the Hue\n    if range_val == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / range_val)\n    elif max_val == g:\n        hue = 60 * ((b - r) / range_val) + 120\n    elif max_val == b:\n        hue = 60 * ((r - g) / range_val) + 240\n\n    # Calculate the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = range_val / max_val\n\n    # Calculate the Value\n    value = max_val\n\n    # Return the converted values\n    return [hue, saturation, value]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = map(float, (r, g, b)) / 255  # normalize to 0-1 range\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n        h *= 60\n    if h < 0:\n        h += 360\n    s = delta / (cmax + 1e-10) if cmax!= 0 else 0\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h * 60.0\n    if h < 0:\n        h += 360.0\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    v = cmax\n    \n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_sum = sum(n for n in lst if n % 2 == 0)\n    odd_sum = sum(n for n in lst if n % 2!= 0)\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and finds the product of the first even and odd numbers of the list.\n    '''\n    # initialize variables for even and odd numbers\n    even = 0\n    odd = 0\n    \n    # loop through the list and count even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    \n    # check if there are even and odd numbers in the list\n    if even == 0 or odd == 0:\n        print(\"The list does not contain any even or odd numbers.\")\n    else:\n        # calculate the product of even and odd numbers\n        product = even * odd\n        print(\"The product of the even and odd numbers in the list is:\", product)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            product *= i\n        else:\n            odd_count += 1\n            product *= i\n\n    if even_count == 0 or odd_count == 0:\n        return None\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function will take a list of integers as input and will return the product of first even and odd number of the list.\n    '''\n    count = 0\n    product = 1\n    for num in lst:\n        count += 1\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num - 1\n    if count % 2 == 0:\n        return product\n    else:\n        return product * 2"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        \n        if count_even > 0 and count_odd > 0:\n            break\n        \n        product *= num\n    \n    if count_even > 0 and count_odd > 0:\n        return product\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    # loop through the list to find the even and odd numbers\n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n\n    # multiply the even and odd numbers to get the product\n    product = even_num * odd_num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            return lst[0] * lst[1]"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by spaces\n    str_list = test_str.split()\n\n    # Convert each string to an integer\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual characters\n    chars = tuple(test_str)\n    \n    # Initialize an empty list to store the integer values\n    int_list = []\n    \n    # Loop through each character in the string\n    for char in chars:\n        # Convert the character to an integer and append it to the list\n        int_list.append(int(char))\n    \n    # Convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    :param test_str: a tuple string in the form \"(a, b, c)\"\n    :return: an integer tuple (a, b, c)\n    \"\"\"\n    a, b, c = test_str.strip(\"(\").strip(\")\").split(\",\")\n    return (int(a), int(b), int(c))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings separated by commas\n    substrings = test_str.split(',')\n    \n    # Initialize an empty list to store the integer tuples\n    int_tuples = []\n    \n    # Loop through each substring in the list\n    for substring in substrings:\n        \n        # Try to convert the substring to an integer using the int() function\n        try:\n            int_value = int(substring)\n            \n            # If the conversion was successful, append the integer tuple to the list\n            int_tuples.append((int_value,))\n            \n        # If there was an error with the conversion, print a message to the console\n        except ValueError:\n            print(\"Error: Invalid integer value in substring: \", substring)\n            \n    # Return the integer tuple list\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the string to a list of integers\n    nums = [int(i) for i in test_str.split()]\n    # Create an empty integer tuple\n    result = ()\n    # Iterate through the list of integers and append them to the tuple\n    for num in nums:\n        result += (num,)\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' to get the tuple elements\n    tuple_str = test_str.split(',')\n    # Convert the tuple elements to integer\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, str):\n        str_tuple = test_str.split(\",\")\n        int_tuple = tuple(int(i) for i in str_tuple)\n        return int_tuple\n    else:\n        raise ValueError(\"Input must be a string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Create an empty list to store the integer values\n    int_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is an integer, append it to the list\n        if char.isdigit():\n            int_list.append(int(char))\n\n    # Return the tuple of integers\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        t = tuple(map(int, test_str.split(',')))\n        return t\n    except ValueError:\n        print(\"Invalid input. Please use comma-separated tuple string.\")\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of integers\n    int_list = [int(x) for x in list(test_str)]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i == len(a) or a[i]!= x else i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = 'This is a string with abbbbbbbbbb bbbbbbbb'\nresult = text_match_three(text)\nprint(result)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found at index', match.start())\n    else:\n        print('No match found')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\babb\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Concatenate the list and string to form a new tuple\n    new_tuple = new_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Append the given string to the tuple\n    new_tuple += (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(elem) for elem in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of integers.\n    test_str (str): A string of characters.\n\n    Returns:\n    A new tuple containing the elements of the given list and string.\n    '''\n    return tuple([test_list[i] for i in range(len(test_list))]+[ord(char) for char in test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string into a single string\n    new_string = test_list[0] + test_str\n    \n    # Convert the string into a list of characters\n    new_list = list(new_string)\n    \n    # Create a new tuple from the list of characters\n    new_tuple = tuple(new_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str,) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # check whether the length of the list is even or not\n    if len(nums) % 2!= 0:\n        print(\"The length of the list is odd. Please provide a list of even length.\")\n        return\n    \n    # loop through the list\n    for i in range(0, len(nums), 2):\n        # check whether the current even index contains even numbers or not\n        if nums[i] % 2!= 0:\n            print(\"The even index at index {} does not contain even numbers.\".format(i))\n            return\n    \n    # if the loop completes without any errors, the list contains even numbers at every even index\n    print(\"The list contains even numbers at every even index.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            for j in range(i+1, len(nums)):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                else:\n                    break\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if index is even\n            if sum(filter(lambda x: x % 2 == 0, nums[i:])) == 0:  # check if even numbers count in even positions\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Iterate through the list of numbers\n    for i in range(len(nums)):\n        # Check if the number at this index is even\n        if nums[i] % 2 == 0:\n            # Check if the number at this even index is also even\n            if nums[i]!= nums[i+2]:\n                return False\n        else:\n            # Check if the number at this even index is odd\n            if nums[i+2] % 2 == 1:\n                return False\n\n    # If we make it through the loop without finding any odd numbers, we know that every even index contains even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        for j in range(i+1, len(nums), 2):\n            if nums[i] % 2 == 0 and nums[j] % 2 == 0:\n                even_count += 1\n                break\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through each element of the list\n    for i in range(len(nums)):\n        # Check if the element at the current index is even\n        if nums[i] % 2 == 0:\n            # If it is, check if the next element is even as well (if there is one)\n            if i == len(nums) - 1:\n                return False\n            elif nums[i+1] % 2 == 0:\n                return True\n    # If we've looped through the entire list and haven't found any even numbers, return False\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count == 0:\n                return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(len(nums)) if j!= i])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_tup.extend(remove_nested(item))\n        else:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-tuple elements of the input tuple\n    result = []\n    # Loop through each element of the input tuple\n    for elem in test_tup:\n        # If the element is not a tuple, append it to the result list\n        if not isinstance(elem, tuple):\n            result.append(elem)\n        # If the element is a tuple, recursively call the function on the element and append its result to the result list\n        else:\n            result.append(remove_nested(elem))\n    # Return the result list\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_tup = result_tup + remove_nested(item)\n        else:\n            result_tup = result_tup + (item,)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Define a list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through the tuples in the given tuple\n    for tup in test_tup:\n        # If the tuple is not a tuple, append it to the non_nested_list\n        if not isinstance(tup, tuple):\n            non_nested_list.append(tup)\n        # If the tuple is a tuple, recursively call the remove_nested function on it\n        else:\n            # Use recursion to remove the nested tuple\n            new_tup = remove_nested(tup)\n            # If the new tuple is not empty, append it to the non_nested_list\n            if new_tup:\n                non_nested_list.append(new_tup)\n    # Return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # Check if the current element is a tuple\n        if isinstance(test_tup[i], tuple):\n            # If it is, remove it from the tuple\n            test_tup = tuple(test_tup)\n            test_tup = test_tup[:i] + test_tup[i+1:]\n            i -= 1  # Decrement the index since we removed an element\n    return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as an input and counts the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    '''\n    This function takes a list of lists as input and counts the number of lists in it.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments:\n    - `arr` is the sorted array to search through.\n    - `x` is the element to search for in the array.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last indices of the array.\n    left = 0\n    right = len(arr) - 1\n    # Loop through the array until the left pointer is greater than or equal to the right pointer.\n    while left < right:\n        # Calculate the midpoint of the array and check if the midpoint element is equal to the target element.\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            # If the midpoint element is equal to the target element, update the right pointer to mid - 1.\n            right = mid - 1\n        elif arr[mid] < x:\n            # If the midpoint element is less than the target element, update the left pointer to mid + 1.\n            left = mid + 1\n        else:\n            # If the midpoint element is greater than the target element, update the right pointer to mid - 1.\n            right = mid - 1\n    # If the target element is not found, return -1.\n    if arr[right]!= x:\n        return -1\n    else:\n        return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments:\n    arr - the sorted array of elements\n    x - the element to search for in the array\n    \n    The function returns the index of the last occurrence of x in the array. If x is not found in the array, the function will return -1.\n    '''\n    \n    # find the last occurrence of x in the array\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n        \n    if i < 0:\n        # if x was not found in the array, return -1\n        return -1\n    else:\n        # if x was found, return the index of the last occurrence of x in the array\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr: the sorted array\n        x: the element to find\n\n    Returns:\n        the last position of the element in the array or -1 if the element is not found\n    \"\"\"\n\n    # Find the index of the last element equal to x\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the element was not found, return -1\n    if left > right and arr[right]!= x:\n        return -1\n    else:\n        return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize the first and last indices to None\n    first_index = None\n    last_index = None\n\n    # Iterate over the array and find the first and last indices of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            if first_index is None:\n                first_index = i\n            last_index = i\n\n    # Check if x is not found in the array\n    if first_index is None:\n        print(\"Element not found in the array.\")\n        return None\n\n    # Return the last index of x\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # find the index of x in the array using binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # if x is not found, return -1\n    if low > high:\n        return -1\n\n    # find the last occurrence of x in the array using binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element x as input and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    # Find the leftmost occurrence of x in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Return the index of the last occurrence of x in the array\n    if left < len(arr) and arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return right + 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element as input and returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    # Create a set to store the elements of the array\n    unique_elements = set(arr)\n    # Find the last element in the set\n    last_element = max(unique_elements, key=unique_elements.index)\n    # If the last element is equal to the given element, return its index\n    if last_element == x:\n        return arr.index(x)\n    # If the last element is not equal to the given element, return -1 to indicate that the element is not present in the array\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?P<match>[^b])b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('match')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[^\\s]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"^a.*b$\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*)b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    This function takes in a dictionary as an argument and returns the sum of all the items in the dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"The range must be greater than or equal to 1\")\n    if n % 2 == 0:\n        n += 1\n    return sum([x for x in range(1, n+1, 2)])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # initialize the sum to 0\n    total = 0\n\n    # loop through all odd natural numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # add the current number to the total\n        total += i\n\n    # return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            sum += num\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    total = 0\n    # loop through odd numbers within range n\n    for i in range(3, n+1, 2):\n        total += i\n    # return the sum of all odd numbers in the range n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    sum = 0\n\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    print(\"The sum of all odd natural numbers within the range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum to zero\n    sum_of_odds = 0\n    # iterate over all odd natural numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # add the current odd number to the sum\n        sum_of_odds += i\n    # return the final sum\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments: the lower limit l and the upper limit r.\n    It uses a loop to iterate over the natural numbers within the range l to r (inclusive).\n    For each number, it checks if it's odd and adds it to a running sum if it is.\n    Finally, it returns the sum.\n    '''\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The array to calculate the sum of.\n\n    Returns:\n    float: The sum of the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): a list of numbers\n\n    Returns:\n    int: the sum of the numbers in the list\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each element in the array\n    for i in arr:\n        # add the element to the sum\n        sum += i\n    # return the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all its elements.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary\n    binary_n = bin(n)[2:]\n    # Append 0's to make the binary string d long\n    binary_n = binary_n.zfill(d)\n    # Extract the d last bits from the binary string\n    shifted_bits = binary_n[-d:]\n    # Extract the first d bits from the binary string\n    first_d_bits = binary_n[:-d]\n    # Concatenate the shifted bits with the first d bits\n    rotated_bits = shifted_bits + first_d_bits\n    # Convert the rotated bits back to an integer and return it\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # Pad the binary string with zeros until the length is d\n    binary_str = '0'*(d - len(binary_str)) + binary_str\n    # Convert the binary string to an integer\n    rotated_num = int(binary_str, 2)\n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    mask_d = mask << d\n    return (n << d) | (n & mask_d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n = n & mask # Make sure the number is within 32-bits\n    # Rotate d bits left\n    for i in range(d):\n        carry = (n & 0x80000000) >> 31\n        n = (n << 1) | carry\n    # Shift the remaining bits to the right\n    n = n & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to a binary string\n    bin_str = bin(n)[2:]\n    # Calculate the number of bits to rotate\n    num_bits = len(bin_str) - d\n    # Pad the bits with zeros if there are less than d bits left\n    bin_str = bin_str.zfill(num_bits)\n    # Convert the binary string back to an integer\n    rotated_num = int(bin_str, 2)\n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift by\n    shift_bits = d % 32\n    \n    # Calculate the number of bits to shift the number to the left\n    shift_bits_num = (32 - shift_bits) % 32\n    \n    # Extract the bits to be shifted to the left from the original number\n    bits_to_shift = (n & ((1 << shift_bits) - 1))\n    \n    # Shift the number to the left\n    shifted_num = ((n >> shift_bits) & ((1 << shift_bits_num) - 1)) | (bits_to_shift << shift_bits)\n    \n    return shifted_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # mask for the lower d bits\n    mask = 2 ** d - 1\n    # shift the bits to the left by d bits\n    rotated = (n << d) & mask\n    # shift the remaining bits to the right\n    shifted = (n >> (32 - d)) & 0xffffffff\n    # add the shifted bits to the rotated bits\n    result = rotated | shifted\n    # return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the low d bits of n\n    rotated_n = (n << d) & ((1 << 32) - 1)\n    # Extract the high bits of n shifted by 32 - d bits\n    shifted_bits = (n >> (32 - d)) & ((1 << 32) - 1)\n    # Combine the shifted and rotated bits\n    result = (rotated_n | shifted_bits) & ((1 << 32) - 1)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # calculate the number of bits to rotate left\n    num_bits = 32 - d\n\n    # calculate the number of bits to rotate right\n    num_bits_right = 32 - num_bits\n\n    # get the binary representation of the given number\n    binary_n = format(n, '032b')\n\n    # rotate the binary representation left by d bits\n    rotated_left = binary_n[-num_bits:] + binary_n[:-num_bits]\n\n    # rotate the binary representation right by num_bits bits\n    rotated_right = rotated_left[-num_bits_right:] + rotated_left[:-num_bits_right]\n\n    # convert the binary representation back to an integer\n    rotated_n = int(rotated_right, 2)\n\n    # return the rotated number\n    return rotated_n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all spaces from the text\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and returns the same string with all whitespaces removed.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x+1):\n        if i == x:\n            continue\n        if i == y:\n            continue\n        if i == z:\n            continue\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    if x!= y and x!= z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if y == x and y!= z:\n        count += 1\n    if y == x and y!= z:\n        count += 1\n    if y!= x and y == z:\n        count += 1\n    if y!= x and y!= z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    if z == x and z!= y:\n        count += 1\n    if z == x and z!= y:\n        count += 1\n    if z!= x and z == y:\n        count += 1\n    if z!= x and z!= y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(x,z+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    nums = [x, y, z]\n    equal_nums = [num for num in nums if nums.count(num) == 1]\n    return len(equal_nums)\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == x or i == y or i == z or j == x or j == y or j == z:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize a variable to store the count of rotations required\n    count = 0\n    # Iterate through the array\n    for i in range(n-1):\n        # If the current element is greater than the next element, increment the count of rotations\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    # Initialize two variables to keep track of the number of rotations required\n    count = 0\n    prev_index = -1\n\n    # Loop through the array and keep track of the index of the previous element\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            prev_index = i\n            break\n\n    # If the array is already sorted, return 0\n    if prev_index == -1:\n        return 0\n\n    # Initialize two variables to keep track of the start and end indices of the subarray to be rotated\n    start_index = 0\n    end_index = prev_index\n\n    # Loop through the array from the beginning until the end index is found\n    while arr[end_index] > arr[start_index]:\n        start_index += 1\n\n    # Increment the count if the start index and end index are not equal\n    if start_index!= end_index:\n        count += 1\n\n    # Loop through the array from the end index to the beginning until the start index is found\n    while arr[end_index] > arr[start_index]:\n        end_index -= 1\n\n    # Increment the count if the start index and end index are not equal\n    if start_index!= end_index:\n        count += 1\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    # function to rotate an array by k elements\n    def rotate(arr, k):\n        n = len(arr)\n        k = k % n\n        arr[0], arr[k] = arr[k], arr[0]\n        for i in range(1, n):\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        return arr\n        \n    # sort the array\n    arr.sort()\n    \n    # initialize count variable\n    count = 0\n    \n    # loop through each rotation of the array\n    while rotate(arr, count)!= arr:\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Sort the array\n    arr = sorted(arr)\n    # Count number of rotations required to sort the array\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Calculate the difference between the last element and the first element\n    diff = arr[n-1] - arr[0]\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    # Loop through all possible rotations\n    for i in range(n):\n        # Calculate the difference between the (i+1)th element and the (i+1-diff)th element\n        temp = arr[i+1] - arr[i+diff]\n        # If the difference is greater than 0, then there is a rotation required\n        if temp > 0:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    '''\n\n    # initialize the number of rotations to 0\n    count = 0\n\n    # loop through the array and check if the array is already sorted\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return count # if the array is sorted, return the count of rotations\n\n    # if the array is not sorted, check if it can be sorted by rotating it\n    for i in range(len(arr)):\n        if arr[i] < arr[i + 1]:\n            # rotate the array by one element to the right\n            arr[i], arr[len(arr) - 1] = arr[len(arr) - 1], arr[i]\n            count += 1 # increment the count of rotations\n            # check if the rotated array is already sorted\n            for j in range(len(arr)):\n                if arr[j] > arr[j + 1]:\n                    return count # if the array is sorted, return the count of rotations\n\n    return count # if the array is not sorted after any rotations, return the count of rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Initialize the length of the array and the count of rotations\n    n = len(arr)\n    count = 0\n\n    # Iterate through the array and check if any element is greater than its previous element\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # If an element is found that is greater than its previous element, increment the count of rotations\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            j += 1\n        if j!= i:\n            count += 1\n            temp = arr[i]\n            for k in range(i, j):\n                arr[k] = arr[k+1]\n            arr[j] = temp\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Check if the number is positive and not zero\n    if n < 0 or n == 0:\n        return False\n\n    # Initialize two variables to keep track of the square root and the current number\n    sqrt_n = 0\n    current_n = n\n\n    # Iterate until the square root is greater than the current number\n    while sqrt_n * sqrt_n <= current_n:\n        sqrt_n += 1\n\n    # Check if the square root is equal to the current number\n    if sqrt_n * sqrt_n == current_n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    if x*x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Using a loop to check if the number is a perfect square or not\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n//i == i:\n            return True\n    # If the loop completes without finding a perfect square, the number is not a perfect square\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # calculate the square root of the given number\n    sqrt_n = int(n ** 0.5) + 1\n\n    # check if the square root is a perfect square\n    if n == sqrt_n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns a boolean value indicating whether the number is a perfect square or not.\n    \"\"\"\n    # function to check if a number is a perfect square or not\n    def is_square(num):\n        \"\"\"\n        This function takes a number as input and returns a boolean value indicating whether the number is a perfect square or not.\n        \"\"\"\n        # check if the number is less than 2\n        if num < 2:\n            return False\n        # check if the number is already a perfect square\n        elif num == 2:\n            return True\n        # check if the number is less than 9 and is a perfect square\n        elif num < 9 and num % 2 == 0:\n            return True\n        # if the number is less than 9 and is not a perfect square\n        else:\n            # calculate the square root of the number\n            sqrt_num = int(num ** 0.5)\n            # check if the square root is a perfect square\n            if is_square(sqrt_num):\n                return True\n            else:\n                return False\n\n    # check if the input number is a perfect square\n    if is_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # First, check if the given number is less than 0 or greater than 1,000,000,000\n    if n < 0 or n > 1000000000:\n        return False\n\n    # Second, check if the given number is a perfect square or not\n    i = 1\n    while i*i <= n:\n        if n % i:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is a perfect square by iterating from 0 to the square root of the number\n    sqrt_n = n ** 0.5\n    for i in range(int(sqrt_n) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Base case\n    if n <= 0:\n        return False\n    \n    # Trial division to check if n is a perfect square\n    for i in range(int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # If we have made it this far, n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    i = 0\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check for base cases\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n\n    # Initialize variables\n    num = n\n    i = 1\n\n    # Find square root of num\n    while num > 0:\n        num = num - (num // i)\n        i += 1\n\n    # Check if square root is equal to n\n    if i * i == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of numbers is even.\")\n    else:\n        print(\"The product of numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize variables for even and odd products\n    even_product = 1\n    odd_product = 1\n\n    # iterate over the list\n    for num in arr: \n\n        # if the number is even, multiply the even product by the number\n        if num % 2 == 0:\n            even_product *= num\n\n        # if the number is odd, multiply the odd product by the number\n        else:\n            odd_product *= num\n\n    # return whether the even product is even or odd\n    if even_product % 2 == 0:\n        return \"The even product of the list is even.\"\n    else:\n        return \"The even product of the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp_sum = lists[i][j] + lists[i][j+1] + lists[i][j+2]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_list = [[lists[i][j], lists[i][j+1], lists[i][j+2]]]\n            elif temp_sum == max_sum:\n                max_list.append([lists[i][j], lists[i][j+1], lists[i][j+2]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum of a list\n    max_sum = 0\n    # loop through each list in the input list of lists\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        current_sum = sum(lst)\n        # update the maximum sum if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # loop through each list in the input list of lists again to find the list with the maximum sum\n    max_list = None\n    for lst in lists:\n        if max_sum == sum(lst):\n            max_list = lst\n    # return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lists (list of lists): a list of lists of numbers.\n\n    Returns:\n        list: the list in the input list of lists that has the highest sum of elements.\n    \"\"\"\n    # Initialize variables to keep track of the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n\n    # Iterate over all possible combinations of lists\n    for i in range(len(lists)):\n        for j in range(i, len(lists)):\n            # Compute the sum of the elements in the combination\n            sum_elements = sum(lists[i] + lists[j])\n\n            # Check if the current combination has a higher sum than the current maximum sum\n            if sum_elements > max_sum:\n                max_sum = sum_elements\n                max_list = [lists[i], lists[j]]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    max_sum = []\n    for sublist in lists:\n        total = 0\n        for num in sublist:\n            total += num\n        if total > max_sum:\n            max_sum = total\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Base case: if the list has only one element, it's the maximum sum list\n    if len(lists) == 1:\n        return lists\n\n    # Recursive case: find the maximum sum list by taking the maximum of each element in the list\n    max_list = max(lists, key=lambda x: max_sum_list(x))\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = None\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = lst\n    \n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    # Initialize variables\n    max_sum = -float('inf')\n    max_sum_list = []\n\n    # Iterate over the lists and calculate the sum of each list\n    for lst in lists:\n        sum_lst = sum(lst)\n\n        # If the current sum is greater than the current max sum, update both max sum and max sum list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = lst\n\n    # Return the max sum list\n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char =''\n    for char in test_str:\n        if char.isupper():\n            if char == prev_char:\n                current_run += 1\n                if current_run > max_run:\n                    max_run = current_run\n            else:\n                current_run = 1\n                prev_char = char\n        else:\n            current_run = 0\n            prev_char =''\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_len = 0\n    max_run_len = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run_len:\n                max_run_len = current_run\n            current_run = 0\n    \n    if current_run > max_run_len:\n        max_run_len = current_run\n    \n    return max_run_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            if current_run > run_length:\n                run_length = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    if current_run > run_length:\n        run_length = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i - count + 1\n        else:\n            count = 0\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    max_run = 0\n    start_index = 0\n    for index, char in enumerate(test_str):\n        if char.isupper():\n            if index == len(test_str) - 1 or not test_str[index + 1].isupper():\n                run_count += 1\n                if run_count > max_run:\n                    max_run = run_count\n                    start_index = index\n    return start_index, start_index + max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the start and end indices of the maximum run\n    start_index = 0\n    end_index = 0\n    max_run = 0\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, check if it's longer than the current maximum run\n        if test_str[i].isupper() and i > end_index:\n            # If it is, update the start and end indices and the maximum run\n            start_index = i\n            end_index = i\n            max_run = 1\n        # If the current character is lowercase, check if it's longer than the current maximum run\n        elif not test_str[i].isupper() and i > end_index:\n            # If it is, update the start and end indices and the maximum run\n            start_index = i\n            end_index = i\n            max_run = 1\n        # If the current character is neither uppercase nor lowercase, check if it's longer than the current maximum run\n        else:\n            # If it is, check if it's a repeat of the last character in the maximum run\n            if test_str[i].isupper() == test_str[i-1].isupper() and i > end_index:\n                # If it is, update the end index and increment the maximum run\n                end_index = i\n                max_run += 1\n    # Return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 1\n    current_run = 1\n\n    # iterate over each character in the string\n    for char in test_str:\n        # if the character is uppercase, increment current run\n        if char.isupper():\n            current_run += 1\n        # if the character is not uppercase, reset current run and move on to the next character\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n\n    # if the last run was longer than the current max_run, update max_run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            current_run += 1\n        else:\n            upper_count = 0\n            current_run = 0\n        if upper_count > max_run:\n            max_run = upper_count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    curr_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n                curr_char = char\n        else:\n            curr_run = 0\n    \n    return max_run, curr_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 1\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Use a loop to iterate over the list of numbers\n    for num in nums:\n        # If the number is odd, return it and break out of the loop\n        if num % 2!= 0:\n            return num\n    # If we reach this point, there was no odd number in the list\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found in the list, the function returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = K\n    for i in range(len(test_tup)):\n        if test_tup[i][k] == 1:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n    return False\n\ntest_tup = ((1,2),(3,4),(5,6))\nK = 4\n\nif check_K(test_tup, K):\n    print(\"The K is present in the given tuples\")\nelse:\n    print(\"The K is not present in the given tuples\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i in K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The K is present in the given tuples.\")\n    else:\n        print(\"The K is not present in the given tuples.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) == 1:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a list of tuples and a K value as input and returns True if all the tuples in the list contain K, False otherwise.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple test_tup and an integer K as input and returns a boolean value indicating if the given tuple contains the element K.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(K in tup for tup in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Element at index\", i, \"of first tuple is greater than the corresponding element in the second tuple.\")\n            return\n    \n    print(\"Both tuples have the same elements.\")\n    return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True\n"
    }
]