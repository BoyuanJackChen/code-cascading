[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # create a dictionary to store the frequency of each element in list1\n    freq1 = {}\n    for item in list1:\n        freq1[item] = freq1.get(item, 0) + 1\n\n    # create a dictionary to store the frequency of each element in list2\n    freq2 = {}\n    for item in list2:\n        freq2[item] = freq2.get(item, 0) + 1\n\n    # find the shared elements in both dictionaries\n    shared = set(freq1.keys()).intersection(set(freq2.keys()))\n\n    # convert the sets back to tuples and return them\n    return tuple(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the two lists to sets to remove duplicates\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    intersection = set_1.intersection(set_2)\n\n    # convert the intersection to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Filter out common elements\n    shared_elements = list(set(test_tup1) & set(test_tup2))\n\n    # Return the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Loop through each element in test_tup1\n    for elem in test_tup1:\n        # Check if the element exists in test_tup2\n        if elem in test_tup2:\n            # If it does, add it to the shared set\n            shared_set.add(elem)\n\n    # Return the shared set\n    return shared_set"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(10))  # Output: True\nprint(is_not_prime(5))   # Output: False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an input number and returns True if it is not prime,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is not prime, else False.\n    \"\"\"\n    # Checking if the input is less than 2\n    if n < 2:\n        return False\n\n    # Checking if the number is divisible by any number between 2 and n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as an input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check for numbers less than 2 as they are not prime\n    if n < 2:\n        return True\n\n    # Check for numbers divisible by 2 or 3 as they are not prime\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check for odd numbers greater than 3\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n\n    # If no divisor found, then n is a prime number\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n and fill it with the given numbers\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        # if the heap has more than n elements, remove the smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # extract the n largest integers from the heap in descending order\n    largest_nums = [heapq.heappop(min_heap) for i in range(n)]\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # create a min heap to store the n largest elements\n    max_heap = []\n    for i in range(n):\n        max_heap.append((-nums[i], i))\n\n    # extract the n largest elements from the heap and store them in a list\n    largest = []\n    while max_heap:\n        largest.append(max_heap[0][1])\n        hq.heappop(max_heap)\n\n    # reverse the list to get the largest integers in descending order\n    largest = largest[::-1]\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap\n    nums_heap = nums[:n]\n    for num in nums[n:]:\n        hq.heappush(nums_heap, num)\n    # Remove the largest elements from the min heap and append them to a list\n    n_largest = []\n    while nums_heap:\n        n_largest.append(hq.heappop(nums_heap))\n    return n_largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n from the first n elements of the list\n    max_heap = hq.nlargest(n, nums)\n    # remove the largest element from the heap and add the next largest element\n    for i in range(n, len(nums)):\n        max_heap.remove(nums[i])\n        max_heap.add(nums[i])\n    return list(max_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Build the max heap from the given list\n    max_heap = [-x for x in nums]\n    hq.heapify(max_heap)\n\n    # Remove the largest element from the max heap\n    for i in range(n):\n        heapq.heappop(max_heap)\n\n    # Return the remaining elements in the max heap in descending order\n    return [-x for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    # convert the list of numbers to a heap\n    hq.heapify(nums)\n\n    # extract the largest n numbers from the heap\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min heap of size n\n    heap = [-float('inf')] * n\n\n    # Add the first n numbers to the heap\n    for num in nums[:n]:\n        hq.heappushpop(heap, -num)\n\n    # Add the remaining numbers to the end of the heap\n    for num in nums[n:]:\n        hq.heappush(heap, -num)\n\n    # Return the heap as the result\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap from the given list of numbers\n    heap = [x for x in nums]\n    hq.heapify(heap)\n    # Pop the n largest numbers from the heap and return them\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the two numbers differ at one bit position only or not\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the number to binary format\n    binary_x = bin(x)[2:]\n\n    # Check if the binary representation of the numbers differ by only one bit\n    if len(binary_x) > 1:\n        if int(binary_x[1:])!= x:\n            return False\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        if x & (x - 1)!= 0:  # check if x is a power of 2\n            return True\n        x >>= 1  # divide x by 2\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            x = (x >> 1) ^ 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert x to binary format \n    binary_x = bin(x)[2:] \n\n    # Check if the length of binary_x is 1 \n    if len(binary_x) == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary string\n    bin_str = bin(x)[2:]\n    # split the binary string into a list of bits\n    bits = list(bin_str)\n    # check if the list has only one bit set to 1\n    if len(set(bits)) == 1:\n        # if the list has only one bit set to 1, it means that the two numbers differ at one bit position only\n        return True\n    else:\n        # if the list has more than one bit set to 1, it means that the two numbers don't differ at one bit position only\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary\n    binary_x = bin(x)[2:]\n    # If x is a power of 2, the binary representation will have a single '1'\n    # If x is not a power of 2, the binary representation will have a single '0'\n    if binary_x.count('1') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x < 0:\n        return \"x should be a positive integer.\"\n\n    # Check if x is a power of 2\n    if x & (x - 1)!= 0:\n        return \"x is not a power of 2.\"\n\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall('\\w+', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Remove duplicates and return the list of words\n    return list(set(words))"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = pattern.findall(text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create a new list to store the squares of each element in the input list\n    squares = []\n    # loop through each element in the input list\n    for num in nums:\n        # square the element and append the result to the new list\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list and calculate the square of each element\n    for num in nums:\n        square = num ** 2\n        # Print the original and squared value\n        print(f'{num} squared is {square}')"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Get the length of the string\n    n = len(str)\n    # Initialize an array to store the number of rotations required for each character\n    rotations = [0]*n\n    \n    # Find the minimum number of rotations required for each character\n    for i in range(n):\n        # Get the character at index i\n        char = str[i]\n        # Initialize a variable to store the index of the character with the smallest value in the string\n        smallest = i\n        # Traverse the string starting from index i+1\n        for j in range(i+1,n):\n            # If the character at index j is smaller than the character at index i, update the smallest index\n            if str[j] < char:\n                smallest = j\n        # Update the number of rotations required for the character at index i\n        rotations[i] = smallest - i\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for i in range(n):\n        # If the number of rotations required for the character at index i is less than the current minimum, update the minimum\n        if rotations[i] < min_rotations:\n            min_rotations = rotations[i]\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Convert the string to lowercase\n    str = str.lower()\n    # Check if the length of the string is less than 2\n    if len(str) < 2:\n        return 0\n    # Initialize the count of rotations\n    count = 0\n    # Initialize the left and right pointers\n    left = 0\n    right = len(str) - 1\n    # Loop through the string until the left and right pointers meet\n    while left < right:\n        # If the characters at the left and right pointers are not equal, return the count of rotations found\n        if str[left]!= str[right]:\n            return count\n        # Increment the count of rotations\n        count += 1\n        # Increment the left and right pointers\n        left += 1\n        right -= 1\n    # If the left and right pointers meet, return the count of rotations found\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    # find the length of the string\n    n = len(str)\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(1, n+1):\n        if i <= n // 2:\n            # check if the count of each character is equal to the length of the string\n            if all(char_count[char] == i for char in str):\n                min_rotations += 1\n        else:\n            # check if the count of each character is equal to the length of the string\n            if all(char_count[char] == n-i+1 for char in str):\n                min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Get the length of the string\n    n = len(str)\n\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Initialize a list to store the minimum rotations required\n    min_rotations = []\n\n    # Loop through all possible rotations\n    for i in range(n):\n        # Create a new string by rotating the original string by i positions\n        new_str = str[i:] + str[:i]\n\n        # Calculate the frequency of each character in the new string\n        new_freq = {}\n        for char in new_str:\n            new_freq[char] = new_freq.get(char, 0) + 1\n\n        # Check if the frequency of each character is the same as the frequency of the original string\n        if new_freq == freq:\n            min_rotations.append(i)\n\n    # Find the minimum number of rotations required\n    min_rotations = min(min_rotations) if min_rotations else 0\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Sort the string\n    str_sorted = sorted(str)\n    # Check for rotations\n    count = 0\n    for i in range(n-1):\n        if str_sorted[i]!= str_sorted[i+1]:\n            count += 1\n    # Return the count of rotations\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize two variables to store the minimum and maximum length of the string\n    min_len = len(str)\n    max_len = len(str)\n    \n    # Initialize a variable to store the number of rotations required to get the same string\n    rotations = 0\n    \n    # Loop through the string from index 0 to len(str)-1\n    for i in range(len(str)):\n        # Calculate the length of the reversed string\n        len_reverse = len(str) - i - 1\n        \n        # If the reversed string is equal to the original string\n        if str[i:i+len_reverse] == str[:len_reverse]:\n            # Increase the number of rotations by 1\n            rotations += 1\n        \n        # If the reversed string is longer than the original string\n        elif len_reverse > max_len:\n            # Update the maximum length\n            max_len = len_reverse\n        \n        # If the reversed string is shorter than the original string\n        elif len_reverse < min_len:\n            # Update the minimum length\n            min_len = len_reverse\n    \n    # Return the number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Split the string into characters\n    chars = list(str)\n\n    # Initialize a counter variable to keep track of the number of rotations required\n    rotations = 0\n\n    # Loop through each character in the string\n    for i in range(len(chars)): \n\n        # Initialize a flag variable to keep track of whether we have found a match\n        found_match = False\n\n        # Loop through the remaining characters in the string and compare them to the current character\n        for j in range(i+1, len(chars)): \n\n            # If the characters match, update the flag variable and break out of the inner loop\n            if chars[i] == chars[j]: \n                found_match = True\n                break\n\n        # If we have found a match, increment the counter variable\n        if found_match: \n            rotations += 1\n\n    # Return the number of rotations required\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Finding the length of the string\n    n = len(str)\n\n    # Creating a list of all the possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(i, n):\n            rotations.append(str[i:j+1])\n\n    # Counting the frequency of each rotation in the list\n    freq = {}\n    for rot in rotations:\n        if rot in freq:\n            freq[rot] += 1\n        else:\n            freq[rot] = 1\n\n    # Finding the minimum number of rotations required to get the same string\n    min_rotations = n\n    for rot in freq:\n        if freq[rot] == 1:\n            min_rotations = min(min_rotations, n - rot.index(rot[0]))\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        # For every element in the string, we can either swap it with the next element or swap it with the last element\n        # Since we are already comparing the next and last element, we need to check all the elements in the string\n        for j in range(i+1, n):\n            # If the swapped element and the last element are same, it means that we have found a rotation\n            if str[j] == str[i]:\n                # Now, we can check if the reverse of the string is also same\n                if str[i:j+1] == str[j:i+1][::-1]:\n                    # If both are same, we can return the number of rotations required to get the same string\n                    return j-i+1\n    # If we have not found a rotation, it means that the given string is already sorted\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n <= 1:\n        return 0\n    else:\n        min_rotations = n // 2\n        for i in range(min_rotations):\n            if str[:i+1]!= str[i+1:]:\n                min_rotations -= 1\n                break\n        return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # First, check if the character is present in the string.\n    if ch in s:\n        # Split the string into two parts: front and back.\n        front, back = s.split(ch, 1)\n        # Check if the length of the first part is even.\n        if len(front) % 2 == 0:\n            # If yes, remove the last character from the front part.\n            front = front[:-1]\n        else:\n            # If no, remove the first character from the front part.\n            front = front[1:]\n        # Check if the length of the second part is even.\n        if len(back) % 2 == 0:\n            # If yes, remove the first character from the back part.\n            back = back[1:]\n        else:\n            # If no, remove the last character from the back part.\n            back = back[:-1]\n        # Join the two parts with the given character.\n        result = front + ch + back\n        return result\n    else:\n        # If the character is not present in the string, return the original string.\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into list of characters\n    s_list = list(s)\n    # remove the first occurrence of the character\n    if s_list[0] == ch:\n        s_list.pop(0)\n    # remove the last occurrence of the character\n    if s_list[-1] == ch:\n        s_list.pop()\n    # join the list of characters back into string\n    s_new = ''.join(s_list)\n    return s_new"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # Remove leading and trailing whitespaces\n    n = len(s)\n    for i in range(1,n-1): # Iterate over string from 1st to 2nd last index\n        if s[i] == ch: # If the current character matches the given character\n            s = s[:i] + s[i+1:] # Remove the current character from the string\n            n = len(s) # Update the length of the string\n    return s # Return the modified string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0] + remove_Occ(s[1:],ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # check if ch is present in the string\n    if ch in s:\n        # remove first occurrence of ch\n        s = s.replace(ch, '', 1)\n        # remove last occurrence of ch\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    # Remove the first occurrence of the character from the string\n    s = s.replace(ch,'',1) \n    # Remove the last occurrence of the character from the string\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Using list indexing to remove first and last occurrence of ch in s\n    return s[:s.find(ch)-1] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    if not s or not ch:\n        return \"\"\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix according to the row sums in ascending order\n    sorted_M = sorted(M, key=lambda row: row_sums.index(sum(row)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Traverse through each row in the matrix\n    for row in M:\n        # Initialize an empty list to store the sorted row\n        sorted_row = []\n        \n        # Traverse through each element in the row\n        for element in row:\n            # Check if the current element is greater than the smallest element in the sorted row\n            if element > sorted_row[-1] if sorted_row else True:\n                # If the current element is greater than the smallest element, insert it at the beginning of the sorted row\n                sorted_row.insert(0, element)\n            else:\n                # If the current element is not greater than the smallest element, append it to the sorted row\n                sorted_row.append(element)\n        \n        # Append the sorted row to the sorted matrix\n        sorted_matrix.append(sorted_row)\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    row_sums.sort()\n    # Use this sorted row_sums to sort the original matrix\n    sorted_M = [[M[i][j] for i in range(len(M))] for j in range(len(M[0]))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a new matrix to store the sorted matrix\n    sorted_M = [[0 for x in range(cols)] for y in range(rows)]\n\n    # Loop through the rows of the matrix\n    for i in range(rows):\n        # Initialize variables to store the current minimum sum and its corresponding row\n        min_sum = float('inf')\n        min_row = -1\n\n        # Loop through the columns of the matrix\n        for j in range(cols):\n            # Add the value of the cell at (i,j) to the sum of the row before it\n            current_sum = sum(sorted_M[k][j] for k in range(i)) + M[i][j]\n\n            # If the current sum is less than the minimum sum or if we have not found a minimum yet, update the minimum sum and its corresponding row\n            if current_sum < min_sum or min_row == -1:\n                min_sum = current_sum\n                min_row = i\n\n        # If we have found a minimum sum, swap the cells at (i,j) and (min_row,j) in the sorted matrix\n        if min_row!= -1:\n            sorted_M[i][j], sorted_M[min_row][j] = sorted_M[min_row][j], sorted_M[i][j]\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on their sums in ascending order\n    sorted_rows = sorted(M, key=lambda x: sum(x), reverse=False)\n    \n    # Sort the matrix based on the sorted rows\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(row)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the minimum sum for that row\n        min_sum = float('inf')\n        # Loop through each column in the row\n        for j in range(len(M[0])):\n            # Calculate the sum of the current column and add it to the minimum sum\n            min_sum = min(min_sum, sum([M[k][j] for k in range(len(M)) if k!= i]))\n        # Sort the current row in ascending order based on the minimum sum\n        M[i].sort()\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Initialize an empty matrix to store the sorted matrix\n    sorted_M = [[0] * cols for _ in range(rows)]\n    \n    # Fill the sorted matrix by iterating over the rows of the original matrix\n    for i in range(rows):\n        # Compute the sum of the i-th row\n        row_sum = sum(M[i])\n        \n        # Iterate over the columns of the i-th row and find the position of the minimum element\n        for j in range(cols):\n            min_pos = j\n            \n            for k in range(j+1, cols):\n                if M[i][k] < M[i][min_pos]:\n                    min_pos = k\n            \n            # Swap the minimum element with the current element in the j-th column\n            sorted_M[i][j], sorted_M[i][min_pos] = sorted_M[i][min_pos], sorted_M[i][j]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the maximum sum in the current row\n        max_sum = max(M[i])\n\n        # Iterate through the remaining rows and add the maximum sum to each row\n        for j in range(i + 1, n):\n            M[j].append(max_sum)\n\n    # Sort the matrix by comparing adjacent elements\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if M[i][j] > M[i][j + 1]:\n                M[i], M[i + 1] = M[i + 1], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the row with the smallest sum\n        min_sum_row = i\n        for j in range(i+1, n):\n            if M[j][i] < M[min_sum_row][i]:\n                min_sum_row = j\n        # Swap rows i and min_sum_row\n        M[i], M[min_sum_row] = M[min_sum_row], M[i]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h \n    print(\"The volume of the triangular prism is:\",V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h # formula for volume of triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length of each side of a triangular prism and calculates its volume.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = (1/3) * l * b * h \n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define regex pattern to match sequence of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    # use re.search() method to search for pattern in the input string\n    match = re.search(pattern, text)\n    # check if match is not None, which means pattern was found in the input string\n    if match:\n        # return True if match is found, False otherwise\n        return True\n    else:\n        # return False if pattern is not found in the input string\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]*_[a-z]*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]*_[a-z]+[a-z]*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])(?=[a-z])[a-z]+(_+[a-z]+)*\"\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<=[a-z])[A-Z]+(?=[a-z])'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        if match.group(0)!= text[match.start():match.end()]:\n            return False\n    \n    return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Use regular expressions to match sequences of lowercase letters and underscore\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    # Return True if the pattern matches, False otherwise\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern to match lowercase sequences\n    pattern = r\"([a-z])([a-z])\"\n\n    # Use the re.search() method to search for a match in the input string\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    char_list = list(string)\n    \n    # Check if the second string is a superset of the first string\n    for char in char_list:\n        if char not in string:\n            char_list.remove(char)\n    \n    # Convert list of characters back to string\n    new_string = ''.join(char_list)\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string, to_remove):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in to_remove:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    return [char for char in string if char not in char_set]\n\nNO_OF_CHARS = 256\ndef remove_chars(string, char_set):\n    '''\n    This function takes in a string and a set of characters. It removes characters from the string\n    which are present in the set.\n    '''\n    return [char for char in string if char not in char_set]\n\ndef main():\n    string = input(\"Enter a string: \")\n    char_set = input(\"Enter a set of characters: \")\n    result = remove_chars(string, set(char_set))\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a new string where all the characters that are present in the first string but not present in the second string are removed.\n    \"\"\"\n    NO_OF_CHARS = 256\n    str2_set = set(string)\n    new_str = \"\"\n    for i in range(NO_OF_CHARS):\n        if i not in str2_set:\n            new_str += chr(i)\n    return new_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of characters\n    first_list = list(string)\n\n    # Iterate through the list of characters and remove the characters present in the second string\n    for i in range(len(first_list)):\n        if first_list[i] in string:\n            first_list.pop(i)\n            i -= 1\n\n    # Convert the updated list of characters back to a string and return it\n    return ''.join(first_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string) # convert string to set of characters\n    result = []\n    for i in range(NO_OF_CHARS): # iterate over all possible characters in range(256)\n        if i not in char_set: # if character is not in set of characters, add to result\n            result.append(chr(i)) # convert character to string and append to result\n    return ''.join(result) # join result to a string and return it"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    :param string1: The first string to process.\n    :param string2: The second string to check for characters in string1.\n    :return: A new string with characters in string1 that are not present in string2.\n    \"\"\"\n    no_of_chars = 256\n    char_count = [0] * no_of_chars\n    char_count[ord(x)] += 1 for x in string1\n    for x in string2:\n        char_count[ord(x)] -= 1\n    return ''.join([chr(i) for i in range(256) if char_count[i]!= 0])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    chars_list = list(string)\n    for char in chars_list:\n        if ord(char) in range(1, NO_OF_CHARS):\n            chars_list.remove(char)\n    return ''.join(chars_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of all the characters in the second string\n    set_of_chars = set(string)\n    \n    # Create an empty list to store the characters from the first string which are not present in the second string\n    result = []\n    \n    # Iterate over the first string\n    for char in string:\n        # If the character is not in the set of characters, add it to the result list\n        if char not in set_of_chars:\n            result.append(char)\n    \n    # Convert the result list to a string\n    result_str = ''.join(result)\n    \n    # Return the result string\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters to remove\n    remove_set = set(string)\n    \n    # Create a list of characters in the second string\n    second_list = list(string)\n    \n    # Loop through the first string and remove characters from the second list that are present in the remove set\n    for char in string:\n        if char in remove_set:\n            second_list.remove(char)\n    \n    # Join the list of remaining characters in the second string\n    result = ''.join(second_list)\n    \n    # Return the resulting string\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) < 2:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arraynums)\n    # Check if the set has more than one element\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # create a set to store unique values\n    unique_set = set()\n\n    # loop through each element in the array\n    for num in arraynums:\n\n        # check if the element is already in the set\n        if num in unique_set:\n            return True\n        else:\n            # add the element to the set\n            unique_set.add(num)\n\n    # if no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # creating a set to store unique values\n    unique_nums = set(arraynums)\n    # checking if the length of the set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n    # Iterate through the array\n    for num in arraynums:\n        # If the element is not in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the element is in the set, return True\n        else:\n            return True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_numbers = []\n    for num in arraynums:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n        else:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    if x == 1:\n        return \"Woodall number\"\n    elif x == 2 or x == 3 or x == 4 or x == 5:\n        return \"Not a Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 3 or x % 10 == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:  # Check if x is even\n        if 3 * x - 1 in (2 * x + 1, 2 * x - 1):  # Check if x is a Woodall prime number\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 5 and x <= 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 4 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 5, 10, 20]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is divisible by 7\n    if x % 7 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return rev_num == 2 * (rev_num - 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    # Convert the number to a string and then reverse the string\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    # If the reversed number is one less than twice the original number, the original number is not one less than twice the reverse\n    if num - reverse!= 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    # Calculate the reverse of the reversed number\n    reversed_reversed_num = int(str(reversed_num)[::-1])\n    # Check if the reversed number is one less than twice the reverse of the reversed number\n    if num == reversed_reversed_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string back to an integer and subtract 1\n    result = int(rev_str) - 1\n    # Check if the result is one less than twice its reverse\n    if result!= 2 * int(rev_str):\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    return reverse == 2*reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is one less than twice its reverse,\n    and False otherwise.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse < num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    return num < 2*reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return 2 * rev_num + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num!= 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return num - 1 == 2 * rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 10 == 0:\n        return False  # 10 is not a palindrome\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    largest = 0\n    for i in arr:\n        largest = largest*10 + i\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize the maximum number as the first element in the array\n    max_num = arr[0]\n\n    # Traverse through the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # Calculate the maximum number that can be formed by taking the current element and the previous maximum number\n        max_num = max(max_num + arr[i], arr[i])\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the array in descending order\n    arr = [str(x) for x in arr] # Convert the array to strings\n    arr = [int(x) for x in arr] # Convert the array to integers\n    num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            num += arr[i]\n        else:\n            num *= 10\n            num += arr[i]\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            max_num += (10**i) * arr[i]\n        else:\n            max_num += (10**i) * arr[i] + (9 - arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum possible number that can be formed with those digits.\n    '''\n    \n    # Initialize max_num to 0\n    max_num = 0\n    \n    # Loop through each digit in the list\n    for digit in arr:\n        \n        # Convert the digit to its integer value\n        digit_int = int(digit)\n        \n        # Loop through each number from 1 to the digit\n        for i in range(digit_int, max_num+1):\n            \n            # Check if the current number can be formed with the digit\n            if i%digit_int == 0:\n                \n                # Update max_num if this number is larger\n                if i > max_num:\n                    max_num = i\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    \n    for i in range(1,10):\n        num = 0\n        for j in range(len(arr)):\n            num += (i**j) * arr[j]\n        if num > max_num:\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    def is_valid_digit(digit):\n        if digit == 0:\n            return False\n        elif digit == 1 or digit == 2 or digit == 3 or digit == 4 or digit == 5 or digit == 6 or digit == 7 or digit == 8 or digit == 9:\n            return True\n        else:\n            return False\n\n    def find_largest_num(arr):\n        largest_num = 0\n        temp = 0\n        for digit in arr:\n            temp *= 10\n            temp += digit\n            if is_valid_digit(temp):\n                largest_num = temp\n        return largest_num\n\n    def is_largest_num(num, arr):\n        for digit in arr:\n            temp = num\n            temp *= 10\n            temp += digit\n            if not is_valid_digit(temp):\n                return False\n        return True\n\n    max_num = find_largest_num(arr)\n    while not is_largest_num(max_num, arr):\n        max_num -= 1\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the list in descending order\n    arr.sort(reverse=True)\n    # Initializing the maximum number\n    max_num = 0\n    # Looping through each digit in the list\n    for digit in arr:\n        # Concatenating the digit to the maximum number\n        max_num = max_num * 10 + digit\n        # Checking if the maximum number is greater than the current maximum number\n        if max_num > max_num:\n            # Updating the maximum number if it is greater than the current maximum number\n            max_num = max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the list of digits in descending order\n    arr.sort(reverse=True)\n    \n    # Initialize variables for the largest and smallest digits\n    max_digit = arr[0]\n    min_digit = arr[0]\n    \n    # Initialize variables for the largest and smallest power of 10 that can divide the largest number\n    max_power = 1\n    min_power = 1\n    \n    # Loop through the list of digits, updating max and min digits and powers of 10\n    for digit in arr:\n        if digit > max_digit:\n            max_digit = digit\n            max_power = 1\n        elif digit == max_digit:\n            max_power += 1\n        \n        if digit < min_digit:\n            min_digit = digit\n            min_power = 1\n        elif digit == min_digit:\n            min_power += 1\n    \n    # Calculate the maximum power of 10 that can divide the largest number\n    max_power += (len(arr) - 1) // (max_power + 1)\n    \n    # Calculate the maximum number that can be formed with the given list of digits\n    max_num = (max_digit - 1) * 10**max_power + min_digit\n    \n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x*y)<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether two integers have opposite signs or not.\n    \"\"\"\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return False\n    elif (x<0 and y<0) or (x>0 and y>0):\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        print(\"The signs of the two integers are opposite\") \n    elif x < 0 and y < 0: \n        print(\"The signs of the two integers are opposite\") \n    elif x < 0 and y > 0: \n        print(\"The signs of the two integers are opposite\") \n    elif x > 0 and y < 0: \n        print(\"The signs of the two integers are opposite\") \n    else: \n        print(\"The signs of the two integers are not opposite\") "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return \"Both numbers have opposite signs\"\n    elif x > 0 and y > 0: \n        return \"Both numbers have same sign\"\n    else: \n        return \"Both numbers have opposite signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0: \n        return \"Both numbers are zero.\"\n    elif x < 0 and y < 0: \n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y > 0: \n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0: \n        return \"x has a positive sign and y has a negative sign.\"\n    elif x > 0 and y < 0: \n        return \"x has a negative sign and y has a positive sign.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_count = 0\n    for i in range(1, n+1):\n        if i*i*2 == n:\n            octagonal_count += 1\n    return octagonal_count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Helper function to find nth octagonal number\n    def nth_octagonal(n):\n        result = 0\n        for i in range(1, n + 1):\n            result += i * (i + 1)\n        return result\n\n    # Check if the input number is greater than zero\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Call the helper function to find the nth octagonal number\n    return nth_octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_helper(n, current_number, total_octagonal):\n        if current_number == n:\n            return total_octagonal\n        if current_number % 2 == 1:\n            total_octagonal += current_number\n            octagonal_helper(n, current_number + 2, total_octagonal)\n        else:\n            octagonal_helper(n, current_number + 2, total_octagonal)\n    return octagonal_helper(n, 1, 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_square(n):\n        return int(n*n)\n\n    def get_sqrt(n):\n        return int(n**0.5)\n\n    def get_octagonal(n):\n        return n + get_square(get_sqrt(n))\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return get_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return octagonal_helper(n//2) + octagonal_helper((n//2)+1)\n        else:\n            return octagonal_helper(n//2) + octagonal_helper((n//2)+2)\n    return octagonal_helper(n)\n\nprint(is_octagonal(5))  # Output: 25"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (8 * n - 1) / 6"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n * n) - (7 * n) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i*i == n:\n            return i\n        elif i*i > n:\n            return \"Error: The input value is not a valid octagonal number.\"\n        elif i*i+i == n:\n            return \"Error: The input value is not a valid octagonal number.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    while count < n:\n        if a**2 + b**2 == count**2:\n            count += 1\n        a += 1\n        b += 2\n    return count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return 4 * n ** 2 - 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of each substring\n    count_dict = defaultdict(int)\n\n    # iterate over each character in the string\n    for i in range(len(s)):\n        # iterate over each character in the substring\n        for j in range(i, len(s)+1):\n            # check if the sum of digits in the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                # increment the count of the substring in the dictionary\n                count_dict[s[i:j]] += 1\n\n    # return the count of unique substrings in the dictionary\n    return len(count_dict)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Initialize a dictionary to store the count of each substring\n    count_dict = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character starting from the current index and counting to the end of the string\n        for j in range(i, len(s)):\n            # Compute the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            # Add 1 to the count of the substring in the dictionary\n            count_dict[substring_sum] += 1\n    \n    # Return the count of substrings with sum of digits equal to their length\n    return sum(count for count in count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    substrings_dict = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the current substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # Increment the count of substrings with sum of digits equal to their length in the dictionary\n                substrings_dict[sum(int(digit) for digit in s[i:j])] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(substrings_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    d = defaultdict(int)\n    for i in range(n):\n        d[sum(map(int, s[i:]))] += 1\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += j-i\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the number of substrings with a given sum of digits\n    count = defaultdict(int)\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    # Loop through each character in the string\n    for char in s:\n        # If the sum of digits is equal to the length of the substring, increment the count\n        if sum_digits == len(char):\n            count[sum_digits] += 1\n        # Update the sum of digits by adding the current character to it\n        sum_digits += ord(char) - ord('0')\n    # Return the count of substrings with the given sum of digits\n    return count[sum_digits]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substrings[(sum(map(int, s[i:j])), j-i)] += 1\n    return substrings[sum(map(int, s)), len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                num_substrings += 1\n    return num_substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    dp = defaultdict(int)\n    n = len(s)\n\n    # initializing the first row of dp\n    for i in range(n):\n        dp[i] = s[i]\n\n    # filling the dp table\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] - s[j] == i-j:\n                dp[i] += dp[j]\n                count += dp[i]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with specific sum of digits as keys\n    # and the count of such substrings as values\n    sum_digit_count = defaultdict(int)\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        \n        # Initialize a variable to store the current substring\n        current_substring = ''\n        \n        # Iterate through the string from the current index\n        for j in range(i, len(s)):\n            \n            # Append the characters to the current substring\n            current_substring += s[j]\n            \n            # Calculate the sum of digits in the current substring\n            sum_of_digits = sum(int(digit) for digit in current_substring)\n            \n            # If the sum of digits is equal to the length of the current substring,\n            # increment the count of such substrings in the dictionary\n            if sum_of_digits == len(current_substring):\n                sum_digit_count[sum_of_digits] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return sum_digit_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring starting from the current index and ending at the last character of the string\n        substring = s[i:][::-1]\n\n        # Initialize a variable to store the sum of digits in the substring\n        sum_digits = 0\n\n        # Loop through each digit in the substring\n        for j in substring:\n            # Convert the digit to an integer and add it to the sum_digits variable\n            sum_digits += int(j)\n\n        # If the sum_digits is equal to the length of the substring, increment the count\n        if sum_digits == len(substring):\n            count[substring] += 1\n\n    # Return the total count of substrings\n    return sum(count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]  # initializing smallest with the first element of the list\n    \n    for x in xs:  # iterating through the rest of the elements in the list\n        if x < smallest:  # if current element is less than the smallest, update smallest\n            smallest = x\n            \n    return smallest  # returning the smallest element found in the list"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if xs[0] < smallest:\n            return xs[0]\n        else:\n            return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n\n    # Loop through the rest of the list and update the smallest number if a smaller one is found\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i][0], test_list[j][0]))\n            pairs.append((test_list[i][1], test_list[j][1]))\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs[-1][1] - pairs[0][1]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to keep track of minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the difference between current and next tuple\n        diff = test_list[i+1][0] - test_list[i][0]\n        \n        # Update the minimum and maximum difference if necessary\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize the maximum difference to be the difference between the last two elements\n    max_diff = abs(test_list[-1][0] - test_list[-2][0])\n    \n    # Iterate through the sorted list of tuples, comparing the first element of each tuple to the second\n    for i in range(1, len(test_list) - 1):\n        current_diff = abs(test_list[i][0] - test_list[i+1][0])\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order by the first element\n    test_list.sort(key=lambda x: x[0])\n    # Initialize variables for the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    # Iterate over the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair of elements and the next pair\n        next_diff = test_list[i+1][1] - test_list[i][1]\n        # Update the maximum difference if necessary\n        if next_diff > max_diff:\n            max_diff = next_diff\n        # Update the current difference\n        curr_diff = next_diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    subject_list = sorted(subjectmarks, key=lambda x: x[1])\n    return subject_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        if isinstance(lst, list):\n            return sum(flatten_list(x) for x in lst)\n        else:\n            return lst\n\n    return flatten_list(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case, empty list\n        return 0\n    elif isinstance(data_list[0], list): # recursive case, list of lists\n        return sum(recursive_list_sum(sub_list) for sub_list in data_list[0]) # flatten the nested lists and sum their elements\n    else: # base case, list of numbers\n        return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        head = data_list[0]\n        tail = data_list[1:]\n        return head + recursive_list_sum(tail)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, depth=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if depth == len(data_list):\n        return 0\n    else:\n        return data_list[depth] + recursive_list_sum(data_list, depth+1)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(lst):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        return [item for sublist in lst for item in sublist]\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if type(item) == list:\n                flat_list += flatten(item)\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables for count and remaining\n    count = 0\n    remaining = n\n    \n    # Loop through numbers from 2 to n\n    for i in range(2, n+1):\n        # Add the number to the count if it is not already in the set\n        if i not in count:\n            count.append(i)\n            \n            # If the remaining number is 0, then we have reached the end of the partition\n            if remaining == 0:\n                return count\n            \n            # Decrement the remaining number to exclude the current number\n            remaining -= 1\n            \n    # If we reach here, we have not found the end of the partition\n    return -1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n: int\n        The maximum value of the Bell numbers to consider.\n\n    Returns:\n    int\n        The number of ways to partition a set of Bell numbers with a maximum value of n.\n    \"\"\"\n\n    # Initialize variables\n    bell_numbers = [1]  # list of Bell numbers with values 1, 1, 2, 3,...\n    partitions = [1]  # list of partitions with values 1, 1, 1, 1,...\n    max_partitions = 0  # number of ways to partition the set of Bell numbers with maximum value n\n\n    # Iterate through the maximum value of Bell numbers to consider\n    for i in range(2, n + 1):\n\n        # Update the list of Bell numbers\n        new_bell_numbers = [bell_numbers[j] + bell_numbers[j + 1] for j in range(i - 2)]\n        bell_numbers.extend(new_bell_numbers)\n\n        # Update the list of partitions\n        new_partitions = [partitions[j] + bell_numbers[j] for j in range(i - 1)]\n        partitions.extend(new_partitions)\n\n        # Update the maximum number of partitions\n        if i == n:\n            max_partitions = partitions[-1]\n\n    return max_partitions"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the partition number for each number i\n        partition = sum([i*j for j in range(i+1, n+1)])\n        # Multiply the number of ways to partition by the partition number\n        ways *= partition\n    # Return the final number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n > 5:\n        return 14 * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the number of ways to partition\n    ways = [0] * (n+1)\n    # Initialize the first three Bell numbers\n    ways[0] = 1\n    ways[1] = 1\n    ways[2] = 1\n    # Fill in the rest of the list\n    for i in range(3, n+1):\n        for j in range(i):\n            ways[i] += ways[j] * ways[i-j-1]\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize the number of ways to partition to 0\n    ways = 0\n    \n    # Iterate through the numbers from 0 to n\n    for i in range(n+1):\n        \n        # If the number is a Bell number, increment the number of ways to partition\n        if is_bell(i):\n            ways += 1\n    \n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * (n - 1) + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the memoization table\n    memo = [0] * (n + 1)\n\n    # Base case\n    memo[0] = 1\n\n    # Fill the memoization table\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            memo[i] = (memo[i] + memo[i - 2]) % 10**9\n        else:\n            memo[i] = (memo[i] + memo[i - 1]) % 10**9\n\n    return memo[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # base case: n = 1 is the only way\n    if n == 1:\n        return 1\n    # base case: n = 0 is the only way\n    elif n == 0:\n        return 0\n    # if n is odd, we can choose n-1 ways to partition the set\n    elif n % 2!= 0:\n        return bell_number(n-1)\n    # if n is even, we can choose 0 or 2 ways to partition the set\n    else:\n        return bell_number(n-2) + bell_number(n-1)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes a list A as input and returns True if the array is monotonic in non-decreasing order and False otherwise.\n    '''\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    \n    # Check if the array is monotonic in increasing order\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return True\n    \n    # Check if the array is monotonic in decreasing order\n    elif all(A[i] >= A[i+1] for i in range(n-1)):\n        return True\n    \n    # Check if the array is neither monotonic in increasing nor decreasing order\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    if len(A) == 1: \n        return True\n    if A[0] >= A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty \n    if len(A) == 0: \n        return True\n    \n    # Check if the array contains only one element \n    if len(A) == 1: \n        return True\n    \n    # Initialize the previous and current elements \n    prev = A[0]\n    for i in range(1, len(A)): \n        if A[i] <= prev: \n            return False\n        prev = A[i]\n    \n    # If all elements in the array are in ascending or descending order \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty\n    if len(A) == 0: \n        return True\n\n    # check if the array contains only one element\n    if len(A) == 1: \n        return True\n\n    # check if the array contains only increasing elements\n    if A[0] <= A[1] and A[1] <= A[2]: \n        return True\n\n    # check if the array contains only decreasing elements\n    if A[0] >= A[1] and A[1] >= A[2]: \n        return True\n\n    # check if the array contains only increasing or decreasing elements\n    for i in range(1, len(A)): \n        if A[i] <= A[i-1]: \n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) <= 1:\n        return True\n    \n    # Check if the array is monotonic or not\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        if A[0] <= A[1]:\n            for i in range(1, n):\n                if A[i] > A[i-1]:\n                    return False\n            return True\n        elif A[0] >= A[1]:\n            for i in range(1, n):\n                if A[i] < A[i-1]:\n                    return False\n            return True\n        else:\n            for i in range(1, n):\n                if A[i]!= A[i-1]:\n                    return False\n            return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)]!= s:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(s, list):\n        raise TypeError(\"The second argument must be a list.\")\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    if len(set([len(i) for i in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        count += 1\n    if len(Input) == count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    # Initialize a variable to store the length of the first tuple\n    len_1 = len(Input[0])\n    # Iterate over the remaining tuples in the list\n    for tup in Input[1:]:\n        # Check if the current tuple has the same length as the first tuple\n        if len(tup)!= len_1:\n            return False\n    # If we reach this point, all the tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    i = 1\n    while i < n:\n        swapped = False\n        for j in range(0, n-i):\n            if nums[j] > nums[j+i]:\n                nums[j], nums[j+i] = nums[j+i], nums[j]\n                swapped = True\n        if not swapped:\n            i += 1\n        else:\n            n = i\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    max_iter = n * (n - 1) // 2\n    swapped = True\n\n    # keep track of minimum element\n    min_val = nums[0]\n\n    # loop until no swaps are made\n    while swapped:\n        swapped = False\n        for i in range(1, n - 1):\n            # compare current element with its neighbours\n            if nums[i] < nums[i - 1] or nums[i] < nums[i + 1]:\n                # swap the elements if they are in the wrong order\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                swapped = True\n                # update min_val if a smaller element is found\n                if nums[i - 1] < min_val:\n                    min_val = nums[i - 1]\n\n        # if no swaps are made, the list is already sorted\n        if not swapped:\n            break\n\n        # increase number of iterations\n        max_iter -= 1\n\n        # stop sorting if maximum iterations have been reached\n        if max_iter <= 0:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n\n    # Start the sorting loop\n    while True:\n        # Check if the list is already sorted\n        is_sorted = True\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                is_sorted = False\n                break\n        if is_sorted:\n            break\n\n        # If not, swap adjacent elements\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n\n        n -= 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    while True:\n        sorted = True\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                sorted = False\n        if sorted:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap closer to the middle\n        for i in range(gap):\n            # Check if the element is sorted\n            if nums[i] > nums[i+gap]:\n                # If not, swap them\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # Decrease the gap\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n\n    # initialize variables\n    gap = n\n    swapped = True\n\n    # start sorting\n    while swapped:\n        swapped = False\n\n        # iterate over the list\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        # shrink the gap\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Define the function to check whether the difference of two squares can be represented by n\n    def check(a, b):\n        # If the difference is negative, then it cannot be represented\n        if a - b < 0:\n            return False\n        \n        # Check if a and b are both squares of positive integers\n        square = int(a**0.5)\n        while square**2 <= a:\n            square += 1\n        \n        square = int(b**0.5)\n        while square**2 <= b:\n            square += 1\n        \n        # Check if the difference is a square\n        if square**2 == a - b:\n            return True\n        else:\n            return False\n    \n    # Check if n can be represented as the difference of two squares\n    if check(n, n):\n        print(f\"{n} can be represented as the difference of two squares\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return False\n\n    # check if the number can be expressed as the sum of two squares\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the input is a positive integer\n    if n < 1:\n        return \"The input is not a positive integer.\"\n    # check if the input is a perfect square\n    if n == int(n**0.5)**2:\n        return True\n    # check if the input is the difference of two squares\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if i**2 + i*n == int(n**0.5)**2:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"Cannot represent a negative number as the difference of two squares\")\n        return\n\n    # check if n is a square number\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n / i == i:\n                print(\"The given number can be represented as the difference of two squares\")\n                return\n            elif n / i!= i:\n                print(\"The given number cannot be represented as the difference of two squares\")\n                return\n\n    # check if n is a difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(i+1, int(n**0.5)+1):\n            if n % i == 0 and n % j == 0:\n                print(\"The given number can be represented as the difference of two squares\")\n                return\n\n    print(\"The given number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number can be represented as the difference of two squares or not\n    for i in range(1, int(n**0.5) + 1):\n        if i * i == n:\n            return True\n        elif n - i * i == i * i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return num == int(num**0.5)**2\n    \n    # Check if the number is a perfect square\n    if is_perfect_square(n):\n        return True\n    else:\n        # Check if the difference between the square root of n and its square is a perfect square\n        diff = int(n**(1/2))**2\n        if is_perfect_square(diff):\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 1:\n        return False\n\n    # check if the number can be expressed as a sum of two squares\n    square = int(n**0.5)\n    return square * square == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"The given number is negative.\"\n    elif n == 0:\n        return \"The given number is equal to zero.\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            for j in range(1, int(n**0.5)+1):\n                if i*i+j*j == n:\n                    return \"The given number can be represented as the difference of two squares.\"\n        return \"The given number can not be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # initialize the first and second squares\n    first_square = 1\n    second_square = n\n    \n    # check if the difference of the squares is equal to the given number\n    if first_square + second_square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 0:\n        for i in range(int(n/2)):\n            square = i*i\n            if n == square + square:\n                return True\n        return False\n    else:\n        return \"The given number is negative.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # iterate through each color in the colors list\n    for color in colors:\n        # check if the current color matches the corresponding pattern in the patterns list\n        if color not in patterns:\n            return False\n    # if we make it through the entire list without finding a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Convert colors to a list for easier manipulation\n    colors_list = list(colors)\n\n    # Iterate through the patterns array and check if each pattern is followed by the colors list\n    for pattern in patterns:\n        # Convert the pattern to a list for easier manipulation\n        pattern_list = list(pattern)\n\n        # Check if the pattern matches the colors list\n        if len(pattern_list) == len(colors_list):\n            match_found = True\n            for i in range(len(pattern_list)):\n                if pattern_list[i]!= colors_list[i]:\n                    match_found = False\n                    break\n            if match_found:\n                return True\n        else:\n            continue\n\n    # If no pattern matched, the function will return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    i = 0\n    while i < len(colors):\n        if colors[i] == patterns[i]:\n            i += 1\n        else:\n            i = 0\n            if i >= len(colors):\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # Define a dictionary to store the count of each pattern\n    pattern_count = {}\n    # Iterate through the colors and patterns lists\n    for color in colors:\n        for pattern in patterns:\n            # If the color matches the pattern, update the count for that pattern\n            if color == pattern:\n                if pattern in pattern_count:\n                    pattern_count[pattern] += 1\n                else:\n                    pattern_count[pattern] = 1\n    # Iterate through the patterns list again and check if each pattern is followed by another pattern in the list\n    for pattern in patterns:\n        if pattern_count[pattern] > 0:\n            for i in range(len(patterns)):\n                if i!= patterns.index(pattern):\n                    if patterns[i] in pattern_count:\n                        if pattern_count[patterns[i]] > 0:\n                            pattern_count[pattern] -= 1\n                            pattern_count[patterns[i]] -= 1\n                            break\n    # Check if all patterns have been matched\n    if len(pattern_count) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # iterate over the colors in the array\n    for i in range(len(colors)):\n        # check if the color at the current index matches the pattern at the current index\n        if colors[i]!= patterns[i]:\n            return False\n    # if we get here, all colors match the pattern at the current index\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Find the length of the longest sequence\n    longest_seq = max([len(pattern) for pattern in patterns])\n\n    # Check if all sequences have the same length\n    if longest_seq!= len(patterns[0]):\n        return False\n\n    # Check if the colors in each pattern match the colors at each index\n    for i in range(len(patterns)):\n        if patterns[i]!= [colors[j] for j in range(i*longest_seq, (i+1)*longest_seq)]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    color_count = {}\n    for i in range(len(colors)):\n        if colors[i] in color_count:\n            color_count[colors[i]] += 1\n        else:\n            color_count[colors[i]] = 1\n    for pattern in patterns:\n        if not all(color in color_count for color in pattern):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    pattern_count = {}\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n            \n    prev_pattern = None\n    for color in colors:\n        if color in pattern_count:\n            pattern_count[color] -= 1\n            if pattern_count[color] == 0:\n                del pattern_count[color]\n            if prev_pattern and prev_pattern!= color and color in pattern_count:\n                return False\n        else:\n            return False\n        prev_pattern = color\n        \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]):\n                result.append(tuple(test_list[i]))\n            if all(x % K == 0 for x in test_list[j]):\n                result.append(tuple(test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    # Create an empty dictionary to store the counts of elements in the list\n    counts = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Iterate through the elements in the tuple\n        for element in tup:\n            # Check if the element is already in the dictionary\n            if element in counts:\n                # Increment the count by 1\n                counts[element] += 1\n            # Otherwise, add the element to the dictionary with a count of 1\n            else:\n                counts[element] = 1\n\n    # Create a list to store the tuples with all elements divisible by K\n    result = []\n\n    # Iterate through the counts dictionary\n    for key, value in counts.items():\n        # Check if the count is divisible by K\n        if value % K == 0:\n            # Append the tuple to the result list\n            result.append((key, value))\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            final_list.append(test_list[i])\n    return final_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    tuples_list = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(n % K == 0 for n in test_list[i] + test_list[j]):\n                tuples_list.append(tuple(test_list[i] + test_list[j]))\n    \n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create a new list to store the tuples with all elements divisible by K\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer n and returns True if n is divisible by 11,\n    and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # checking whether the number is divisible by 11 or not\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    This function checks whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    length = len(word)\n    if length % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1:  # if the length of the word is odd, return True\n            return True\n    return False  # otherwise, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    word_lengths = [len(word) for word in words] # get the lengths of each word\n    is_odd = all(len(word) % 2 == 1 for word in word_lengths) # check if all words have odd length\n    return is_odd"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string by whitespace\n    for word in words:\n        if len(word) % 2!= 0:  # check if the length of the word is odd\n            print(word + \" has an odd length\")\n        else:\n            print(word + \" has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 1:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"{word} has odd length\")\n        else:\n            print(f\"{word} has even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # Check if the length of the word is even\n            return \"The length of the word is even.\"\n        else:\n            return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    words = s.split() # Split the string by whitespace\n    for word in words: \n        if len(word) % 2 == 1: # Check if the length of the word is odd\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    # split the string into words\n    words = s.split()\n    # loop through each word\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # return True if odd, False if even\n            return True\n    # if no odd word was found, return False\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # initialize variables\n    count = 0\n    num = 0\n    num_prev = 0\n\n    # loop through numbers until count is n\n    while count < n:\n\n        # update count\n        count += 1\n\n        # calculate the next number\n        num = (4 * num_prev ** 3) // (3 * count - 1)\n\n        # check if the next number is greater than the previous number\n        if num > num_prev:\n            print(num)\n            num_prev = num\n        else:\n            num_prev = 0\n\n    # print the nth tetrahedral number\n    print(\"The\", n, \"tetrahedral number is:\", num)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Helper function to calculate factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    # Helper function to calculate the sum of the cubes of integers up to n\n    def sum_of_cubes(n):\n        if n == 0:\n            return 0\n        else:\n            return n * n * n + sum_of_cubes(n - 1)\n\n    # Calculate the sum of cubes of integers up to n\n    sum_cubes = sum_of_cubes(n)\n\n    # Calculate the factorial of n\n    factorial_n = factorial(n)\n\n    # Calculate the value of the nth tetrahedral number\n    nth_tetrahedral = factorial_n * sum_cubes\n\n    # Return the value of the nth tetrahedral number\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 35\n    elif n == 6:\n        return 56\n    elif n == 7:\n        return 84\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 165\n    elif n == 10:\n        return 220\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(1, n + 1):\n        a, b, c, d = b, a + b + c + d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * (3 * n - 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((10*n*n*n*n)-(15*n*n*n)+(10*n*n)+(5*n)+1)/2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define a helper function to calculate the sum of cubes of integers\n    def sum_of_cubes(start, end):\n        return sum(i**3 for i in range(start, end+1))\n\n    # Base case: n is 0 or 1 (in both cases, the first tetrahedral number is 1)\n    if n == 0 or n == 1:\n        return 1\n\n    # Calculate the sum of cubes of integers from 1 to n-1\n    sum_of_cubes_n = sum_of_cubes(1, n-1)\n\n    # Calculate the number of odd integers from 1 to n/2\n    num_odd_integers = n // 2\n\n    # Calculate the sum of cubes of odd integers from 1 to n/2\n    sum_of_cubes_n_odd = sum_of_cubes(1, num_odd_integers)\n\n    # Return the sum of cubes of odd integers + the sum of cubes of integers from 1 to n-1\n    return sum_of_cubes_n_odd + sum_of_cubes_n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    return int((4 * (n ** 3) + 6 * n) ** (1 / 2))\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) + n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function calculates the nth tetrahedral number.\n    '''\n\n    # Initialize the sum of the tetrahedral numbers\n    tetrahedral_sum = 0\n\n    # Initialize the value of i from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the area of the ith cuboid\n        area = 6 * i * i * i\n\n        # Add the area of the ith cuboid to the sum of tetrahedral numbers\n        tetrahedral_sum += area\n\n    return tetrahedral_sum"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius r and returns the volume of the sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere using its radius.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    char = chr((sum%26)+ord('A'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return ascii_value % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n        char %= 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the result\n    result = \"\"\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character modulo 26 to the result\n        result += chr((ord(char) + 26) % 26 + ord('a'))\n\n    # Return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the character variable to an empty string\n    char = \"\"\n    # loop through each character in the string\n    for c in strr:\n        # add the ASCII value of the character modulo 26 to the character variable\n        char += chr((ord(c) % 26) + ord('a'))\n    # return the character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # initialize the sum to 0\n    sum = 0\n\n    # iterate over each character in the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_val = ord(char)\n\n        # add the ASCII value modulo 26 to the sum\n        sum += ascii_val % 26\n\n    # convert the sum to a character and return it\n    return chr(sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            seq.append(seq[-1] * 2)\n        else:\n            seq.append(seq[-1] + seq[-2])\n    return seq"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        if sequence[-1] == 1:\n            sequence.append(1)\n        elif sequence[-1] == 0:\n            sequence.append(0)\n            for j in range(len(sequence)-2, -1, -1):\n                if sequence[j] == 0:\n                    sequence[j] = 1\n                    break\n                elif sequence[j] == 1:\n                    sequence[j] = 0\n                    break\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first two numbers\n    sequence = [0, 1]\n    # loop through the remaining numbers and check if the current number is divisible by 2\n    for i in range(2, n):\n        if sequence[i-1] % 2 == 0:\n            # if it is, add the next number to the sequence\n            sequence.append(sequence[i-1] + sequence[i])\n        else:\n            # if it's not, add the next number to the sequence\n            sequence.append(sequence[i-1] + sequence[i] - 2)\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 2, 1, 2, 1, 2, 1, 2, 1]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        new_sequence = [sequence[j] + sequence[j + 1] for j in range(len(sequence) - 1)]\n        sequence.extend(new_sequence)\n        sequence.pop(0)\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n - 1 # index starts from 0\n    sequence = [False] * (n + 1) # initialize with n+1 cells\n    sequence[0] = True # first cell is always alive\n    for i in range(1, n + 1):\n        if sequence[i-1]:\n            sequence[i] = True # for i-th cell, if previous cell is alive, then next cell is also alive\n        else:\n            sequence[i] = False # for i-th cell, if previous cell is dead, then next cell is dead\n    return sequence[n] # return the nth cell in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] * 2)\n        else:\n            sequence.append(sequence[i-1] * 2)\n    return sequence[n]\n\nn = int(input(\"Enter the value of n: \"))\nresult = sequence(n)\nprint(\"The\", n, \"th number in the sequence is:\", result)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n + 1) * (2 * n + 1) * n // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2**(n-1) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = (n - 1) // 2\n    odd = n - center\n    even = center * 2 + 1\n\n    return odd + even"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the hexagonal number system:\n    #  1       3       5       7       9\n    # 2 4 6 8 10 12 14 16 18 20 22 24 26\n    # 3 6 9 12 15 18 21 24 27 30 33 36 39\n    # 4 8 12 16 20 24 28 32 36 40 44 48 52\n    # 5 10 15 20 25 30 35 40 45 50 55 60 65\n    # 6 12 18 24 30 36 42 48 54 60 66 72 78\n    # 7 14 21 28 35 42 49 56 63 70 77 84 91\n    # 8 16 24 32 40 48 56 64 72 80 88 96 104\n    # 9 18 27 36 45 54 63 72 81 90 99 108 117\n    # 10 20 30 40 50 60 70 80 90 100 110 120 130\n    # 11 22 33 44 55 66 77 88 99 110 121 132 143\n    # 12 24 36 48 60 72 84 96 108 120 132 144 156\n    # 13 26 39 52 65 78 91 104 117 130 143 156 169\n    # 14 28 42 56 70 84 98 112 126 140 154 168 182\n    # 15 30 45 60 75 90 105 120 135 150 165 180 195\n    # 16 32 48 64 80 96 112 128 144 160 176 192 208\n    # 17 34 50 66 83 100 117 134 151 168 185 202 219\n    # 18 36 52 69 86 103 120 137 154 171 188 205 222\n    # 19 38 54 71 88 105 122 139 156 173 190 207 224\n    # 20 40 56 73 90 107 124 141 158 175 192 209 226\n    \n    # Centered hexagonal number formula:\n    #   centered_hexagonal_number = (n-1) * (3n-1) / 2\n    \n    # Calculate the centered hexagonal number:\n    centered_hexagonal_number = (n-1) * (3*n-1) / 2\n    \n    # Return the centered hexagonal number:\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # define the centered hexagonal numbers\n    hex_nums = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431]\n\n    # find the nth centered hexagonal number\n    if n < 1 or n > 40:\n        return \"Invalid input. Please enter a value between 1 and 40.\"\n    else:\n        return hex_nums[n - 1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n - 1)**2 + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 16\n    else:\n        centered_num = 16 + centered_hexagonal_number(n-1)\n        return centered_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return (4 * centered_hexagonal_helper(n-1) - centered_hexagonal_helper(n-2)) // 3\n    \n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n\n    # Merge the first two dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Merge the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    # Merge the first two dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    # Merge the third dictionary\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the three dictionaries into one dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key] + dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key] + dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Combine the three dictionaries\n    combined_dict = {**dict1, **dict2, **dict3}\n    \n    # Return the combined dictionary\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the dictionaries into one dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Convert the dictionary into a list of tuples\n    key_value_list = list(merged_dict.items())\n\n    # Sort the list of tuples by the key of the tuple\n    key_value_list.sort(key=lambda x: x[0])\n\n    # Create a new dictionary from the sorted list of tuples\n    sorted_dict = dict(key_value_list)\n\n    return sorted_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new empty dictionary\n    merged_dict = {}\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Check if the key exists in the second dictionary\n        if key in dict2:\n            # If it does, check if the value in the second dictionary is a list or a dictionary\n            if isinstance(dict2[key], dict):\n                # If it's a dictionary, merge the dictionaries\n                if isinstance(dict1[key], dict):\n                    # If the value in the first dictionary is also a dictionary, recursively call the function\n                    merged_dict[key] = merge_dictionaries_three(dict1[key], dict2[key], {})\n                else:\n                    # If the value in the first dictionary is not a dictionary, simply add the value from the second dictionary\n                    merged_dict[key] = dict2[key]\n            else:\n                # If the value in the second dictionary is not a dictionary, simply add the value from the second dictionary\n                merged_dict[key] = dict2[key]\n        else:\n            # If the key does not exist in the second dictionary, simply add the value from the first dictionary\n            merged_dict[key] = dict1[key]\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Check if the key exists in the first dictionary\n        if key not in merged_dict:\n            # If it does not, add the value from the second dictionary\n            merged_dict[key] = dict2[key]\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Check if the key exists in the merged dictionary\n        if key not in merged_dict:\n            # If it does not, add the value from the third dictionary\n            merged_dict[key] = dict3[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the difference between N and the largest number in the list\n    max_diff = max(N, 999999999) - N\n\n    # Check if the difference is even\n    if max_diff % 2 == 0:\n        # If the difference is even, return the nearest even number\n        closest = N - max_diff // 2\n    else:\n        # If the difference is odd, return the nearest odd number\n        closest = N - max_diff // 2 + 1\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [i for i in range(1, N+1)]\n    closest = abs(min(n_list)-N)\n    for num in n_list:\n        if abs(num-N) < closest:\n            closest = abs(num-N)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_nums = [i for i in range(N-1, -1, -1)]\n    closest_num = smaller_nums[0]\n    for num in smaller_nums[1:]:\n        if abs(num-N) < abs(closest_num-N):\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # find the absolute difference between N and the smallest number\n    smallest_diff = abs(N - min(N))\n    # find the absolute difference between N and the largest number\n    largest_diff = abs(N - max(N))\n    # return the smaller of the two differences\n    return min(smallest_diff, largest_diff)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf') # initialize the closest number as positive infinity\n    for num in range(1, N):\n        if abs(num - N) < closest:\n            closest = abs(num - N)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5]\n    num_diff = float('inf')\n    closest_num = float('inf')\n\n    for num in nums:\n        if num < N:\n            diff = abs(N - num)\n            if diff < num_diff:\n                num_diff = diff\n                closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # Initialize variables\n    min_diff = float('inf')\n    smallest_diff = float('inf')\n    closest = N\n    # Loop through all numbers from 1 to N-1\n    for num in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(N - num)\n        # Check if the difference is smaller than the current smallest difference\n        if diff < smallest_diff:\n            # Update smallest_diff and closest if necessary\n            smallest_diff = diff\n            closest = num\n    # Return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    if N > 0:\n        return 1\n    elif N < 0:\n        return -1\n    else:\n        return 0"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    low = 0\n    high = N\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid % 2 == 0:\n            if mid > N:\n                high = mid\n            else:\n                low = mid + 1\n        else:\n            if mid > N:\n                low = mid + 1\n            else:\n                high = mid\n\n    return high"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_num = 1000  # initialize the minimum number to be larger than any number in the list\n    max_num = N  # initialize the maximum number to be smaller than any number in the list\n    \n    for num in range(1, N+1):\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    return min_num if abs(N - min_num) < abs(N - max_num) else max_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Find the length of the longest word in a list of strings.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        return \"Error: The first argument must be a list.\"\n    if type(sub_str)!= str:\n        return \"Error: The second argument must be a string.\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The string is present in the given string.\")\n    else:\n        print(\"The string is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= str or type(sub_str)!= str:\n        return \"Invalid input. Both input strings should be of type string.\"\n    \n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two string arguments: `str1` and `sub_str`.\n    It returns a boolean value indicating whether `sub_str` is present in the list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two string arguments - str1 and sub_str.\n    It returns a boolean value True if str1 is present in a list of string values as a substring of sub_str.\n    Otherwise, it returns a boolean value False.\n    \"\"\"\n    # convert sub_str to lowercase\n    sub_str = sub_str.lower()\n    # loop through the list of string values\n    for string_value in str1:\n        # convert string_value to lowercase\n        string_value = string_value.lower()\n        # check if string_value is a substring of sub_str\n        if string_value in sub_str:\n            return True\n    # if no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for s in str1:\n            if s.find(sub_str)!= -1:\n                return True\n    else:\n        return str1.find(sub_str)!= -1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list) or not isinstance(sub_str, str):\n        return False\n    \n    for value in str1:\n        if sub_str in value:\n            return True\n    \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The given number is even and undulating.\"\n    else:\n        return \"The given number is odd and not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is less than 10\n    if n < 10:\n        # If the number is less than 10, it is undulating\n        return True\n    # If the number is greater than or equal to 10, it is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Base case: if n is 1, it's undulating\n    if n == 1:\n        return True\n    # If n is even, it's not undulating\n    elif n % 2 == 0:\n        return False\n    # If n is odd, check if it's an odd sum of two primes less than or equal to n/2\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Define the list of even numbers\n    even_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    \n    # Check if the given number is present in the even_list\n    if n in even_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return n % 3 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    Args:\n        a (float): The base of the exponentiation.\n        b (int): The exponent of the exponentiation.\n\n    Returns:\n        float: The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1.0\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments - 'a' and 'b'.\n    It calculates the value of 'a' to the power 'b' using a loop.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    This function takes two arguments a and b, calculates the value of a raised to the power of b, and returns the result.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n    for i, tup in enumerate(test_list):\n        if min_index is None or tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the tuple with the smallest second element\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    \n    # Sort the list of tuples by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    for index, tup in enumerate(test_list):\n        if tup[1] < test_list[minimum_index][1]:\n            minimum_index = index\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to positive infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000000000000000000000000000\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initializing variables\n    count = 1\n    i = 2\n    \n    # iterating until i is greater than or equal to the square root of n\n    while i*i <= n:\n        # if n is divisible by i, count it as a divisor\n        if n % i == 0:\n            count += 1\n        \n        # incrementing i by 1\n        i += 1\n        \n    # returning the count of divisors of n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initialize count to 0\n    count = 0\n\n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # if i is divisible by n, increment count\n        if n % i == 0:\n            count += 1\n\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a list of lists and returns a dictionary containing the frequency of each element in the flattened list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n    # loop through each element in the flattened list\n    for item in lst:\n        # if the item is a list, recursively call the function to find the frequency of each element in the sublist\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        # if the item is not a list, check if it's already in the dictionary and increment its frequency if it is\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # create an empty dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n\n    # loop through each element in the list1\n    for element in list1:\n\n        # if the element is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(element, list):\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n        # if the element is a list, recursively call the function on the list and add its frequency to the dictionary\n        else:\n            # call the function recursively on the element\n            sub_freq_dict = frequency_lists(element)\n\n            # loop through each key-value pair in the sub_freq_dict and add it to the main freq_dict\n            for key, value in sub_freq_dict.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store frequency\n    frequency = {}\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # iterate over the flattened list and count frequency of each element\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the flattened list of lists\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency\n        if elem in freq:\n            freq[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[elem] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # create an empty dictionary\n    freq_dict = {}\n    \n    # loop through each list in the flattened list of lists\n    for lst in list1:\n        \n        # loop through each element in the list\n        for item in lst:\n            \n            # if the element is already in the dictionary, increment its count\n            if item in freq_dict:\n                freq_dict[item] += 1\n            # if the element is not in the dictionary, add it with a count of 1\n            else:\n                freq_dict[item] = 1\n                \n    # return the dictionary containing the frequency of each element in the flattened list of lists\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    else:\n        result = numbers[0]\n        for i in range(1, len(numbers)):\n            result *= numbers[i]\n        return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n        \n    # Divide the result by the length of the list\n    result /= len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    result //= len(numbers)  \n    return result  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if n == 0: \n        return '0' \n    # recursive case\n    else: \n        remainder = n % 2\n        binary_digit = decimal_to_binary(n // 2)\n        binary_string = remainder + binary_digit\n        return binary_string "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n    \n    # convert the decimal number to binary using while loop\n    while n > 0:\n        # take the remainder of n divided by 2 and append it to the binary string\n        binary = str(n % 2) + binary\n        # divide n by 2\n        n = n // 2\n    \n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize the result string\n    result = ''\n    # Convert the decimal number to binary\n    while n > 0:\n        # Get the remainder of the division by 2\n        remainder = n % 2\n        # Convert the remainder to a string and append it to the result string\n        result = str(remainder) + result\n        # Remove the remainder from the original number\n        n = n // 2\n    # Return the binary representation of the decimal number\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_list = []\n    while n > 0:\n        remainder = n % 2\n        binary_list.append(remainder)\n        n //= 2\n    return ''.join(map(str, binary_list[::-1]))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # handle edge cases\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    \n    # convert number to binary recursively\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    # handle negative numbers\n    if binary[0] == \"-\":\n        binary = binary[1:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def find_next_palindrome(num):\n        if is_palindrome(num):\n            return num\n\n        if num > 10 ** 6:\n            return -1\n\n        for i in range(1, 10):\n            if num // 10 == 0:\n                return -1\n\n            temp = num % 10\n            temp += i\n            new_num = temp * 10 + num // 10\n            if is_palindrome(new_num):\n                return new_num\n\n        return -1\n\n    return find_next_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # convert the input to an integer and check if it is already a palindrome\n    num = int(num)\n    if is_palindrome(num):\n        return num\n    \n    # find the smallest number greater than num\n    for i in range(1000, 99, -1):\n        if is_palindrome(i * num):\n            return i * num\n\n    # if no such palindrome is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Given an integer `num`, find the next smallest palindrome that is greater than `num`.\n\n    If no such palindrome exists, return None.\n    \"\"\"\n    # Convert the integer to a string and reverse it\n    s = str(num)[::-1]\n    # Check if the reversed string is a palindrome\n    if s == s[::-1]:\n        # Convert the reversed string back to an integer\n        next_num = int(s)\n        # Check if the next number is greater than num\n        if next_num > num:\n            # Return the next number\n            return next_num\n        # Otherwise, we've exhausted all possible palindromes that are greater than num\n        else:\n            return None\n    # If the reversed string is not a palindrome, we cannot find the next smallest palindrome\n    else:\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest = num\n    smallest = -1\n    while largest > 10**10:\n        if is_palindrome(largest):\n            smallest = largest\n            largest += num\n        else:\n            largest -= 1\n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 2 == 0:\n        # if the number is even, reverse the digits and add 1\n        digits = list(str(num)[::-1])\n        digits[-1] = str(int(digits[-1]) + 1)\n        next_num = int(''.join(digits))\n    else:\n        # if the number is odd, reverse the digits and multiply by 10 and add 1\n        digits = list(str(num)[::-1])\n        digits[-1] = str(int(digits[-1]) * 10 + 1)\n        next_num = int(''.join(digits))\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_valid(n):\n        if n < 10:\n            return True\n        elif is_palindrome(n):\n            return True\n        else:\n            for i in range(2, int(n**0.5)+1):\n                if n % i == 0:\n                    return False\n            return True\n\n    next_number = num\n    while True:\n        next_number += 1\n        if is_valid(next_number):\n            return next_number"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Convert the string to an integer\n    num_int = int(num_str)\n    # Check if the number is a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment it by 1\n        next_num = num_int + 1\n    else:\n        # If not, increment it by 2\n        next_num = num_int + 2\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while True:\n        num += 1\n        reversed_num = str(num)[::-1]\n        if reversed_num == str(num):\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        # Find the next smallest palindrome\n        for i in range(10**6, 0, -1):\n            if is_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Generate all prime numbers up to the given limit\n    limit = int(sys.argv[1])\n    sieve = [True] * (limit + 1)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(limit**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, limit + 1, i):\n                sieve[j] = False\n    # Find the next smallest palindrome\n    next_smallest = 2\n    while True:\n        if all(sieve[i] for i in range(next_smallest, limit + 1)):\n            break\n        next_smallest += 1\n    return next_smallest"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Check if the k is valid\n    if k < 1 or k > n:\n        print(\"Invalid k value.\")\n        return\n    \n    # Initialize the variables for the first element and the count of the elements less than the kth element\n    first = arr[0]\n    count = 1\n    # Loop through the remaining elements\n    for i in range(1, n):\n        # If the current element is less than the kth element, increment the count\n        if arr[i] < first:\n            count += 1\n        # If the count is equal to k, return the current element as the kth element\n        elif count == k:\n            return arr[i]\n        # If the count is greater than k, update the first element to the current element\n        else:\n            first = arr[i]\n            count = 1\n    # If the loop completes without returning the kth element, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return 'Invalid input'\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Find the middle index of the array\n    middle = len(arr) // 2\n\n    # If the middle index is equal to k, return the element\n    if middle == k - 1:\n        return arr[middle]\n\n    # If the middle index is less than k, search in the right half of the array\n    elif middle < k - 1:\n        return kth_element(arr[middle+1:], k)\n\n    # If the middle index is greater than k, search in the left half of the array\n    else:\n        return kth_element(arr[:middle], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            arr[i-1], arr[i] = arr[i], arr[i-1]\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n    for i in range(k - 1):\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        raise ValueError('Invalid index')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += \"_\" + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word += word[i].upper()\n        elif i > 0 and word[i].islower():\n            camel_case_word += '_' + word[i].upper()\n        else:\n            camel_case_word += word[i]\n    return camel_case_word.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    is_capitalized = True\n    for char in word:\n        if char == \"_\":\n            is_capitalized = True\n        else:\n            if is_capitalized:\n                camel_case += char.upper()\n            else:\n                camel_case += char\n            is_capitalized = False\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case using regular expressions\n    camel_case_word = re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    :param word: A snake case string to be converted.\n    :return: A camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join the words into a camel case string\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i < len(word) - 1 and word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into its components (words) using snake case convention\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words into a camel case string\n    camel_case_string = ''.join(capitalized_words)\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: snake case string\n    :return: camel case string\n    \"\"\"\n    return ''.join(word[0].upper() + word[1:].lower() for word in word.split('_'))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the binary representation of n and m\n    binary_n = bin(n)[2:]\n    binary_m = bin(m)[2:]\n\n    # Initialize variables to store the powers of 2 and the corresponding values\n    powers_of_two = [2 ** i for i in range(32)]\n    values = [0] * 32\n\n    # Iterate through the binary representation of n and m\n    for i in range(len(binary_n)):\n        # If the current bit is 1, add 2^i to the values array\n        if binary_n[i] == '1':\n            values[i] = 2 ** i\n\n    # Iterate through the binary representation of n and m again to add the corresponding values to the values array\n    for i in range(len(binary_m)):\n        # If the current bit is 1, add the value corresponding to the bit to the values array\n        if binary_m[i] == '1':\n            values[i] += 2 ** i\n\n    # Calculate the Eulerian number by summing the values array\n    eulerian_number = sum(values)\n\n    # Return the Eulerian number\n    return eulerian_number"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    a = 0\n    for i in range(1, n+1):\n        a += i * m ** i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if the values of n and m are positive integers\n    if not (isinstance(n, int) and isinstance(m, int) and n > 0 and m > 0):\n        raise ValueError(\"n and m must be positive integers.\")\n\n    # Check if the sum of n and m is odd\n    if n + m % 2 == 0:\n        raise ValueError(\"The sum of n and m must be odd.\")\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Calculate the Eulerian number a(n, m)\n    while c <= n:\n        a = (a * (c + 1) // 2) % m\n        b = (b * (n - c + 1) // 2) % m\n        c += 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is defined as follows:\n\n    a(n, m) = (n + 1) * (m + 1) / 2.\n\n    Example:\n\n    >>> eulerian_num(2, 3)\n    6\n    \"\"\"\n    return (n + 1) * (m + 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                a += 1\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Find the sum of the first n natural numbers\n    sum_n = (n * (n+1)) // 2\n    \n    # Find the sum of the first m natural numbers\n    sum_m = (m * (m+1)) // 2\n    \n    # Return the minimum sum\n    return min(sum_n, sum_m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case for n=0 and m=1\n    if n == 0 and m == 1:\n        return 1\n    \n    # Base case for n=0 and m=0\n    if n == 0 and m == 0:\n        return 0\n    \n    # Base case for n=1 and m=0\n    if n == 1 and m == 0:\n        return 1\n    \n    # Recursive case\n    if n % 2 == 0 and m % 2 == 0:\n        return eulerian_num(n//2, m//2) + eulerian_num((n+1)//2, m//2)\n    \n    if n % 2 == 1 and m % 2 == 1:\n        return eulerian_num(n//2, m//2) + eulerian_num((n+1)//2, m//2)\n    \n    if n % 2 == 0 and m % 2 == 1:\n        return eulerian_num(n//2, m//2) + eulerian_num(n//2, (m+1)//2)\n    \n    return eulerian_num(n//2, m//2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    def binomial(n, k):\n        '''\n        Calculate the binomial coefficient C(n, k).\n        '''\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    a = 0\n    for i in range(n+1):\n        a += binomial(m, i) * binomial(n, n-i)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n % 2 == 0:\n        return n\n    else:\n        return n + m - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix with zeros\n    a = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    # Initialize the first row of the matrix\n    a[1][1] = 1\n\n    # Calculate the rest of the matrix\n    for i in range(2, m+1):\n        for j in range(2, n+1):\n            a[i][j] = (a[i-1][j] + a[i][j-1]) % 2\n\n    # Return the value of the last cell in the matrix (which is the Eulerian number)\n    return a[m][n]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i, sublist in enumerate(input_list):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(input_list)):\n        input_list[i].sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Convert the sublist to a string and split it into a list of words\n        words = [word.strip() for word in sublist]\n        # Sort the words in the sublist alphabetically\n        sorted_words = sorted(words)\n        # Join the sorted words back into a string and replace the original sublist with the sorted list\n        sublist[:] = sorted_words"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through each sublist of the input list\n    for sublist in input_list:\n        # sort the sublist using the built-in sorted() function\n        sorted_sublist = sorted(sublist)\n        # replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # return the sorted list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool) and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    This function takes a list as an input and returns the number of True values in the list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuple into a list\n    test_list = list(test_tup)\n    # append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if the given list is empty\n    if len(test_list) == 0:\n        # Return the given tuple\n        return test_tup\n    \n    # Check if the given tuple is empty\n    if len(test_tup) == 0:\n        # Return the given list\n        return test_list\n    \n    # Check if the length of the two lists is equal\n    if len(test_list) == len(test_tup):\n        # Loop through the list and add each element to the tuple\n        for i in range(len(test_list)):\n            test_tup = test_tup + (test_list[i],)\n        # Return the updated tuple\n        return test_tup\n    \n    # If the above conditions are not met, raise an error\n    else:\n        raise ValueError(\"The lists cannot be added as they have different lengths.\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the two lists and convert it to a tuple\n    combined_list = test_list + test_tup\n    # Return the combined list as a tuple\n    return tuple(combined_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = tuple(test_tup) + (item,)\n        test_tup = list(test_tup)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # combine the three lists into one list\n    combined_list = num1 + num2 + num3\n\n    # sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Use heapq to sort the combined list in ascending order\n    heapq.heapify(combined_list)\n\n    # Extract and return the sorted list\n    return heapq.nsmallest(len(combined_list), combined_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sorting the first list\n    heapq.heapify(num1)\n\n    # Merging the two sorted lists\n    num1.extend(num2)\n\n    # Sorting the third list\n    heapq.heapify(num1)\n\n    # Merging the sorted lists\n    num1.extend(num3)\n\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of lists containing all the lists\n    lists = [num1, num2, num3]\n    \n    # merge the lists using heapq.merge\n    merged_list = []\n    for lst in heapq.merge(*lists):\n        merged_list.append(lst)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Create three lists to be merged\n    lst1 = num1\n    lst2 = num2\n    lst3 = num3\n    \n    # Initialize an empty list to store the merged sorted list\n    merged_lst = []\n    \n    # Merge the three lists into a single sorted list\n    while lst1 and lst2 and lst3:\n        if lst1[0] <= lst2[0]:\n            if lst1[0] <= lst3[0]:\n                merged_lst.append(lst1[0])\n                lst1 = lst1[1:]\n            else:\n                merged_lst.append(lst3[0])\n                lst3 = lst3[1:]\n        else:\n            if lst2[0] <= lst3[0]:\n                merged_lst.append(lst2[0])\n                lst2 = lst2[1:]\n            else:\n                merged_lst.append(lst3[0])\n                lst3 = lst3[1:]\n    \n    # Add any remaining elements in the first list\n    merged_lst += lst1\n    \n    # Add any remaining elements in the second list\n    merged_lst += lst2\n    \n    # Add any remaining elements in the third list\n    merged_lst += lst3\n    \n    return merged_lst"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create three min heaps\n    min_heap1 = []\n    min_heap2 = []\n    min_heap3 = []\n\n    # Convert the lists to heaps\n    for num in num1:\n        heapq.heappush(min_heap1, num)\n    for num in num2:\n        heapq.heappush(min_heap2, num)\n    for num in num3:\n        heapq.heappush(min_heap3, num)\n\n    # Merge the heaps and convert back to lists\n    result = []\n    while min_heap1 and min_heap2 and min_heap3:\n        if heapq.heappop(min_heap1) < heapq.heappop(min_heap2):\n            if heapq.heappop(min_heap1) < heapq.heappop(min_heap3):\n                result.append(heapq.heappop(min_heap1))\n            else:\n                result.append(heapq.heappop(min_heap1))\n                result.append(heapq.heappop(min_heap3))\n        elif heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            result.append(heapq.heappop(min_heap2))\n        else:\n            result.append(heapq.heappop(min_heap3))\n            result.append(heapq.heappop(min_heap2))\n            result.append(heapq.heappop(min_heap1))\n\n    # Return the merged list\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists\n    sorted_list1 = sorted(num1)\n    sorted_list2 = sorted(num2)\n    sorted_list3 = sorted(num3)\n    \n    # Merge the sorted lists\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(sorted_list1) and j < len(sorted_list2) and k < len(sorted_list3):\n        if sorted_list1[i] < sorted_list2[j]:\n            if sorted_list1[i] < sorted_list3[k]:\n                merged_list.append(sorted_list1[i])\n                i += 1\n            else:\n                merged_list.append(sorted_list3[k])\n                k += 1\n        elif sorted_list2[j] < sorted_list1[i]:\n            if sorted_list2[j] < sorted_list3[k]:\n                merged_list.append(sorted_list2[j])\n                j += 1\n            else:\n                merged_list.append(sorted_list3[k])\n                k += 1\n        else: # sorted_list1[i] == sorted_list2[j]\n            if sorted_list1[i] < sorted_list3[k]:\n                merged_list.append(sorted_list1[i])\n                i += 1\n            else:\n                merged_list.append(sorted_list3[k])\n                k += 1\n    \n    # Append any remaining elements in the sorted lists\n    while i < len(sorted_list1):\n        merged_list.append(sorted_list1[i])\n        i += 1\n    while j < len(sorted_list2):\n        merged_list.append(sorted_list2[j])\n        j += 1\n    while k < len(sorted_list3):\n        merged_list.append(sorted_list3[k])\n        k += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        if not heapq.heappop(num1):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        elif not heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n            heapq.heappush(merged_list, heapq.heappop(num2))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single sorted list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: A binary string\n    :param n: A positive integer denoting the number of rotations\n    :return: An integer representing the number of odd numbers after rotating the binary string the given number of times.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    # Initialize two pointers, one pointing to the first element of the string and the other pointing to the last element of the string\n    i = 0\n    j = len(s) - 1\n\n    # Loop n number of times\n    for _ in range(n):\n        # If the characters pointed by i and j are different, then increment count\n        if s[i]!= s[j]:\n            count += 1\n        # If i moves to the leftmost or rightmost position of the string, then change the corresponding pointer\n        if i == 0:\n            i = len(s) - 1\n        elif i == len(s) - 1:\n            i = 0\n        elif j == 0:\n            j = len(s) - 1\n        elif j == len(s) - 1:\n            j = 0\n        # Otherwise, move both pointers towards each other\n        else:\n            i += 1\n            j -= 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of digits\n    s_list = list(s)\n    # Find the length of the binary string\n    n = len(s)\n    # Initialize a counter for odd numbers\n    count = 0\n    # Loop through each digit in the binary string\n    for i in range(n):\n        # If the digit is odd, increment the counter\n        if int(s_list[i]) % 2 == 1:\n            count += 1\n    # Return the total count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # initialize the count to 0\n    count = 0\n    \n    # convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    \n    # loop n times\n    for i in range(n):\n        # rotate the list of digits\n        digits = digits[-1:] + digits[:-1]\n        \n        # loop through the rotated list of digits\n        for d in digits:\n            # if the digit is odd, increment the count\n            if d % 2!= 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    count = 0\n    temp = ''\n\n    # iterate through the string and rotate it n number of times\n    for i in range(n):\n        temp = temp + s[-1] + s[:-1]\n\n    # iterate through the rotated string and count the odd numbers\n    for i in temp:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n    current_bit = 0\n    \n    # Iterate through each bit in the string\n    for bit in s:\n        # Set the current bit based on the position in the string\n        if current_bit == 0:\n            current_bit = 1\n        else:\n            current_bit = 0\n            \n        # If the current bit is odd, increment odd count\n        if bit == '1':\n            odd_count += 1\n        \n        # If the current bit is even, increment even count\n        elif bit == '0':\n            even_count += 1\n            \n        # If we've iterated through all the bits in the string n times, stop\n        if current_bit == 0 and current_bit == current_bit:\n            break\n            \n    # Return the number of odd numbers in the rotated string\n    return odd_count + even_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s[0] == '0':\n            s = '1' + s[1:]\n        else:\n            s = '0' + s[1:]\n        count += int(s, 2)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Find the length of the binary string\n    length = len(s)\n\n    # Loop through the number of rotations\n    for i in range(n):\n        # Initialize a variable to store the new binary string\n        new_s = ''\n\n        # Loop through the characters in the binary string\n        for j in range(length):\n            # If the character is an odd number, add it to the new string\n            if int(s[j]) % 2 == 1:\n                new_s += s[j]\n\n        # If the new string is longer than the original string, set the original string to the new string\n        if len(new_s) > length:\n            s = new_s\n\n        # If the new string is shorter than the original string, append 0's to the end of the new string\n        elif len(new_s) < length:\n            new_s += '0' * (length - len(new_s))\n            s = new_s\n\n    # Count the number of odd numbers in the final string\n    count = 0\n    for i in range(length):\n        if int(s[i]) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[0:-1]\n    for i in s:\n        if i == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    while n > 0:\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n        s = s[-1] + s[:-1]\n        n -= 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common:\n                    common.remove(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Convert the nested list into a set to remove duplicates\n    flattened_list = set(sum(nestedlist, []))\n\n    # Find the intersection of the flattened list and itself\n    common_list = list(set(flattened_list) & set(flattened_list))\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.add(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            if all(x in common_elements for x in nestedlist[j]):\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n                break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty dictionary to store the common elements\n    common_dict = {}\n    # loop through each nested list and check for common elements\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common_dict:\n                common_dict[element] += 1\n            else:\n                common_dict[element] = 1\n    # create a new list to store the common elements\n    common_list = []\n    # loop through each key in the common dictionary and append to the new list if the value is greater than 1\n    for key, value in common_dict.items():\n        if value > 1:\n            common_list.append(key)\n    # return the new list of common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initializing a set to store unique elements from the nested list\n    unique_elements = set()\n\n    # iterating over each element in the nested list\n    for element in nestedlist:\n        # checking if the element is already present in the set\n        if element in unique_elements:\n            # if yes, appending the element to a list of common elements\n            common_elements.append(element)\n        # if the element is not already present in the set, adding it to the set\n        else:\n            unique_elements.add(element)\n\n    # returning the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n\n    # loop through all the nested lists in the given list\n    for lst in nestedlist:\n        # loop through all the elements in the current list\n        for elem in lst:\n            # add the current element to the set of common elements if it's not already there\n            if elem not in common:\n                common.add(elem)\n\n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Using a set to remove duplicates and then converting it to a list\n    set_list = list(set([i for sublist in nestedlist for i in sublist]))\n    return set_list"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Convert the string to a list of characters\n    chars = list(text)\n\n    # Check if the first character is a minus sign\n    if chars[0] == '-':\n        # Remove the minus sign from the list of characters\n        chars.pop(0)\n        # Check if the list of characters contains only digits\n        if all(char.isdigit() for char in chars):\n            return True\n        else:\n            return False\n    else:\n        # Check if the list of characters contains only digits\n        if all(char.isdigit() for char in chars):\n            return True\n        else:\n            return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for item in list1:\n        if item:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Iterate through each dictionary in the list\n    for i in list1:\n        # Check if the dictionary is empty\n        if not i:\n            return False\n\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate over each number in the list\n    for num in nums_list:\n        # Convert the number to an integer\n        num_int = int(num)\n        # Add the integer to the result\n        result += num_int\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    \n    # Initialize sum to zero\n    sum_of_nums = 0\n    \n    # Iterate over each element of the list\n    for num in nums_list:\n        # Add the current element to the sum\n        sum_of_nums += num\n    \n    # Return the sum\n    return sum_of_nums"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize the accumulator variable\n    accumulator = 0\n    \n    # Loop through the tuple and add each integer to the accumulator\n    for num in nums:\n        accumulator += num\n    \n    # Return the final accumulator value\n    return accumulator"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    # Initialize an empty string\n    result = \"\"\n    # Loop through each number in the tuple\n    for num in nums:\n        # Convert the number to its string representation\n        num_str = str(num)\n        # Check if the number has more than one digit\n        if len(num_str) > 1:\n            # If it does, add \"0\" to the beginning of the string to make it a single digit\n            num_str = \"0\" + num_str\n        # Append the number to the result string\n        result += num_str\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if isinstance(num, int) and num > 0:\n            total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers and returns a single integer.\n    '''\n    # initialize the single integer to be 0\n    result = 0\n    \n    # loop through each element in the tuple\n    for num in nums:\n        # add each element to the result\n        result += num\n    \n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n                test_list.append(float(item))\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Iterate through each element in the list\n    for i in range(len(test_list)):\n        # Iterate through each element in the current row\n        for j in range(len(test_list[i])):\n            # Convert the element to a float if possible\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                # If it's not possible, leave the element as is\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                return None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, elem in enumerate(row):\n            if type(elem) == str:\n                try:\n                    test_list[i][j] = float(elem)\n                except ValueError:\n                    pass\n            elif type(elem) == list:\n                try:\n                    test_list[i][j] = list_to_float(elem)\n                except ValueError:\n                    pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    # Convert the string to a list of strings using split()\n    string_list = string.split()\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n        elif arr[i]!= unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the count of each element in the array\n    count = [0] * 100\n    \n    # Loop through the array and increment the count of each element\n    for num in arr:\n        count[num] += 1\n    \n    # Initialize a variable to store the element that appears only once\n    unique_num = None\n    \n    # Loop through the count array and check if the count is 1\n    for i in range(len(count)):\n        if count[i] == 1:\n            unique_num = i\n            break\n    \n    # Return the element that appears only once\n    return unique_num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    \n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            if arr[i] not in arr[:i]:\n                unique_element = arr[i]\n                break\n    \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * n\n    for i in range(n):\n        count[i] = arr[i]\n        \n    for i in range(n):\n        if count[i] == i+1:\n            return arr[i]\n\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first_occurrence = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if first_occurrence is None:\n                first_occurrence = arr[i]\n            else:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once\n    single_element = None\n\n    # Loop through the array and compare each element to the next element\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            # If the current element is equal to the next element, it means it appears only once, so set the variable to the current element\n            single_element = arr[i]\n            # Break out of the loop once we find a single element\n            break\n\n    return single_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize a dictionary to store the count of each element in the array\n    count = {}\n\n    # iterate through the array and update the count dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # iterate through the array again and find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n\n    Parameters:\n    arr (list): A sorted array of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n    \"\"\"\n\n    # Initialize the count of elements\n    count = {}\n\n    # Loop through the array and count the occurrences of each element\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    # Loop through the array and check if the element only appears once\n    for i in range(len(arr)):\n        if count[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique:\n            return unique\n        elif arr[i]!= unique:\n            unique = arr[i]\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Initialize the element variable to None\n    element = None\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the previous element, increment the count variable\n        if arr[i] == element:\n            count += 1\n        # If the current element is not equal to the previous element, set the count variable to zero and set the element variable to the current element\n        else:\n            count = 0\n            element = arr[i]\n    \n    # Return the element that appears only once\n    return element"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    pairs = []\n    \n    for i, item in enumerate(list1):\n        for j in range(i+1, len(list1)):\n            pair = (item, list1[j])\n            if all(isinstance(x, int) for x in pair):\n                product = item * list1[j]\n                if product > max_product:\n                    max_product = product\n                    pairs = [(item, list1[j])]\n                elif product == max_product and (item, list1[j]) not in pairs:\n                    pairs.append((item, list1[j]))\n    \n    return max_product, pairs"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and finds the maximum absolute product between numbers in pairs of tuples.\n\n    Args:\n    lst (list of tuples): A list of tuples containing numbers.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute difference between the two numbers\n            diff = abs(list1[i][0] - list1[j][0])\n            # calculate the product of the two numbers and check if it's greater than the current maximum\n            product = list1[i][0] * list1[j][0]\n            if product > max_product and diff > 0:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create an empty list to store the absolute product values\n    max_product_list = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Initialize variables to keep track of the minimum and maximum values in the current tuple\n        min_val = list1[i][0]\n        max_val = list1[i][0]\n\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the current tuple and the remaining tuple\n            current_product = abs(list1[i][1] * list1[j][1])\n\n            # Update the minimum and maximum values in the current tuple\n            min_val = min(min_val, list1[j][0])\n            max_val = max(max_val, list1[j][0])\n\n            # Check if the current product is greater than the maximum product seen so far\n            if current_product > max(max_product_list):\n                max_product_list = [current_product]\n            # If the current product is not greater than the maximum product seen so far, check if it is greater than the second to last maximum product\n            elif current_product > max(max_product_list)[-1]:\n                max_product_list[-1] = current_product\n\n    # Return the maximum absolute product\n    return max(max_product_list)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # initialize variables for maximum and minimum products\n    max_product = -float('inf')\n    min_product = float('inf')\n    \n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the two numbers in the tuple\n            abs_product = abs(list1[i][0] * list1[j][1])\n            \n            # update the maximum and minimum products accordingly\n            if abs_product > max_product:\n                max_product = abs_product\n            if abs_product < min_product:\n                min_product = abs_product\n    \n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i][0]*list1[j][1], list1[i][1]*list1[j][0])\n            absolute_product = max(pair)\n            if absolute_product > max_product:\n                max_product = absolute_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            temp_product = max(abs(list1[i][1]), abs(list1[j][1])) * max(abs(list1[i][0]), abs(list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    '''\n    Finds the maximum absolute product of any two pairs of numbers in the input list.\n\n    Parameters:\n    lst (list): A list of tuples representing a set of numbers.\n\n    Returns:\n    (int): The maximum absolute product of any two pairs of numbers in the input list.\n    '''\n\n    # initialize max_product to be the first number in the list\n    max_product = lst[0][0]\n    # loop through the list of tuples\n    for i in range(len(lst)):\n        # loop through the remaining tuples\n        for j in range(i + 1, len(lst)):\n            # compute the absolute product of the numbers in each tuple\n            product = abs(lst[i][0] * lst[j][1])\n            # update the maximum absolute product if this product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if i!= 1 and is_amicable(i):\n            total += i\n    return total\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    for i in range(1, int(num**0.5)+1):\n        if (num % i == 0) and (num // i!= i):\n            return False\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num!= 1:\n            if num in amicable_numbers:\n                continue\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def sum_divisible_numbers(n):\n        \"\"\"\n        Helper function to calculate the sum of all divisible numbers from 1 to n.\n        \"\"\"\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == sum_divisible_numbers(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable_number(n):\n    \"\"\"\n    A helper function to check if a number is amicable or not.\n    \"\"\"\n    if n < 2:\n        return False\n    sum_of_proper_divisors = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum_of_proper_divisors += i + n // i\n    if sum_of_proper_divisors == n:\n        return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable_number(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is an amicable number or not.\n    '''\n    limit = num//2\n    for i in range(1, limit+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit and returns the sum of all the amicable numbers from 1 to the limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_amicable_numbers(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_amicable_numbers(num):\n    \"\"\"\n    This function takes a number and returns the sum of all its amicable numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    for i in range(1, num):\n        if (num % i == 0) and (i!= num):\n            sum_of_numbers += i\n    return sum_of_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Check if limit is a positive integer\n    if not isinstance(limit, int) or limit <= 0:\n        raise ValueError('Limit must be a positive integer.')\n\n    # Initialize variables\n    total = 0\n    num = 1\n\n    # Loop through all numbers from 1 to limit\n    while num <= limit:\n\n        # Check if the number is amicable\n        is_amicable = False\n        for i in range(2, num):\n            if num % i == 0:\n                is_amicable = True\n                break\n\n        # If the number is amicable, add it to the total\n        if is_amicable:\n            total += num\n\n        # Increment the number\n        num += 1\n\n    # Return the total\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    # check all numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # check if the number is a prime number\n        if all(num%i!= 0 for i in range(2, num)):\n            # if it is a prime number, check if it's amicable\n            if all(num%i == 0 for i in range(2, int(num**0.5)+1)):\n                amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize a list to store all amicable numbers\n    amicable_numbers = []\n\n    # Check for all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n\n        # Check if the number is amicable\n        if is_amicable(i):\n            amicable_numbers.append(i)\n\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n):\n    '''\n    Write a function to check if a number is amicable.\n    '''\n\n    # Check for numbers that are not divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check for all numbers from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and i!= n//i:\n            return False\n\n    # If the function makes it to this point, n is amicable\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = cmath.phase(a) - cmath.phase(b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    # Calculate the angle of the complex number using the arccosine\n    angle = cmath.degrees(cmath.acos(a / magnitude))\n    # Return the angle as a float value\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in degrees.\n    \"\"\"\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = angle * 180 / cmath.pi\n    angle = round(angle, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Using the arg and real methods of complex numbers\n    angle = cmath.phase(a + b*1j)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the absolute value of the complex number\n    abs_complex = abs(a + b * 1j)\n\n    # Calculate the angle using the arccosine\n    angle = cmath.phase(abs_complex)\n\n    # Return the angle\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # count the number of 0s and 1s in the binary string\n    count = {}\n    for char in string:\n        if char == '0':\n            count['0'] = count.get('0', 0) + 1\n        else:\n            count['1'] = count.get('1', 0) + 1\n    \n    # find the maximum difference between the number of 0s and 1s in any sub-string of the binary string\n    max_diff = 0\n    for i in range(1, len(string)):\n        if count[string[i]] > count[string[i-1]]:\n            max_diff = max(max_diff, count[string[i]] - count[string[i-1]])\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    # initialize variables for counts of 0s and 1s\n    zeros = ones = 0\n    # initialize variable for maximum difference\n    max_diff = 0\n    # loop through all possible substrings of the string\n    for i in range(n):\n        # increment the count of 0s and 1s for the current substring\n        if string[i] == '0':\n            zeros += 1\n            ones += zeros\n        else:\n            ones += 1\n            zeros += ones\n        # compute the maximum difference between the number of 0s and number of 1s in the current substring\n        diff = abs(zeros - ones)\n        # update the maximum difference if necessary\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        else:\n            one_count += 1\n        \n        # Calculate the maximum difference between the number of 0s and number of 1s\n        diff = max(zero_count, one_count)\n        \n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n        \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if count > max_diff:\n            max_diff = count\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    prev_count = 0\n    current_count = 0\n\n    for char in string:\n        if char == '0':\n            current_count += 1\n        elif char == '1':\n            prev_count, current_count = current_count, 1\n        else:\n            raise ValueError(\"Input string should contain only 0s and 1s\")\n\n        if current_count > prev_count:\n            diff = max(diff, current_count - prev_count)\n\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    zeros = string.count('0')\n    ones = string.count('1')\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        \n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    def count_ones(s, count=0):\n        for char in s:\n            if char == '1':\n                count += 1\n        return count\n\n    def find_max_diff(string):\n        max_diff = 0\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                if count_ones(string[i:j]) - count_ones(string[i:j - 1]) > max_diff:\n                    max_diff = count_ones(string[i:j]) - count_ones(string[i:j - 1])\n        return max_diff\n\n    return find_max_diff(string)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = 0\n        for j in range(i):\n            if string[j] == '0' and string[i] == '0':\n                diff += 1\n            elif string[j] == '1' and string[i] == '1':\n                diff -= 1\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    i = 1\n    j = a\n    while j <= b:\n        if a % j == 0 and b % j == 0:\n            i += j\n        j += 1\n    return i"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    # Initialize variables\n    sum_cd = 0\n    \n    # Loop through all possible divisors of a\n    for i in range(1, b+1):\n        # If b is divisible by i, add i to sum_cd\n        if b % i == 0:\n            sum_cd += i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_divisor(num):\n    \"\"\"\n    This function takes an integer as input and returns a list of all its common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns their sum of common divisors.\n    \"\"\"\n    common_divisors1 = common_divisors(num1)\n    common_divisors2 = common_divisors(num2)\n    sum_of_divisors = sum(common_divisors1, common_divisors2)\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n\n    # Find the divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Find the sum of common divisors\n    total_sum = 0\n    for i in range(len(divisors)):\n        for j in range(i + 1, len(divisors)):\n            if divisors[i] * divisors[j] == a or divisors[i] * divisors[j] == b:\n                total_sum += divisors[i] + divisors[j]\n\n    return total_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to find the common divisor of two numbers\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of two numbers using the Euclidean algorithm.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # find the greatest common divisor of the two numbers\n    gcd_val = gcd(a, b)\n\n    # find the sum of all common divisors of the two numbers\n    sum_val = (a // gcd_val) + (b // gcd_val)\n\n    return sum_val"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(num):\n        \"\"\"\n        Write a python function to find all the common divisors of a given number.\n        \"\"\"\n        divisors = []\n        i = 1\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                divisors.append(i)\n        if num > 1:\n            divisors.append(num)\n        return divisors\n\n    def sum_of_common_divisors(a, b):\n        \"\"\"\n        Write a python function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        divisors_a = common_divisors(a)\n        divisors_b = common_divisors(b)\n        common_divisors_ab = set(divisors_a) & set(divisors_b)\n        return sum(common_divisors_ab)\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    j = 1\n    while True:\n        if a % i == 0 and b % j == 0:\n            print(i + j)\n            a //= i\n            b //= j\n        else:\n            i += 1\n        if a == 1:\n            break\n        if b == 1:\n            break"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # calculating the sum of common divisors of a and b\n    a_set = set(a)\n    b_set = set(b)\n    common_divisors = a_set.intersection(b_set)\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Find the set of common divisors of a and b\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # Find the sum of the common divisors\n    result = 0\n    for d in divisors:\n        result += d\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Using a loop to iterate over all possible divisors of the sum of a and b\n    divisors_sum = 0\n    for i in range(1, a + b + 1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    \n    # Returning the sum of common divisors\n    return divisors_sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"Result of multiplication is: \", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Splitting the string into words\n    long_words = [] # Initializing an empty list to store the longer words\n    \n    for word in words:\n        if len(word) > n: # Checking if the length of the word is greater than n\n            long_words.append(word) # If yes, appending the word to the list\n    \n    return long_words # Returning the list of longer words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    \n    # Create an empty list to store words that are longer than n characters\n    long_words = []\n    \n    # Loop through the list of words\n    for word in words:\n        # If the length of the current word is greater than n\n        if len(word) > n:\n            # Add the word to the list of long words\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and a number n as input, and returns a list of words\n    that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a number n and a list of words and returns a list of words that are longer than n characters long.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the word is longer than n characters, add it to the long_words_list\n            long_words_list.append(word)\n    \n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the size of the matrix\n    n = len(my_matrix)\n    # Initialize the sum of the rows and columns to 0\n    sum_rows = sum_cols = 0\n    # Initialize a list to store the magic numbers\n    magic_list = []\n    # Loop through the rows and columns of the matrix\n    for i in range(n):\n        # Check if the current element is equal to its row sum\n        if my_matrix[i][i] == sum_rows:\n            magic_list.append(my_matrix[i][i])\n        # Check if the current element is equal to its column sum\n        elif my_matrix[i][n-i-1] == sum_cols:\n            magic_list.append(my_matrix[i][n-i-1])\n        # Update the row and column sums for the next iteration\n        sum_rows += my_matrix[i][i]\n        sum_cols += my_matrix[i][n-i-1]\n    # If the list has exactly n^2 elements, then the matrix is a magic square\n    if len(magic_list) == n**2:\n        return True\n    # Otherwise, the matrix is not a magic square\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    sum_rows = sum_cols = 0\n\n    # Calculate the sum of rows and columns in the matrix\n    for i in range(rows):\n        sum_rows += my_matrix[i][0]\n        sum_cols += my_matrix[0][i]\n\n    # Check if the sum of rows and columns is equal to the product of the matrix elements\n    if sum_rows == rows*cols:\n        return True\n    elif sum_cols == rows*cols:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        # Check rows\n        for j in range(len(my_matrix[i])):\n            # Check if all elements are equal\n            if my_matrix[i][j]!= my_matrix[0][0]:\n                return False\n        # Check columns\n        for k in range(len(my_matrix)):\n            if my_matrix[i][k]!= my_matrix[0][0]:\n                return False\n    # Check diagonals\n    for k in range(len(my_matrix)):\n        if my_matrix[k][k]!= my_matrix[0][0]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the other elements is equal to the diagonal sum\n    for row in my_matrix:\n        for i in range(len(row)):\n            for j in range(len(row)):\n                if (i!= j) and (row[i] + row[j] == diagonal_sum):\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == n * (n+1) * (2*n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Determines whether the given matrix is a magic square.\n    Returns True if it is and False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    if n * n!= sum(sum(row) for row in my_matrix):\n        return False\n    for i in range(n):\n        row = my_matrix[i]\n        col = [row[j] for j in range(n)]\n        diag1 = [row[i] for i in range(n)]\n        diag2 = [row[i] for i in range(n) if i!= j]\n        if row!= col or col!= diag1 or diag1!= diag2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic_square(matrix):\n        for row in matrix:\n            if not sorted(row) == list(range(1, len(row)+1)):\n                return False\n        for col in range(len(matrix)):\n            if not sorted([row[col] for row in matrix]) == list(range(1, len(matrix)+1)):\n                return False\n        return True\n    \n    # Check if the matrix is a magic square\n    if is_magic_square(my_matrix):\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize the sum of the rows\n    row_sum = 0\n    # Initialize the sum of the columns\n    col_sum = 0\n    # Initialize the sum of the diagonals\n    diag1_sum = 0\n    diag2_sum = 0\n\n    # Loop through each row and column of the matrix\n    for i in range(len(my_matrix)):\n        # Add up the sum of the current row\n        row_sum += my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]\n        # Add up the sum of the current column\n        col_sum += my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]\n        # Check if the matrix is a magic square by comparing each diagonal\n        if i == 0:\n            diag1_sum += my_matrix[i][i]\n            diag2_sum += my_matrix[2][2]\n        elif i == 2:\n            diag1_sum += my_matrix[i][2]\n            diag2_sum += my_matrix[0][0]\n        else:\n            continue\n        # If the current diagonal sum is not equal to 0, then the matrix is not a magic square\n        if diag1_sum!= 0 or diag2_sum!= 0:\n            return False\n\n    # If all three sums are equal to 0, then the matrix is a magic square\n    if row_sum == 0 and col_sum == 0 and diag1_sum == 0 and diag2_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Check if the diagonal sum is the same for all rows and columns\n    if all(diagonal_sum == sum(row) for row in my_matrix) and all(diagonal_sum == sum(col) for col in zip(*my_matrix)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    total = sum(sum(x) for x in my_matrix)\n    \n    # Check for rows and columns\n    for i in range(n):\n        row_sum = sum(my_matrix[i][j] for j in range(n))\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum!= col_sum or row_sum!= total:\n            return False\n    \n    # Check for diagonals\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum!= diag2_sum or diag1_sum!= total:\n        return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count, key=count.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers and returns the item(s) with maximum frequency in the list.\n\n    For example:\n\n    >>> max_occurrences([1, 2, 3, 4, 5, 3, 4, 5, 6])\n    [3, 4]\n\n    In this case, the maximum frequency for the item 3 is 2, and the maximum frequency for the item 4 is 3.\n    Therefore, the function should return the items 3 and 4 in the order they occur in the input list.\n    '''\n\n    # Create a dictionary to store the frequency of each number in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item(s) with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_items = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    # Sort the items in decreasing order of frequency\n    max_items.sort(key=lambda x: -freq_dict[x], reverse=True)\n\n    return max_items"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_num = float('-inf')\n    max_count = 0\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_num = num\n            max_count = count[num]\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = [num for num, freq in freq.items() if freq == max_freq][0]\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    # iterate through the list and update the frequency dictionary\n    for num in nums:\n        freq_dict[num] += 1\n    # find the item with the maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    result = ''\n    for i in vowel_indices:\n        result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char in vowels and char!= 'y':\n            str2 += char\n    str2 = str2[::-1]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char in vowels:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char in vowels:\n            if vowel_count == 0:\n                result = char + result\n                vowel_count += 1\n            else:\n                result = result + char\n                vowel_count -= 1\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tup1, tuple):\n        raise ValueError('Input must be a tuple.')\n    \n    # Convert the tuple to a string and return it\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using join() method to convert tuple elements to strings\n    string_tup = ', '.join(map(str, tup1))\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = \", \".join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to string\n    str1 = str(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    sum = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through each number in the list\n    for num in nums:\n\n        # check if the number is negative\n        if num < 0:\n\n            # add the negative number to the sum\n            sum += num\n\n    # return the sum of the negative numbers\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0.5\n    return a**n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n-1)) / 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = 15\n    d = 20\n\n    for i in range(1, n+1):\n        print(a + b, end=' ')\n        a, b = b, a + b\n\n    return a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 0\n    for i in range(1, n+1):\n        hexagonal += 6*(i*i-1)\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    a = 1\n    b = 1\n    while a < n:\n        hex_num += a\n        a += b\n        b += a\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        # Compute the number of rows in the hexagon\n        rows = n // 2\n        # Compute the number of columns in each row\n        cols = 2 * rows - 1\n        # Initialize the matrix\n        matrix = [[0 for j in range(cols + 1)] for i in range(rows + 1)]\n        # Fill the matrix\n        for i in range(1, rows + 1):\n            for j in range(cols + 1):\n                if i == rows and j % 2 == 1:\n                    matrix[i][j] = 1\n                elif j == cols or i == rows:\n                    matrix[i][j] = 0\n                elif i % 2 == 0 and j <= rows:\n                    matrix[i][j] = matrix[i - 1][2 * j - 2] + matrix[i - 1][2 * j - 1]\n                else:\n                    matrix[i][j] = matrix[i - 1][2 * j - 2] - matrix[i - 1][2 * j - 1]\n        # Find the nth hexagonal number\n        return matrix[rows][n - rows - 1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 2 * (n * (n + 1)) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    hex = 0\n    power = 0\n    \n    # Calculate nth hexagonal number using formula\n    while power < n:\n        hex += (6 * (power + 1)) ** 2\n        power += 1\n    \n    return hex"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input array to an array of characters\n    arr = array('b', nums)\n\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate over the characters in the array\n    for char in arr:\n        # If the character is zero, increment the count of zeroes\n        if char == b'\\x00':\n            zero_count += 1\n        else:\n            # Otherwise, increment the count of non-zeroes\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zero_count / non_zero_count\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i', [0]*len(nums))\n    nonzeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            nonzeros[nonzeros.index(num)] += 1\n    zero_ratio = 0.0\n    for i in range(len(zeros)):\n        if zeros[i] > 0:\n            zero_ratio += nonzeros[i]/float(zeros[i])\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the input array to an array of characters\n    arr = array('i', nums)\n\n    # count the number of zeros and non-zeros\n    zeros = 0\n    non_zeros = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # calculate the ratio of zeros to non-zeros\n    ratio = non_zeros / zeros if non_zeros!= 0 else 0\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to an array of bytes\n    byte_array = array('B', nums)\n\n    # Initialize variables to keep track of the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the bytes and count the number of zeroes and non-zeroes\n    for byte in byte_array:\n        if byte == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    zero_ratio = 0 if non_zero_count == 0 else zero_count / non_zero_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    num_array = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in num_array:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = non_zero_count / zero_count if zero_count!= 0 else 0\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of integers to store the count of zeroes and non-zeroes\n    zeros = array('i', [0] * len(nums))\n\n    # Loop through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeros[0] / len(nums)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n    return num_zeros / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = zeros / non_zeros if non_zeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = array('i')  # create an integer array to store non-zero numbers\n    for num in nums:\n        if num!= 0:\n            non_zeros.append(num)  # append non-zero numbers to the array\n    zero_count = len(nums) - len(non_zeros)  # calculate the count of zeroes\n    non_zero_count = len(non_zeros)  # calculate the count of non-zeroes\n    return zero_count / non_zero_count  # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is 0 or 1\n    if n == 0 or n == 1: \n        return True\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_2 = 0\n\n    # Iterate through the digits of the number\n    for digit in str(n): \n        # Convert each digit to an integer\n        digit = int(digit)\n\n        # Check if the digit is a power of 2\n        if digit == 0 or digit == 1: \n            return True\n        elif digit > 1: \n            # Multiply the sum of powers of 2 by 2^digit\n            sum_of_powers_of_2 += 2**(digit-1)\n\n        # If the number is already divisible by 2^i for some i, then we need to check if it is divisible by 2^j for some j such that j <= i\n        # For example, if n = 39, then we need to check if 39 is divisible by 2^2, 2^3, 2^4, and 2^5. If it is, then it cannot be represented as sum of powers of 2.\n        # If it is not divisible by any such power of 2, then it can be represented as sum of powers of 2.\n        for j in range(2, min(digit, 2*digit)+1): \n            if n % 2**j == 0: \n                return False\n\n    # Check if the sum of powers of 2 is equal to the given number\n    return sum_of_powers_of_2 == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function takes an integer n as input and returns True if it can be represented as sum of non-zero powers of 2, and False otherwise.\n    '''\n    # initialize a set to store the powers of 2\n    powers_of_two = set()\n\n    # iterate through the bits of the integer\n    while n:\n        # if the bit is 1, add its power of 2 to the set of powers of 2\n        if n & 1:\n            powers_of_two.add(1)\n        # shift the bit to the right by 1\n        n >>= 1\n\n    # if the set of powers of 2 has at least two elements, then the number can be represented as sum of non-zero powers of 2\n    return len(powers_of_two) >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a list to store the powers of 2\n    powers_of_two = []\n\n    # Loop from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # Check if i is a power of 2\n        if n % i == 0:\n            # If it is, add it to the list\n            powers_of_two.append(i)\n\n    # Check if n can be represented as sum of powers of 2\n    if n == sum(powers_of_two):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        # Check if the given number is a sum of powers of 2\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0 and is_Sum_Of_Powers_Of_Two(n//i):\n                return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is a power of 2\n    if (n & (n - 1)) == 0:\n        return True\n\n    # Check for non-zero powers of 2\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and (n // i) % 2 == 0:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    i = 0\n    while n!= 0:\n        if n & 1:\n            return False\n        n >>= 1\n        i += 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is a power of 2\n    if n == 0 or (n & (n - 1)) == 0: \n        return True\n\n    # Find the number of bits required to represent the number\n    bits = 0\n    while n > 0:\n        n >>= 1\n        bits += 1\n\n    # Check if the sum of powers of 2 can be represented as a number\n    for i in range(bits):\n        if n & 1 == 1:\n            # If the bit is 1, then the sum of powers of 2 cannot be represented as a number\n            return False\n        n >>= 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check if n is less than 2 \n    if n < 2: \n        return False\n    \n    # initialize variables \n    power_of_two = 2\n    sum_of_powers = 0\n    \n    # check each bit in n \n    while n > 0: \n        # check if the rightmost bit is 1 \n        if n & 1 == 1: \n            # add the power of two to the sum \n            sum_of_powers += power_of_two\n        # shift the rightmost bit to the left by 1 \n        n = n >> 1\n        # double the power of two \n        power_of_two = power_of_two << 1\n    \n    # check if sum_of_powers is equal to n \n    if sum_of_powers == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n = n//2\n        else:\n            n = n//2\n    return count == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    # Calculating the circumference of the circle using the formula\n    # C = 2\u03c0r\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # initialize an empty set to store the flattened numbers\n    flattened_set = set()\n\n    # iterate through each element in the list of lists\n    for sublist in test_list:\n        # if the sublist is a set, convert it to a set and add its elements to the flattened set\n        if isinstance(sublist, set):\n            flattened_set.update(sublist)\n        # if the sublist is not a set, add its elements to the flattened set\n        else:\n            flattened_set.update(sublist)\n\n    # return the flattened set as a list\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set to hold the flattened numbers\n    flattened = set()\n    # loop through each list in the list of lists\n    for sublist in test_list:\n        # loop through each number in the sublist\n        for num in sublist:\n            # add the number to the flattened set\n            flattened.add(num)\n    # convert the flattened set to a list and return it\n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list += i\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # top to bottom\n    for i in range(n):\n        # find the largest number\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n\n        # swap the largest number with the i-th number\n        nums[i], nums[largest] = nums[largest], nums[i]\n\n        # print the sorted list\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # To sort the list in descending order, we will use a bubble sort algorithm\n    # which swaps adjacent elements if they are in the wrong order\n    for i in range(n-1):\n        # Traverse through the list from 0 to n-i-1\n        # Swap adjacent elements if they are in the wrong order\n        for j in range(0, n-i-1):\n            if nums[j] < nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                # To print the sorted list, we will print each element\n                # in reverse order from n-i-1 to 0\n                print(nums[0:n-i-1][::-1])\n    # After the outer loop, the list is sorted in descending order\n    # Print the sorted list in reverse order\n    print(nums[::-1])"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    def swap(nums, i, j):\n        '''\n        Helper function to swap two elements of the list.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(nums, start, end):\n        '''\n        Helper function to reverse a sublist of the list.\n        '''\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    def pancake_sort_helper(nums, n, k):\n        '''\n        Recursive function to sort a sublist of the list.\n        '''\n        if k == 1:\n            reverse(nums, 0, n-1)\n            return\n\n        pancake_sort_helper(nums, n-1, k-1)\n        pancake_sort_helper(nums, k-1, k)\n        reverse(nums, 0, k-1)\n\n    pancake_sort_helper(nums, len(nums)-1, len(nums))\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        i = j = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged += left[i:]\n        merged += right[j:]\n        return merged\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    length = len(nums)\n\n    # Loop through the list and sort it using the pancake sort algorithm\n    for i in range(length):\n        # Find the maximum element in the unsorted portion of the list\n        max_index = i\n        for j in range(i+1, length):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Traverse through the list\n    for i in range(n):\n        \n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the pancake\n        k = n-i-1\n        while k > 0:\n            nums[i], nums[k] = nums[k], nums[i]\n            k -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a list of integers representing the size of each pancake\n    pancake_sizes = [len(nums)-i for i in range(len(nums))]\n\n    # sort the pancake_sizes in descending order\n    pancake_sizes.sort(reverse=True)\n\n    # initialize the pancakes list with the initial list of nums\n    pancakes = nums\n\n    # iterate through the pancake_sizes list and apply the pancake sorting algorithm to each pancake\n    for size in pancake_sizes:\n        # reverse the pancake starting from the first element and move it size elements to the right\n        for i in range(size):\n            pancakes[i], pancakes[size-i-1] = pancakes[size-i-1], pancakes[i]\n\n    # return the sorted list\n    return pancakes"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    # Helper function to swap elements of the list\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Loop through the list from the start to the end and find the largest element\n    max_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # If the largest element is already at the end of the list, return it\n    if max_index == len(nums) - 1:\n        return nums\n\n    # Swap the largest element with the last element of the list\n    swap(len(nums) - 1, max_index)\n\n    # Divide the list into two parts, one with the largest element and one without\n    left = nums[:max_index]\n    right = nums[max_index + 1:]\n\n    # Recursively sort the two parts\n    pancake_sort(left)\n    pancake_sort(right)\n\n    # Merge the sorted parts\n    for i in range(len(left)):\n        nums[i] = right[i]\n        nums[len(left) + i] = left[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Bubble sort to sort the largest n pancakes in descending order\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] < nums[j+1]:\n                # Swap elements if they are not in the correct order\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Finally, reverse the sorted part of the list using a two-pointer approach\n    left, right = 0, n-1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Top-down pancake sort\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        elif list1[i] == list3[i]:\n            count += 1\n        elif list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the maximum absolute difference between any two elements in the list.\n    \"\"\"\n\n    # Initialize variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = abs(min_val - max_val)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n\n    # Initialize the minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array and compare the current element with the minimum and maximum values\n    for i in range(len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = 0\n    for i in range(len(arr)):\n        diff = abs(arr[i] - min_val)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return \"Array should have at least two elements\"\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000000, 1000001):\n        y = n // (a * x + b)\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if a*i + b*i == n:\n            return (i, n//i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b, and n are all positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n    \n    # check if the values of a, b, and n are different\n    if a == b == n:\n        return (0, 0)\n    \n    # check if the values of a and b are equal and n is greater than 0\n    if a == b and n > 0:\n        return None\n    \n    # check if a is a prime number\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if a > 1 and is_prime(a):\n        return None\n    \n    # check if b is a prime number\n    if b > 1 and is_prime(b):\n        return None\n    \n    # check if n is divisible by a and b\n    if n % a!= 0 and n % b!= 0:\n        return None\n    \n    # find the two integers x and y such that ax + by = n\n    if n % a == 0:\n        x = -n // a\n        y = 0\n    else:\n        x = 0\n        y = -n // b\n    \n    # check if the solution exists\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Check if both roots are integers\n        if int(root1) == root1 and int(root2) == root2:\n            # Return the solution as a tuple\n            return (int(root1), int(root2))\n        else:\n            # Return None if no solution exists\n            return None\n    else:\n        # Return None if no solution exists\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the quadratic equation has no real roots\n    if b**2 - 4*a*n < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + (b**2 - 4*a*n)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*n)**0.5)/(2*a)\n    \n    # Check if the solutions satisfy the quadratic equation\n    if a*x1**2 + b*x1 + n == 0:\n        return (int(x1), int(x2))\n    elif a*x2**2 + b*x2 + n == 0:\n        return (int(x2), int(x1))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        x = -b // n\n        y = -b % n\n        return (x, y)\n    else:\n        x = (b - n // a) // a\n        y = (b - n // a) % a\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Using the quadratic formula to find the roots of the quadratic equation\n    delta = b**2 - 4*a*n\n    if delta < 0:\n        return None\n    x1 = (-b + delta**0.5)/2/a\n    x2 = (-b - delta**0.5)/2/a\n    if x1 < 0 or x2 < 0:\n        return None\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y as 0\n    x = 0\n    y = 0\n\n    # Initialize the number of solutions found as 0\n    num_solutions = 0\n\n    # Iterate over all possible values of x and y\n    while num_solutions < n:\n        # Calculate the current value of ax + by\n        current_value = a * x + b * y\n\n        # If the current value is equal to n, increment the number of solutions found and store x and y in the tuple\n        if current_value == n:\n            num_solutions += 1\n            return (x, y)\n\n        # Otherwise, increment x or y by 1 and continue the iteration\n        if a > 0:\n            x += 1\n        else:\n            y += 1\n\n    # If no solution was found after the specified number of iterations, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the equation has real roots\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is a real solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two real roots\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list2 to check if any element is present in list1\n    for element in list2:\n        if element in list1:\n            # If an element is present in both lists, remove it from list1\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1 and check if each element is present in list2\n    for i in list1:\n        if i in list2:\n            # Remove the element if it is present in both lists\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the unique elements from list2\n    unique_list2 = []\n    # loop through each element in list2\n    for element in list2:\n        # if the element is not in list1, add it to the unique_list2\n        if element not in list1:\n            unique_list2.append(element)\n    # loop through each element in list1 and remove it from the unique_list2\n    for element in list1:\n        if element in unique_list2:\n            list1.remove(element)\n    # return the modified list1\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    else:\n        return sum_series(n-1) + n - 2*(n-1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    total = 0\n    \n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    \n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + (n // 2 - 2 * n // 4)\n    else:\n        return (sum_series(n // 2) + n) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_series = 0\n    for i in range(n // 2):\n        sum_series += n - 2 * i\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(n - 2*i for i in range(n//2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2 - sum(range(2, n//2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop until n-x is less than or equal to 0\n    while n-2*i <= 0:\n        # Calculate the sum for i from 0 to n // 2\n        for j in range(i, n//2):\n            sum += n - 2*i - j\n        # Increase the value of i\n        i += 1\n    # Return the final sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum((n - 2 * i) for i in range(n // 2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while i <= n // 2:\n        result += n - 2*i\n        i += 1\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        area += s * (tan(angle * i * pi / 180))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the sides of the polygon\n    for i in range(1, l+1):\n        area += s * tan(i * pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l*i\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    semiperimeter = (s * l) / 2\n    \n    # calculate the area of the polygon using the Heron's formula\n    area = (1/2) * s * (semiperimeter ** 2) ** (1/3)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using the formula\n    area = (s/2)*(tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter and area using the formula for a regular polygon\n    perimeter = s * l\n    area = (perimeter/2) * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    # The formula is:\n    # Area = (s * (s - l) * (s - l + 1)) / 4\n    # We need to calculate the values of s and l here\n    # s is the length of the base, l is the number of sides\n    # s = (2 * l * tan(pi/l))**0.5\n    # tan(pi/l) is the tangent of the angle between adjacent sides\n    # pi/l is the angle between adjacent sides\n    return (s * (s - l) * (s - l + 1)) / 4"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * (tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Find the perimeter of the polygon\n    perimeter = 2*s*(l//2)\n    # Calculate the semi-perimeter\n    semi_perimeter = perimeter/3\n    \n    # Calculate the area using the formula for an n-sided polygon: A = (n*s^2)/4\n    area = (l*(semi_perimeter)**2)/4\n    \n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / l\n    return (4 * a * (tan(pi/l)))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    sum_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    if sum_divisors == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def get_divisors(num):\n        '''\n        Returns a list of the divisors of a given number.\n        '''\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    def is_prime(num):\n        '''\n        Returns True if a given number is prime, False otherwise.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = map(int, input(\"Enter two integers separated by space: \").split())\n    a_divisors = get_divisors(a)\n    b_divisors = get_divisors(b)\n    a_sum = sum(a_divisors)\n    b_sum = sum(b_divisors)\n    if a_sum == b_sum and is_prime(a_sum):\n        print(\"The sum of the divisors of\", a, \"and\", b, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", a, \"and\", b, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def factors(num):\n        '''\n        Returns a list of factors of a given number.\n        '''\n        factors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    def sum_of_factors(num):\n        '''\n        Returns the sum of all factors of a given number.\n        '''\n        return sum(factors(num))\n\n    def sum_of_divisors(num):\n        '''\n        Returns the sum of all divisors of a given number.\n        '''\n        return sum(range(1, num + 1))\n\n    def are_same(a, b):\n        '''\n        Returns True if the sum of the divisors of two integers are the same, False otherwise.\n        '''\n        return sum_of_factors(a) == sum_of_factors(b) and sum_of_divisors(a) == sum_of_divisors(b)\n\n    return are_same(n, n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 10: \n        return False\n    divisors = [1] + [i for i in range(2, int(math.sqrt(n)) + 1) if n % i!= 0]\n    divisor_sums = [sum(divisors[:i+1]) for i in range(len(divisors))]\n    if divisor_sums.count(divisor_sums[0]) == len(divisor_sums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n \n    div_sum = sum(set(divisors(n)))\n\n    # Check if the sum of divisors is equal to n \n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if n//i!= i:\n                div_list.append(n//i)\n    if sum(div_list) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n \n    div_sum = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    \n    # Check if the sum of the divisors of n and n+1 are the same \n    if div_sum == n + n + 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = list(range(1, int(math.sqrt(n))+1))\n    div2 = list(range(1, n+1))\n\n    div1 = [x for x in div1 if n % x == 0]\n    div2 = [x for x in div2 if n % x == 0]\n\n    if len(div1)!= len(div2):\n        return False\n\n    for d in div1:\n        if n // d!= sum(div2) % d:\n            return False\n\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def get_divisors(num):\n        '''\n        Helper function to get all divisors of a number.\n        '''\n        divs = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divs.append(i)\n                if i!= num // i:\n                    divs.append(num // i)\n        return divs\n    \n    a, b = map(int, input().split())\n\n    div_a = get_divisors(a)\n    div_b = get_divisors(b)\n\n    if sorted(div_a) == sorted(div_b):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes in an integer n as input and returns True if the sum of the divisors of two integers are the same, and False otherwise.\n    '''\n    # calculate sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n    \n    # check if the sum of the divisors of n and the square root of n are the same\n    return div_sum == int(math.sqrt(n))"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # Check if the character is a letter\n        if char.isalpha():\n            \n            # Check if the character is already in the dictionary\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    \n    # Initialize a variable to store the count of characters at the same position\n    count = 0\n    \n    # Loop through each character in the dictionary\n    for char in freq:\n        \n        # Check if the character is already at the same position as the next character\n        if freq[char] == freq[str1[count]]:\n            count += 1\n        \n        # If the character is not at the same position as the next character, increment the count and reset the index\n        else:\n            count = 0\n            count += 1\n    \n    # Return the count of characters at the same position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+ord('a'))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == english_alphabet[i % len(english_alphabet)].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count of characters at each position in the string\n    count = [0] * 26\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # Convert the character to its ASCII code and add 97 to get its position in the alphabet\n        pos = ord(char) - ord('a')\n        \n        # Increment the count of characters at the current position in the string\n        count[pos] += 1\n        \n    # Iterate over the count array and return the sum of all counts\n    return sum(count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the count of each character in str1\n    char_count = {}\n\n    # iterate over all characters in str1\n    for char in str1:\n        # convert the character to lowercase to make the comparison case-insensitive\n        char = char.lower()\n\n        # check if the character is in the dictionary, and if so, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # create a list of characters in the English alphabet (case-insensitive)\n    english_alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n\n    # iterate over all characters in the English alphabet\n    for char in english_alphabet:\n        # convert the character to lowercase to make the comparison case-insensitive\n        char = char.lower()\n\n        # check if the character is in the dictionary, and if so, decrement its count by 1\n        if char in char_count:\n            char_count[char] -= 1\n        # otherwise, add the character to the dictionary with a count of 0 (i.e. not found in str1)\n        else:\n            char_count[char] = 0\n\n    # count the number of occurrences of each character in the English alphabet\n    result = 0\n    for count in char_count.values():\n        if count > 0:\n            result += 1\n\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # convert the string to lowercase and remove any special characters\n    str1 = str1.lower().replace(' ', '').replace(',', '').replace('.', '').replace(':', '').replace(';', '').replace('\"', '').replace('?', '').replace('!', '').replace('(', '').replace(')', '').replace('[', '').replace(']', '').replace('{', '').replace('}', '').replace('/', '').replace('\\\\', '').replace('<', '').replace('>', '').replace('-', '').replace('_', '')\n    \n    # initialize a dictionary to store the count of characters at each position in the English alphabet\n    position_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # iterate through the string and count the characters at each position in the English alphabet\n    for char in str1:\n        if char.lower() in position_count:\n            position_count[char.lower()] += 1\n    \n    # return the dictionary with the count of characters at each position in the English alphabet\n    return position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.find(char.lower())\n            if index == len(alphabet) - 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of characters at each position\n    char_count = {}\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter, check if it is in the English alphabet (a-z)\n        if str1[i].isalpha():\n            # If it is, convert it to lowercase and add it to the dictionary\n            char_count[ord(str1[i]) - 97] = char_count.get(ord(str1[i]) - 97, 0) + 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = [0] * 26  # create a list of zeros with length 26 (since there are 26 English letters)\n    \n    for char in str1:\n        # convert the character to lowercase (case insensitive)\n        char = char.lower()\n        \n        # get the index of the character in the list\n        index = ord(char) - ord('a')\n        \n        # increment the count of the character at that index\n        char_count[index] += 1\n    \n    # iterate through the list and return the count of characters that occur at the same position in the string as in the English alphabet\n    result = 0\n    for count in char_count:\n        if count > 1:\n            result += count\n    \n    return result"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to a given number n.\n\n    Args:\n        n (int): The given number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Convert n to binary representation\n    binary = bin(n)[2:]\n\n    # Find the index of the rightmost 1 in binary representation\n    i = len(binary) - 1\n    while i >= 0 and binary[i] == '0':\n        i -= 1\n\n    # If the rightmost 1 is the last digit, increment the index by 1\n    if i == len(binary) - 1:\n        i += 1\n\n    # Calculate the power of 2 by multiplying 2 raised to the power of the index\n    power = 1 << i\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert the input number to binary representation and find the last set bit\n    last_set_bit = len(bin(n)[2:])\n\n    # Calculate the power of 2\n    power_of_2 = 2**(last_set_bit + 1)\n\n    # If the input number is already a power of 2, return it as is\n    if power_of_2 >= n:\n        return power_of_2\n\n    # If the input number is less than the power of 2, return the power of 2\n    return power_of_2 - 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    # find the power of 2 that is greater than or equal to n\n    p = 2 ** int(np.log2(n))\n\n    # check if p is a power of 2\n    if p <= n:\n        # increase p until it is greater than or equal to n\n        while p <= n:\n            p *= 2\n\n    # return p\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0: # check if n is power of 2 or not\n        n = n & (n-1) # remove least significant bit (which is 1) from n\n    return n<<1 # shift n left by 1 bit (to obtain the next power of 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to integer\n    n = int(n)\n\n    # Use binary search to find the smallest power of 2\n    low = 1\n    high = 1 << 32\n    while low <= high:\n        mid = (low + high) // 2\n        if mid >= n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Convert the low number back to a float and return it as the answer\n    return float(low)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        if n >= 1:\n            return 2**int(n.bit_length() - 1)\n        n <<= 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return 2**((n.bit_length()-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to an integer\n    n = int(n)\n\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n\n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments, a list of numbers and a number to find its frequency.\n    It returns the frequency of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    This function takes in a list and a number as input and returns the count of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, x): \n    count = 0\n    for i in lst: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the list and add the numbers in the range specified by indices m and n to the sum variable\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n\n    # Return the sum of numbers in the range specified by indices m and n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list.append(list1[i])\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if indices are valid\n    if m > n:\n        return \"Error: m must be less than or equal to n.\"\n    elif m < 0 or n > len(list1) - 1:\n        return \"Error: m and n must be valid indices for the list.\"\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through indices and add up numbers in range\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if list1[i-1]!='':\n            total += int(list1[i-1])\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*math.sqrt(3)/4 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n\n    # Find the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a\n\n    # Calculate the area of the pentagon\n    area = (5 * a * a) / (4 * math.tan(math.pi / 5))\n\n    # Calculate the perimeter of the pentagon using the formula P = 5a + 5a^2 + 5a^3\n    perimeter = 5 * a + 5 * a**2 + 5 * a**3\n\n    # Return the perimeter and area of the pentagon\n    return perimeter, area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = [a, a, math.sqrt(3)*a/2]\n    perimeter = sum(sides)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of each side of the pentagon\n    side_length = 2*a\n    \n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = num_sides * side_length\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Using Heron's formula to find the perimeter of a triangle\n    s = (a + math.sqrt(3) * a) / 2\n    return 5 * s\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # getting the data type of the first element in the tuple\n    for item in test_tuple:\n        if type(item)!= data_type: # checking if the current element has a different data type from the first element\n            return False # if any element has a different data type, the function returns False\n    return True # if all the elements have the same data type, the function returns True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # get the first element's data type\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False # if any element has a different data type, return False\n    return True # if all elements have the same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize an empty list to store data types of all elements in the tuple\n    data_types = []\n\n    # iterate through each element in the tuple\n    for elem in test_tuple:\n        # append the data type of each element to the data_types list\n        data_types.append(type(elem).__name__)\n\n    # check if all elements in the tuple have same data type or not\n    same_type = True\n    for dtype in data_types:\n        if dtype!= data_types[0]:\n            same_type = False\n            break\n\n    # return the result of the check\n    return same_type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    data_type = type(first_element)\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in the tuple have the same data type or not.\n    '''\n    # convert tuple to list to avoid the error TypeError: unhashable type: 'list'\n    test_list = list(test_tuple)\n    \n    # check if all the elements in the list have same data type or not\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], type(test_list[0])):\n            return False\n    \n    # all the elements have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # Iterate over the remaining elements in the tuple and check if they have the same data type as the first element\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n    \n    # If all elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for item in test_tuple:\n        type_set.add(type(item))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables to keep track of the count and the index of the majority element\n    count = 0\n    majority_index = -1\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count is greater than n/2, update the majority element and the count to 0\n        elif count > n/2:\n            count = 0\n            majority_index = i\n\n    # If the count is greater than 0, then the majority element is not present in the array\n    if count > 0:\n        return False\n    \n    # If the majority element is present, return True\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # initialize the count and frequency of the element\n    count = 1\n    frequency = 0\n    \n    # iterate through the array\n    for i in range(n):\n        if arr[i] == x:\n            # if the element is found, increment the count and update the frequency\n            count += 1\n            frequency += 1\n        \n        # if the count and frequency meet the threshold, return True\n        if count > n/2 and frequency == count:\n            return True\n    \n    # if the element is not found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n\n    # If count is greater than n/2, return True\n    if count > n // 2:\n        return True\n\n    # If count is not greater than n/2, return False\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits (binary digits with value 1) in a given number n.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the odd index characters from a given string.\n    \"\"\"\n    # create a list of characters from the given string\n    characters = list(str)\n    # create an empty list to store the characters with odd index values\n    odd_chars = []\n    # iterate over the characters in the list\n    for i, char in enumerate(characters):\n        # if the index of the character is odd, add it to the odd_chars list\n        if i % 2 == 1:\n            odd_chars.append(char)\n    # convert the odd_chars list to a string and return it\n    return ''.join(odd_chars)\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters with odd index values of a given string.\n    \"\"\"\n    return ''.join(filter(lambda x: x % 2 == 1, str))\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the characters with odd index values\n    result = \"\"\n    \n    # loop through each character in the given string\n    for char in str:\n        # check if the index of the character is odd\n        if (str.index(char) + 1) % 2 == 1:\n            # add the character to the result string\n            result += char\n    \n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the characters from the original string\n    that have an odd index value.\n\n    Parameters:\n    str (str): A string to remove odd index values from.\n\n    Returns:\n    str: A new string with odd index values removed from the input string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    chars = list(str)\n\n    # Initialize a new list to store the odd index values\n    odd_values = []\n\n    # Iterate through the characters in the list\n    for i in range(len(chars)):\n        # If the current character has an odd index value, append it to the odd_values list\n        if i % 2!= 0:\n            odd_values.append(chars[i])\n\n    # Convert the odd_values list to a string and return it\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty list to store the characters which have odd index values\n    odd_chars = []\n    # iterate through the string\n    for i in range(len(str)):\n        # if the current character has an odd index value\n        if i % 2!= 0:\n            # add it to the odd_chars list\n            odd_chars.append(str[i])\n    # join the odd_chars list into a single string\n    result = ''.join(odd_chars)\n    # return the result\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through the range of bits and check whether they are unset\n    for i in range(l, r+1):\n        if (n & (1 << i)): # Check whether the bit is set or not\n            return False # If any bit is set, return False\n    return True # If all the bits are unset, return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to a set of bits\n    range_bits = set(bin(r)[2:].zfill(32)) - set(bin(l)[2:].zfill(32))\n\n    # Check whether all the bits in the given range are set or not\n    if not (n & range_bits):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters, n, l and r, and returns a boolean value.\n    If all the bits in the range [l, r] are set to 1, then it returns True. Otherwise, it returns False.\n    \"\"\"\n\n    # Convert the integers to binary strings\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # Compare the binary strings\n    if n.count(\"1\") == len(n) and l.count(\"1\") == len(l) and r.count(\"1\") == len(r):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize variables to store the number of set bits and unset bits\n    set_bits = 0\n    unset_bits = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r+1):\n        # Count the number of set bits in the i-th bit position\n        count = 0\n        while i:\n            if i & 1:\n                count += 1\n            i >>= 1\n        set_bits += count\n\n        # Count the number of unset bits in the i-th bit position\n        count = 0\n        while n & 1:\n            if n & 1:\n                count += 1\n            n >>= 1\n        unset_bits += count\n\n    # Check if all the bits are set in the given range\n    if set_bits == r-l+1 and unset_bits == 0:\n        print(\"All the bits are set in the given range.\")\n    else:\n        print(\"Some of the bits are unset in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n    \n    Parameters:\n    n (int): The integer to be checked.\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n    \n    Returns:\n    (bool): True if all the bits are set in the range, else False.\n    '''\n    \n    # Convert the given range to a set of bits\n    bit_set = set()\n    for i in range(l, r+1):\n        bit_set.add(bin(i)[2:])\n        \n    # Check whether the given integer has any bits unset in the given range\n    for bit in bin(n)[2:]:\n        if bit not in bit_set:\n            return False\n            \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # create a boolean mask of all bits set to 1\n    mask = 2**n - 1\n    # XOR the mask with the given range\n    result = mask ^ (l - 1)\n    # check if all bits of the result are set to 1\n    return result == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes an integer n, two integers l and r representing the range of bits to be checked.\n    The function returns a boolean value indicating whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r+1):\n        if n & (1 << i):  # check if the i-th bit is set in n\n            return False  # if it is set, return False\n    return True  # if the loop completes without returning False, return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range to a binary number\n    binary_range = bin(r-l+1)[2:].zfill(32)\n    # Check whether all the bits in the binary number are set or not\n    if binary_range == '1'*32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initializing a variable to keep track of the count of unset bits\n    count = 0\n\n    # Checking for the given range\n    for i in range(l, r+1):\n        # Extracting the bits of the current number\n        bits = bin(i)[2:]\n\n        # Checking if all the bits are set\n        if len(bits) < n:\n            count += (n - len(bits))\n\n    # Checking if all the bits are unset in the given range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < 0:\n        r = 32\n    elif r > 32:\n        r = 0\n    if l < 0:\n        l = 32\n    elif l > 32:\n        l = 0\n    \n    count = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n            if count > 1:\n                return False\n    return count == 32"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n\n    for num in arr:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n\n    for i in range(len(positive)):\n        if positive[i] < 0:\n            temp = positive[i]\n            positive[i] = negative[0]\n            negative[0] = temp\n\n    for i in range(len(negative)):\n        arr[i] = negative[i]\n\n    for i in range(len(positive)):\n        arr[i + n] = positive[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Create a dictionary to store the count of negative and positive elements\n    count = {'positive': 0, 'negative': 0}\n    \n    # Iterate through the array and update the count of positive and negative elements\n    for num in arr:\n        if num > 0:\n            count['positive'] += 1\n        else:\n            count['negative'] += 1\n    \n    # Iterate through the array again and find the first n elements that have the minimum count of negative and positive elements\n    min_count = min(count['negative'], count['positive'])\n    first_n = []\n    for i, num in enumerate(arr):\n        if count[num] == min_count:\n            first_n.append(num)\n            if len(first_n) == n:\n                break\n    \n    # Iterate through the array again and swap the first n elements with the remaining elements\n    for i in range(n):\n        if i < len(first_n):\n            arr[i], arr[first_n[i]] = arr[arr.index(first_n[i])], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in arr[:n]:\n        if i > 0:\n            positive.append(i)\n        elif i < 0:\n            negative.append(i)\n    positive.extend(negative)\n    return positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Check if the given array has at least n elements\n    if n > len(arr):\n        return \"Error: Array has less elements than n\"\n    \n    # Create two empty arrays to store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # Iterate through the elements of the array\n    for i in range(len(arr)):\n        # If the current element is negative, add it to the negative array\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        # If the current element is positive, add it to the positive array\n        else:\n            pos_arr.append(arr[i])\n    \n    # Concatenate the two arrays and sort them in ascending order\n    arr = neg_arr + pos_arr\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the sorted array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    neg.sort(reverse=True)\n    pos.sort()\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate the array into negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n\n    # Combine the negative and positive elements in the same order\n    combined_arr = neg_arr + pos_arr\n\n    # Shuffle the combined array\n    for i in range(len(combined_arr)):\n        j = i + randrange(len(combined_arr) - i)\n        combined_arr[i], combined_arr[j] = combined_arr[j], combined_arr[i]\n\n    # Extract the first n elements of the shuffled array\n    rearranged_arr = combined_arr[:n]\n\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of positive and negative elements\n    pos_count = 0\n    neg_count = 0\n    # Initialize variables to keep track of the current index of the elements\n    pos_idx = 0\n    neg_idx = 0\n    # Loop through the array and update the index counters\n    for i in range(n):\n        if arr[i] > 0:\n            pos_count += 1\n            arr[i], arr[pos_idx] = arr[pos_idx], arr[i]\n            pos_idx += 1\n        else:\n            neg_count += 1\n            arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n            neg_idx += 1\n    # Loop through the array again to move elements from the negative indices to the positive indices\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n            arr[i], arr[pos_idx] = arr[pos_idx], arr[i]\n            pos_idx += 1\n        else:\n            neg_count += 1\n            arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n            neg_idx += 1\n    # Loop through the array again to move elements from the positive indices to the negative indices\n    for i in range(pos_idx, len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n            arr[i], arr[pos_idx] = arr[pos_idx], arr[i]\n            pos_idx += 1\n        else:\n            neg_count += 1\n            arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n            neg_idx += 1\n    # Print the updated array\n    print(\"Updated array:\", arr)\n    # Print the final counts of positive and negative elements\n    print(\"Number of positive elements:\", pos_count)\n    print(\"Number of negative elements:\", neg_count)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # iterate over the input array and add positive and negative elements to the corresponding lists\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    \n    # iterate over the first n elements of the input array and swap them with elements from the corresponding lists\n    for i in range(n):\n        if i < len(neg_arr):\n            arr[i], neg_arr[i] = neg_arr[i], arr[i]\n        elif i >= len(neg_arr) and i < len(neg_arr) + len(pos_arr):\n            arr[i], pos_arr[i - len(neg_arr)] = pos_arr[i - len(neg_arr)], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for negative and one for positive\n    pos = 0\n    neg = 0\n\n    # Iterate through the array, swapping elements if they are not in the desired order\n    while neg < n:\n        if arr[neg] > 0:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            pos += 1\n            neg += 1\n        elif arr[neg] < 0:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            neg += 1\n        else:\n            neg += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # create a dictionary to count the number of negative and positive elements\n    count_dict = {'+': 0, '-': 0}\n    # loop over the array and count the number of negative and positive elements\n    for num in arr:\n        if num >= 0:\n            count_dict['+'] += 1\n        else:\n            count_dict['-'] += 1\n    \n    # create a list to store the rearranged elements\n    rearranged = []\n    \n    # loop over the elements of the original array and add them to the rearranged list in the correct order\n    for i in range(len(arr)):\n        if count_dict['+'] > 0:\n            rearranged.append(arr[i])\n            count_dict['+'] -= 1\n        elif count_dict['-'] > 0:\n            rearranged.append(arr[i])\n            count_dict['-'] -= 1\n    \n    # return the rearranged array\n    return rearranged"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Use regular expressions to replace blank spaces with the character\n    str1 = re.sub(r'\\s+', char, str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all spaces with the specified character\n    str1 = str1.replace(\" \",\"\",1)\n    # remove leading and trailing spaces\n    str1 = str1.strip()\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character and replaces all the blank spaces in the string with the character.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate through the list of words\n    for i in range(len(words)):\n        # If the current word is a blank space\n        if words[i].strip() == '':\n            # Replace it with the character\n            words[i] = char\n    # Join the list of words back into a string\n    result =''.join(words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    return [heapq.nlargest(n, list1)[-1]]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a max-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    \n    # Push all the other elements of the list into the heap\n    for i in range(n,len(list1)):\n        heapq.heappush(heap, -list1[i])\n    \n    # Extract all the n largest elements from the heap and store them in a list\n    larg_nums = []\n    for i in range(n):\n        larg_nums.append(-heapq.heappop(heap))\n    \n    # Reverse the list to get the n largest items in descending order\n    larg_nums = larg_nums[::-1]\n    \n    return larg_nums"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap with the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, list1[i])\n    \n    # Extract the n largest elements from the heap and add them to a new list\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        print(\"Error: List must have at least\", n, \"items.\")\n        return None\n    \n    # create a min heap of size n and populate it with the first n elements of the list\n    max_heap = list(heapq.nsmallest(n, list1))\n    \n    # iterate through the remaining elements of the list and add them to the min heap\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            # if the current element is greater than the smallest item in the heap, remove the smallest item and add the current element\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, list1[i])\n        else:\n            # if the current element is smaller than the smallest item in the heap, add it to the heap as-is\n            heapq.heappush(max_heap, list1[i])\n    \n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(list1)\n\n    # Convert the set back to a list\n    unique_list = sorted(list(unique_set))\n\n    # Return the n largest items from the list\n    return unique_list[-n:]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n and copy the first n items from the list into it\n    heap = heapq.nsmallest(n, list1)\n    # Create an empty list to hold the n largest items from the list\n    res = []\n    # Iterate over the list and add each item to the min-heap\n    for item in list1:\n        heapq.heappush(heap, item)\n        # If the heap size is greater than n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Copy the items from the heap into the result list\n    res = list(heap)\n    return res"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max-heap using a list as the heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    \n    # Pop the largest n items from the heap and append them to the result list\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder given its radius and height.\n    \"\"\"\n    import math\n    \n    # Calculate the lateral surface area using the formula A = pi*r^2*h\n    lateral_area = math.pi * r**2 * h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2 - 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r**2 + 2 * 3.14159 * r * h + 2 * 3.14159 * h**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    surface_area = 2 * pi * r * h\n\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the lateral surface area using the formula\n    lateral_surface_area = 2*r*(h+r)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula A = \u03c0r\u00b2h\n    A = 3.14 * r**2 * h\n    \n    # Return the surface area of the cylinder\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # Lateral surface area = 2 * pi * r * h\n    \n    # Calculate the lateral surface area of the cylinder using the given values of r and h\n    \n    # Calculate the lateral surface area of the cylinder using the given values of r and h\n    surface_area = 2 * 3.14 * r * h\n    \n    # Return the lateral surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Convert radius and height to values usable in the formula\n    r = r/2  # radius converted to half value\n    h = h/2  # height converted to half value\n\n    # Use the formula for the lateral surface area of a cylinder\n    lateral_area = (3*r**2 + h**2) * 6  # lateral area of a cylinder\n\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159*(r**2)) + (2*3.14159*r*h) + (2*3.14159*(h**2))"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h # Calculate the area of the cylinder\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # cube the length to get the volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Formula for volume of a cube: V = (1/3) * l^3\n    return (1/3) * l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the bits to be set.\n    even_bits = []\n    # Convert the given number to binary string.\n    binary_str = bin(n)[2:]\n    # Iterate over each character in the binary string.\n    for char in binary_str:\n        # If the character is an even bit, append it to the even_bits list.\n        if char == '0' and int(binary_str[:binary_str.find(char)], 2) % 2 == 0:\n            even_bits.append(int(char))\n    # Convert the list of even bits to binary string and convert it back to an integer.\n    even_bits_binary = ''.join(map(str, even_bits))\n    even_bits_int = int(even_bits_binary, 2)\n    # Return the number with even bits set.\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            even_bits |= 1\n        n = n >> 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # loop through the bits of the number\n    for i in range(32):\n        # get the current bit of the number\n        bit = (n >> i) & 1\n        # if the current bit is even, set it to 1, otherwise set it to 0\n        if bit == 0:\n            result += '0'\n        else:\n            result += '1'\n    # convert the binary string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # loop through each bit of the input number\n    for i in range(32):\n        # if the i-th bit is 1, set the result to 1\n        if (n >> i) & 1 == 1:\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # iterate through each bit of the input number\n    for i in range(32):\n        # if the bit is even, set the corresponding bit of the result to 1\n        if (n >> i) & 1 == 0:\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n    # Iterate over the bits of n starting from the least significant bit\n    for i in range(n.bit_length()):\n        # If the current bit is even, append it to the even_bits list\n        if n & (1 << i):\n            even_bits.append(i)\n    # Set all even bits of n to 1\n    for bit in even_bits:\n        n |= (1 << bit)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n:\n        n &= n-1 # clear even bits by ANDing with the previous number\n        n |= 1 << (n.bit_length()-1) # set the least significant bit to 1\n    \n    return n # return the final value of n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n << 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result.append(1)\n        # If the current bit is odd, leave it as is\n        else:\n            result.append(0)\n\n    # Convert the list to an integer and return it\n    return int(''.join(str(bit) for bit in result))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n ^ 1  # ^ is the bitwise XOR operator\n    result = n | even_bits  # | is the bitwise OR operator\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # iterate through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # if it is not, add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the unique tuples and their counts\n    unique_tuples = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in unique_tuples:\n            unique_tuples[tup] = 1\n\n        # Otherwise, increment the count for the tuple in the dictionary\n        else:\n            unique_tuples[tup] += 1\n\n    # Return the dictionary of unique tuples and their counts\n    return unique_tuples"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the occurrences of each tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary with the occurrences of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a set so we can easily check for uniqueness\n    unique_set = set(test_list)\n    # create a dictionary to store the counts\n    counts = {}\n    # loop through the unique set of tuples\n    for tuple in unique_set:\n        # check if the tuple is already in the counts dictionary\n        if tuple in counts:\n            # increment the count for this tuple\n            counts[tuple] += 1\n        else:\n            # if not, add the tuple to the counts dictionary with a count of 1\n            counts[tuple] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over the tuples in the list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tuple_item in test_list:\n        if tuple_item in count_dict:\n            count_dict[tuple_item] += 1\n        else:\n            count_dict[tuple_item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    # initialize the count variable to zero\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each possible ending index for a substring of length i+1\n        for j in range(len(str) - i):\n            # add 1 to the count variable if the substring is not empty\n            if str[j:j+i+1]!= '':\n                count += 1\n    # return the final count value\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    # initialize a variable to store the count of non-empty substrings\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # check if the character is a letter\n        if str[i].isalpha():\n            # loop through each starting position of the substring\n            for j in range(i, len(str)):\n                # check if the substring contains any non-letter characters\n                if not str[j].isalpha():\n                    count += 1\n                    break\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize a counter variable to keep track of the number of non-empty substrings\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each possible substring of length i+1 starting from i\n        for j in range(i, len(str)+1):\n            # check if the substring is not empty and update the counter variable if it is\n            if str[j-1:j]!= '' and str[j-1:j] not in str[:j-1]:\n                count += 1\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize a counter to keep track of the number of substrings\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)): \n        # check if the character is a letter or a digit\n        if not (str[i].isalpha() or str[i].isdigit()): \n            # if it's not, add a count to the total and move on to the next character\n            count += 1\n            i += 1\n    \n    # return the total count of substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == 1:\n                continue\n            substr = str[i:j]\n            if substr.strip()!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # initialize variables\n    total_sequences = 0\n    prev_element = -1\n    \n    # loop through all possible sequences of length n\n    for i in range(1, m+1):\n        if i >= 2*prev_element <= m:\n            # add to total number of sequences\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize count variable to 0\n    count = 0\n\n    # iterate from i=1 to i=m\n    for i in range(1, m+1):\n        # initialize j to i\n        j = i\n        # initialize sequence to [i]\n        sequence = [i]\n        # check if j is less than n and sequence[j-1] is greater than or equal to twice the previous element and less than or equal to m\n        while j < n and sequence[j-1] >= 2*sequence[j-2] and sequence[j-1] <= m:\n            # if it is, append j to the sequence and increment j\n            sequence.append(j)\n            j += 1\n        # add the length of the sequence to the count variable\n        count += len(sequence)\n\n    # return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Create a list to store the sequences\n    sequences = []\n\n    # Create a list to store the previous elements\n    previous_elements = []\n\n    # Initialize the current element to 1\n    current_element = 1\n\n    # Check if the current element is greater than or equal to 2*previous_element and less than or equal to m\n    while current_element >= 2 * previous_element and current_element <= m:\n\n        # Add the current element to the list of sequences\n        sequences.append(current_element)\n\n        # Add the current element to the list of previous elements\n        previous_elements.append(current_element)\n\n        # Increment the current element by 1\n        current_element += 1\n\n    # Calculate the number of sequences\n    total_number_of_sequences = len(sequences)\n\n    # Return the number of sequences\n    return total_number_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m):\n        if m % 2 == 0:\n            count += n // 2 + 1\n        else:\n            count += n // 2\n        if n % 2 == 0:\n            m -= 2\n            n -= 2\n        else:\n            m -= 2\n            n -= 2\n        if m < 0:\n            m = 0\n        if n < 0:\n            n = 0\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    prev_element = 0\n    prev_twice = 0\n    \n    for i in range(1, m+1):\n        if i >= 2*prev_twice and i <= m:\n            total_sequences += 1\n        if i >= 2*prev_element and i <= m:\n            prev_element = i\n        prev_twice = prev_element\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        seq = [2*i + 1]\n        for j in range(2, m+1):\n            if j % 2 == 0:\n                new_num = seq[-1] + 2\n            else:\n                new_num = seq[-1] - 2\n            if new_num >= 2*seq[-1] and new_num <= m:\n                seq.append(new_num)\n        count += len(seq)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m + 1):\n        if i % 2 == 0:\n            continue\n        else:\n            j = 1\n            while j * 2 <= i < m and j * 2 <= n <= m:\n                total += 1\n                j += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # create a list of numbers from 2 to m\n    numbers = [i for i in range(2, m+1)]\n\n    # initialize a counter to keep track of the number of sequences\n    count = 0\n\n    # iterate through all possible sequences of length n\n    for i in range(1, len(numbers)+1):\n        # check if each element is a valid sequence\n        if all(numbers[j] >= 2*numbers[j-1] <= m for j in range(i)):\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in a positive integer m and a positive integer n and returns the total number of sequences that can be formed with the given constraints.\n    \"\"\"\n\n    # Initialize a dictionary to store the number of sequences of length i\n    seq_count = {i: 0 for i in range(1, n + 1)}\n\n    # Initialize the sequence count for length 1 to the number of possibilities for n\n    seq_count[1] = (m ** n - 1) // (m - 1) + 1\n\n    # Initialize the sequence count for length 2 to 2n\n    seq_count[2] = (m ** n - 1) // (m ** 2 - 1) + 1\n\n    # Loop through the length 3 to n+1\n    for i in range(3, n + 1):\n        # Initialize the sequence count for length i to 0\n        seq_count[i] = 0\n\n        # Loop through the previous lengths 1 to i-1\n        for j in range(1, i):\n            # If the previous element is less than m and the current element is greater than or equal to twice the previous element but less than or equal to m, increment the sequence count for length i\n            if (j - 1) % 2 == 0 and j % 2 == 1 and m <= j <= 2 * (j - 1) <= m:\n                seq_count[i] += seq_count[j]\n\n    # Return the total number of sequences\n    return sum(seq_count.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        dp[i][0] = 1\n        for j in range(1, n+1):\n            if i < 2 * j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-j][j-1]\n    return dp[m][n]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Removing the last element of the first list\n    del list1[-1]\n    # Iterating over the second list and appending its elements to the first list\n    for element in list2:\n        list1.append(element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) > len(list2):\n        # The list2 has more elements than list1\n        for i in range(len(list2)-1):\n            list1.append(list2.pop())\n    else:\n        # The list2 has less elements than list1\n        for i in range(len(list1)-1):\n            list1.pop()\n        list1.append(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the second list\n    length = len(list2)\n    \n    # Loop through the first list from the end and append the elements of the second list to the end of the first list\n    for i in range(len(list1)-1,-1,-1):\n        list1.append(list2[length-1])\n        length -= 1\n        \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # function to find the next perfect square greater than a given number\n    def next_square(N):\n        x = math.ceil(N/2)\n        y = math.floor(x**2)\n        while y**2 < N:\n            x = y\n            y = math.floor(x**2)\n        return y**2\n\n    # function to find the next perfect square greater than a given number\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # find the next perfect square greater than N\n    next_square_N = next_square(N)\n\n    # find the next perfect square greater than next_square_N that is also a prime number\n    while True:\n        next_prime_square = next_square(next_square_N)\n        if is_prime(next_prime_square):\n            return next_prime_square\n        next_square_N = next_prime_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    # Use binary search to find the next perfect square\n    low, high = 1, N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == N:\n            # N is already a perfect square\n            high = mid - 1\n        elif mid * mid < N:\n            # Update the upper bound\n            low = mid + 1\n        else:\n            # Update the lower bound\n            high = mid - 1\n    return low"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n\n    Example:\n    >>> next_Perfect_Square(16)\n    36\n\n    '''\n    if N < 2:\n        return 2\n    if N % 4 == 0:\n        return 2**int(math.log(N, 2)+1)\n    else:\n        return 2**(int(math.log(N, 2))+1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = int(input(\"Enter a number: \"))\n        if N >= 0:\n            break\n        else:\n            print(\"Please enter a positive number.\")\n    while True:\n        sq = math.ceil(math.sqrt(N))\n        if is_perfect_square(sq):\n            break\n        else:\n            print(\"Please enter a positive perfect square number.\")\n    while True:\n        if math.gcd(N, sq) == 1:\n            break\n        else:\n            print(\"Please enter a number that is a perfect square.\")\n    return int(sq + 1)\n\ndef is_perfect_square(N):\n    '''\n    Check if a given number is a perfect square.\n    '''\n    return math.isqrt(N) ** 2 == N\n\nif __name__ == '__main__':\n    print(\"The next perfect square greater than\", N, \"is\", next_Perfect_Square(N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if N % 4 == 1: # N is a perfect square\n            return N\n        elif N % 4 == 0: # N is not a perfect square\n            N += 1\n            sqrtN = int(math.sqrt(N))\n            if sqrtN**2 == N:\n                return sqrtN + 1\n            else:\n                return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # If the square root is an integer, add 1 to it to get the next perfect square\n    if sqrt_N.is_integer():\n        return int(sqrt_N + 1)\n    else:\n        # Otherwise, round the square root up to the nearest integer\n        return int(math.ceil(sqrt_N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrt_N = int(math.sqrt(N))\n    next_sqrt_N = sqrt_N + 1\n\n    while next_sqrt_N**2 <= N:\n        next_sqrt_N += 1\n\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N \n    while True: \n        n += 1 \n        a = math.sqrt(n) \n        if int(a) ** 2 == n: \n            return int(a) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = N + 1  # add 1 to ensure that the next perfect square exists\n    while True:\n        if math.isqrt(N) ** 2 == N:\n            return N + 1\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N % 2 == 0: # if N is even\n        N += 1 # increment by 1 to make it odd\n    else:\n        N -= 1 # decrement by 1 to make it even\n\n    i = int(math.sqrt(N)) # find the integer part of sqrt(N)\n    sqrtN = i*i # square of integer part\n\n    while True:\n        if sqrtN >= N:\n            break # if sqrtN is greater than or equal to N, exit the loop\n        sqrtN += i # increment by integer part\n        i += 1 # increment by 1\n    \n    return sqrtN"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables to keep track of the maximum sum of increasing subsequence and the maximum sum of decreasing subsequence\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n    \n    # Initialize variables to keep track of the current subsequence and the last element of the subsequence\n    increasing_subsequence = []\n    decreasing_subsequence = []\n    current_subsequence = []\n    current_element = arr[0]\n    \n    # Traverse through the array\n    for i in range(1, n):\n        # If the current element is greater than the last element in the current subsequence, add it to the current subsequence\n        if current_element > current_subsequence[-1] and current_element > current_subsequence[0]:\n            current_subsequence.append(current_element)\n            \n            # If the sum of the current increasing subsequence is greater than the maximum sum of increasing subsequence, update the maximum sum\n            if sum(current_subsequence) > max_sum_increasing:\n                max_sum_increasing = sum(current_subsequence)\n                increasing_subsequence = current_subsequence\n        \n        # If the current element is less than the last element in the current subsequence, add it to the current subsequence\n        elif current_element < current_subsequence[-1] and current_element < current_subsequence[0]:\n            current_subsequence.append(current_element)\n            \n            # If the sum of the current decreasing subsequence is greater than the maximum sum of decreasing subsequence, update the maximum sum\n            if sum(current_subsequence) > max_sum_decreasing:\n                max_sum_decreasing = sum(current_subsequence)\n                decreasing_subsequence = current_subsequence\n        \n        # If the current element is greater than the last element in the current subsequence but less than the first element, add it to the increasing subsequence\n        elif current_element > current_subsequence[-1] and current_element < current_subsequence[0]:\n            current_subsequence.append(current_element)\n            increasing_subsequence = current_subsequence\n            \n            # If the sum of the current increasing subsequence is greater than the maximum sum of increasing subsequence, update the maximum sum\n            if sum(increasing_subsequence) > max_sum_increasing:\n                max_sum_increasing = sum(increasing_subsequence)\n                increasing_subsequence = increasing_subsequence\n        \n        # If the current element is less than the last element in the current subsequence but greater than the first element, add it to the decreasing subsequence\n        elif current_element < current_subsequence[-1] and current_element > current_subsequence[0]:\n            current_subsequence.append(current_element)\n            decreasing_subsequence = current_subsequence\n            \n            # If the sum of the current decreasing subsequence is greater than the maximum sum of decreasing subsequence, update the maximum sum\n            if sum(decreasing_subsequence) > max_sum_decreasing:\n                max_sum_decreasing = sum(decreasing_subsequence)\n                decreasing_subsequence = decreasing_subsequence\n    \n    # Add the last element of the increasing subsequence to the current subsequence and update the maximum sum if necessary\n    if len(increasing_subsequence) > 0:\n        current_subsequence += increasing_subsequence[-1]\n        if sum(current_subsequence) > max_sum_increasing:\n            max_sum_increasing = sum(current_subsequence)\n            increasing_subsequence = current_subsequence\n    \n    # Add the last element of the decreasing subsequence to the current subsequence and update the maximum sum if necessary\n    if len(decreasing_subsequence) > 0:\n        current_subsequence += decreasing_subsequence[-1]\n        if sum(current_subsequence) > max_sum_decreasing:\n            max_sum_decreasing = sum(current_subsequence)\n            decreasing_subsequence = current_subsequence\n    \n    # Return the maximum sum of the increasing subsequence\n    return max_sum_increasing"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n+1):\n        if arr[i] < dp[i-2]:\n            dp[i] = dp[i-2] + arr[i]\n        elif arr[i] > dp[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] + arr[i]\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        if arr[i] >= arr[i+1]:\n            max_ending_here += arr[i]\n            max_sum_so_far = max(max_sum_so_far, max_ending_here)\n        else:\n            max_ending_here = 0\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        max_sum = max(arr[0], arr[1])\n        for i in range(2, n):\n            if arr[i] < arr[i-1]:\n                max_sum = max(max_sum, arr[i] + arr[i-1])\n            else:\n                max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    left_max = float('-inf')\n    right_max = float('-inf')\n    max_sum = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing\n        if arr[i] < arr[i - 1]:\n            # Update left maximum if needed\n            if arr[i] > left_max:\n                left_max = arr[i]\n        else:\n            # Check if the current element is decreasing\n            if arr[i] > arr[i - 1]:\n                # Update right maximum if needed\n                if arr[i] > right_max:\n                    right_max = arr[i]\n            else:\n                # Update the maximum sum if needed\n                max_sum = max(max_sum, right_max - left_max)\n                # Reset right and left maximums\n                left_max = float('-inf')\n                right_max = float('-inf')\n\n    # Update the maximum sum if the array is bitonic\n    if max_sum < 0:\n        max_sum = max(arr) - min(arr)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n    \n    max_sum = dp[0]\n    for i in range(1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return arr[0]\n    if arr[1] > arr[2]:\n        return max(arr[0]+arr[1]+arr[2], arr[1]+arr[2]+arr[0], arr[0]+arr[2]+arr[1])\n    elif arr[1] < arr[2]:\n        return max(arr[0]+arr[1]+arr[2], arr[1]+arr[2]+arr[0], arr[0]+arr[2]+arr[1])\n    else:\n        return max(arr[0]+arr[1]+arr[2], arr[1]+arr[2]+arr[0], arr[0]+arr[2]+arr[1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    max_sum = float('-inf')\n    max_diff = 0\n    \n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_diff += arr[i+1] - arr[i]\n            max_sum = max(max_sum, max_diff)\n        else:\n            max_diff += arr[i] - arr[i+1]\n            max_sum = max(max_sum, max_diff)\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # First, find the bitonic subsequence by identifying the index of the maximum element \n    # and finding the indices of all elements that are greater than the maximum\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_idx]:\n            max_idx = i\n\n    bitonic_subseq = [arr[max_idx]]\n    for i in range(max_idx-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            bitonic_subseq.append(arr[i])\n\n    # Now, find the maximum sum of a bitonic subsequence by finding the sum of the \n    # elements in the subsequence and adding the sum of the subsequence to the \n    # maximum sum of a decreasing subsequence\n    max_sum = 0\n    for i in range(len(bitonic_subseq)-1):\n        max_sum += bitonic_subseq[i]\n\n    # Find the maximum sum of a decreasing subsequence by iterating over all \n    # possible subarrays and calculating the sum\n    max_decr_sum = 0\n    for i in range(n):\n        decr_sum = 0\n        for j in range(i, n):\n            decr_sum += arr[j]\n            if decr_sum > max_decr_sum:\n                max_decr_sum = decr_sum\n\n    return max(max_sum, max_decr_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum_l = [float('-inf')] * n\n    max_sum_r = [float('-inf')] * n\n    max_sum_l[0] = max_sum_r[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            if arr[i] > max_sum_r[i-1] + arr[i]:\n                max_sum_l[i] = max_sum_r[i-1] + arr[i]\n            else:\n                max_sum_l[i] = max_sum_r[i-1]\n        else:\n            if arr[i] > max_sum_l[i-1] + arr[i]:\n                max_sum_r[i] = max_sum_l[i-1] + arr[i]\n            else:\n                max_sum_r[i] = max_sum_l[i-1]\n\n    return max(max_sum_l[-1], max_sum_r[-1])"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 1\n    while True:\n        guess = (number + i * i) / 2\n        if guess == number / guess:\n            return guess\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = 0\n    i = 0\n    while abs(x - y) > 0.0000001:\n        y = x\n        x = (number / x) + x\n        i += 1\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b, c = 0, 1, abs(number)\n\n    while c > 0.0000001:\n        a, b, c = b, a + b / c, abs(b)\n\n    return a"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = (number + x0) / 2\n    x2 = (number + x1) / 2\n    x3 = (number + x2) / 2\n    x4 = (number + x3) / 2\n    \n    while abs(x3 - x4) > 0.0001:\n        x0 = x1\n        x1 = x2\n        x2 = x3\n        x3 = x4\n        x4 = (number + x3) / 2\n        \n    return x3"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Start with an initial guess of 1/2\n    guess = 0.5\n    # Initialize a counter for the number of iterations\n    count = 0\n    \n    # Loop until we reach a convergence\n    while True:\n        # Update the guess\n        new_guess = (guess + number/guess) / 2\n        # Check if the new guess is within an error tolerance\n        if abs(new_guess - guess) < 0.00001:\n            # If so, return the new guess\n            return new_guess\n        # Update the guess and iteration count\n        guess = new_guess\n        count += 1\n        # If we have exceeded the maximum number of iterations, return None\n        if count > 1000:\n            return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initial estimate of the square root\n    x = number / 2\n    # Initialize the number of iterations\n    i = 0\n    # Loop until the estimated error is less than a certain threshold\n    while abs(x*x - number) > 0.0001:\n        # Compute the estimate of the next iteration\n        x = (x + number / x) / 2\n        i += 1\n    # Return the estimated square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n        number (float): The number for which to compute the square root.\n\n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    # Initialize the square root to 1 and the number of iterations to 0\n    square_root = 1\n    iterations = 0\n\n    # Keep iterating until the difference between the square root and the\n    # previous iteration is smaller than a small tolerance value\n    while abs(square_root - iterations) > 1e-12:\n        # Update the square root by taking the average of the previous\n        # iteration and the number divided by the previous iteration\n        square_root = 0.5 * (square_root + number / square_root)\n\n        # Increment the number of iterations\n        iterations += 1\n\n    return square_root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize two variables\n    x1 = 0.0\n    x2 = number\n\n    # perform binary search until x1 is within 10^-6 of the true value of x2\n    while abs(x2 - x1) > 10**-6:\n        x3 = (x1 + x2) / 2  # calculate the midpoint\n        x4 = x3 * x3  # calculate the square of the midpoint\n        if x4 < number:  # check if the square is less than the target\n            x1 = x3  # update the lower bound\n        else:\n            x2 = x3  # update the upper bound\n\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters\n    ----------\n    number : float\n        The number for which we want to find the square root.\n\n    Returns\n    -------\n    float\n        The square root of the input number using the babylonian method.\n    \"\"\"\n\n    # Initialize the iteration counter and the initial estimate of the square root\n    iterations = 0\n    guess = number/2\n\n    # Loop until the absolute difference between the guess and the square root is less than a certain tolerance\n    while abs(guess**2 - number) > 0.0001:\n        iterations += 1\n        guess = (guess + number/guess) / 2\n\n    # Return the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize a variable to keep track of the iteration count\n    i = 0\n    \n    # Initialize variables for the Babylonian method\n    x = number\n    y = number / 2\n    z = 0\n    \n    # Loop until the difference between x and y is less than a certain tolerance\n    while abs(x - y) > 1e-10:\n        # Calculate the next approximation of the square root\n        x = y\n        y = z\n        z = y + (number / y)\n        \n        # Increase the iteration count\n        i += 1\n    \n    # Return the final value of x\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize the LPS array with all zeros\n    LPS = [0] * n\n    # Initialize the max length with 1\n    maxLength = 1\n    # Initialize the start index of the longest palindromic subsequence\n    start = 0\n    # Iterate through the string\n    for i in range(1, n):\n        # If the current character is same as the previous character, extend the palindromic subsequence\n        if str[i] == str[i - 1]:\n            LPS[i] = LPS[i - 1] + 1\n        # If the current character is not same as the previous character, check if the previous longest palindromic subsequence continues\n        else:\n            # If the previous longest palindromic subsequence continues, extend the palindromic subsequence\n            if LPS[i - 1] > 0 and str[i] == str[i - LPS[i - 1] - 1]:\n                LPS[i] = LPS[i - 1] + 1\n            # If the previous longest palindromic subsequence does not continue, reset the start index and set the start index to i\n            else:\n                LPS[i] = 0\n                start = i\n        # Update the maxLength if the current LPS is greater than maxLength\n        if LPS[i] > maxLength:\n            maxLength = LPS[i]\n            start = i - LPS[i]\n    # Return the length of the longest palindromic subsequence\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize table to store lengths of longest palindromic subsequences\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Base cases\n    table[0][0] = 1\n\n    # Fill table in bottom up manner\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            table[i][i] = table[i-1][i-1] + 1\n        else:\n            table[i][i] = max(table[i-1][j] for j in range(i))\n\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # initialize variables\n    dp = [1] * n\n    max_len = 1\n    i = 1\n    while i < n:\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 1\n            i += 1\n            max_len = max(max_len, dp[i])\n        else:\n            if dp[i-1] > 0:\n                dp[i] = dp[i-1]\n            i += 1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store the length of the longest palindromic subsequence ending at each position\n    # in the string.\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the length of the longest palindromic subsequence ending at position i to 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Initialize the length of the longest palindromic subsequence ending at position i and j to\n    # 1 if the characters at positions i and j in the string are the same, and the maximum of the\n    # lengths of the longest palindromic subsequences ending at positions i+1 and j-1.\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    '''\n    This function finds the length of the longest palindromic subsequence in a given string.\n    '''\n    n = len(s)\n    # create a table of the length of the longest palindromic subsequence for all possible prefixes\n    # of the given string\n    L = [[0] * n for _ in range(n)]\n\n    # populate the table using dynamic programming\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    # return the length of the longest palindromic subsequence\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    # Find the length of the longest palindromic subsequence for each substring of the input string\n    max_length = 1\n    for i in range(1, len(str)):\n        length1 = lps(str[:i])\n        length2 = lps(str[i:])\n        length = max(length1, length2) + 1\n        if length > max_length:\n            max_length = length\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize a 2D table to store the lengths of longest palindromic subsequences\n    # between a i and a j\n    table = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column to 1\n    for i in range(1, n):\n        table[i][i] = 1\n    # Fill in the rest of the table recursively\n    for i in range(2, n):\n        for j in range(i):\n            if str[i-1] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[n-1][0]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a list to store the length of the longest palindromic subsequence ending at each index\n    l = [0] * len(str) \n    # Initialize the length of the longest palindromic subsequence ending at the first index to 1\n    l[0] = 1 \n    # Loop through all the characters in the string\n    for i in range(1, len(str)): \n        # If the character is a palindrome, update the length of the longest palindromic subsequence ending at the current index\n        if str[i] == str[i-1]: \n            l[i] = l[i-1] + 1 \n        # If the character is not a palindrome, find the maximum of the length of the longest palindromic subsequence ending at the previous and current indices\n        else: \n            l[i] = max(l[i-1], l[i]) \n    # Return the length of the longest palindromic subsequence\n    return l[len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    This function checks if a string is a palindrome or not.\n    \"\"\"\n    return s == s[::-1]\n\ndef lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n    for i in range(1, n):\n        if is_palindrome(str[i-1:i+1]):\n            dp[i][i] = 1\n            start = i - 1\n        else:\n            for j in range(max(0, i-2), i):\n                if is_palindrome(str[j:i+1]):\n                    dp[i][j] = dp[j+1][i-1] + 2\n                    start = j\n                else:\n                    dp[i][j] = dp[j][i]\n        if dp[i][i] > max_len:\n            max_len = dp[i][i]\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the length of the longest palindromic subsequence for each substring of the string\n    table = [[0] * len(str) for _ in range(len(str))]\n\n    # Fill the table using dynamic programming\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i == j:\n                table[i][j] = 1\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][len(str)-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # calculate the harmonic sum of n-1\n    sum_n = 0\n    for i in range(1, n):\n        sum_n += 1/i\n    return sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum to zero\n    harmonic_sum = 0\n    \n    # loop through range(1, n)\n    for i in range(1, n+1):\n        # calculate the harmonic value of i\n        harmonic = (1/i) + (1/n)\n        \n        # add the harmonic value to the sum\n        harmonic_sum += harmonic\n    \n    # return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + 1/n) ** (n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from the first array to find the unique elements\n    unique_nums1 = set(array_nums1)\n\n    # Create a set from the second array to find the unique elements\n    unique_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets using the intersection() method\n    intersection = unique_nums1.intersection(unique_nums2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums2 and convert to a list\n    set_nums2 = list(set(array_nums2))\n    # Create an empty set to store the intersection of the two sets\n    intersection = set()\n    # Loop through each element of array_nums1\n    for num in array_nums1:\n        # If the element is in set_nums2, add it to the intersection set\n        if num in set_nums2:\n            intersection.add(num)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize a dictionary to store the count of each element in array_nums1\n    count_dict = {}\n    \n    # Loop through array_nums1 and increment the count of each element in count_dict\n    for num in array_nums1:\n        count_dict[num] = count_dict.get(num, 0) + 1\n        \n    # Initialize an empty list to store the intersection of array_nums1 and array_nums2\n    intersection = []\n    \n    # Loop through array_nums2 and add the elements that have a count greater than 0 to intersection\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n            \n    # Return the intersection of array_nums1 and array_nums2\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of the array1 elements\n    set_array1 = set(array_nums1)\n\n    # create a list of the intersection elements\n    intersection = []\n\n    # loop through array2 and check if each element is in set_array1\n    for num in array_nums2:\n        if num in set_array1:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersect = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersect.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersect"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create sets of elements from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert set to list and return\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays and returns the intersection of the two arrays.\n    \"\"\"\n    # create a set of all the numbers in array_nums1\n    set_nums1 = set(array_nums1)\n    \n    # create an empty list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # iterate through array_nums2 and check if each number is in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, list[i])\n        result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    result = []\n    for elem in list:\n        result.insert(0, elem)\n    result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    # initialize a new empty list\n    result = []\n    # loop through each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element\n        result.insert(0, element)\n        # append the current element to the new list\n        result.append(list[i])\n    # return the new list with the inserted element\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        phi = cmath.phase(number)\n        polar_coordinates.append((r, phi))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        print('{:.2f} + {:.2fi} = {:.2f} rad'.format(r, theta, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        try:\n            complex_numbers.append(complex(number))\n        except:\n            return \"Invalid input\"\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number) * 180 / cmath.pi\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        \n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # Calculate the angle of the complex number in radians\n        angle = cmath.phase(num)\n        \n        # Convert the magnitude and angle to polar coordinates\n        polar = (magnitude, angle)\n        \n        # Print the polar coordinates\n        print(f\"{polar}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the given complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Print the converted number\n        print(\"Polar coordinates of\", number, \"are:\", r, \"with angle\", theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if type(number) == complex:\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #initialize an empty list to store the polar coordinates of the complex numbers\n    polar_coordinates = []\n\n    #iterate through the complex numbers in the list\n    for number in numbers:\n\n        #convert the complex number to polar coordinates using the cmath module\n        polar_number = cmath.polar(number)\n\n        #append the polar coordinates to the list\n        polar_coordinates.append(polar_number)\n\n    #return the list of polar coordinates\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        polar_num = (abs(real), cmath.phase(real+imag*1j))\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        complex_number = cmath.rect(number)\n        polar_coordinates.append(complex_number.real)\n        polar_coordinates.append(complex_number.imag)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, converts them to polar coordinates and returns the polar coordinates in a list of tuples.\n    '''\n    polar_coords = []\n    \n    for num in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Add the polar coordinates to the list of polar coordinates\n        polar_coords.append((r, theta))\n        \n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n from the list l\n    combs = combinations_with_replacement(l, n)\n    \n    # Convert each combination to a tuple and return it as a list\n    return list(combs)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    \n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combs.append(tuple(sorted(l[i:j])))\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # combine all possible combinations of n elements from the list l\n    comb_colors = list(combinations_with_replacement(l, n))\n    # convert each combination to a tuple and return as a list\n    return [(tuple(comb)) for comb in comb_colors]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations with repetition of length n\n    combinations = combinations_with_replacement(l, n)\n    # Convert the combinations into a list of tuples\n    color_combinations = [(comb,) for comb in combinations]\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n\n    # Find the maximum value in each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n\n    # Compare the values and return the maximum value\n    if max_val1 > max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1[0], test_tup1[1])\n    max2 = max(test_tup2[0], test_tup2[1])\n    \n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    # Check if all elements of the tuples are numeric\n    for element in test_tup1 + test_tup2:\n        if not isinstance(element, (int, float)):\n            print(\"Error: Tuples must contain only numeric elements.\")\n            return None\n    \n    # Calculate the sum of the tuples\n    total = sum(test_tup1 + test_tup2)\n    \n    # Calculate the maximum value of the tuple\n    max_value = max(test_tup1 + test_tup2)\n    \n    # Return the maximum value of the tuple\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tuple = max1 if max1 > max2 else max2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length.\")\n        return\n\n    # Find the maximum element in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Determine which tuple has the maximum element\n    if max1 >= max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Compare the maximum values and return the corresponding tuple\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # Initialize variables to store maximum values\n    max_num1 = max_num2 = 0\n    \n    # Iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        # Compare the current element in both tuples\n        if test_tup1[i] > test_tup2[i]:\n            # If the current element in tup1 is greater, update max_num1\n            max_num1 = test_tup1[i]\n        else:\n            # If the current element in tup2 is greater, update max_num2\n            max_num2 = test_tup2[i]\n    \n    # Return the tuple with the maximum value\n    if max_num1 > max_num2:\n        return max_num1\n    else:\n        return max_num2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # find the maximum element in each tuple\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n\n    # compare the maximum elements\n    if max_1 > max_2:\n        return max_1, max_2\n    else:\n        return max_2, max_1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # First, check if the first tuple has a higher value for each element\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                # Swap the values if necessary\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n        # Now, check if the second tuple has a higher value for each element\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                # Swap the values if necessary\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    elif len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup2)):\n            if test_tup2[i] < test_tup1[i]:\n                # Swap the values if necessary\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n        # Now, check if the second tuple has a higher value for each element\n        for i in range(len(test_tup2)):\n            if test_tup2[i] < test_tup1[i]:\n                # Swap the values if necessary\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    # If all elements are equal, the first tuple is the better one\n    else:\n        return test_tup1\n    return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables for sum of primes and count of primes\n    sum_of_primes = 0\n    count_of_primes = 0\n    \n    # Calculate the first few newman primes\n    for i in range(1, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            sum_of_primes += i\n            count_of_primes += 1\n    \n    # Calculate the nth newman prime by adding the last count of primes\n    nth_prime = sum_of_primes + count_of_primes - 1\n    \n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    # Initialize the current and next number to find the next prime\n    current = 2\n    next_prime = 3\n\n    # Check if the given number is prime\n    if is_prime(current):\n        count = 1\n\n        # Continue finding new primes until n is reached\n        while count < n:\n            # Check if the next number is prime\n            if is_prime(next_prime):\n                count += 1\n            # Update the current number and next number to find the next prime\n            current = next_prime\n            next_prime += 1\n\n        return current\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3]\n    p = 5\n    \n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if p % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 2\n    \n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Check if the first number is prime\n    if num <= 1:\n        return None\n\n    # Loop until count reaches n\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # Increment number\n        num += 1\n\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    for num in range(1, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and num % 11 == 0:\n            count += 1\n            if count == n:\n                return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of primes to an empty list\n    primes = []\n    \n    # Check all numbers from 2 to n-1 for primality\n    for i in range(2, n):\n        # Check if i is a prime number\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n        \n        # If n-th prime number has been found, return it\n        if len(primes) == n:\n            return primes[-1]\n    \n    # If all numbers from 2 to n-1 have been checked, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the numbers of prime numbers\n    prime_numbers = []\n    # Initialize a variable to keep track of the nth newman-shanks-williams prime number\n    nth_prime = None\n    # Initialize a variable to keep track of the largest prime number found so far\n    max_prime = 0\n    \n    # Start with 2 as the first prime number\n    current_prime = 2\n    \n    # Keep looping until we have found the nth newman-shanks-williams prime number\n    while nth_prime is None:\n        # Check if the current prime number is prime\n        is_prime = True\n        for i in range(3, int(current_prime**0.5)+1, 2):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the current prime number is prime, add it to the list of prime numbers\n            prime_numbers.append(current_prime)\n            # If we have found the nth newman-shanks-williams prime number, update the variable and break out of the loop\n            if len(prime_numbers) == n:\n                nth_prime = current_prime\n                break\n        # If the current prime number is not prime, increment it and continue looping\n        current_prime += 1\n    \n    # Return the nth newman-shanks-williams prime number\n    return nth_prime"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the number of elements in both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The number of elements in both tuples must be equal\"\n\n    # Perform element-wise division of the two tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            return \"Error: The elements of the two tuples must be of the same type\"\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            return \"Error: Cannot divide by zero\"\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # If one of the tuples is empty, return an empty tuple\n    if not test_tup1 or not test_tup2:\n        return ()\n    \n    # Find the length of the shortest tuple\n    min_length = min(len(test_tup1), len(test_tup2))\n    \n    # Initialize the result tuple with empty lists\n    result_list = [[] for _ in range(min_length)]\n    \n    # Perform element-wise division\n    for i in range(min_length):\n        result_list[i] = [test_tup1[i] / test_tup2[i]]\n    \n    # Return the result tuple\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two input tuples must have the same length.\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The length of the two tuples should be equal.\"\n    \n    # Perform element-wise division of the tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        # Check if both tuples have the same length\n        if len(test_tup1)!= len(test_tup2):\n            return \"Error: Both tuples should have the same length.\"\n        # Perform element-wise division on the tuples\n        result_tup = tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n        return result_tup\n    except ZeroDivisionError:\n        return \"Error: Both tuples cannot be zero.\""
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the two tuples must be the same.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a list to store the first part of the list\n    first_part = []\n    \n    # Create a list to store the second part of the list\n    second_part = []\n    \n    # Loop through the list, adding items to the first and second parts as necessary\n    for item in list1:\n        if len(first_part) < L:\n            first_part.append(item)\n        else:\n            second_part.append(item)\n    \n    # Convert the first part and second part lists to tuples\n    first_part = tuple(first_part)\n    second_part = tuple(second_part)\n    \n    # Return the resulting tuples\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Returning the split lists as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    mid = n // 2\n    if mid < L:\n        raise ValueError(\"The length of the list is smaller than the value of L.\")\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a valid integer\n    if not isinstance(L, int):\n        return \"L must be an integer.\"\n\n    # Check if L is within the range of the length of the list\n    if L < 1 or L > len(list1):\n        return \"L must be between 1 and the length of the list.\"\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is positive integer\n    if type(L)!= int or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # Calculate the number of elements in the first part\n    num_elements = L if len(list1) <= L else len(list1)\n    \n    # Split the list into two parts\n    first_part = list1[:num_elements]\n    second_part = list1[num_elements:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Calculate the length of the first part of the list\n    L1 = len(list1) // 2\n    \n    # Return the split lists as a tuple\n    return (list1[:L1], list1[L1:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    '''\n    if L >= len(lst):\n        raise ValueError(\"Length of list should be greater than or equal to L\")\n    mid = len(lst) // 2\n    return (lst[:mid], lst[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_len = len(list1) // 2\n    \n    # Split the list into two parts using slicing\n    first_part = list1[:first_part_len]\n    second_part = list1[first_part_len:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = h_age * 7\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    days_per_year = 365\n    dogs_years = h_age / days_per_year\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dogs = h_age / 7\n    age_in_years = age_in_dogs * 7\n    return age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age - 12)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Convert the human age to dog years\n    dog_years = h_age * 7\n    \n    # Return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog's years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7 # converting human age to dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        raise ValueError('Step cannot be 0')\n    if len(S) % step!= 0:\n        raise ValueError('The length of the list must be divisible by step')\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer.\")\n\n    # split the list into chunks of length `step`\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n\n    # remove the last empty chunk if there is one\n    if len(chunks) > 0 and len(chunks[-1]) == 0:\n        chunks.pop()\n\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            result.append(S[i:i+step])\n        i += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through each element in the list\n    for i in range(0, len(S), step):\n        # create a new list containing only the current element and append it to the result list\n        result.append([S[i]])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    length = len(S)\n    for i in range(0, length, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    # Calculate the lateral surface area of a cube\n    lateral_surface_area = l ** 2 * 6 * math.pi\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    This function takes a side length of a cube as input and returns the lateral surface area of the cube.\n    \"\"\"\n    # Calculating the lateral surface area of a cube using Heron's formula\n    s = (l**2 + l**2 + l**2)/6\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 6 * l * l\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    current_num = 1\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the odd number to the sum\n        sum += i*i\n    # return the sum of the squares of the odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 2\n        i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum variable\n        sum += i**2\n    # return the final sum\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"*****\"\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return \"*****\"\n        return find_star_num(n - 1) + \"*****\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    count = 0\n    result = \"\"\n\n    while count < n:\n        result += \"*\"\n        count += 1\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(1, n+1):\n        if i <= 2*n:\n            star_num *= 10**(i-1)\n        else:\n            star_num *= 10**(i-2*n)\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the counter variable\n    counter = 1\n\n    # Loop through the first n-1 rows\n    for i in range(1, n):\n\n        # Print the stars for each row\n        for j in range(1, i+1):\n            print(\"*\", end=\" \")\n\n        # Move the counter to the next row\n        counter += 1\n\n        # Print a newline character after each row\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables\n    total_stars = 0\n    current_star = 1\n    \n    # Loop n times to print each star\n    for i in range(n):\n        print('*' * current_star)\n        # Increment the current star and update the total stars\n        current_star += 2\n        total_stars += current_star\n    \n    # Print the total number of stars found\n    print(\"Total number of stars:\", total_stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1 or n > 100000:\n        return \"Invalid input! Please enter a number between 1 and 100000.\"\n    \n    # Initialize a string to hold the star number\n    star_num = \"\"\n    \n    # Loop through each digit in the number and add a star to the string\n    for i in range(1, n+1):\n        if i == n:\n            star_num += \"*\"\n        else:\n            star_num += \" \"\n    \n    # Return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n > 1:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the number of stars\n    num_stars = 0\n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Add 1 to the number of stars for each iteration\n        num_stars += 1\n        # Print the number of stars\n        print(\"*\" * num_stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count = count * i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number\n    star_num = 1\n    \n    # loop until the star number is greater than n\n    while star_num <= n:\n        # print the current star number\n        print('*' * star_num)\n        \n        # increment the star number\n        star_num *= 2"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to its ascii value using the ord() function\n    ascii_value = ord(k)\n    \n    # print the ascii value\n    print(\"The ascii value of\", k, \"is:\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)!= 1:\n        raise ValueError(\"Input should be a single character\")\n    else:\n        return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # Convert the character to an integer using the ord() function\n    num = ord(k)\n\n    # Return the ascii value of the integer\n    return num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if even_index % 2 == 0:\n                even_index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:  # if even position\n            if arr[i] % 2 == 0:  # if even number\n                even_sum += arr[i]  # add even number to sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_index = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            even_index.append(i)\n    \n    return sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if even_index == i % 2:\n                even_index += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n                sum_even_index += i\n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                even_count += 1\n                \n    if even_count > 0:\n        return sum\n    else:\n        return None"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            result += i\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_even_powers += i**5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the fifth power of the current number\n        power = i ** 5\n        \n        # Add the fifth power to the sum variable\n        sum += power\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_nums = []\n    for i in range(2, n+1, 2):\n        even_nums.append(i**5)\n    return sum(even_nums)\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and calculates the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_even_powers += i ** 5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the even number raised to the fifth power to the sum variable\n        sum += i ** 5\n    # Return the sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n    \n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Get the last element of the tuple\n        rear_elem = tup[-1]\n        # Append the rear element to the rear list\n        rear_list.append(rear_elem)\n        \n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create an empty list to store the result\n    result_list = []\n    # iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # if the indices match, add the difference between the two elements to the result list\n        if i in range(len(test_tup2)):\n            result_list.append(test_tup1[i] - test_tup2[i])\n        else:\n            # if the index of the element in the second tuple is greater than the length of the first tuple, add the element to the result list\n            result_list.append(test_tup1[i])\n    # return the result list\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # if the length of the two tuples is not the same, return an error message\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples have different lengths.\"\n    \n    # create a new tuple to store the result\n    new_tuple = []\n    \n    # iterate over the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # if the indices are equal, add the element from the second tuple to the result tuple\n        if i == test_tup2.index(test_tup1[i]):\n            new_tuple.append(test_tup1[i] - test_tup2[i])\n        # if the indices are not equal, add the element from the first tuple to the result tuple\n        else:\n            new_tuple.append(test_tup1[i])\n    \n    # return the new tuple\n    return tuple(new_tuple)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # iterate through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    # Create a new tuple with the subtraction of the elements of the first tuple by the elements of the second tuple with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] is not None:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_coeff_sum = 0\n\n    # Iterate over all possible values of i from 1 to n\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient of i and (n-i)\n        bin_coeff = math.comb(n, i)\n\n        # Check if the index i is even\n        if i % 2 == 0:\n            # If it is even, add it to the sum of even index binomial coefficients\n            even_coeff_sum += bin_coeff\n\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all values of i from 0 to n/2\n    for i in range(n//2+1):\n        # Calculate the ith even index binomial coefficient\n        coeff = math.comb(n, i)\n        # Check if the even index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum += coeff\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_binomial_coeff_sum = 0\n    for i in range(2, n+1):\n        even_binomial_coeff_sum += math.comb(n, i-1)\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i%2==0 and j%2==0:\n                sum_even += math.comb(i,j)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            sum += binomial(i,j)\n    return sum\n\ndef binomial(n, k):\n    '''\n    Helper function for calculating the binomial coefficient.\n    '''\n    if k > n:\n        k = n\n    f = math.factorial\n    return f(n) // f(k) // f(n-k)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        binomial = math.comb(n, i)\n        if i % 2 == 0:\n            sum += binomial\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables for sum of even binomial coefficients and sum of odd binomial coefficients\n    even_sum = 0\n    odd_sum = 0\n\n    # Loop through from 0 to n\n    for i in range(0, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # If i is even, add the binomial coefficient to the sum of even binomial coefficients\n            even_sum += math.comb(n, i)\n        # If i is odd, add the binomial coefficient to the sum of odd binomial coefficients\n        else:\n            odd_sum += math.comb(n, i)\n\n    # Return the sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to zero\n    even_binomial_sum = 0 \n    \n    # Loop through each number from 0 to n\n    for i in range(n+1): \n        # Compute the i-th binomial coefficient\n        b = math.comb(n, i) \n        # Check if the i-th binomial coefficient is even\n        if i%2 == 0: \n            # If it is even, add it to the sum of even index binomial coefficients\n            even_binomial_sum += b \n    \n    # Return the sum of even index binomial coefficients\n    return even_binomial_sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # Initialize variables\n    even_sum = 0\n    \n    # Iterate over all integers from 0 to n\n    for i in range(2, n+1):\n        # Find the sum of the even index binomial coefficients\n        coeff = math.comb(n, i, exact=True)\n        if coeff % 2 == 0:\n            even_sum += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3/5)*pi*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14/4) * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder\n    V = 1/3 * pi * r * r * h\n    \n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14 * r**2  # formula for calculating the area of a cylinder\n    volume = area * h  # formula for calculating the volume of a cylinder\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i*i\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal_num = 0\n    num = 1\n\n    # calculate the nth decagonal number\n    while num <= n:\n        decagonal_num += num\n        num += 2\n\n    # return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i * (i+1) // 2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n):\n        \"\"\"\n        Helper function to find the nth decagonal number using recursion.\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            return n * 3 * (n - 1) + decagonal_helper(n - 1)\n\n    return decagonal_helper(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # initialize variables\n    a = 1\n    b = 1\n    sum = 0\n\n    # calculate the sum of the first n decagonal numbers\n    for i in range(1, n+1):\n        sum += a * b\n        a, b = b, 4*a + b\n\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (5*n**2 + 5*n + 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    decagonal_numbers = []\n    for i in range(1, n+1):\n        decagonal_numbers.append(i*(3*i-1)//2)\n    return decagonal_numbers"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns True if it is a decagonal number, False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of its factors. For example, 15 is a decagonal number because 1 + 5 = 6.\n    \"\"\"\n    # Check if n is a positive integer greater than 1\n    if n <= 1 or not isinstance(n, int):\n        return False\n\n    # Initialize a variable to store the sum of the factors of n\n    total = 0\n\n    # Loop from 1 to n/2 and check if each number is a factor of n\n    for i in range(1, n//2+1):\n        # Check if i is a factor of n\n        if n%i == 0:\n            total += i\n\n    # Check if total is equal to n\n    return total == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n, a, b):\n        if n == 1:\n            return a\n        return decagonal_helper(n-1, b, a+b)\n\n    return decagonal_helper(n, 1, 1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Loop through the array and check if the element is found\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return the tuple containing the boolean and index position\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns True if all the elements in the list are unique, otherwise False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set_list = set(test_list)\n    \n    # Check if the length of the set is equal to the length of the list\n    if len(set_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the list\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        # if the length is equal, then the list is unique\n        return True\n    else:\n        # if the length is not equal, then the list is not unique\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # use a set to remove duplicates from the list\n    unique_list = list(set(test_list))\n    # check if the length of the original list is equal to the length of the unique list\n    if len(test_list) == len(unique_list):\n        # if the lists are equal, return True\n        return True\n    # if the lists are not equal, return False\n    return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length\")\n        return\n    \n    # Loop through the two lists and subtract each element\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Convert the given integer into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Calculate the frequency of each digit in the list\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n\n    # Check if the frequency of each digit in the list is less than or equal to its value\n    for d, f in freq.items():\n        if f > d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # create a list of digits in the integer\n    digits = [int(digit) for digit in str(n)]\n    \n    # initialize a dictionary to store frequency of each digit\n    freq = {digit: digits.count(digit) for digit in range(10)}\n    \n    # loop through each digit in the integer\n    for digit in digits:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > digit:\n            # if it's not, return False\n            return False\n    \n    # if all digits pass the validation check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # initialize frequency array\n    for digit in str(n): # iterate over each digit in the number\n        freq[int(digit)] += 1 # increment the frequency of the digit\n    for i in range(10): # iterate over each digit in the range [0,9]\n        if freq[i] > 0 and freq[i] > i: # check if the frequency of the digit is greater than 0 and greater than the digit itself\n            return False\n    return True # if all digits pass the test, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in num_str:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with frequency 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through each digit in the string and check if its frequency is less than or equal to the digit itself\n    for digit in num_str:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # loop through each digit in the integer and count its frequency\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # loop through the dictionary and check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    # if no digit has a frequency greater than the digit itself, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(i) for i in range(10)]\n    max_freq = max(freq)\n\n    for digit in freq:\n        if digit > max_freq:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > n:\n            return False\n        if freq_digit == n:\n            if n % int(digit)!= 0:\n                return False\n\n    # if all digits pass the checks, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n\n    for digit in digits:\n        if digit not in freq:\n            freq[digit] = 0\n        freq[digit] += 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10  # initialize frequency list with 0s\n    for digit in digits:\n        freq[digit] += 1  # increment frequency count for digit\n\n    for digit in freq:\n        if digit > digit:\n            return False  # digit appears more than once\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10  # initialize count list with zeros\n    temp = n\n    while temp > 0:  # iterate through the integer\n        digit = temp % 10  # extract the last digit\n        if digit > 0 and count[digit] > 0:  # check if the digit is already in the count list and has a frequency greater than zero\n            return False\n        count[digit] += 1  # increment the frequency of the digit in the count list\n        temp //= 10  # remove the last digit from the integer\n    return True  # if the loop completes without returning False, the integer is valid"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all the elements in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    if len(lst) == 0:\n        return False\n    if lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # initialize a variable to keep track of whether all elements in the list are equal to the given element\n    are_all_elements_equal = True\n    # loop through each element in the list and compare it to the given element\n    for item in list:\n        if item!= element:\n            are_all_elements_equal = False\n            break\n    # return the result of the check\n    return are_all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to check for the element.\n        elem (object): The element to check against the list.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element as input and returns True if all elements in the list are equal to the given element, False otherwise.\n    '''\n    if len(lst) == 0:\n        return False\n    if lst[0] == element:\n        return True\n    return check_element(lst[1:], element)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*b(?:{2,3})')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        print(\"The text contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The text does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b){2,3}b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?:\\2)*'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=bb{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes in an array a, its length n, and the number of times to repeat the array k.\n    It returns the maximum sum of a contiguous array that is formed by repeating the array k times.\n    '''\n    def repeated_array(a, n, k):\n        # Create the repeated array\n        repeated_array = []\n        for i in range(k):\n            repeated_array.extend(a)\n\n        # Initialize the maximum sum\n        max_sum = sum(a)\n\n        # Compute the maximum sum of the repeated array\n        for i in range(n-k):\n            temp_sum = sum(repeated_array[i:i+k])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n        return max_sum\n\n    # Compute the maximum sum of the original array\n    max_sum = sum(a)\n\n    # Compute the maximum sum of the repeated array\n    repeated_max_sum = repeated_array(a, n, k)\n\n    # Return the maximum sum of the original array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first n elements of the array\n    sum_array = sum(a[:n])\n\n    # Initialize the maximum sum as the sum of the first n elements\n    max_sum = sum_array\n\n    # Calculate the sum of the first n elements of the modified array\n    sum_modified_array = sum(a[:n] * k)\n\n    # Initialize the maximum sum of the modified array as the sum of the first n elements of the modified array\n    max_sum_modified_array = sum_modified_array\n\n    # Loop through the remaining elements of the array\n    for i in range(n, len(a)):\n\n        # Calculate the sum of the next k elements\n        sum_next_k_elements = sum(a[i:i+k])\n\n        # Update the maximum sum of the modified array if the sum is greater\n        if sum_next_k_elements > max_sum_modified_array:\n            max_sum_modified_array = sum_next_k_elements\n\n        # Update the maximum sum if the sum of the modified array and the next k elements is greater\n        if sum_array + sum_modified_array + sum_next_k_elements > max_sum:\n            max_sum = sum_array + sum_modified_array + sum_next_k_elements\n\n        # Calculate the sum of the modified array by removing the first k elements and adding the next k elements\n        sum_modified_array = sum_modified_array - a[i-n] + a[i+k-n]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array and calculate the sum of current subarray\n    for i in range(k):\n        current_sum += a[i]\n        \n    # Update max_sum if current subarray is greater\n    max_sum = max(max_sum, current_sum)\n    \n    # Repeat the process for the remaining k-1 elements in the array\n    for i in range(k, n):\n        current_sum = current_sum - a[i-k] + a[i]\n        max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Repeat the given array k times\n    for i in range(k):\n        current_sum += a\n\n    # Update the maximum sum variable\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    # Repeat the given array from the next element\n    for i in range(k, n):\n        current_sum += a[i] - a[i - k]\n        current_sum -= a[i - k]\n\n        # Update the maximum sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the sum of the original array and the sum of the repeated array\n    original_sum = sum(a)\n    repeated_sum = sum(a*k)\n    \n    # Initialize the maximum sum found so far\n    max_sum = max(original_sum, repeated_sum)\n    \n    # Iterate through the array to calculate the maximum sum of a contiguous array in the modified array\n    for i in range(n):\n        # Add the current element to the sum of the repeated array\n        repeated_sum += a[i]\n        \n        # If the sum of the repeated array is greater than the sum of the original array, update the maximum sum found so far\n        if repeated_sum > original_sum:\n            max_sum = max(max_sum, repeated_sum)\n        \n        # Subtract the current element from the sum of the repeated array\n        repeated_sum -= a[i-n]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the maximum sum of a contiguous array\n    max_sum = max(a)\n\n    # Create a list of k copies of the array\n    arr = [0] * k\n    arr.extend(a)\n\n    # Initialize the maximum sum of a contiguous array formed by repeating the array k times\n    max_subarray_sum = 0\n\n    # Iterate through the list of k copies of the array\n    for i in range(k):\n        # Initialize the current subarray sum to the first element of the array\n        current_subarray_sum = arr[i]\n\n        # Iterate through the rest of the array and add the current element to the current subarray sum\n        for j in range(i + 1, k):\n            current_subarray_sum += arr[j]\n\n        # Update the maximum subarray sum if the current subarray sum is greater\n        max_subarray_sum = max(max_subarray_sum, current_subarray_sum)\n\n    # Return the maximum sum of a contiguous array formed by repeating the array k times\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the maximum sum subarray of length k\n    max_sum_subarray_of_length_k = max_subarray(a, k)\n    # Find the sum of the array a\n    sum_a = sum(a)\n    # Find the sum of the maximum sum subarray of length k\n    sum_max_sum_subarray = sum_max_subarray_of_length_k(max_sum_subarray_of_length_k)\n    # Find the sum of the repeated array\n    sum_repeated_array = sum_a * k\n    # Find the difference between the sum of the repeated array and the sum of the maximum sum subarray\n    difference = abs(sum_repeated_array - sum_max_sum_subarray)\n    # Return the difference\n    return difference\n\n\ndef max_subarray(a, k):\n    # Initialize the maximum sum subarray of length k\n    max_sum_subarray = [0] * k\n    # Initialize the current sum of the maximum sum subarray of length k\n    current_sum = 0\n    # Loop through the array a\n    for i in range(n):\n        # Add the element a[i] to the current sum\n        current_sum += a[i]\n        # Find the index of the maximum element in the current sum\n        max_index = current_sum.index(max(current_sum))\n        # Update the maximum element in the maximum sum subarray\n        max_sum_subarray[max_index] = a[i]\n    # Return the maximum sum subarray of length k\n    return max_sum_subarray\n\n\ndef sum_max_subarray_of_length_k(max_sum_subarray):\n    # Initialize the sum of the maximum sum subarray of length k\n    sum_max_sum_subarray = 0\n    # Loop through the maximum sum subarray of length k\n    for i in range(len(max_sum_subarray)):\n        # Add the maximum element in the maximum sum subarray to the sum of the maximum sum subarray of length k\n        sum_max_sum_subarray += max_sum_subarray[i]\n    # Return the sum of the maximum sum subarray of length k\n    return sum_max_sum_subarray"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Compute the sum of the given array\n    total_sum = sum(a)\n\n    # Compute the repeated sum of the given array\n    repeated_sum = total_sum * k\n\n    # Initialize the maximum sum and its index\n    max_sum = repeated_sum\n    max_sum_idx = 0\n\n    # Initialize the current sum and its index\n    current_sum = 0\n    current_sum_idx = 0\n\n    # Loop through the array and update the maximum sum and its index\n    for i in range(n):\n        current_sum += a[i]\n        current_sum_idx = i\n\n        # Check if the current sum is larger than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_idx = current_sum_idx\n\n        # Check if the current sum is equal to the repeated sum\n        if current_sum == repeated_sum:\n            # Compute the starting index and end index of the subarray\n            start_idx = i - k + 1\n            end_idx = i\n\n            # Compute the sum of the subarray\n            subarray_sum = sum(a[start_idx:end_idx + 1])\n\n            # Update the maximum sum and its index\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_sum_idx = i\n\n    return max_sum, max_sum_idx"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a list of arrays with the given array repeated k times\n    modified_arrays = [a + a * i for i in range(k)]\n    \n    # Initialize a variable to store the maximum sum of a contiguous array in the modified array\n    max_sum = float('-inf')\n    \n    # Loop through the modified arrays and find the maximum sum of a contiguous array\n    for arr in modified_arrays:\n        current_sum = sum(arr)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        a = [x * i for x in a]\n        max_sum = max(max_sum, max(a))\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2,n+1,2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        sum += i ** 2\n        i += 2\n        \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**2\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the even natural numbers up to n\n    for i in range(2, n + 1, 2):\n        # add the square of the even natural number to the total\n        total += i ** 2\n\n    # return the total\n    return total"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # initialize a dictionary to store the length of each list\n    lengths = {}\n\n    # loop through each list in the list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is not in the dictionary, set its length to 1\n            if element not in lengths:\n                lengths[element] = 1\n            # if the element is already in the dictionary, increment its length\n            else:\n                lengths[element] += 1\n\n    # find the maximum length in the dictionary\n    max_length = max(lengths.values())\n\n    # create a new list to store the elements of each list with maximum length\n    result = []\n\n    # loop through each element in the dictionary\n    for element, length in lengths.items():\n        # if the length is equal to the maximum length, add the element to the result list\n        if length == max_length:\n            result.append(element)\n\n    # return the result list\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(max([len(j) for j in list1[i]]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length as the first element of the first list\n    max_length = len(list1[0])\n\n    # Iterate through the rest of the lists\n    for lst in list1[1:]:\n        # Check if the current list has a longer length than the maximum length\n        if len(lst) > max_length:\n            # Update the maximum length if necessary\n            max_length = len(lst)\n\n    # Return the maximum length as a list\n    return [max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_length = max(lengths)\n    return [sublist for sublist in list1 if len(sublist) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > max(max_length_list, default=0):\n            max_length_list = [len(i)]\n        elif len(i) == max(max_length_list, default=0):\n            max_length_list.append(len(i))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if n is 1 or k is 1, then there is only 1 way to paint the fence\n    if n == 1 or k == 1:\n        return 1\n\n    # If n is greater than 1 and k is 1, then there is only 1 way to paint the fence\n    if n > 1 and k == 1:\n        return 1\n\n    # If n is greater than 1 and k is greater than 1, then there are n ways to paint the fence\n    # If the last two posts have the same color, there are (n-2) ways to paint the fence\n    if n > 1 and k > 1:\n        return n + count_no_of_ways(n-2, k)\n\n    # If n is 0 and k is greater than 1, then there are k ways to paint the fence\n    if n == 0 and k > 1:\n        return k + count_no_of_ways(1, k-1)\n\n    # If n is greater than 0 and k is 0, then there is only 1 way to paint the fence\n    if n > 0 and k == 0:\n        return 1"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if n is 0, return 1\n    if n == 0:\n        return 1\n    # base case: if k is 0, return 0\n    elif k == 0:\n        return 0\n    # base case: if n is greater than k, return 0\n    elif n > k:\n        return 0\n    # recursive case: count the number of ways for n-1 posts and k colors\n    # using the same color as the last post\n    no_of_ways_same_color = count_no_of_ways(n-1, k)\n    # count the number of ways for n-1 posts and k-1 colors\n    # using the same color as the last post\n    no_of_ways_different_color = count_no_of_ways(n-1, k-1)\n    # count the number of ways for n-2 posts and k colors\n    # using the same color as the last post\n    no_of_ways_same_color_last_post = count_no_of_ways(n-2, k)\n    # count the number of ways for n-2 posts and k-1 colors\n    # using the same color as the last post\n    no_of_ways_different_color_last_post = count_no_of_ways(n-2, k-1)\n    # calculate the number of ways for n-1 posts and k colors\n    # using different colors from the last post\n    no_of_ways_different_colors = 0\n    # iterate through the last n-1 posts and calculate the number of ways for\n    # each combination of colors\n    for i in range(n-1):\n        # for each pair of colors, count the number of ways for n-i-1 posts\n        # and k-1 colors using each color as the last post\n        no_of_ways_different_colors += count_no_of_ways(n-i-1, k-1)\n    # return the total number of ways for n posts and k colors\n    return no_of_ways_same_color + no_of_ways_different_color + \\\n           no_of_ways_same_color_last_post + no_of_ways_different_color_last_post + \\\n           no_of_ways_different_colors"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Helper function to check if two colors are adjacent\n    def adjacent(color1, color2):\n        return abs(color1 - color2) == 1\n    \n    # Counting number of ways to paint the fence with n posts and k colors\n    count = 0\n    for i in range(1, k+1):\n        count += n // i\n    \n    # Counting number of ways to paint the fence with n posts and k colors using a boolean array\n    #boolean_array = [False] * k\n    #for i in range(1, n+1):\n    #    for color in range(1, k+1):\n    #        if not adjacent(color, boolean_array[color-1]):\n    #            boolean_array[color] = not boolean_array[color-1]\n    #        count += boolean_array[color]\n    #        count += n // color\n    \n    # Counting number of ways to paint the fence with n posts and k colors using boolean array\n    boolean_array = [False] * k\n    for i in range(1, k+1):\n        if not adjacent(i, boolean_array[i-1]):\n            boolean_array[i] = not boolean_array[i-1]\n    count = 0\n    for i in range(1, n+1):\n        count += boolean_array[i]\n        count += n // i\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Function to check if two adjacent posts have the same color\n    def is_same_color(colors, left, right):\n        return colors[left] == colors[right]\n    \n    # Initialize the dp array with zeros\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    # Fill the dp array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if is_same_color(colors, i-1, i):\n                dp[i] += dp[i-1]\n            else:\n                break\n    \n    # Return the count of ways to paint the fence\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        total = 0\n        for i in range(1, n+1):\n            total += count_no_of_ways(n-i, k)\n        return total"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if n == k: \n        return 1\n    if n == 2: \n        return 4\n    if k == 2: \n        return 1\n\n    ways1 = count_no_of_ways(n-1, k-1)\n    ways2 = count_no_of_ways(n-1, k)\n    ways3 = count_no_of_ways(n-2, k)\n\n    return ways1 + ways2 - ways3\n\n\nNow, let's test the function with some sample inputs:\n\nprint(count_no_of_ways(3, 4))\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(index, color, count):\n        if count == 2 * n:\n            result[color] += 1\n            return\n\n        if index == n:\n            return\n\n        for i in range(1, k + 1):\n            if i!= color:\n                backtrack(index + 1, i, count + 1)\n\n    result = [0] * k\n    backtrack(0, 0, 0)\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def subset_sum(arr, target):\n        \"\"\"\n        Returns True if target can be formed by taking elements from arr\n        \"\"\"\n        total = 0\n        for num in arr:\n            total += num\n            if total > target:\n                return False\n        return True\n\n    def two_adjacent_same_colors(arr):\n        \"\"\"\n        Returns True if there are at most 2 adjacent elements with the same color in arr.\n        \"\"\"\n        same_color = arr[0]\n        count = 0\n        for num in arr[1:]:\n            if num == same_color:\n                count += 1\n            else:\n                if count > 0:\n                    return False\n                else:\n                    same_color = num\n                    count = 1\n        return True\n\n    def count_ways(n, k):\n        \"\"\"\n        Returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        \"\"\"\n        if n <= k:\n            return 1\n        if n % 2 == 0:\n            return 0\n\n        if subset_sum([i for i in range(2, k+1)], n) and two_adjacent_same_colors([i for i in range(1, n//2+1)]):\n            return count_ways(n//2, k)\n        else:\n            return 0\n\n    return count_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize dp array with all zeros\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Fill first row and first column with 1\n    for j in range(1, k+1):\n        dp[0][j] = 1\n    for i in range(2, n+1):\n        dp[i][0] = 0\n    \n    # Fill remaining cells with recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j <= k:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            else:\n                dp[i][j] = 0\n    \n    # Return number of ways\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if fence has only 1 post or k colors, then there is only 1 way\n    if n == 1 or k == 1:\n        return 1\n    # base case: if fence has n posts and k colors, then there is only 1 way\n    elif n == k:\n        return 1\n    # recursive case: there are 2 ways to paint the fence\n    else:\n        # if n is less than or equal to k, there are 2 ways to paint the fence\n        if n <= k:\n            return 2 * count_no_of_ways(n-1, k-1)\n        # if n is greater than k, there are 2 ways to paint the fence followed by n-k colors\n        else:\n            return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n    \n    # Round down to the nearest integer\n    quotient = quotient - (quotient % 1)\n    \n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient of n and m\n    quotient = n // m\n\n    # if the quotient is not an integer, round it down to the nearest integer\n    if quotient * m!= n:\n        quotient -= 1\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Check if m is zero, return None if so\n    if m == 0:\n        return None\n    # Check if n is zero, return n if so\n    elif n == 0:\n        return 0\n    # Check if n is negative, return None if so\n    elif n < 0:\n        return None\n    # Find the greatest common divisor (GCD) of n and m\n    gcd = 1\n    for i in range(1, m+1):\n        if (n % i == 0) and (m % i == 0):\n            gcd = i\n    # Find the quotient by dividing n and m by the GCD\n    quotient = n // gcd\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    # Calculate the quotient of n and m\n    quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer)\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # using the Pythagorean theorem to find the c of the right triangle\n    c = math.sqrt(w**2 + h**2)\n\n    # calculating the other side of the triangle\n    other_side = math.sqrt(w**2 + c**2)\n\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculating the square root of the sum of the squares of the lengths\n    square_root = math.sqrt(w ** 2 + h ** 2)\n    # calculating the square root of the sum of the squares of the lengths of the other two sides\n    other_square_root = math.sqrt((w ** 2 + square_root ** 2) / 2)\n    # finding the third side of the right angled triangle using the square root\n    third_side = other_square_root * square_root\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt((w/2)**2 + (h/2)**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h / math.sin(math.radians(60))\n    b = w / math.sin(math.radians(60))\n    c = math.sqrt(a ** 2 + b ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w*w + h*h)\n    return a"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for val in listval:\n        if max_value is None or val > max_value:\n            max_value = val\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Use a loop to iterate over all the divisors of the number\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    \n    # Calculate the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array \n    arr.sort() \n  \n    # Iterate through the array \n    for i in range(n): \n        # Count inversions \n        left, right = i, n - 1 \n        while left < right: \n            if arr[left] > arr[right]: \n                inv_count += right - left \n                left += 1 \n            else: \n                right -= 1 \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n                j = n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Sort the array\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n        # Count inversions\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                count += (n-j)\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # Count the inversions in the sorted array\n    for i in range(n):\n        for j in range(i+1, n):\n            inv_count += arr[i] > arr[j]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize count variable to 0\n    inv_count = 0\n\n    # Traverse the sorted array and calculate the inversions\n    for i in range(1, len(arr)):\n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]:\n            j -= 1\n        arr[j + 1], arr[i] = arr[i], arr[j + 1]\n        inv_count += i - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the count of inversions \n    in the array.\n    \"\"\"\n    # Helper function to merge two subarrays of the array\n    def merge(arr, low, mid, high):\n        i = low\n        j = mid + 1\n        k = low\n\n        # Initialize two pointers i and j to the first element of arr[]\n        # respectively. Initialize a pointer k to the first element of arr[]\n        # itself. Initialize two pointers l and r to the last element of arr[]\n        # respectively. Initialize the count of inversions to 0.\n        inversions = 0\n        l = low\n        r = high\n\n        # Merge the two subarrays into a single sorted subarray using the\n        # two pointers and the two pointers for the last element of each\n        # subarray.\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                if l <= i - 1 and arr[l] >= arr[i]:\n                    inversions += r - l + 1\n                    i += 1\n                else:\n                    arr[k] = arr[i]\n                    k += 1\n                    i += 1\n            else:\n                if l <= j - 1 and arr[l] >= arr[j]:\n                    inversions += r - l + 1\n                    j += 1\n                else:\n                    arr[k] = arr[j]\n                    k += 1\n                    j += 1\n\n        # Copy any remaining elements of the subarray one by one into the\n        # sorted subarray.\n        while i <= mid:\n            if l <= i - 1 and arr[l] >= arr[i]:\n                inversions += r - l + 1\n                i += 1\n            else:\n                arr[k] = arr[i]\n                k += 1\n                i += 1\n\n        while j <= high:\n            if l <= j - 1 and arr[l] >= arr[j]:\n                inversions += r - l + 1\n                j += 1\n            else:\n                arr[k] = arr[j]\n                k += 1\n                j += 1\n\n        # Copy the sorted subarray into arr[].\n        for i in range(low, high + 1):\n            arr[i] = arr[low + i - low]\n\n        return inversions\n\n    # Helper function to divide the array into two equal halves\n    def divide(arr, low, high):\n        # Find the middle index\n        mid = (low + high) // 2\n\n        # Recursively divide the array into two halves\n        get_Inv_Count(arr[:mid])\n        get_Inv_Count(arr[mid+1:])\n\n        # Merge the two halves and count the inversions\n        return merge(arr, low, mid, high)\n\n    # Recursively divide the array into halves and count the inversions\n    return divide(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # counting inversions using two pointers \n    i = 0 # left pointer \n    j = n-1 # right pointer \n    inversions = 0 # variable to store count of inversions \n    \n    while i < j: \n        # if current element is smaller than or equal to the right pointer, increment it \n        while i < j and arr[i] <= arr[j]: \n            i += 1 \n        # if current element is greater than the left pointer, decrement it \n        while i < j and arr[i] > arr[j]: \n            j -= 1 \n        # if the inversions count is 0, then swap the elements at the pointers \n        if i < j: \n            arr[i], arr[j] = arr[j], arr[i] \n            inversions += (j-i)\n            \n    return inversions "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    Flatten a nested list structure by recursively calling itself on each element.\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return [list1]\n    else:\n        flattened = []\n        for item in list1:\n            if isinstance(item, list):\n                flattened.extend(flatten_list(item))\n            else:\n                flattened.append(item)\n        return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    # Loop through each element in the list\n    for item in list1:\n        # If the element is a list, recursively call the flatten_list function on it\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        # Otherwise, add the element to the flattened list\n        else:\n            flattened_list.append(item)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param lst: a nested list\n    :return: a flat list\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    Args:\n        lst (list): A nested list structure.\n\n    Returns:\n        list: A flattened list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize an empty dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    \n    # iterate through each item in the list of tuples\n    for item in stdata:\n        # if the item is a string, convert it to lowercase\n        if isinstance(item, str):\n            item = item.lower()\n        \n        # if the item is a dictionary, add its keys and their values to the count dictionary\n        if isinstance(item, dict):\n            for key, value in item.items():\n                count_dict[key] += value\n                \n        # if the item is a list, add all the items to the count dictionary\n        elif isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, str):\n                    count_dict[subitem.lower()] += 1\n                elif isinstance(subitem, int):\n                    count_dict[subitem] += 1\n                \n    # initialize an empty list to store the maximum aggregate\n    max_agg = []\n    \n    # iterate through each item in the count dictionary\n    for key, value in count_dict.items():\n        # if the count of the item is greater than or equal to 2, add it to the maximum aggregate\n        if value >= 2:\n            max_agg.append(key)\n            \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_aggr_dict = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for day, amount in stdata:\n        # Update the maximum aggregate for the current day\n        max_aggr_dict[day] = max(max_aggr_dict[day], amount)\n    \n    # Find the maximum aggregate in the dictionary\n    max_aggr = max(max_aggr_dict.values())\n    \n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    item_counts = defaultdict(int)\n\n    # Iterate over the list of tuples and increment the count of each item\n    for item, count in stdata:\n        item_counts[item] += count\n\n    # Find the maximum count of any item and multiply it by the maximum item\n    max_count = max(item_counts.values())\n    max_item = max(item_counts, key=item_counts.get)\n    max_agg = max_count * max_item\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the counts of each item\n    counts = defaultdict(int)\n    # Iterate through the list of tuples\n    for item, count in stdata:\n        # Add the count of the item to the defaultdict\n        counts[item] += count\n    # Find the maximum aggregate value\n    max_aggregate = max(counts.values())\n    # Create a list of tuples with the items and their counts\n    item_count = [(item, counts[item]) for item in counts]\n    # Sort the list of tuples based on the counts in descending order\n    item_count.sort(key=lambda x: x[1], reverse=True)\n    # Return the list of tuples with the maximum aggregate value\n    return item_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for tup in stdata:\n        for item, price in tup:\n            max_agg[item] += price\n    \n    max_agg_lst = []\n    for k,v in max_agg.items():\n        max_agg_lst.append((k,v))\n    \n    max_agg_lst.sort(key=lambda x: x[1], reverse=True)\n    max_agg_lst = [x for x in max_agg_lst if x[1] == max_agg_lst[0][1]]\n    \n    return max_agg_lst[0][0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Initialize an empty dictionary to store the aggregate counts\n    agg_counts = defaultdict(int)\n    max_aggregate = 0\n    \n    # Iterate through the list of tuples\n    for name, price in stdata:\n        # Calculate the aggregate count\n        agg_counts[price] += 1\n        \n        # Update the maximum aggregate if necessary\n        if price > max_aggregate:\n            max_aggregate = price\n            \n    # Return the maximum aggregate count\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each department\n    max_aggs = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for dept, amount in stdata:\n        # Update the max aggregate for the department\n        max_aggs[dept] = max(max_aggs[dept], amount)\n    \n    # Calculate the maximum aggregate for each department\n    max_aggs_list = []\n    for dept, agg in max_aggs.items():\n        # Store the maximum aggregate for each department in a list\n        max_aggs_list.append((dept, agg))\n    \n    # Sort the list of tuples in descending order of maximum aggregate\n    max_aggs_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the maximum aggregate for each department\n    return max_aggs_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = defaultdict(int)\n    for student, marks in stdata:\n        aggregate_list[student] += marks\n    max_marks = max(aggregate_list.values())\n    result = {student:marks for student, marks in stdata if marks == max_marks}\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # loop through the list of tuples\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # find the maximum count of each item\n    max_counts = {}\n    for item, count in item_count.items():\n        max_counts[item] = max(count, max_counts.get(item, 0))\n\n    # find the maximum aggregate by multiplying the maximum count by the price of the item\n    max_aggregate = 0\n    for item, count in max_counts.items():\n        max_aggregate = max(max_aggregate, count * price)\n\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if i == 0:\n            continue\n        temp = i\n        for j in range(2**n):\n            if j == 0:\n                continue\n            if i ^ j == 0:\n                break\n            temp = (temp << 1) | (j & 1)\n        if sum(i >> j & 1 for j in range(n)) == sum(temp >> j & 1 for j in range(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    total = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:]\n        total += int(binary_seq[:n])\n        total += int(binary_seq[-n:])\n        if total == 2**n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        binary_num = bin(i)[2:].zfill(n)\n        first_half = int(binary_num[:n])\n        last_half = int(binary_num[n:])\n        if first_half == last_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n, -1):\n        if (2**n - i) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count and sum variables\n    count = 0\n    sum_first = 0\n    sum_last = 0\n\n    # Iterate from 0 to 2^n-1 and check if the sum of first n bits is same as the sum of last n bits\n    for num in range(2**n):\n        # Extract first and last n bits of the binary number\n        first = bin(num)[2:].zfill(n)\n        last = bin(num)[n-2:].zfill(n)\n\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(first, 2) + int(last, 2) == num:\n            count += 1\n\n    # Return the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(n+1)-1, -1, -1):\n        if sum(int(x) for x in bin(i)[2:]) == n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:].zfill(n)\n        if sum(int(x) for x in temp[0:n//2]) == sum(int(x) for x in temp[n//2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        first_half = binary[:n]\n        last_half = binary[-n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    bits_sum = 0\n\n    # Loop through all possible sequences\n    for i in range(2**n):\n        # Extract the first n bits and last n bits\n        first_n = i & ((1 << n) - 1)\n        last_n = i >> n\n\n        # If the sum of first n bits is same as sum of last n bits, increment count\n        if (first_n + last_n) % 2 == 0:\n            count += 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        curr_seq = bin(i)[2:].zfill(n)\n        prev_sum = sum(int(bit) for bit in curr_seq[:n])\n        curr_sum = sum(int(bit) for bit in curr_seq[-n:])\n        if prev_sum == curr_sum:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, dict_depth(value))\n            current_depth -= 1\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, dict_depth(item))\n                    current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d.keys():\n        new_depth = 1 + dict_depth(d[key]) if isinstance(d[key], dict) else 0\n        max_depth = max(max_depth, new_depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [(d, 1)]\n    while stack:\n        current_dict, current_level = stack.pop()\n        depth = max(depth, current_level)\n        for key, value in current_dict.items():\n            if isinstance(value, dict):\n                stack.append((value, current_level + 1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            count += 1 + dict_depth(v)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Initialize variables to store the element and its index\n    element = None\n    index_of_element = None\n    \n    # Loop through the rotations and find the element at the given index\n    for i in range(rotations):\n        # Find the element in the range and its index\n        for j in range(len(ranges)):\n            if index >= ranges[j][0] and index <= ranges[j][1]:\n                element = arr[j]\n                index_of_element = j\n                \n        # Find the element at the given index after rotation\n        index = (index - ranges[index_of_element][0]) % (ranges[index_of_element][1] - ranges[index_of_element][0] + 1) + ranges[index_of_element][0]\n        \n    # Return the found element at the given index\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after the number of rotations.\n\n    :param arr: list, input array\n    :param ranges: list, list of ranges of elements in the array\n    :param rotations: int, number of rotations required to find the element\n    :param index: int, index of the element to be found\n    :return: int, element at the given index after the rotations\n    \"\"\"\n\n    # Calculate the number of times each element needs to be rotated to reach the given index\n    num_rotations = [sum(1 for _ in range(i + 1) if index == arr[j]) for i in ranges for j in range(len(arr))]\n\n    # Calculate the rotation by which each element needs to be shifted to reach the given index\n    shift_by = [num_rotations[j] - num_rotations[i] for i in ranges for j in range(len(arr))]\n\n    # Iterate through all possible rotations and calculate the element at the given index\n    for rotation in range(rotations + 1):\n        for i in range(len(arr)):\n            shift = shift_by[i] - rotation\n            if 0 <= shift < len(arr[i]):\n                arr[i].insert(shift, arr[i].pop(index))\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, and a number of rotations\n    and returns the element at the given index after rotations.\n\n    Args:\n    arr (list): The given array.\n    ranges (list): A list of ranges.\n    rotations (int): The number of rotations required.\n    index (int): The index of the element to be found after rotations.\n\n    Returns:\n    The element at the given index after rotations.\n    \"\"\"\n    arr = arr[:]  # make a copy of the array to avoid modifying the original array\n    \n    # perform the required rotations\n    for i in range(rotations):\n        left = 0\n        right = len(arr) - 1\n        \n        while left < right:\n            # perform the merge step\n            arr[left], arr[right] = arr[right], arr[left]\n            \n            # find the new position of the element\n            mid = left + (right - left) // 2\n            if mid > 0 and arr[mid] >= arr[mid - 1]:\n                left = mid\n            else:\n                right = mid\n        \n        # find the position of the element after the rotations\n        pos = 0\n        while pos < len(arr) and arr[pos] < index:\n            pos += 1\n            \n    # find the element at the given index\n    result = None\n    for i, val in enumerate(arr):\n        if val == index:\n            result = arr[i]\n            break\n        \n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after number of rotations.\n\n    Args:\n        arr: list of integers\n        ranges: list of tuples of integers\n        rotations: list of integers\n        index: integer\n\n    Returns:\n        int: The element at the given index after number of rotations.\n    \"\"\"\n    element = arr[index]\n    for i in range(len(ranges)):\n        if element in ranges[i]:\n            return element\n        elif element < ranges[i][0]:\n            if (i + 1) == len(ranges):\n                return element\n            else:\n                return find_Element(arr, ranges, rotations, index - rotations[i] - 1)\n        else:\n            if rotations[i] == 0:\n                break\n            index += rotations[i]\n            element = arr[index]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #find the element to be rotated\n    element = arr[index]\n\n    #rotate the array\n    for i in range(rotations):\n        if i % 2 == 0:\n            #even rotations\n            arr = arr[-2:] + arr[:-2]\n        else:\n            #odd rotations\n            arr = arr[1:] + arr[0]\n\n    #find the index of the element after rotations\n    if index < rotations:\n        #element to be rotated is in the first half of the array\n        new_index = index + rotations\n    else:\n        #element to be rotated is in the second half of the array\n        new_index = index - rotations\n\n    #find the element at the new index\n    rotated_element = arr[new_index]\n\n    #return the element\n    return rotated_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr: list of integers\n    ranges: list of integers denoting the range of values for each integer in arr\n    rotations: integer denoting the number of rotations\n    index: integer denoting the index of the element to be found\n\n    Returns:\n    The integer value of the element at the given index after rotations.\n    '''\n\n    # Get the element at the given index\n    element = arr[index]\n\n    # Initialize the total count of rotations\n    total_rotations = 0\n\n    # Initialize the current index to the given index\n    current_index = index\n\n    # Perform the rotations and update the total rotations count\n    for _ in range(rotations):\n        current_index = (current_index + total_rotations) % len(arr)\n        arr[current_index], arr[index] = arr[index], arr[current_index]\n        total_rotations += 1\n\n    # Perform the reverse rotations to get the element at the final index\n    for _ in range(total_rotations // 2):\n        current_index = (current_index - 1) % len(arr)\n        arr[current_index], arr[index] = arr[index], arr[current_index]\n\n    # Return the final element value\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a certain number of rotations.\n    \"\"\"\n    # Find the number of rotations to perform\n    num_rotations = sum(ranges)\n\n    # Calculate the rotation indices\n    rot_indices = [(index + i) % len(arr) for i in range(num_rotations)]\n\n    # Find the element at the final index\n    final_index = (index + num_rotations) % len(arr)\n    return arr[rot_indices[0]][final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(ranges)):\n        if count < rotations:\n            count += 1\n            continue\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            return arr[index]\n        index -= ranges[i][1] - ranges[i][0] + 1\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    \n    for i in range(index-1, rotations):\n        arr[i] = arr[i+rotations]\n    \n    return arr[rotations-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Function to find element at given index after rotations\n    def find_Element_after_rotations(arr,index,rotations):\n        if rotations == 0:\n            return arr[index]\n        elif rotations % 2 == 0:\n            return find_Element_after_rotations(arr,index-1,rotations//2)\n        else:\n            return find_Element_after_rotations(arr,index+1,rotations//2)\n    \n    # Find element at given index\n    element = find_Element_after_rotations(arr,index,rotations)\n    \n    # Find the range of the element\n    for i in range(len(ranges)):\n        if element == arr[ranges[i][0]]:\n            return ranges[i][1]\n    return -1"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = []\n    for word in words:\n        match = re.match(pattern, word)\n        if match:\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]+'\n    p_words = re.findall(pattern, words)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word.lower(), word.capitalize()\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words = [word for word in words if re.match(pattern, word)]\n    return words[0], words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p') # regex pattern to match words starting with 'p'\n    for word in words:\n        if p_pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None, None # returns None if no words starting with 'p' are found"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with letter 'p'\n    pattern = r'p\\w+'\n\n    # use the re.findall() function to find all words matching the pattern in the list of words\n    matches = re.findall(pattern,''.join(words))\n\n    # check if there are at least two matches\n    if len(matches) < 2:\n        return None\n\n    # return the two matches\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p')\n    p_matches = list(filter(p_pattern.match, words))\n\n    if len(p_matches) >= 2:\n        return p_matches[0], p_matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.search(r'^p\\w+', word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Use the re.findall() function to find all matches in the list of words\n    matches = re.findall(pattern, words)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Sort the matches in ascending order of the first word\n    matches.sort(key=lambda x: x[0])\n\n    # Return the first two matches\n    return matches[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize the array to store the sum of increasing subsequences\n    sum_array = [0] * (n + 1)\n    \n    # initialize the maximum sum of increasing subsequences\n    max_sum = float('-inf')\n    \n    # initialize the maximum sum of increasing subsequences for prefix of length 1\n    max_sum_prefix = a[0]\n    \n    # iterate through the array from index+1 to n\n    for i in range(index + 1, n + 1):\n        # check if the current element is less than the current element of the prefix\n        if a[i] < max_sum_prefix:\n            # update the maximum sum of increasing subsequences for prefix of length i+1\n            max_sum_prefix = a[i]\n        \n        # update the sum of increasing subsequences for prefix of length i+1\n        sum_array[i] = max_sum_prefix\n        \n        # check if the current element is less than the maximum sum of increasing subsequences for prefix of length i\n        if a[i] < max_sum:\n            # update the maximum sum of increasing subsequences\n            max_sum = a[i]\n    \n    # return the maximum sum of increasing subsequences for the prefix of length k\n    return sum_array[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    \n    # Iterate over the array\n    for i in range(index, n):\n        # Check if the current element is greater than kth element\n        if a[i] > k:\n            # Update the maximum sum if the current sum is greater than the maximum sum so far\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                start = i\n            # Remove the current element from the sum\n            curr_sum -= a[i]\n            # Add the next element to the sum\n            curr_sum += a[i+1]\n        else:\n            # Add the current element to the sum\n            curr_sum += a[i]\n\n    # Check if the last element is greater than kth element\n    if a[n-1] > k:\n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = n-1\n        # Remove the last element from the sum\n        curr_sum -= a[n-1]\n\n    # Return the maximum sum and the starting index of the increasing subsequence\n    return max_sum, start"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = [0] * n\n    max_sum = float('-inf')\n    max_ending_here = 0\n    start = 0\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is greater than the kth element, update the prefix sum\n        if i > k:\n            prefix_sum[i] = prefix_sum[i - 1] + a[i]\n        # If the current element is less than or equal to the kth element, update the prefix sum by excluding the kth element\n        else:\n            prefix_sum[i] = prefix_sum[i - 1]\n\n        # If the current element is greater than the kth element and its sum is greater than the current max sum, update the max sum\n        if a[i] > a[k] and prefix_sum[i] > max_sum:\n            max_sum = prefix_sum[i]\n            max_ending_here = a[i]\n            start = i\n\n    # Return the maximum sum and the ending element of the max sum increasing subsequence\n    return max_sum, max_ending_here"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        if i < k:\n            dp[i] = a[i]\n        else:\n            for j in range(i - k + 1):\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    return max(dp[i] for i in range(index + 1, n))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    \n    if index == k:\n        return a[k]\n    \n    dp = [0] * (n+1)\n    dp[index] = a[index]\n    \n    for i in range(index, n):\n        if i == k:\n            continue\n        \n        if i < k:\n            if dp[i] < dp[k-1]:\n                dp[i+1] = dp[i] + a[i]\n        else:\n            dp[i+1] = max(dp[i+1], dp[i] + a[i])\n            \n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables to store the maximum sum of increasing subsequence found so far and the indices of the prefix elements that led to it\n    max_sum = float('-inf')\n    max_sum_index = -1\n    max_sum_prefix = []\n\n    # Initialize variables to store the maximum sum of increasing subsequence ending at index i and excluding kth element\n    max_sum_excluding_k = float('-inf')\n    max_sum_excluding_k_index = -1\n\n    # Iterate through the array from the first element to the i-th element\n    for i in range(n):\n        # Update the maximum sum of increasing subsequence ending at index i and excluding the kth element\n        if i == index:\n            max_sum_excluding_k = max(max_sum_excluding_k, max_sum)\n            max_sum_excluding_k_index = max_sum_index\n        else:\n            # Update the maximum sum of increasing subsequence ending at index i and excluding the kth element\n            max_sum_excluding_k = max(max_sum_excluding_k, a[i] + max_sum_excluding_k, a[i] + max_sum_excluding_k - k)\n            max_sum_excluding_k_index = i\n\n        # Update the maximum sum of increasing subsequence from prefix until index i and including the kth element\n        if i == index:\n            max_sum_prefix.append(a[i])\n        else:\n            max_sum_prefix.append(a[i] + max_sum_prefix[-1])\n\n        # Update the maximum sum of increasing subsequence from prefix until index i and excluding the kth element\n        if i == index - 1 or a[i] + max_sum_prefix[-1] > a[index] + max_sum_prefix[-1]:\n            max_sum_prefix.append(a[i] + max_sum_prefix[-1])\n        else:\n            max_sum_prefix.append(a[index])\n\n        # Update the maximum sum of increasing subsequence found so far\n        if max_sum_prefix[-1] > max_sum:\n            max_sum = max_sum_prefix[-1]\n            max_sum_index = i\n\n    # Return the maximum sum of increasing subsequence from prefix until the kth element\n    return max_sum_prefix[-1] + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize variables\n    prefix_sum = [0] * n\n    max_sum = float('-inf')\n    \n    # Calculate prefix sum\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + a[i]\n    \n    # Iterate over increasing subsequences\n    for i in range(index, n):\n        for j in range(i, min(i+k, n)):\n            # Check if the current element is greater than the previous element\n            if a[j] > a[i]:\n                # Calculate the maximum sum of increasing subsequence from prefix until j\n                max_sum = max(max_sum, a[i] + prefix_sum[j])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    if k == index + 1:\n        return a[k]\n    \n    max_sum = max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k - 1) + a[k])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if index == 0:\n        return a[0] + max_sum_increasing_subseq(a, n, index + 1, k)\n    if index > 0 and a[index] > a[index - 1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    max_sum = float('-inf')\n    max_ending_here = 0\n\n    for i in range(index, n):\n        if a[i] < a[k] and i < k:\n            continue\n        elif a[i] <= a[k]:\n            max_ending_here += a[i]\n        else:\n            temp = max_sum\n            max_sum = max(max_sum_increasing_subseq(a, n, index, i) + max_ending_here, max_ending_here)\n            max_ending_here = temp\n\n    return max_sum_increasing_subseq(a, n, index, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple of integers and returns a colon of that tuple.\n    The colon is defined as the number of elements in the tuple that are less than or equal to m.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    count = 0\n    for i in range(len(new_tuplex)):\n        if new_tuplex[i] <= m:\n            count += 1\n        if count == n:\n            break\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(new_tuplex)\n    \n    # Check if the length of the colon is less than or equal to m\n    while length > m:\n        # Get the middle index of the colon\n        middle_index = length // 2\n        \n        # Remove the middle element from the colon\n        new_tuplex = new_tuplex[:middle_index] + new_tuplex[middle_index+1:]\n        \n        # Decrease the length of the colon\n        length = len(new_tuplex)\n    \n    # Check if the length of the colon is greater than or equal to n\n    while length < n:\n        # Append an element to the end of the colon\n        new_tuplex += (0,)\n        \n        # Increase the length of the colon\n        length = len(new_tuplex)\n    \n    # Return the colon as a tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 1 or n < 1:\n        return \"Invalid input: m and n should be positive integers.\"\n    if len(tuplex) < m:\n        return \"Invalid input: Length of tuple should be at least m.\"\n    \n    colon = []\n    for i in range(m):\n        index = (i+n-1) % len(tuplex)\n        colon.append(deepcopy(tuplex[index]))\n        \n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n    for i in range(m,n):\n        colon.append(tuplex[i-m])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m:n],) + new_tuplex[n:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple.\n        m (int): The number of rows of the colon.\n        n (int): The number of columns of the colon.\n\n    Returns:\n        list: A list of lists of length m. Each inner list contains n elements of tuplex.\n    '''\n\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if j < len(tuplex):\n                row.append(tuplex[j])\n            else:\n                row.append(None)\n        colon.append(row)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = tuple([new_tuplex[i:i+m] for i in range(0, len(new_tuplex), m)])\n    new_tuplex = tuple(tuple(row) for row in new_tuplex)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex, m):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m >= n:\n        return\n    if len(tuplex) == 1:\n        return (tuplex[0],)\n    first_elem = tuplex[0]\n    rest = deepcopy(tuplex[1:])\n    colon_tuplex(rest, m, n)\n    new_elem = first_elem\n    if m % 2 == 0:\n        new_elem += m//2\n    else:\n        new_elem += (m//2)+1\n    if n % 2 == 0:\n        new_elem += (n//2)\n    else:\n        new_elem += (n//2)+1\n    return (new_elem,) + colon_tuplex(rest, m+1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): A tuple.\n    m (int): The number of elements in the colon.\n    n (int): The number of rows in the colon.\n\n    Returns:\n    tuple: A tuple containing the elements of the colon.\n    '''\n\n    if len(tuplex) < (m * n):\n        raise ValueError('The length of the tuple is less than the expected size.')\n\n    new_tuplex = deepcopy(tuplex)\n\n    i = 0\n    while i < len(new_tuplex):\n        j = 0\n        while j < n:\n            new_tuplex[i:i+m] = tuple([new_tuplex[i+m] for _ in range(m)])\n            i += m\n            j += 1\n        i += m\n\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    max_products = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[N-1-i] * nums2[N-1-i]\n        if product1 > max_product:\n            max_product = product1\n            max_products = [product1, product2]\n        if product2 > max_product:\n            max_product = product2\n            max_products = [product2, product1]\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize two variables to store the largest products\n    largest_product1 = nums1[0]\n    largest_product2 = nums2[0]\n\n    # iterate over the indices from 0 to N-1\n    for i in range(N):\n        # calculate the product of the two largest factors\n        product1 = largest_product1 * nums1[i]\n        product2 = largest_product2 * nums2[i]\n\n        # update the largest products if the product is larger\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n\n    # return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Compute the product of the first N elements of both lists\n    product = 1\n    for i in range(N):\n        product *= nums1[i] * nums2[i]\n\n    # Return the largest product\n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in non-decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the product list with zeros\n    product_list = [0] * N\n\n    # Find the product of the two smallest numbers in the two lists\n    product1 = nums1[0] * nums1[1]\n    product2 = nums2[0] * nums2[1]\n\n    # Initialize the indices for the two smallest numbers\n    i = 0\n    j = 0\n\n    # Loop until the specified number of products have been found\n    while len(product_list) < N:\n        # If the product of the two smallest numbers is greater than the product of the largest product in the list,\n        # add the product of the two smallest numbers to the product list\n        if product1 > product_list[-1]:\n            product_list.append(product1)\n            i += 1\n            j += 1\n        # If the product of the two smallest numbers is less than the product of the largest product in the list,\n        # add the product of the two smallest numbers to the product list\n        elif product2 > product_list[-1]:\n            product_list.append(product2)\n            i += 1\n            j += 1\n        # If the product of the two smallest numbers is equal to the product of the largest product in the list,\n        # add the product of the two smallest numbers to the product list\n        else:\n            product_list.append(product1)\n            i += 1\n            j += 1\n\n        # If the indices for the two smallest numbers have reached the end of the lists,\n        # reset them to the start\n        if i == len(nums1):\n            i = 0\n        if j == len(nums2):\n            j = 0\n\n        # Find the next two smallest numbers in the two lists\n        nums1[i], nums1[j] = nums1[j], nums1[i]\n        nums2[i], nums2[j] = nums2[j], nums2[i]\n\n        # Find the product of the two smallest numbers\n        product1 = nums1[0] * nums1[1]\n        product2 = nums2[0] * nums2[1]\n\n    # Return the product list\n    return product_list"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product of nums1 and nums2\n    max_product = max(nums1[i] * nums2[i] for i in range(N))\n    \n    # Find the indices of the maximum product in nums1 and nums2\n    max_indices = [i for i in range(N) if nums1[i] * nums2[i] == max_product]\n    \n    # Return the indices of the factors of the maximum product\n    return max_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = max(nums1[i], nums2[i])\n        for j in range(i+1, N):\n            product = nums1[i]*nums2[j]\n            if product > max_product:\n                max_product = product\n        max_products.append(max_product)\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the variables for storing the maximum and minimum values of each list\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    # Iterate through each number in the first list\n    for num in nums1:\n        # Check if the current number is greater than the maximum value\n        if num > max1:\n            max1 = num\n            # Check if the current number is less than the minimum value\n            if num < min1:\n                min1 = num\n        else:\n            # Check if the current number is less than the minimum value\n            if num < min1:\n                min1 = num\n\n    # Iterate through each number in the second list\n    for num in nums2:\n        # Check if the current number is greater than the maximum value\n        if num > max2:\n            max2 = num\n            # Check if the current number is less than the minimum value\n            if num < min2:\n                min2 = num\n        else:\n            # Check if the current number is less than the minimum value\n            if num < min2:\n                min2 = num\n\n    # Calculate the largest products based on the number of elements to select\n    largest_products = []\n    for i in range(N):\n        # Calculate the product of the i-th largest number from the first list and the j-th largest number from the second list\n        product = (max1 * (min2 - max1)) + (max2 * (min1 - max2))\n        largest_products.append(product)\n\n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product to the first element of each list\n    max_product1 = nums1[0]\n    max_product2 = nums2[0]\n\n    # Iterate over the remaining elements of the first list\n    for i in range(1, N):\n        # Check if the product of the current element and the maximum product so far is greater than the current max_product1\n        if nums1[i] * max_product1 > max_product1:\n            max_product1 = nums1[i]\n        # Check if the product of the current element and the maximum product so far is greater than the current max_product2\n        if nums1[i] * max_product2 > max_product2:\n            max_product2 = nums1[i]\n\n    # Iterate over the remaining elements of the second list\n    for i in range(1, N):\n        # Check if the product of the current element and the maximum product so far is greater than the current max_product1\n        if nums2[i] * max_product1 > max_product1:\n            max_product1 = nums2[i]\n        # Check if the product of the current element and the maximum product so far is greater than the current max_product2\n        if nums2[i] * max_product2 > max_product2:\n            max_product2 = nums2[i]\n\n    return max_product1 * max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest product counter\n    counter = 0\n\n    # Iterate through the first N elements of each list\n    for i in range(N):\n        # Calculate the product of the current elements of nums1 and nums2\n        product = nums1[i] * nums2[i]\n\n        # Check if the product is greater than the current largest product\n        if product > counter:\n            counter = product\n\n    return counter"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(nums1[-1] * nums2[-1])\n        nums1.pop()\n        nums2.pop()\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    result = ()\n    # iterate over each character in the string\n    for char in str1:\n        # append the character to the tuple\n        result += (char,)\n    # return the tuple of characters\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the leftmost unset bit in binary representation of n\n    i = 0\n    while n & (1 << i) == 0:\n        i += 1\n\n    # Set the leftmost unset bit to 1\n    n |= 1 << i\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:  # if n is even\n        n = n >> 1  # shift n to the right by 1 bit\n    n = n | 1  # set the leftmost bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the first set bit from the right \n    i = 31\n    while i >= 0 and (n >> i) == 0: \n        i -= 1\n\n    # Set the leftmost unset bit \n    n |= (1 << i)\n\n    # Return the modified number \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the number of unset bits to the size of n\n    unset_bits = bin(n).count('1')\n    \n    # Set the leftmost unset bit to 1\n    n = n | (1 << unset_bits)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a given number.\n    '''\n    # Using bitwise operators to find the leftmost unset bit\n    while n & 1 == 0:  # While the rightmost bit is 0\n        n = n >> 1  # Shift the rightmost bit to the left\n    n = n | 1  # Set the leftmost bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: \n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    # Initialize variables for leftmost unset bit and remaining bits\n    left_most_unset_bit = -1\n    remaining_bits = bin(n)[2:]\n    \n    # Iterate through remaining bits\n    for i in range(len(remaining_bits)):\n        # If bit is not set, set it to 1\n        if remaining_bits[i] == '0':\n            left_most_unset_bit = i\n            remaining_bits = remaining_bits[:i] + '1' + remaining_bits[i+1:]\n            break\n    \n    # Convert remaining bits to integer and return\n    return int(remaining_bits, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # initialize the position of the leftmost unset bit to be -1\n    unset_bit_position = -1\n\n    # iterate through the bits of the number in reverse order\n    for i in range(31, -1, -1):\n        # if the current bit is 1, we have found an unset bit\n        if n & (1 << i):\n            unset_bit_position = i\n            break\n\n    # check if the unset bit position is -1, meaning all the bits are set to 1\n    if unset_bit_position == -1:\n        # if all the bits are set to 1, we need to set the least significant bit to 0\n        n &= ~(1 << 31)\n\n    # set the left most unset bit to 1\n    n |= (1 << unset_bit_position)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n % 2 == 0:\n        n //= 2\n    if n == 0:\n        return 1\n    else:\n        return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the count of unset bits\n    unset_bits = 0\n    # Initialize the leftmost unset bit\n    leftmost_unset = -1\n    \n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # Check if the bit is set or not\n        if bit == \"0\":\n            # If the bit is not set, increment the count of unset bits\n            unset_bits += 1\n        else:\n            # If the bit is set, update the leftmost unset bit and break out of the loop\n            leftmost_unset = unset_bits\n            break\n    \n    # Return the updated value of the leftmost unset bit\n    return leftmost_unset"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a given radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (1/3) * pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes two arguments, r, which is the radius of the cone, and h, which is the height of the cone.\n    It then calculates and returns the volume of the cone.\n    \"\"\"\n    # Calculate the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r*h**2"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with base radius r and height h.\n    \"\"\"\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * r * r * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n\n    # Formula for the volume of a cone: V = 1/3 * pi * r^2 * h\n    V = 1/3 * math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return n\n    # else find the highest power of 2 that is less than or equal to n\n    else:\n        return 2**(n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    power = 0\n    while n > 1:\n        power += 1\n        n = n >> 1\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    if n == 0: \n        return 0 \n    else: \n        while(n > 1): \n            n = n/2 \n        return 2**(int(log2(n))+1) \n\ndef log2(n): \n    return math.log2(n)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while power*2 <= n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (2**count) <= n:\n        count += 1\n    return 2**count"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2 as 0\n    highest_power = 0\n\n    # loop until n is less than or equal to the highest power of 2\n    while n > highest_power:\n\n        # increment the highest power of 2 by 1\n        highest_power += 1\n\n    # return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n & (n-1) == 0: \n        return highest_Power_of_2(n-1) + 1\n    else: \n        return highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while power * 2 <= n:\n        power += 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to hold the highest power of 2\n    highest_pow = 1\n    \n    # Iterate through all the numbers up to n\n    for i in range(2, n+1):\n        # Check if i is a power of 2\n        if i == 2**highest_pow:\n            # If it is, update highest_pow\n            highest_pow += 1\n    \n    # Return the highest_pow\n    return highest_pow"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number.\n    '''\n    # Base case: first two lucas numbers are 0 and 1\n    if n <= 2:\n        return n\n    \n    # Recursive case: calculate the nth lucas number\n    # by summing the (n-1)th and (n-2)th lucas numbers\n    return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # base case for n=0 or 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # find the (n-1)'th lucas number using the formula L(n) = (2L(n-1) - L(n-2))\n        lucas_n = find_lucas(n-1)\n        lucas_n_minus_1 = find_lucas(n-2)\n        lucas_n_plus_1 = (2*lucas_n_minus_1) - lucas_n_minus_2\n        return lucas_n_plus_1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        prev = 2\n        current = 1\n        for i in range(2, n):\n            next_number = prev + current\n            prev = current\n            current = next_number\n        return current"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes multiple lists as arguments and returns a dictionary where keys are the first list\n    and values are dictionaries where keys are the second list and values are the third list.\n    \"\"\"\n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through each list and add it as a key to the result dictionary\n    for l in args:\n        for i in range(len(l)):\n            result[l[i]] = {}\n    \n    # Loop through each tuple and assign it to the corresponding key in the result dictionary\n    for t in zip(args[0], args[1], args[2]):\n        result[t[0]][t[1]] = t[2]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Create a nested dictionary\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Initialize an empty dictionary to store the converted data\n    data = {}\n    \n    # Loop through each list and convert it to a nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        for j in range(len(l2[i])):\n            data[l1[i]][l2[i][j]] = l3[i][j]\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            key = item.split(':')[0]\n            value = item.split(':')[1]\n            if key in result:\n                result[key].append(value)\n            else:\n                result[key] = [value]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through the input lists\n    for i in range(len(l1)):\n        # Add a key-value pair to the dictionary\n        result[l1[i]] = l2[i]\n\n    # Add another key-value pair to the dictionary\n    result[l3[0]] = l3[1]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # convert first list to dictionary\n    d1 = {x: l1.count(x) for x in l1}\n    # convert second list to dictionary\n    d2 = {x: l2.count(x) for x in l2}\n    # convert third list to dictionary\n    d3 = {x: l3.count(x) for x in l3}\n    # combine dictionaries\n    result = {**d1, **d2, **d3}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    \n    # Loop through the first list\n    for item in l1:\n        # Create a new dictionary for each item\n        new_dict = {}\n        \n        # Loop through the second list and add items to the new dictionary\n        for item2 in l2:\n            new_dict[item2] = item\n        \n        # Loop through the third list and add items to the new dictionary\n        for item3 in l3:\n            new_dict[item3] = item\n        \n        # Add the new dictionary to the result dictionary with the key being the item from the first list\n        result[item] = new_dict\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    nested_dict = {}\n    # Iterate through the first list\n    for i in range(len(l1)):\n        # Create a new nested dictionary with the same keys as the first list\n        new_dict = {key: l1[i] for key in l1[i]}\n        # Add the new dictionary to the nested dictionary\n        nested_dict[l2[i]] = new_dict\n    # Iterate through the third list\n    for j in range(len(l3)):\n        # Get the corresponding element from the second list and add it as a value to the nested dictionary\n        nested_dict[l3[j]] = l2[nested_dict[l3[j]]-1]\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # iterate over the input lists\n    for lst in [l1, l2, l3]:\n        # for each list, iterate over its elements\n        for element in lst:\n            # split the element at the ':' character\n            key, value = element.split(':')\n            # add the key-value pair to the result dictionary\n            result[key] = value\n    # return the result dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/4)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return n\n    \n    if n % 2 == 0:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), get_max_sum(n-1))\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 12\n    \n    max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    \n    if n%2 == 0:\n        max_sum += n\n        \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return n\n\n    # Calculate f(n/2)\n    half_sum = get_max_sum(n//2)\n\n    # Calculate f(n/3)\n    third_sum = get_max_sum(n//3)\n\n    # Calculate f(n/4)\n    fourth_sum = get_max_sum(n//4)\n\n    # Calculate f(n/5)\n    fifth_sum = get_max_sum(n//5)\n\n    # Calculate f(n)\n    n_sum = max(half_sum+third_sum+fourth_sum+fifth_sum, n)\n\n    return n_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # base case\n    if n <= 1:\n        return n\n    \n    # recursive case\n    elif n > 1:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 5\n        if n == 4:\n            return 14\n        if n == 5:\n            return 42\n        if n == 6:\n            return 132\n        if n == 7:\n            return 429\n        if n == 8:\n            return 1430\n        if n == 9:\n            return 4862\n        if n == 10:\n            return 16796\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    if n % 2 == 0:\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + n\n    else:\n        return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case for recursion\n    if n <= 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Calculate the sum of numbers from 1 to n\n    sum_n = sum(range(1, n+1))\n    \n    # Find the sum of numbers from 1 to n/2\n    sum_half_n = sum(range(1, n//2+1))\n    \n    # Find the sum of numbers from 1 to n/3\n    sum_third_n = sum(range(1, n//3+1))\n    \n    # Find the sum of numbers from 1 to n/4\n    sum_fourth_n = sum(range(1, n//4+1))\n    \n    # Find the sum of numbers from 1 to n/5\n    sum_fifth_n = sum(range(1, n//5+1))\n    \n    # Calculate the maximum sum using the given equation\n    max_sum = max((sum_half_n + sum_third_n + sum_fourth_n + sum_fifth_n), sum_n)\n    \n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for item in input_list:\n        if len(item) > len(length_list):\n            length_list = [item]\n        elif len(item) == len(length_list):\n            length_list.append(item)\n    return length_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Initialize an empty set to store unique elements of the tuple\n    unique_set = set()\n\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # If the element is already present in the set, return False\n        if element in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # Check if set is empty (i.e. all elements are unique)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    for item in test_tup:\n        # if the item is already in the dictionary, increment its count\n        if item in count_dict:\n            count_dict[item] += 1\n        # if the item is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[item] = 1\n    # check if there are any duplicates in the count_dict\n    for count in count_dict.values():\n        if count > 1:\n            return False\n    # if no duplicates were found, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store characters and their frequency\n    freq = {}\n\n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the string again and find the first character that has a frequency of 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeated character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first non-repeated character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    set_str = set(str1)\n    # Iterate through the set and find the first character that is not repeated\n    for char in set_str:\n        if char not in str1:\n            return char\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n\n    # Iterate through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a frequency of 1\n            char_freq[char] = 1\n\n    # Find the first character with a frequency of 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # find the first character with frequency 1\n    for char, count in freq.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = {}\n    \n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n            \n    return \"All characters are repeated\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted array is odd,\n    # the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[middle_index]\n    # If the length of the sorted array is even,\n    # the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # get the length of the sorted list\n    n = len(nums)\n\n    # if the list has an odd length, the median is the average of the two middle numbers\n    if n % 2 == 1:\n        mid = n // 2\n        return (nums[mid - 1] + nums[mid]) / 2\n\n    # if the list has an even length, the median is the average of the two middle numbers\n    else:\n        mid = n // 2\n        return (nums[mid - 1] + nums[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers\n    sorted_numbers = sorted([a,b,c])\n\n    # Finding the length of the sorted array\n    n = len(sorted_numbers)\n\n    # Calculating the median\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2-1])/2\n    else:\n        median = sorted_numbers[n//2]\n\n    # Returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Calculate the length of the list\n    length = len(sorted_numbers)\n\n    # If the length of the list is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_numbers[length//2]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        middle_1 = length//2\n        middle_2 = middle_1 - 1\n        return (sorted_numbers[middle_1] + sorted_numbers[middle_2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    # First, sort the three numbers\n    nums = sorted([a, b, c])\n    \n    # Calculate the length of the list\n    length = len(nums)\n    \n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        return nums[length//2]\n    \n    # If the length is even, the median is the average of the middle two numbers\n    else:\n        return (nums[length//2] + nums[length//2-1]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Get the middle index of the sorted numbers\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted numbers is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        median = sorted_numbers[middle_index]\n\n    # If the length of the sorted numbers is even, the median is the average of the middle two numbers\n    else:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        for digit in str(num):\n            result += int(digit)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        total = sum(digits)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # loop through each character in the string\n        for char in num_str:\n            # convert the character to an integer\n            digit = int(char)\n            # add the digit to a running sum\n            total_sum += digit\n    # return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(int(d) for d in str(num))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    digit_sum = []\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Convert the string to a list of digits\n        digit_list = [int(digit) for digit in num_str]\n        # Compute the sum of digits in the list\n        digit_sum.append(sum(digit_list))\n    # Return the sum of digits\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        num_digits = len(str(num))\n        result += num // num_digits\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple([x^y for x, y in zip(test_tup1, test_tup2)])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert each tuple element to its binary representation\n    bin_str1 = bin(test_tup1[0])[2:]\n    bin_str2 = bin(test_tup2[0])[2:]\n    \n    # find the length of the shorter tuple\n    min_length = min(len(bin_str1), len(bin_str2))\n    \n    # pad the shorter tuple with zeros\n    if len(bin_str1) < min_length:\n        bin_str1 = '0'*(min_length-len(bin_str1)) + bin_str1\n    if len(bin_str2) < min_length:\n        bin_str2 = '0'*(min_length-len(bin_str2)) + bin_str2\n    \n    # perform the bitwise xor operation across all elements of the tuples\n    result = 0\n    for i in range(min_length):\n        result ^= int(bin_str1[i]) ^ int(bin_str2[i])\n    \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the lengths of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # check if the two tuples have the same length\n    if len1!= len2:\n        print(\"Error: Tuples have different lengths\")\n        return None\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # loop through the tuples\n    for i in range(len1):\n        # perform the mathematical bitwise xor operation\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # append the result to the result list\n        result_list.append(xor_result)\n    \n    # return the result tuple\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Use a set to remove duplicates from the list\n    unique_tuples = set(test_list)\n    \n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n\n    for item in test_list:\n        unique_tuples.add(item)\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for elem in test_list:\n        unique_tuples.add(tuple(elem))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in range(len(test_list)):\n        freq_dict[tuple(test_list[i])] = freq_dict.get(tuple(test_list[i]), 0) + 1\n\n    unique_tuples = [key for key, value in freq_dict.items() if value == 1]\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    unique_freq = set(freq.items())\n\n    return len(unique_freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the sum of elements\n    result_tup = ()\n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # retrieve the i-th element of the first tuple\n        first_element = test_tup1[i]\n        # iterate through the second tuple\n        for j in range(len(test_tup2)):\n            # retrieve the j-th element of the second tuple\n            second_element = test_tup2[j]\n            # add the two elements and store the result in the new tuple\n            result_tup += (first_element + second_element,)\n    # return the new tuple as the result\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with empty lists\n    result = ([], [])\n    \n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding element in the first and second tuples\n        result[0].append(test_tup1[i] + test_tup2[i])\n        # Add the corresponding element in the second and third tuples\n        result[1].append(test_tup2[i] + test_tup1[i])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a variable to store the result\n    result_tup = ()\n\n    # Get the length of the first tuple\n    len_tup1 = len(test_tup1)\n\n    # Get the length of the second tuple\n    len_tup2 = len(test_tup2)\n\n    # Check if the length of the first tuple is greater than the length of the second tuple\n    if len_tup1 > len_tup2:\n        # Iterate through the first tuple\n        for i in range(len_tup1):\n            # Check if the index is valid\n            if i < len_tup2:\n                # Add the corresponding elements of the two tuples\n                result_tup += (test_tup1[i] + test_tup2[i],)\n            else:\n                # Add the remaining elements of the first tuple\n                result_tup += (test_tup1[i],)\n    else:\n        # Iterate through the second tuple\n        for i in range(len_tup2):\n            # Check if the index is valid\n            if i < len_tup1:\n                # Add the corresponding elements of the two tuples\n                result_tup += (test_tup1[i] + test_tup2[i],)\n            else:\n                # Add the remaining elements of the second tuple\n                result_tup += (test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length!\")\n        return\n\n    # Initialize a new tuple with the same length as the first input tuple\n    result_tup = []\n\n    # Loop through the elements of both input tuples and add their values\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match!\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result_tup += (test_tup1[i] + test_tup2[i],)\n        else:\n            print(\"Error: Tuples contain elements of different types!\")\n            return\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    # iterate through both tuples and add their elements\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function finds the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and returns True if the element exists in the first tuple, and False otherwise.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in tuple1\")\n    else:\n        print(tuplex, \"does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    if x == 0:\n        return parity\n    if x % 2 == 0:\n        parity = 0\n    else:\n        parity = 1\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    # check if x is an integer\n    if not isinstance(x, int):\n        print(\"Error: input must be an integer.\")\n        return\n    \n    # check if x is negative\n    if x < 0:\n        print(\"Error: input must be a non-negative integer.\")\n        return\n\n    # check if x is even or odd\n    if x % 2 == 0:\n        print(x, \"is an even number.\")\n    else:\n        print(x, \"is an odd number.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(x,\"is even\")\n    else:\n        print(x,\"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or odd\n    if x % 2 == 0:\n        # if the number is even, parity is even\n        return True\n    else:\n        # if the number is odd, parity is odd\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is an even number\")\n    else:\n        print(x, \"is an odd number\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a single parameter x and returns a boolean value indicating whether it is odd or even.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    s = str(n)\n    # Initialize the length of the string\n    length = len(s)\n    # Initialize the string to store the rearranged digits\n    result = ''\n    # Iterate over the digits of the input number\n    for digit in s:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # If the digit is 9, add 1 to the result\n        if digit == 9:\n            result += str(digit + 1)\n        # If the digit is less than 9, add it to the result unchanged\n        else:\n            result += str(digit)\n    # Convert the string to an integer and return the result\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize a list to store the digits of the given number\n    num_digits = [int(digit) for digit in num_str]\n\n    # Create a list to store the digits in reverse order\n    reversed_digits = num_digits[::-1]\n\n    # Find the index of the first digit that is smaller than the first digit in the reversed list\n    index = next((i for i, digit in enumerate(reversed_digits) if digit < reversed_digits[0]), None)\n\n    # If the index is None, then the given number is already in reverse order, so we can't create a next bigger number\n    if index is None:\n        return None\n\n    # Create a new list by swapping the first digit with the digit at the given index\n    new_digits = [reversed_digits[i] for i in range(len(reversed_digits)) if i!= index] + [reversed_digits[index]]\n\n    # Convert the new list back to a string and convert it to an integer\n    new_num_str = ''.join(str(digit) for digit in new_digits)\n    new_num = int(new_num_str)\n\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the result variable\n    result = ''\n    # Iterate over the digits of the number in reverse order\n    for digit in num_str[::-1]:\n        # Check if the digit is zero\n        if digit == '0':\n            # If it is, append it to the result\n            result += '0'\n        # If the digit is not zero, append the next bigger digit\n        else:\n            # Convert the digit to an integer\n            digit_int = int(digit)\n            # If the digit is 9, increment it to 0 and append 1\n            if digit_int == 9:\n                result += '0'\n                result += '1'\n            # If the digit is 8, increment it to 1 and append 0\n            elif digit_int == 8:\n                result += '1'\n                result += '0'\n            # If the digit is 7, increment it to 2 and append 0\n            elif digit_int == 7:\n                result += '2'\n                result += '0'\n            # If the digit is 6, increment it to 3 and append 0\n            elif digit_int == 6:\n                result += '3'\n                result += '0'\n            # If the digit is 5, increment it to 4 and append 0\n            elif digit_int == 5:\n                result += '4'\n                result += '0'\n            # If the digit is 4, increment it to 5 and append 0\n            elif digit_int == 4:\n                result += '5'\n                result += '0'\n            # If the digit is 3, increment it to 6 and append 0\n            elif digit_int == 3:\n                result += '6'\n                result += '0'\n            # If the digit is 2, increment it to 7 and append 0\n            elif digit_int == 2:\n                result += '7'\n                result += '0'\n            # If the digit is 1, increment it to 8 and append 0\n            elif digit_int == 1:\n                result += '8'\n                result += '0'\n            # If the digit is 0, increment it to 9 and append 0\n            elif digit_int == 0:\n                result += '9'\n                result += '0'\n            # If the digit is not 0, it is already a valid digit and can be appended to the result\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # find the next bigger number by rearranging the digits\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n\n    # check if the max digit is already the largest digit in the number\n    if max_digit == 9:\n        return 1000000\n\n    # increment the max digit and create the next bigger number\n    next_digit = max_digit + 1\n    new_digits = [0] * len(digits)\n\n    # create a list of digits from 0 to 9 (excluding 9)\n    for i in range(10):\n        new_digits[i] = i\n\n    # remove the current max digit from the list\n    new_digits.pop(digits.index(max_digit))\n\n    # insert the next digit at the position of the max digit\n    new_digits.insert(digits.index(max_digit), next_digit)\n\n    # create the next bigger number\n    new_number = 0\n    for digit in new_digits:\n        new_number = new_number * 10 + digit\n\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize a list to store the digits of the number\n    digits = list(str(n))\n    \n    # initialize the index of the smallest digit\n    min_index = digits.index(min(digits))\n    \n    # swap the smallest and largest digits\n    digits[min_index], digits[-1] = digits[-1], digits[min_index]\n    \n    # reverse the digits from the smallest to the largest\n    digits = digits[::-1]\n    \n    # convert the list of digits back to a string\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize the result as an empty string\n    result = \"\"\n\n    # loop through each digit of the number\n    for digit in str(n):\n        # initialize the current digit\n        current_digit = digit\n\n        # loop through each digit in reverse order\n        for i in range(9, -1, -1):\n            # check if the current digit is greater than the i-th digit\n            if int(digit) > i:\n                # if it is, swap the current digit with the i-th digit\n                current_digit, i_digit = i, digit\n\n                # break out of the inner loop\n                break\n\n        # concatenate the current digit to the result\n        result += current_digit\n\n    # convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n    # Concatenate the digits in the sorted order into a string and convert it back to an integer\n    next_bigger = int(''.join(digits))\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    max_num = str(max(int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4]), int(num[5]), int(num[6]), int(num[7]), int(num[8]), int(num[9])))\n    max_num = max_num + max_num.zfill(10 - len(max_num))\n    return int(max_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the given number to a string\n    num_str = str(n)\n\n    # find the index of the first digit that is not 0\n    for i in range(len(num_str)):\n        if num_str[i]!= '0':\n            break\n\n    # find the largest digit that is greater than 0\n    largest_digit = 0\n    for i in range(i, len(num_str)):\n        digit = int(num_str[i])\n        if digit > largest_digit:\n            largest_digit = digit\n\n    # create a list of digits that are larger than the largest one\n    larger_digits = []\n    for i in range(i, len(num_str)):\n        digit = int(num_str[i])\n        if digit > largest_digit:\n            larger_digits.append(digit)\n\n    # reverse the list of digits\n    larger_digits.reverse()\n\n    # join the digits into a string\n    new_num = ''.join(str(digit) for digit in larger_digits)\n\n    # add the first digit of the original number to the end\n    new_num += num_str[0]\n\n    # convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    for i in range(len(digits)):\n        digits[i] *= 10**(len(digits)-i-1)\n    return sum(digits)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    \n    # Create a heap of size k\n    for i in range(k):\n        heapq.heappush(min_heap, [float('inf'), None])\n        \n    # Loop through the first array\n    for num1 in nums1:\n        # Loop through the second array\n        for num2 in nums2:\n            # Calculate the cost of this pair\n            cost = abs(num1) + abs(num2)\n            \n            # If the cost is smaller than the smallest cost in the heap, update the heap\n            if cost < min_heap[0][0]:\n                heapq.heapreplace(min_heap, [cost, (num1, num2)])\n            \n            # If the heap size is greater than k, remove the smallest cost pair from the heap\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n        # Remove the smallest cost pair from the heap\n        heapq.heappop(min_heap)\n    \n    # Extract the k smallest cost pairs from the heap and return them\n    result = []\n    while min_heap:\n        result.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create heaps for the first and second arrays\n    first_heap = []\n    second_heap = []\n\n    # iterate through the first array and push each element into the first heap\n    for num in nums1:\n        heapq.heappush(first_heap, num)\n\n    # iterate through the second array and push each element into the second heap\n    for num in nums2:\n        heapq.heappush(second_heap, num)\n\n    # iterate through the heaps and pop the smallest elements until we have at most k pairs in the result\n    result = []\n    while len(result) < k:\n        if not first_heap:\n            # if the first heap is empty, pop the smallest element from the second heap\n            heapq.heappop(second_heap)\n        if not second_heap:\n            # if the second heap is empty, pop the smallest element from the first heap\n            heapq.heappop(first_heap)\n        # add the smallest pair to the result\n        result.append([heapq.heappop(first_heap), heapq.heappop(second_heap)])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    count = 0\n    for num1 in nums1:\n        while len(heap1) and num1 > -heapq.heappop(heap1):\n            heap2.append(heapq.heappop(heap1))\n        while len(heap2) and num1 > -heapq.heappop(heap2):\n            heap1.append(heapq.heappop(heap2))\n        heapq.heappush(heap1, -num1)\n        heapq.heappush(heap2, -num1)\n        count += 1\n        if count == k:\n            break\n    res = []\n    while len(heap1) or len(heap2):\n        if -heapq.heappop(heap1) >= -heapq.heappop(heap2):\n            res.append(-heapq.heappop(heap1))\n        else:\n            res.append(-heapq.heappop(heap2))\n    return res[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a priority queue to store the pairs of numbers\n    pq = []\n    # Loop through both arrays and compare the smallest and largest numbers\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the priority queue has less than k elements or if the current pair is smaller than the smallest in the priority queue, add it to the priority queue\n            if len(pq) < k or num1 + num2 < pq[0][0]:\n                heapq.heappush(pq, (num1 + num2, (num1, num2)))\n                # If the priority queue has more than k elements, pop the smallest element from the priority queue\n                if len(pq) > k:\n                    heapq.heappop(pq)\n    # Create a list to store the k pairs of numbers\n    result = []\n    # Loop through the priority queue and add the pairs to the result list\n    while pq:\n        result.append(pq[0][1])\n        heapq.heappop(pq)\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap for the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # create a min heap for the second array\n    min_heap_2 = []\n    for num in nums2:\n        heapq.heappush(min_heap_2, num)\n        if len(min_heap_2) > k:\n            heapq.heappop(min_heap_2)\n\n    # initialize the result list\n    result = []\n\n    # iterate through the min heaps until there are no more elements left\n    while min_heap and min_heap_2:\n        # get the smallest element from the min heaps\n        num1 = heapq.heappop(min_heap)\n        num2 = heapq.heappop(min_heap_2)\n\n        # add the pair to the result list\n        result.append((num1, num2))\n\n        # add the larger element to the min heap of the corresponding array\n        if num1 < num2:\n            heapq.heappush(min_heap, num1)\n        else:\n            heapq.heappush(min_heap_2, num2)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function finds k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n        nums1 (list): List of numbers from first array\n        nums2 (list): List of numbers from second array\n        k (int): Number of pairs required\n\n    Returns:\n        list: List of pairs of numbers which add up to the minimum value\n\n    \"\"\"\n    # heapify the second array\n    nums2.sort()\n    heapq.heapify(nums2)\n\n    # create a min heap of size k\n    min_heap = []\n    for _ in range(k):\n        heapq.heappush(min_heap, -heapq.heappop(nums2))\n\n    # create a list of pairs and their indices\n    pairs = []\n    for i, num1 in enumerate(nums1):\n        while len(min_heap) > 0 and -min_heap[0] > num1 + nums2[0]:\n            heapq.heappop(min_heap)\n        if len(min_heap) > 0:\n            heapq.heappush(min_heap, -heapq.heappop(nums2))\n        pairs.append((num1, -min_heap[0]))\n\n    # extract pairs and sort them in ascending order\n    return sorted(pairs, key=lambda x: x[1])"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap of size k to store the smallest k elements from both arrays\n    min_heap = [(-nums1[0], 0)]\n    heapq.heapify(min_heap)\n    \n    # initialize two variables to keep track of the index of the next element to compare from the two arrays\n    i = 1\n    j = 0\n    \n    # initialize an empty list to store the k smallest pairs\n    result = []\n    \n    while len(result) < k:\n        # if the heap is not empty and the current element of nums1 is greater than or equal to the first element of the heap\n        if len(min_heap) > 0 and min_heap[0][0] >= nums1[i]:\n            # pop the smallest element from the heap\n            diff, idx = heapq.heappop(min_heap)\n            \n            # add the current element and the difference between the current element of nums1 and the smallest element of the heap to the result list\n            result.append((nums1[i] - diff, nums2[idx]))\n            \n            # if the current element of nums1 is not the last element, increment i and add the next element of nums2 to the heap\n            if i < len(nums1):\n                heapq.heappush(min_heap, (-nums1[i], i))\n        else:\n            # if the heap is empty or the current element of nums1 is less than the first element of the heap\n            # add the next element of nums2 to the heap\n            heapq.heappush(min_heap, (-nums1[i], i))\n            \n            # increment i\n            i += 1\n            \n            # if the current element of nums1 is the last element, increment j and add the next element of nums2 to the heap\n            if i == len(nums1):\n                heapq.heappush(min_heap, (-nums2[j], j))\n                j += 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1, heap2 = [], []\n    for i, num1 in enumerate(nums1):\n        heapq.heappush(heap1, (-num1, i))\n        if len(pairs) == k:\n            break\n    for j, num2 in enumerate(nums2):\n        heapq.heappush(heap2, (-num2, j))\n        while len(pairs) < k and len(heap1) > 0 and len(heap2) > 0:\n            diff1, idx1 = heapq.heappop(heap1)\n            diff2, idx2 = heapq.heappop(heap2)\n            if diff1 + diff2 < 0:\n                continue\n            pairs.append((nums1[idx1], nums2[idx2]))\n            if len(pairs) == k:\n                break\n        if len(pairs) == k:\n            break\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    while k > 0:\n        if heapq.heappop(nums1) + heapq.heappop(nums2) <= k:\n            pairs.append([heapq.heappop(nums1), heapq.heappop(nums2)])\n            k -= heapq.heappop(nums1) + heapq.heappop(nums2)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # heapq module is used to implement priority queue\n    # as we are looking for k smallest pairs\n    # we need to compare elements based on their sum\n    # so we will use a custom function to compare the elements\n    def compare(a, b):\n        \"\"\"\n        Custom function to compare the elements based on their sum\n        \"\"\"\n        return a[0]+a[1] < b[0]+b[1]\n\n    # creating a list to store the smallest k elements\n    # using heapq module\n    heap = []\n\n    # iterating through the first array\n    for num1 in nums1:\n        # iterating through the second array\n        for num2 in nums2:\n            # appending the sum of the elements to the heap\n            # heapq.heappush(heap, [sum(nums1[i:i+k]), i, i+k-1])\n            heapq.heappush(heap, (sum(nums1[i:i+k]), i, i+k-1))\n\n            # if the size of the heap is greater than k\n            if len(heap) > k:\n                # removing the smallest element from the heap\n                # heapq.heappop(heap)\n                heapq.heappop(heap)\n\n    # creating an empty list to store the result\n    result = []\n\n    # iterating through the heap\n    while heap:\n        # retrieving the smallest element from the heap\n        # and appending it to the result list\n        # heapq.heappop(heap)\n        s, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = 1\n            for k in range(len(list1[0])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return \"The given list should have at least two elements.\"\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum product and the two tuples with the minimum product\n    min_product = float('inf')\n    min_tuple = (float('inf'), float('inf'))\n    \n    # Iterate through the list of tuples\n    for tuple1 in list1:\n        for tuple2 in list1:\n            # Calculate the product of the two tuples and compare it to the current minimum product\n            product = tuple1[0]*tuple2[1]\n            if product < min_product:\n                min_product = product\n                min_tuple = (tuple1[0], tuple2[1])\n    \n    # Return the minimum product and the two tuples with the minimum product\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = 1\n            for k in range(len(list1[i])):\n                prod *= list1[i][k] * list1[j][k]\n            if prod < min_product:\n                min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Create a dictionary to store the product of the first tuple with the product of the second tuple\n    product_dict = {}\n\n    # Loop through the list of tuples\n    for tup1 in list1:\n        # Loop through the remaining tuples in the list\n        for tup2 in list1:\n            # If the two tuples have different lengths, skip this pair\n            if len(tup1)!= len(tup2):\n                continue\n            # Calculate the product of the two tuples\n            product = 1\n            for i in range(len(tup1)):\n                product *= tup1[i] * tup2[i]\n            # If the product is not in the dictionary, add it to the dictionary with the value set to infinity\n            if product not in product_dict:\n                product_dict[product] = float('inf')\n            # Update the value in the dictionary with the minimum value\n            product_dict[product] = min(product_dict[product], tup1[0] * tup2[0])\n\n    # Find the minimum value in the dictionary\n    min_product = float('inf')\n    for value in product_dict.values():\n        min_product = min(min_product, value)\n\n    # Return the minimum value\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    list1 (list): a list of tuples\n\n    Returns:\n    int: the minimum product from the pairs of tuples within the list\n\n    \"\"\"\n\n    # Initialize variables to store the minimum product and current product\n    min_product = 1\n    current_product = 1\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n\n        # Get the tuple and calculate its product\n        tuple1, tuple2 = list1[i]\n        product = tuple1 * tuple2\n\n        # Check if the current product is smaller than the minimum product\n        if current_product < min_product:\n            min_product = current_product\n\n        # Update the current product\n        current_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the rest of the list of tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the new product is less than the current minimum\n            if product < min_product:\n                min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two tuples in the list.\n\n    Example:\n    min_product_tuple([(3, 4), (7, 2), (5, 9)]) -> 56\n    '''\n    product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = min(product, list1[i][0]*list1[j][1])\n    return product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize minval to the first value in the list\n    minval = listval[0]\n\n    # Iterate through the list and compare each value to minval\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    elif len(listval) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if min_val > listval[i]:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as an input and returns the minimum value in it.\n    '''\n    min_num = lst[0]\n    for i in lst:\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to be the first element in the list\n    min_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = float('inf')\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = min_val(listval[1:])\n        return min(listval[0], min_val)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all words to lower case\n    word = word.lower()\n    # Split the string into a list of words\n    words = re.findall(r'\\w+', word)\n    # Join the words with camel case\n    camel_case = ''.join(words)\n    # Capitalize the first letter of the camel case string\n    camel_case = camel_case.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n\n    # Split the word into words based on underscores\n    words = word.split('_')\n\n    # Convert the first letter of each word to uppercase\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # Join the words with underscores\n    return '_'.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = []\n    for i in word:\n        if i.isupper():\n            camel_case.append(i.lower())\n        else:\n            camel_case.append(i)\n    camel_case = ''.join(camel_case)\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return camel_word.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += '_' + char.lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<=[a-z])_(?=[a-z])'\n    word = re.sub(pattern, lambda match: match.group(0).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word into words by splitting on underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with an underscore\n    camel_word = '_'.join(words)\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Join the words into camel case string\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for number in l:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store odd numbers\n    result = []\n    # Iterate over each element in the given list\n    for num in l:\n        # If the element is odd, append it to the result list\n        if num % 2!= 0:\n            result.append(num)\n    # Return the result list containing only odd numbers\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for number in l:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"Index out of range\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    if n >= len(list1):\n        raise IndexError(\"n is greater than the length of the list\")\n    \n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise TypeError('First argument must be a list.')\n    if type(n)!= int:\n        raise TypeError('Second argument must be an integer.')\n    if n < 1 or n > len(list1):\n        raise ValueError('Second argument must be between 1 and the length of the list.')\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return None\n    \n    # Check if the index is valid\n    if n < 0 or n >= len(lst):\n        return None\n    \n    # Extract the nth element from the list and return it\n    return lst[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and returns the nth element from the list.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif n >= len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if there exists any value in the second sequence that is also present in the first sequence, and False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if there is a common value between them, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1: a sequence of values\n    list2: a sequence of values\n\n    Returns:\n    True if any value in list1 exists in list2, else False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, and False otherwise.\n    \"\"\"\n    # Iterate through the first list\n    for item in list1:\n        # If the item is found in the second list, return True\n        if item in list2:\n            return True\n    # If no item is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any element in the first list that is also present in the second list, and False otherwise.\n    '''\n\n    # Loop through each element in the first list\n    for element in list1:\n        # If the element is present in the second list, return True\n        if element in list2:\n            return True\n\n    # If no element in the first list is found to be present in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:  \n        if i in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1: List of elements to search in list2.\n    list2: List of elements to search in list1.\n\n    Returns:\n    True if any value in list1 exists in list2, else False.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing\n    the two elements of the pair with the highest product. If there are multiple pairs with the\n    same highest product, it returns the pair with the smaller index in the original array.\n    \"\"\"\n    # initialize variables to store the maximum product seen so far and the indices of the\n    # maximum and second maximum products\n    max_product = arr[0] * arr[1]\n    max_index = 0\n    second_max_product = arr[0] * arr[1]\n    second_max_index = 1\n\n    # iterate through the array from the second element\n    for i in range(2, len(arr)):\n        # update the maximum and second maximum products if the current product is greater\n        if arr[i] * arr[i-1] > max_product:\n            second_max_product = max_product\n            max_product = arr[i] * arr[i-1]\n            second_max_index = max_index\n        # update the second maximum product if the current product is greater but not greater than the\n        # maximum product seen so far\n        elif arr[i] * arr[i-1] > second_max_product and arr[i] * arr[i-1] < max_product:\n            second_max_product = arr[i] * arr[i-1]\n            second_max_index = i-1\n        # update the maximum and second maximum products if the current product is greater than the\n        # second maximum product seen so far and not greater than the maximum product seen so far\n        elif arr[i] * arr[i-1] > second_max_product and arr[i] * arr[i-1] == max_product:\n            max_product = arr[i] * arr[i-1]\n            max_index = i-1\n\n    # return the indices of the maximum and second maximum products\n    return (max_index, second_max_index)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1*max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Returns the maximum product of any two elements in the given array.\n    \"\"\"\n    # Initialize the maximum product seen so far\n    max_product = float('-inf')\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Calculate the product of the element and its mirror image (i.e. the element at index i with the last element)\n        product = arr[i] * arr[len(arr) - 1 - i]\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, product)\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the maximum and minimum product\n    max_prod = float('-inf')\n    min_prod = float('inf')\n\n    # Iterate over the array and update the maximum and minimum product accordingly\n    for i in arr:\n        if i > max_prod:\n            max_prod = i\n        if i < min_prod:\n            min_prod = i\n\n    # Calculate the pair with the highest product\n    pair = [arr[0], arr[1]]\n    for i in range(2, len(arr)):\n        if arr[i] * max_prod > max_prod * arr[i]:\n            pair[0] = arr[i]\n            pair[1] = max_prod\n        elif arr[i] * min_prod < min_prod * arr[i]:\n            pair[0] = arr[i]\n            pair[1] = min_prod\n        elif arr[i] * min_prod == min_prod * arr[i]:\n            pair[1] = arr[i]\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Given an array of integers, find a pair with the highest product.\n\n    Args:\n        arr: List of integers\n\n    Returns:\n        Tuple (int, int): A tuple containing the two indices of the pair with the highest product\n    \"\"\"\n    max_product = -1\n    pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (i, j)\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product_pair = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i]*arr[j]\n            if product > max_product_pair[0]:\n                max_product_pair = [product, [i, j]]\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair of integers with the highest product.\n    '''\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n\n    # Initialize the minimum and maximum value of the product to 0\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Iterate over the array and find the minimum and maximum product\n    for i in range(2, len(arr)):\n        # Update the maximum product if the current element is greater than the maximum product\n        if arr[i] * max_product < min_product:\n            min_product = arr[i] * max_product\n        elif arr[i] * min_product > max_product:\n            max_product = arr[i] * min_product\n\n    # Return the pair with the highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # initialize variables to store the maximum product and the maximum sum\n    max_product = float('-inf')\n    max_sum = float('-inf')\n\n    # loop through each element in the array\n    for i in range(len(arr)):\n\n        # loop through each element after the current one\n        for j in range(i+1, len(arr)):\n\n            # calculate the product of the two elements\n            product = arr[i] * arr[j]\n\n            # calculate the sum of the two elements\n            sum_of_elements = arr[i] + arr[j]\n\n            # update the maximum product and the maximum sum if the current product is greater\n            if product > max_product:\n                max_product = product\n                max_sum = sum_of_elements\n\n    # return the maximum product and the maximum sum\n    return (max_product, max_sum)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    \n    return max_product_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = {}\n    for tup in Input:\n        if tup[0] in group:\n            group[tup[0]].append(tup)\n        else:\n            group[tup[0]] = [tup]\n    return group"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        # check if the first element is already in the dictionary\n        if first in result:\n            # if it is, add the second element of the tuple to the list of elements in the group\n            result[first].append(tup[1])\n        else:\n            # otherwise, add the tuple to the dictionary with the first element as the key and a list of its second elements as the value\n            result[first] = [tup[1]]\n    # create an empty list to hold the common first elements\n    common_list = []\n    # loop through each key in the dictionary\n    for key in result:\n        # get the list of elements in the group for that key\n        group = result[key]\n        # check if there are at least two elements in the group\n        if len(group) >= 2:\n            # if there are, add the first element of the group to the common list\n            common_list.append(group[0])\n    # sort the common list in ascending order and return it\n    return sorted(common_list)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n\n    for tup in Input:\n        common_elements.add(tup[0])\n\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store common first elements and their counts\n    count_dict = {}\n\n    # Iterate through the input list of tuples\n    for i in Input:\n        # Extract the first element from the tuple\n        first_element = i[0]\n\n        # If the first element is in the count_dict, increment its count\n        if first_element in count_dict:\n            count_dict[first_element] += 1\n        # If the first element is not in the count_dict, add it with a count of 1\n        else:\n            count_dict[first_element] = 1\n\n    # Iterate through the count_dict and create a list of tuples containing the common first element and its count\n    result = []\n    for key, value in count_dict.items():\n        if value == max(count_dict.values()):\n            result.append((key, value))\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if tup[0] == common_element:\n            continue\n        else:\n            common_element = tup[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    common_tuple = []\n    for i in Input:\n        if len(common_tuple) == 0:\n            common_tuple.append(i)\n        elif i[0] == common_tuple[0][0]:\n            common_tuple.append(i)\n        else:\n            break\n    return common_tuple\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tuple_element in Input:\n        if len(tuple_element) > 1:\n            first_element = tuple_element[0]\n            if first_element not in common_first_element:\n                common_first_element.append(first_element)\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first.append(Input[i][0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuples = []\n    for tup in Input:\n        if len(set(tup)) == 1:\n            common_tuples.append(tup)\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = {}\n    common = []\n    for i in range(len(Input)):\n        if Input[i][0] in count:\n            count[Input[i][0]] += 1\n        else:\n            count[Input[i][0]] = 1\n    for i in count:\n        if count[i] == max(count.values()):\n            common.append(i)\n    return common\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes in a list of integers and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_num = None\n    for num in lst:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_num = num\n    return max_num"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for item in lst:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_element = item\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return \"The list is empty\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    if max_elem is None:\n        return \"The list has only one element\"\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number of the list and add them up\n    total_sum = sum([round(x) for x in list1])\n\n    # Multiply the total sum by the length of the list\n    total_sum_multiplied_by_length = total_sum * len(list1)\n\n    # Print the result\n    print(total_sum_multiplied_by_length)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        if isinstance(i, int) or isinstance(i, float):\n            total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    # Round every element of the list\n    rounded_lst = [round(x) for x in lst]\n\n    # Sum the rounded list\n    total_sum = sum(rounded_lst)\n\n    # Multiply the total sum with the length of the list\n    result = total_sum * len(lst)\n\n    # Print the result\n    print(\"Total sum: {}\".format(result))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing the sum to 0\n    sum = 0\n    # iterating n times\n    for i in range(n): \n        # adding the cube of each even natural number to the sum\n        sum += i*i*i*i*i*i \n    # returning the final sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        cube = i**3\n        sum += cube\n        count += 1\n    return sum, count\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable\n    sum_cubes = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the cube of the current number to the sum\n        sum_cubes += i**3\n    \n    # Return the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of cubes\n    cube_sum = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the cube of each even natural number to the sum\n        cube_sum += i**3\n    \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 0\n    while i <= n:\n        cube_sum += i ** 3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    sum = 0\n    \n    for i in range(1, n+1, 2):\n        sum += i**3\n        \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenates each element of a tuple by the specified delimiter.\n\n    Args:\n    test_tup (tuple): The tuple to be concatenated.\n    delimiter (str): The delimiter to be used to concatenate the elements. Default is a space.\n\n    Returns:\n    str: The concatenated string of the tuple elements.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) +''\n    return result.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and concatenates each element by the specified delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            concatenated_string += str(test_tup[i])\n        else:\n            concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1] # removes the last delimiter from the concatenated string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i*i\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes/n\n    \n    # print the result\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    count = 0\n    \n    # iterating through the first n natural numbers\n    for i in range(n):\n        # calculating the cube of the current number\n        cube = i**3\n        # adding the cube to the sum of cubes\n        sum_of_cubes += cube\n        # incrementing the count\n        count += 1\n    \n    # calculating the average of cubes\n    average = sum_of_cubes/count\n    \n    # printing the result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average\n\nprint(find_Average_Of_Cube(10)) # Output: 293.3333333333333"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing variable for sum of cubes\n    sum_cubes = 0\n\n    # iterating over first n natural numbers\n    for i in range(1, n+1):\n\n        # calculating cube of i\n        cube = i**3\n\n        # adding cube to sum of cubes\n        sum_cubes += cube\n\n    # calculating average of cubes and returning it\n    average = sum_cubes / n\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    average_cube = cube_sum / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i*i*i\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1,n+1):  \n        sum += i**3  \n    avg = sum/n  \n    print(\"The average of cubes of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i ** 3\n        count += 1\n    average = total / count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [tuple_element[-1] for tuple_element in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, s in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(len(s) - 1)\n        else:\n            rear_indices.append(len(s))\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_index_list.append(test_tuple[i])\n        else:\n            rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list and an element x as input and returns the number of sublists in the list containing the element.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a given list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regex pattern for matching date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # check if the date string matches the regex pattern\n    if re.match(pattern, dt):\n        # split the date string into year, month, and day components\n        year, month, day = dt.split('-')\n        \n        # convert the year to four digits\n        year = '20' + year\n        \n        # join the year, month, and day components back together with dashes\n        new_date = '-'.join([year, month, day])\n        \n        # return the new date in dd-mm-yyyy format\n        return new_date\n    else:\n        return \"Invalid date format. Please use yyyy-mm-dd format.\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the re.sub() function to replace the date format with the desired format\n    dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replace = r'\\3-\\2-\\1'\n    return re.sub(pattern, replace, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression pattern to match the desired format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # use the `re.match` function to match the pattern against the input date string\n    match = re.match(pattern, dt)\n    \n    # check if the match was successful and return the converted date string\n    if match:\n        # extract the year, month, and day from the matched group\n        year, month, day = match.groups()\n        \n        # format the date string using the desired format\n        return f'{day}-{month}-{year}'\n    else:\n        # if the pattern did not match, return the input date string unchanged\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_format = re.sub(r'-', '/', dt)\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.match() to search for a match in the input string\n    match = re.match(pattern, dt)\n    \n    # If a match is found, extract the date parts and format them as dd-mm-yyyy\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_dt = day + '-' + month + '-' + year\n        return formatted_dt\n    \n    # If no match is found, return the input string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern to match the date format in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() function to search for a match with the pattern in the string\n    match = re.search(pattern, dt)\n    # If a match is found, extract the groups and reverse them to match the format dd-mm-yyyy\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    # If no match is found, return the original string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_str = str(dt)\n    new_dt = re.sub(r'-', '/', dt_str)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.match() function to match the pattern against the given date string\n    match = re.match(pattern, dt)\n\n    # If the match is successful, extract the year, month, and day components\n    if match:\n        year, month, day = match.groups()\n\n        # Format the date string in dd-mm-yyyy format using the strftime() function\n        formatted_date = day + '-' + month + '-' + year\n\n        return formatted_date\n\n    # If the date string does not match the pattern, return None\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the input string\n    match = re.match(pattern, dt)\n    \n    # Extract the matched groups and join them with '-' to get the new date format\n    new_date = '-'.join([match.group(2), match.group(3), match.group(1)])\n    \n    # Return the new date format\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = (h-1)//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Step 1: Calculate the size of the sub-arrays\n    n = len(my_list)\n    h = 1\n    # Step 2: Calculate the number of increments\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        # Step 3: Sort the array\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        \n        # Step 4: Decrease the size of the sub-arrays\n        h //= 3\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1: Find the largest gap, which is the largest power of 2 less than n\n    gap = n // 2\n\n    # Step 2: Do insertion sort on the list\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Decrease gap to 3/4 of the previous gap\n        gap = gap // 3\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the length of the array\n    n = len(my_list)\n\n    # Tune the gap to be 1 in the first iteration\n    gap = n // 2\n\n    while gap > 0:\n        # Iterate through the array using the gap value\n        for i in range(gap, n):\n            # Save the current element in temp variable\n            temp = my_list[i]\n            # Move elements of array[0..i-gap-1], that are greater than or equal to temp, to one position ahead of their current position\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Move the temp variable to its correct position in the array\n            my_list[j] = temp\n        # Reduce the gap to half of the previous gap value\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Calculate the gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Traverse through the array for every gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            # Insertion sort\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap sequence\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] and test_tup2[i])\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must be of the same length.')\n    \n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Extract the elements of the two input tuples one by one\n    for i in range(len(test_tup1)):\n        # Perform the elementwise and operation\n        and_element = test_tup1[i] & test_tup2[i]\n        # Add the result to the result list\n        result_list.append(and_element)\n    \n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the two tuples\n    tup1_elems = test_tup1[1:]\n    tup2_elems = test_tup2[1:]\n\n    # Extract the number of elements in the two tuples\n    num_elems = len(tup1_elems)\n\n    # Create an empty list to store the elementwise and tuples\n    result_tup = []\n\n    # Loop through the tuples and extract the elementwise and tuples\n    for i in range(num_elems):\n        elem1 = tup1_elems[i]\n        elem2 = tup2_elems[i]\n        result_tup.append((elem1 and elem2))\n\n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a tuple containing the elementwise and of the two tuples.\n    '''\n    and_result = []\n    for i in range(len(test_tup1)):\n        and_result.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The equation of the parabola has no real root.\"\n    elif delta == 0:\n        return \"The directrix is equal to {:.2f}\".format(-b/(2*a))\n    else:\n        return \"The directrix is equal to {:.2f}\".format((-b + (delta**0.5))/(2*a))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - 4*a*c\n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return x1\n    else:\n        return \"The equation of the parabola has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the coefficients of the quadratic equation\n    discriminant = (b**2) - (4*a*c)\n    \n    # If the discriminant is less than zero, there is no directrix\n    if discriminant < 0:\n        return \"No directrix\"\n    \n    # If the discriminant is equal to zero, the directrix is at x=(-b)/(2a)\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    \n    # If the discriminant is greater than zero, the directrix is at x=(-b)/(2a) and x=(-b)/(2a)\n    else:\n        x1 = (-b)/(2*a)\n        x2 = (-b)/(2*a)\n        \n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = (b**2) - (4*a*c)\n\n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n    else: \n        root1 = -b / (2*a)\n        root2 = -b / (2*a)\n\n    print(\"The directrix is:\", root1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    x = (-b + discriminant**0.5)/(2*a)\n    y = (-b - discriminant**0.5)/(2*a)\n\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + (discriminant**0.5)) / (2*a)\n        x2 = (-b - (discriminant**0.5)) / (2*a)\n        return \"The directrix of the parabola is:\", x1, x2\n    elif discriminant == 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return \"The directrix of the parabola is:\", x1, x2\n    else:\n        return \"The discriminant of the parabola is not positive.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if there is a solution\n    if disc > 0:\n        # calculate the two roots\n        root1 = (-b + math.sqrt(disc)) / (2*a)\n        root2 = (-b - math.sqrt(disc)) / (2*a)\n        \n        # sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n        \n        # return the directrix\n        return root1\n    \n    # if there is no solution, return None\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        root = -b / (2 * a)\n    return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function takes in three coefficients (a, b, c) of a quadratic equation\n    and returns the value of x such that the equation is x^2 = a*x^2 + b*x + c\n    '''\n\n    # Using the quadratic formula, find the root of x^2 = a*x^2 + b*x + c\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b)/(2*a)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return x1, x2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        return False\n    \n    for item in list1:\n        if item in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to store the elements of both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any element of set1 is in set2\n    for element in set1:\n        if element in set2:\n            return True\n    # If we get here, no common element was found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert the lists to sets to remove duplicates and then convert them back to lists to compare\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n    \n    # If the intersection is not empty, it means there is at least one common element in the lists\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of the elements in list1\n    set1 = set(list1)\n    # iterate over the elements in list2\n    for element in list2:\n        # if the element is in set1, return true\n        if element in set1:\n            return True\n    # if no common element is found, return false\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through each element in both lists\n    for elem in list1:\n        if elem in list2:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Create a set from the first list\n    set1 = set(list1)\n    # Iterate through the second list and check if each element exists in the set from the first list\n    for item in list2:\n        if item in set1:\n            return True\n    # If no common element is found, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    length = 0.5 * (base1 + base2 + height)\n\n    # Sort the lengths of the trapezium\n    lengths = sorted([base1, base2, height])\n\n    # Calculate the median length of the trapezium\n    if len(lengths) % 2 == 0:\n        median = 0.5 * (lengths[len(lengths) // 2 - 1] + lengths[len(lengths) // 2])\n    else:\n        median = lengths[len(lengths) // 2]\n\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium\n    length = 0.5 * base1 + 0.5 * base2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * length\n\n    # Calculate the median of the trapezium\n    median = 0.5 * length\n\n    # Calculate the number of triangles required to fill the trapezium\n    triangles = area / (3 * perimeter ** 2)\n\n    # Calculate the median length of the trapezium by finding the nth triangle\n    nth_triangle = 0\n    while nth_triangle < int(triangles):\n        nth_triangle += 1\n\n    # Calculate the area of the nth triangle\n    nth_area = 0.5 * base1 * nth_triangle + 0.5 * base2 * nth_triangle\n\n    # Calculate the length of the nth triangle\n    nth_length = nth_area ** (1 / 2)\n\n    # Calculate the length of the median\n    if nth_length < median:\n        median_length = base1\n    else:\n        median_length = base2\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the trapezium using the formula:\n    # half of the perimeter of the trapezium = base1 + base2 + height\n\n    perimeter = (base1 + base2 + height)/2\n\n    # Calculate the lengths of the shorter and longer sides of the trapezium\n\n    shorter = base1\n    longer = base2\n\n    # Sort the lengths of the shorter and longer sides in ascending order\n\n    if shorter > longer:\n        shorter, longer = longer, shorter\n\n    if shorter > height:\n        shorter = height\n\n    if longer > height:\n        longer = height\n\n    # Calculate the length of the shorter side and the length of the longer side of the trapezium\n\n    short_length = shorter/2\n    long_length = longer/2\n\n    # Calculate the area of the trapezium using the formula:\n    # area = 1/2 * base1 * base2 * height\n\n    area = (short_length * base2 * height + long_length * base1 * height)/2\n\n    # Calculate the area of the trapezium using the formula:\n    # area = 1/2 * base1 * base2 * height\n\n    area = area / 2\n\n    # Calculate the median length of the trapezium using the formula:\n    # median = area/base1\n\n    median = area/short_length\n\n    # Return the median length of the trapezium\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the longest side\n    long_side = max(base1, base2)\n    \n    # Calculate the length of the shortest side\n    short_side = min(base1, base2)\n    \n    # Calculate the length of the base of the trapezium\n    base = long_side - short_side\n    \n    # Calculate the length of the top of the trapezium\n    top = area / (base + height)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom = top + height\n    \n    # Find the middle point of the top and bottom\n    middle = (top + bottom) / 2\n    \n    # Calculate the length of the middle segment of the trapezium\n    middle_segment = middle - top\n    \n    # Return the median length of the trapezium\n    return middle_segment"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the height of the trapezium\n    height_trapezium = area / (base1 + base2)\n\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the length of the lower half of the trapezium\n    lower_half = height_trapezium / 2\n\n    # Calculate the length of the upper half of the trapezium\n    upper_half = height_trapezium - lower_half\n\n    # Calculate the area of the lower half of the trapezium\n    area_lower_half = 0.5 * (lower_half * base1)\n\n    # Calculate the area of the upper half of the trapezium\n    area_upper_half = 0.5 * (upper_half * base2)\n\n    # Calculate the total area of the trapezium\n    area_total = area_lower_half + area_upper_half\n\n    # Calculate the median length of the trapezium\n    median = area_total / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Find the area of each trapezium\n    area1 = 0.5 * base1 * (0.5 * height)\n    area2 = 0.5 * base2 * (0.5 * height)\n    # Find the total area of both trapeziums\n    total_area = area1 + area2\n    # Find the difference in areas between the two trapeziums\n    diff_area = abs(area - total_area)\n    # Find the length of each trapezium\n    length1 = (area1 / total_area) * base1\n    length2 = (area2 / total_area) * base2\n    # Find the difference in lengths between the two trapeziums\n    diff_length = abs(length1 - length2)\n    # Find the median length of the trapezium by taking the average of the two lengths\n    median_length = (length1 + length2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # find the length of the trapezium\n    trapezium = 0.5 * (area1 + area2)\n    \n    # find the areas of the smaller trapeziums\n    area_trapezium1 = base1 * height\n    area_trapezium2 = 0.5 * (base1 + base2) * height\n    \n    # find the length of the smaller trapeziums\n    smaller_trapezium1 = 0.5 * (area_trapezium1 - area1)\n    smaller_trapezium2 = 0.5 * (area_trapezium2 - area2)\n    \n    # find the length of the middle trapezium\n    middle_trapezium = trapezium - (smaller_trapezium1 + smaller_trapezium2)\n    \n    # find the median length of the trapezium\n    median_trapezium = (area_trapezium1 + area_trapezium2) / 2\n    \n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # calculate the length of the trapezium\n    base = (base1 + base2) / 2\n    length = 0.5 * area / base\n    \n    # return the median length of the trapezium\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2 * perimeter / area\n\n    # Sort the lengths of the trapezium in ascending order\n    sorted_lengths = sorted([trapezium_length, base1, base2, height])\n\n    # Calculate the median length of the trapezium\n    median = sorted_lengths[1]\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(True)\n            break\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if number > element:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # iterate through the array and check if the number is greater than each element\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{arr[i]} is greater than {number}\")\n            return True\n    \n    # if no element is greater than the number, return False\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba.*b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Return the last digit of the string\n    return num_str[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Extracting last digit of the given number using string manipulation\n    last_digit = str(n)[-1]\n    # Returning the last digit of the given number\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string to get the last digit\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_list = []\n\n    # loop through the elements of the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to the negative list\n            neg_list.append(num)\n\n    # return the negative list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_nums = []\n    for num in list1:\n        if num < 0:\n            negative_nums.append(num)\n    return negative_nums"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in the list\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters in the string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha() or char.isdigit():\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit() or char in ['a', 'e', 'i', 'o', 'u']:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the result string\n        if char % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through the list of characters\n    for char in str_list:\n        # Check if the character is odd\n        if char % 2 == 1:\n            # If it is, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i <= j:\n                if (i, j) not in test_list:\n                    count += 1\n                if (j, i) not in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[i] == test_list[i + j + 1] and test_list[i + j + 1] == test_list[i + j + 2]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) or (test_list[i][0] == test_list[j][1]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Loop over the list of integers\n    for i in L:\n        # Check if the current integer is a multiple of 10\n        if i % 10 == 0:\n            # If it is, add the integer to the result and set the result to 0\n            result += i\n            i = 0\n        \n        # Add the current integer to the result\n        result += i\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    result = 0\n    for num in L:\n        result += num * multiple\n        multiple *= 10\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    else:\n        return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) == 1:\n        return L[0]\n    else:\n        L = sorted(L)\n        result = L[0] * len(L)\n        for num in L[1:]:\n            result += num\n        return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return multiple_to_single(L[:-1]) * L[-1]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the result to 0\n    result = 0\n    \n    # Loop through each element in the list\n    for num in L:\n        # Convert the element to an integer\n        num = int(num)\n        \n        # If the result is already equal to 0 or the current number is greater than the result, update the result to the current number\n        if result == 0 or num > result:\n            result = num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w*)\\b\\s*(?:st|nd|rd|th)\\b\\s*(?:is|are|was|were)\\s*(?:a|an|the)\\s*(?:adverb)\\b\\s*(?:(?![\\w\\s]).*?|$)'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    result = []\n\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start(0)\n        result.append((adverb, position))\n\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all instances of adverbs\n    adverbs = re.findall(r'\\b\\w*ed\\b|\\b\\w*ing\\b|\\b\\w*ly\\b', text)\n\n    # Find the position of each adverb in the original sentence\n    adverb_positions = []\n    for i, word in enumerate(text.split()):\n        for adverb in adverbs:\n            if word.lower() == adverb.lower() and i == 0:\n                adverb_positions.append(i)\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split the text into words\n    words = re.findall(r'\\w+', text)\n    \n    # initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # loop through each word in the list\n    for i, word in enumerate(words):\n        # check if the word is a preposition or a conjunction\n        if word.lower() in ['of', 'to', 'with', 'after', 'before', 'during', 'before', 'after']:\n            # if it is, get the previous word\n            prev_word = words[i-1] if i-1 >= 0 else ''\n            # if the previous word is an adverb, add its position to the list\n            if prev_word.lower() in ['very','really', 'well', 'actually', 'definitely', 'quite', 'actually','very','really', 'well']:\n                adverb_positions.append(i)\n    \n    # return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b([a-zA-Z]+)ed\\b', text)\n    if adverbs:\n        print(\"Adverbs found:\", adverbs)\n        for i, adverb in enumerate(adverbs):\n            print(f\"{i+1}. {adverb}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define pattern to match adverbs\n    pattern = r'(\\b|\\w+)(\\w*)\\b(\\b|\\w+)\\b'\n    # use regular expression to search for matches in the sentence\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # iterate through matches and print the first adverb and its position\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start(1)\n        print(f'The first adverb found is {adverb} and it is located at position {position}.')\n    # return None if no adverbs are found\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find adverbs\n    pattern = r'\\b(\\w+)(\\w*)\\b(\\w+)(\\w*)\\b(\\w+)(\\w*)\\b(\\w+)(\\w*)\\b(\\w+)(\\w*)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Initialize lists to store adverbs and their positions\n    adverbs = []\n    positions = []\n    \n    # Loop through each match and add adverbs and their positions to lists\n    for match in matches:\n        adverb = match[0].lower()\n        positions.append(text.lower().index(match[0].lower()))\n        \n        if match[1]:\n            positions.append(text.lower().index(match[1].lower()))\n        if match[2]:\n            positions.append(text.lower().index(match[2].lower()))\n        if match[3]:\n            positions.append(text.lower().index(match[3].lower()))\n        if match[4]:\n            positions.append(text.lower().index(match[4].lower()))\n        if match[5]:\n            positions.append(text.lower().index(match[5].lower()))\n        if match[6]:\n            positions.append(text.lower().index(match[6].lower()))\n        if match[7]:\n            positions.append(text.lower().index(match[7].lower()))\n        if match[8]:\n            positions.append(text.lower().index(match[8].lower()))\n    \n    # Find the first adverb and its position in the text\n    if adverbs:\n        first_adverb = adverbs[0]\n        first_position = positions[0]\n    else:\n        first_adverb = None\n        first_position = None\n    \n    return first_adverb, first_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-z]\\w*s\\b', text)\n    # Sort the adverbs in ascending order of their position in the sentence\n    adverbs = sorted(adverbs, key=lambda x: text.index(x))\n    # If there is no adverb, return None\n    if not adverbs:\n        return None\n    # Find the position of the first adverb\n    position = text.index(adverbs[0])\n    # Return the adverbs and their positions\n    return adverbs, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a pattern to match adverbs\n    pattern = r'\\b([a-z]+)ing\\b|\\b([a-z]+)ed\\b|\\b([a-z]+)er\\b|\\b([a-z]+)est\\b|\\b([a-z]+)ion\\b|\\b([a-z]+)ive\\b|\\b([a-z]+)ous\\b|\\b([a-z]+)y\\b'\n    \n    # Find all the adverbs in the sentence using the pattern\n    adverbs = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the positions of adverbs\n    positions = []\n    \n    # Iterate through each adverb and find its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Find the starting position of the adverb in the sentence\n        start = text.find(adverb)\n        \n        # If the start position is not -1, append its position to the positions list\n        if start!= -1:\n            positions.append(start)\n    \n    # Return the list of positions of adverbs in the sentence\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b([a-zA-Z]+)\\s*[-\u2013](\\s*[a-zA-Z]+)*\\b', text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverb_positions = []\n\n    # Iterate through the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # Check if the adverb is a proper noun\n        if adverb[0] in ['a', 'an', 'the']:\n            # Check if the previous adverb was a verb\n            if i > 0 and adverbs[i-1][0] in ['be', 'being']:\n                # If both conditions are true, add the adverb and its position to the list\n                adverb_positions.append((adverb[0], adverb[1]))\n\n    # Sort the list by the position\n    adverb_positions.sort(key=lambda x: x[1])\n\n    # Return the list of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for finding adverbs\n    pattern = r'\\b(really|very|just|well|seriously|amazing|amazingly|awesomeness|awesomenesses|amazement|amazements|aweomeness|aweomenesses|aweomnes|aweomnesses|awestruck|awestruckly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruckness|awestrucknesses|awestrucks|awestrucked|awestrucking|awestruckingly|awestruck"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area using the formula surface area = 6 * l^2\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2 # formula to find surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l # Formula for surface area of cube\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store positive numbers\n    positive_nums = array('i')\n    # iterate through the array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # add the number to the positive_nums array\n            positive_nums.append(num)\n    # calculate the number of positive numbers in the array\n    positive_num_count = len(positive_nums)\n    # calculate the ration of positive numbers\n    positive_num_ratio = positive_num_count / len(nums)\n    # return the ration of positive numbers\n    return positive_num_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    positive_ratio = positive_count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i', [0]*len(nums))\n    for num in nums:\n        if num > 0:\n            positive_array.append(1)\n    pos_count = sum(positive_array)\n    pos_ratio = pos_count / len(nums)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    negative_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n        else:\n            negative_nums += 1\n    ratio = positive_nums / (positive_nums + negative_nums)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = 0\n    \n    # iterate through the array and count the number of positive numbers\n    for num in nums:\n        total_count += 1\n        if num > 0:\n            pos_count += 1\n    \n    # calculate the ration of positive numbers\n    pos_ratio = float(pos_count) / total_count\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns a float value representing the\n    ratio of positive numbers in the array.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n\n    positive_ratio = positive_count / (positive_count + negative_count + zero_count)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    count = 0\n\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n            count += 1\n        else:\n            negative.append(num)\n\n    if count == 0:\n        return 0\n    else:\n        return float(positive.itemsize) / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count_positive = 0\n    count_total = len(nums)\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / count_total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    neg_nums = array('i')\n    zero_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        elif num < 0:\n            neg_nums.append(num)\n        else:\n            zero_nums.append(num)\n    \n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    zero_count = len(zero_nums)\n    \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    # convert the array to an array of integers\n    nums = array('i', nums)\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through each element in the array\n    for num in nums:\n        # if the element is positive, increment the counter\n        if num > 0:\n            count += 1\n\n    # calculate the ration of positive numbers\n    ratio = count / len(nums)\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]  # assuming the first element is the largest negative number\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n\n    # Initialize max_neg to negative infinity\n    max_neg = float('-inf')\n\n    # Iterate through the list and find the largest negative number\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num\n\n    # Return the largest negative number\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate over the tuples in the list\n    for i in range(len(test_list)):\n        # split the tuple into two parts\n        part1, part2 = test_list[i]\n        # calculate the trimmed length of the first part\n        trimmed_len = len(part1) - K\n        # trim the first part of the tuple\n        test_list[i] = (part1[:trimmed_len], part2)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # Remove the k elements from the end of the tuple\n            tup = tup[:-K]\n    # Return the updated list of tuples\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Extract the kth element from each tuple\n        kth_element = test_list[i][K-1]\n        # Loop through the rest of the tuple and replace the kth element with None\n        for j in range(K, len(test_list[i])):\n            test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1][-K:])\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K], test_list[i][2][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:j-K]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = tuple(test_list[i][:j] + test_list[i][j+K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j + K < len(test_list[i]):\n                del test_list[i][j+K:]\n                break"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Checking the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length\")\n        return\n\n    # Initializing an empty list to store the multiplication result\n    multiplication_result = []\n\n    # Performing index wise multiplication of the two tuples and storing the result in the multiplication_result list\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n\n    # Returning the multiplication result as a tuple\n    return tuple(multiplication_result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have same length.\"\n\n    # Initialize a new tuple with length of the first tuple\n    new_tup = ()\n\n    # Perform index wise multiplication of tuple elements in the given two tuples\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] * test_tup2[i],)\n\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = Counter()\n\n    for element in lst:\n        count[element] += counter[element]\n\n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    return count[item] for item in lst if item in count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # using Counter function from collections module to count the occurrence of all elements of list in the tuple\n    count = Counter(tup)\n    count_lst = []\n    for i in count:\n        count_lst.append(count[i])\n\n    # comparing the count of elements in list with count of elements in the tuple\n    count_tup = Counter(lst)\n    for i in count_tup:\n        if i in count_lst:\n            count_lst[count_lst.index(i)] += count_tup[i]\n        else:\n            count_lst.append(count_tup[i])\n\n    # printing the count of elements in the list\n    print(\"Count of elements in the list:\", count_lst)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary\n    containing the count of each element in the list.\n    '''\n    # create a dictionary to store the counts of each element in the list\n    counts = {}\n    # loop through each element in the list\n    for item in lst:\n        # if the element is in the tuple, add it to the count in the dictionary\n        if item in tup:\n            counts[item] = counts.get(item, 0) + 1\n    # return the dictionary with the counts of each element in the list\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    for i in range(len(tup)):\n        if tup[i] in count_dict:\n            tup[i] = count_dict[tup[i]]\n        else:\n            tup[i] = 0\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = list(count_dict.values())\n    count_tup = tuple(count_dict.keys())\n    count_lst = []\n    \n    for i in range(len(lst)):\n        count_lst.append(count_dict[lst[i]])\n    \n    return count_tup, count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in tup:\n        count[i] += 1\n    \n    for i in lst:\n        if i in count:\n            count[i] += 1\n    \n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(perrin)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n\n    Args:\n        n (int): Upper limit of the Perrin numbers to be calculated.\n\n    Returns:\n        int: Sum of Perrin numbers up to n.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef cal_sum(n):\n    \"\"\"\n    A function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_nums = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            perrin_nums.append(i)\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += (i**3)*(4*i**2+1)\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i * i * i + 4*i * i + 6*i)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n\n    # Initialize the sum of Perrin numbers\n    sum_perrin = 0\n\n    # Iterate through the given range of numbers\n    for i in range(1, n+1):\n        # Calculate the Perrin number\n        perrin = 100000000000000 - (i * i * 100000000000000)\n\n        # Add the Perrin number to the sum\n        sum_perrin += perrin\n\n    # Return the sum of Perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1, 3, 5, 7, 9] \n    p_sum = 0 \n    for i in range(1, n+1): \n        p_sum += p[i-1] \n    return p_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    sum_of_perrin_numbers = sum(perrin_numbers[:n])\n    return sum_of_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize a variable to store the sum\n    sum_perrin = 0\n    # loop through the range of n numbers\n    for i in range(1, n+1): \n        # check if the number is a perrin number\n        if is_perrin(i): \n            # add the number to the sum\n            sum_perrin += i\n    # return the sum of the perrin numbers\n    return sum_perrin\n\ndef is_perrin(n): \n    '''\n    Check if a number is a perrin number.\n    '''\n    # loop through the first 6 perrin numbers\n    for i in range(2, 11): \n        # if n is divisible by i, return False\n        if n % i == 0: \n            return False\n    # if none of the numbers in the range 2-10 divide n, return True\n    return True"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:size] for x in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of the strings to extract as input and returns a list of strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a list of strings.\n    \n    Args:\n    str_list (list): list of strings\n    size (int): size of string to extract\n    \n    Returns:\n    list: list of extracted strings\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_str_list.append(str_list[i][:size])\n        else:\n            extracted_str_list.append(str_list[i])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts strings of size l from a given list of strings.\n    '''\n    return [s[:l] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as inputs and returns a new list of\n    strings of length size extracted from the input list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer 'l' as input.\n    It returns a list of strings of length 'l' extracted from the input list.\n    '''\n    if len(str_list) >= l:\n        return str_list[:l]\n    else:\n        return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the given string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    # Use the `re.sub()` function to replace all whitespaces with an empty string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    # replace all consecutive whitespaces with a single whitespace\n    text = re.sub(r'\\s+','', text)\n    # remove all whitespaces from the string\n    text = re.sub(r'\\s', '', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # if the actual cost is greater than the sale amount, return loss amount\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_evens = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_evens += i\n    return sum_of_evens"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n+1):\n        # check if the number is even\n        if i % 2 == 0:\n            even_factors.append(i)\n\n    # add up the even factors\n    sum_even_factors = sum(even_factors)\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initializing a variable to store the sum of even factors\n    sum_of_factors = 0\n    \n    # Using a for loop to iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the current number is even and divisible by 2, add it to the sum of even factors\n        if i % 2 == 0 and n % i == 0:\n            sum_of_factors += i\n    \n    # Returning the sum of even factors\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    \n    sum_of_even_factors = 0\n    for factor in even_factors:\n        sum_of_even_factors += factor\n    \n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Get all even factors of the given number\n    factors = [i for i in range(2, int(math.sqrt(n))+1) if n%i == 0 and i%2 == 0]\n\n    # Calculate the sum of even factors\n    sum = sum(factors)\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            even_factors.append(i)\n            even_factors.append(i+2)\n    sum_even_factors = sum(even_factors)\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum to zero\n    sum_even = 0\n\n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1): \n        # Check if i is even and divisible by n\n        if i % 2 == 0 and i % n == 0: \n            # Add i to sum_even\n            sum_even += i\n\n    # Return sum_even\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n\n    # Find all the even factors of the number\n    evenFactors = [x for x in range(2, n+1, 2) if n % x == 0]\n\n    # Calculate the sum of the even factors\n    sumOfFactors = sum(evenFactors)\n\n    return sumOfFactors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    # Use re.findall() to find all non-overlapping occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+\\sz\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Define the pattern to match 'z'\n    pattern = r'\\b(z)\\w+\\b'\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If the pattern is found, return the matched word\n    if match:\n        return match.group(1)\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum <= 12:\n        if monthnum == 2:\n            return 28\n        elif monthnum % 2 == 0:\n            return 30\n        else:\n            return 31\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = str(monthnum2)\n    days = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum in days:\n        if days[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number.\")\n        return\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days[2] = 29\n        else:\n            days[2] = 28\n    else:\n        days[2] = 28\n    for i in range(len(days)):\n        if days[i] == monthnum2:\n            return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1,13):\n        if monthnum2 in [4,6,9,11]:\n            return True\n        elif monthnum2 in [2,3,5,7,8,10,12]:\n            return False\n        else:\n            raise ValueError(\"Invalid month number\")\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(monthnum2, int):\n        print(\"Input should be an integer.\")\n        return None\n\n    # Check if the input is between 1 and 12\n    if not (1 <= monthnum2 <= 12):\n        print(\"Input should be between 1 and 12.\")\n        return None\n\n    # Check if the month number contains 31 days\n    if monthnum2 == 2:\n        return True\n    elif (monthnum2 % 2 == 0 and monthnum2 % 3 == 0) or (monthnum2 % 2!= 0 and monthnum2 % 3!= 0):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days, otherwise False.\n    \"\"\"\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist to empty list\n\n    for i in range(len(lst)): # iterate through all elements of the list\n        for j in range(i+1, len(lst)+1): # iterate through all possible sublists of length from i+1 to the end of the list\n            if lst[j] < min_length: # check if the length of the sublist is less than minimum length\n                min_length = lst[j] # update minimum length if it is less\n                min_sublist = lst[i:j] # update minimum sublist if it is shorter\n\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist to an empty list\n    \n    for sublist in lst: \n        if len(sublist) < min_length: # check if the current sublist has a smaller length than the minimum length\n            min_length = len(sublist) # update the minimum length to the current sublist length\n            min_sublist = sublist # update the minimum sublist to the current sublist\n            \n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_sublist = lst[i:j+1]\n            if len(current_sublist) < min_length:\n                min_length = len(current_sublist)\n                min_sublist = current_sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # replace all uppercase substrings in str1 with an empty string\n    str2 = pattern.sub('', str1)\n    # return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]'\n    \n    # Use the search() method to search for uppercase substrings\n    match = re.search(pattern, str1)\n    \n    # If a match is found, remove it from the string and recursively call the function on the remaining substring\n    if match:\n        str1 = re.sub(pattern, '', str1)\n        remove_uppercase(str1)\n    else:\n        print(str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Find all matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n\n    # Loop through all the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove all uppercase substrings using regular expressions\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all matches from the string\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase characters\n    pattern = re.compile(r'[A-Z]')\n\n    # Find all uppercase substrings in the given string\n    uppercase_substrings = pattern.findall(str1)\n\n    # Remove the uppercase substrings from the original string\n    str1 = pattern.sub('', str1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    extracted_lst = []\n    for item in lst:\n        extracted_lst.append(item[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # define an empty list to store the combinations\n    combinations = []\n    \n    # loop through the given list\n    for i in range(len(list1)):\n        # loop through the rest of the list\n        for j in range(i+1, len(list1)+1):\n            # create a tuple of the current combination\n            current_combination = tuple(list1[i:j])\n            # add the current combination to the list of combinations\n            combinations.append(current_combination)\n    \n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)//i+1):\n            result.append(list1[j*i:j*i+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort() # sort the list to make the combinations easier to find\n    n = len(list1) # length of the list\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of the elements of the list.\n    \"\"\"\n    n = len(lst)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(' '.join(str(x) for x in list1[i:j]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize empty list to hold all combinations\n    all_combinations = []\n\n    # Loop through all possible indices of the first list\n    for i in range(len(list1)):\n        # Initialize empty list to hold the current combination\n        current_combination = []\n\n        # Loop through all possible indices of the remaining lists\n        for j in range(len(list1) - 1):\n            # If the current index is not equal to the current index of the first list, add the current element to the combination\n            if j!= i:\n                current_combination.append(list1[j])\n\n        # Add the current combination to the list of all combinations\n        all_combinations.append(current_combination)\n\n    # Return the list of all combinations\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # generate all possible combinations of the elements in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            yield list1[i:j]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(len(arr)):\n        if curr_product < 0:\n            curr_product = 1\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    negative_product = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_product = 1\n            current_product = 1\n        else:\n            negative_product *= -1\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if not arr:  # empty array\n        return 0\n    if len(arr) == 1:  # only one element\n        return arr[0]\n    if len(arr) == 2:  # both elements are positive\n        return max(arr[0], arr[1])\n    if arr[0] < 0:  # first element is negative\n        return max(arr[0] * max_subarray_product(arr[1:]), max_subarray_product(arr[1:]))\n    else:  # first element is positive\n        return max(arr[0] * max_subarray_product(arr[1:]), max_subarray_product(arr[1:]))"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product < 0:\n            current_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = float('-inf')\n    current_product = 1\n    neg_product = float('-inf')\n    \n    for num in arr:\n        if num < 0:\n            neg_product = current_product\n            current_product = 1\n        else:\n            current_product *= num\n            \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], arr[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_negative = 1\n    min_ending_here_negative = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here_negative * arr[i], arr[i])\n            min_ending_here = min(min_ending_here_negative * arr[i], arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if min_ending_here < min_ending_here_negative:\n            min_ending_here_negative = min_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product = max(curr_product * num, num)\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a set to remove duplicates\n    set_dict = set(dict.values())\n    # Check if all the values in the set are same\n    if len(set_dict) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        return all(value == dict[list(dict.keys())[0]] for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for key, value in dict.items():\n        if n == 1:\n            return True\n        elif value!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if value!= dict.values()[count]:\n            break\n        else:\n            count += 1\n    if count == len(dict.values()):\n        print(\"All values are same\")\n    else:\n        print(\"Some values are different\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a set to store unique values\n    unique_set = set()\n    # iterate through each value in the dictionary\n    for value in dict.values():\n        # check if the value is already in the set\n        if value in unique_set:\n            # if yes, return False\n            return False\n        # otherwise, add the value to the set\n        else:\n            unique_set.add(value)\n    # if all values are unique, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == n"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n\n    # iterate through each key in the dictionary\n    for key in dict1.keys():\n        \n        # if the value associated with the key is an empty string, delete the key-value pair\n        if dict1[key] == '':\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr (list): A list of integers representing the array.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    \"\"\"\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        if num > 0:\n            curr_product *= num\n            if curr_product > max_product:\n                max_product = curr_product\n        else:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize two variables to keep track of the maximum product of two increasing subsequences\n    max_product_1 = float('-inf')\n    max_product_2 = float('-inf')\n\n    # Initialize two variables to keep track of the length of the longest increasing subsequence found so far\n    length_1 = 1\n    length_2 = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current number is greater than the previous element of the subsequence, add one to the length of the subsequence\n        if arr[i] > arr[i-1]:\n            length_1 += 1\n        else:\n            # If the current number is less than or equal to the previous element of the subsequence, remove one from the length of the subsequence\n            length_1 -= 1\n\n        # If the length of the longest increasing subsequence found so far is greater than the length of the current subsequence, update the longest increasing subsequence found so far\n        if length_1 > length_2:\n            max_product_2 = max_product_1\n            length_2 = length_1\n        # Update the maximum product of the two increasing subsequences\n        else:\n            max_product_2 = max(max_product_2, max_product_1*arr[i-length_2+1])\n\n        # If the current number is greater than the previous element of the subsequence, add one to the length of the subsequence\n        if arr[i] > arr[i-1]:\n            length_2 += 1\n        else:\n            # If the current number is less than or equal to the previous element of the subsequence, remove one from the length of the subsequence\n            length_2 -= 1\n\n        # If the length of the longest increasing subsequence found so far is greater than the length of the current subsequence, update the longest increasing subsequence found so far\n        if length_2 > length_1:\n            max_product_1 = max_product_2\n            length_1 = length_2\n        # Update the maximum product of the two increasing subsequences\n        else:\n            max_product_1 = max(max_product_1, max_product_2*arr[i-length_1+1])\n\n    # Return the maximum product of the two increasing subsequences\n    return max(max_product_1, max_product_2)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    products = []\n    for i in range(1, len(arr)):\n        product = arr[i] * arr[i-1]\n        if not products or product > max(products):\n            products.append(product)\n    return max(products)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            min_so_far = min(min_so_far, min_ending_here)\n        else:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n\n        max_product = max(max_product, max_so_far * min_so_far)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    max_product = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                dp[i] = max_product\n    return max_product, dp"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # loop through array\n    for i in range(1, len(arr)):\n        # update max_ending_here and min_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        # update max_so_far\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        if arr[i-1] < arr[i]:\n            dp[i] = max(dp[i-1] * arr[i], dp[i-1])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    current_max_product = 1\n    current_min_product = 1\n\n    for i in range(len(arr)):\n        if i > 0:\n            if arr[i] < arr[i - 1]:\n                current_max_product = current_min_product * arr[i]\n                current_min_product = current_max_product\n\n        max_product = max(max_product, current_max_product)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(1, len(test_tup)):\n        pairwise_sum += test_tup[i-1] + test_tup[i]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Initialize a new tuple to store the pairwise sums\n    result_tup = []\n    # Loop through the tuple, adding the neighboring elements to form the pairwise sum\n    for i in range(length-1):\n        result_tup.append(test_tup[i] + test_tup[i+1])\n    # Return the final result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"The given tuple must have at least two elements.\"\n    else:\n        return sum(test_tup[1:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            result += test_tup[i]\n        else:\n            result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 'Invalid input'\n    else:\n        pair_sum = 0\n        for i in range(1, len(test_tup)):\n            pair_sum += test_tup[i-1] + test_tup[i]\n        return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Initialize a variable to store the sum\n    sum_list = []\n    # Loop through the tuple and add the neighboring elements\n    for i in range(length):\n        # Check if the current index is the last one in the tuple\n        if i == length-1:\n            # If it is, add the last element to the sum list\n            sum_list.append(test_tup[i])\n        else:\n            # If it's not, add the next element to the sum list\n            sum_list.append(test_tup[i] + test_tup[i+1])\n    # Return the sum list as a tuple\n    return tuple(sum_list)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i + 1]\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = result * arr[i] % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input. It calculates the product of the array multiplied \n    modulo n and returns the remainder.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): An integer.\n\n    Returns:\n    int: The remainder of the array multiplication modulo n.\n\n    '''\n\n    # Calculate the product of array multiplication modulo n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters:\n    arr: a list of integers\n    n: an integer\n\n    The function returns the product of the array multiplication modulo n.\n\n    The function calculates the product of the array multiplication modulo n by first finding the product of all the elements in the array. Then, it takes the remainder of the product by n and returns the result.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n        prod %= n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result *= num\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!= 1: \n            return False \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list has at least one element\n    if len(l) < 1:\n        return False\n    \n    # Check if the first element is 1\n    if l[0]!= 1:\n        return False\n    \n    # Check if the first two elements are 2\n    if l[0] + l[1]!= 2:\n        return False\n    \n    # Check if there are any consecutive elements\n    for i in range(2, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True\n\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize an empty list to store the intersection\n    intersection = []\n    # iterate over each tuple in the first list\n    for tuple1 in test_list1:\n        # check if the tuple exists in the second list\n        if tuple1 in test_list2:\n            # if it does, add it to the intersection list\n            intersection.append(tuple1)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements\n    unique_elements = set()\n\n    # Iterate through the first list and add all the elements to the set\n    for element in test_list1:\n        unique_elements.add(element)\n\n    # Iterate through the second list and remove the elements that are not in the first list\n    for element in test_list2:\n        unique_elements.discard(element)\n\n    # Return the set as a tuple\n    return tuple(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_list = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection_list:\n            intersection_list.append(item)\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize empty set to store the intersection\n    intersection = set()\n\n    # Iterate through each tuple in the first list\n    for tuple1 in test_list1:\n        # Check if the tuple is present in the second list\n        if tuple1 in test_list2:\n            # If it is present, add it to the intersection set\n            intersection.add(tuple1)\n\n    # Return the intersection set\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = set(test_list1) & set(test_list2)\n    return list(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of the elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Define an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate through each tuple in the first list\n    for tup1 in test_list1:\n        # Iterate through each tuple in the second list\n        for tup2 in test_list2:\n            # Check if the tuples have the same elements\n            if tup1 == tup2:\n                # Add the tuple to the common_elements set\n                common_elements.add(tup1)\n\n    # Return the common_elements set as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and then convert back to lists.\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Create a new list that only contains the common elements from both sets.\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the lists in ascending order\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initialize an empty set to store the unique elements of both lists\n    unique_elements = set()\n\n    # Iterate through the lists and add the unique elements to the set\n    for element in test_list1:\n        if element in test_list2:\n            unique_elements.add(element)\n\n    # Return the tuple of unique elements\n    return tuple(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection_list.append(tup)\n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Loop through the string and replace the characters\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    \n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes three arguments - the original string, character to be replaced, and the character to replace it with.\n    It returns the modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the original character.\n\n    Returns:\n    str: The modified string with replaced characters.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char!= ch:\n            new_str += char\n        else:\n            new_str += newch\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character with another character in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n    \"\"\"\n    # Create a counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    # Convert the sorted counter back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # create a counter object to count the frequency of values in the dictionary\n    counter = Counter(dict1.values())\n\n    # sort the dictionary by value in descending order\n    sorted_counter = counter.most_common(len(dict1))\n\n    # convert the sorted counter object to a dictionary and return it\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value (in descending order)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_count = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return sorted_count"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object in descending order\n    sorted_dict = dict(counter.most_common())\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    This function takes a list of numbers and finds the sum of the largest and smallest values.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # calculate the sum of the largest and smallest values\n    sum_of_largest_smallest = largest + smallest\n    \n    return sum_of_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    \n    # find the largest and smallest value\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # calculate the sum of the largest and smallest value\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Calculate the sum of the largest and smallest value in the array\n    max_sum = min_sum = nums[0]\n    for num in nums:\n        max_sum = max(max_sum, num)\n        min_sum = min(min_sum, num)\n\n    # Return the sum of the largest and smallest value\n    return max_sum + min_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the array and find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return max(nums[0], nums[1])\n    else:\n        smallest = min(nums[0], nums[1])\n        largest = max(nums[0], nums[1])\n        middle = len(nums) // 2\n        left_sum = big_sum(nums[:middle])\n        right_sum = big_sum(nums[middle:])\n        return left_sum + right_sum + smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the sum of the largest and smallest value\n    return nums[-1] + nums[0]"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case using the in-place lower() method\n    string.lower()\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove each lowercase substring from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern for lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() method to find all lowercase substrings in the given string\n    matches = re.findall(pattern, str1)\n\n    # Remove the lowercase substrings from the original string\n    str2 = ''.join([char for char in str1 if char not in matches])\n\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    \n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Remove the lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the string into substrings based on non-alphanumeric characters\n    substrings = re.findall(r'\\w+', str1)\n    # Combine the non-alphanumeric substrings into a single string\n    result = ''.join(substrings)\n    # Return the result string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b\\w*\\b')\n    \n    # Find all lowercase substrings in the string\n    lowercase_substrings = pattern.findall(string.lower())\n    \n    # Remove the lowercase substrings from the string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    \n    # find all lowercase substrings in the string using the pattern\n    substrings = pattern.findall(str1)\n    \n    # remove the lowercase substrings from the string\n    for substr in substrings:\n        str1 = re.sub(r'\\b' + substr + r'\\b', '', str1, flags=re.IGNORECASE)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove lowercase substrings using regular expressions\n    result = re.sub('[a-z]+', '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into words\n    words = string.lower().split()\n    # Remove all substrings that start with a lowercase letter\n    words = [word for word in words if not re.search(r'^[a-z]', word)]\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    # Convert the number to a string\n    number = str(n)\n    # Return the first digit of the string\n    return number[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    str_num = str(n)\n    # Extract the first character of the string\n    first_char = str_num[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    # convert the number to string to iterate over its digits\n    num_str = str(n)\n    # loop over the digits of the string\n    for digit in num_str:\n        # print the first digit found\n        print(digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0:\n        return n % 10\n    else:\n        return None"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # find the first digit of the number\n    first_digit = str(n)[0]\n    \n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers as an input and returns only the odd numbers.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: # checks if the number is odd using modulus operator\n            odd_list.append(num) # appends the odd number to the list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to store the sum of cubes and the sum of natural numbers\n    cubes_sum = 0\n    natural_sum = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers and store it in the cubes_sum variable\n    for i in range(1, n+1):\n        cubes_sum += i ** 3\n    \n    # Calculate the sum of the first n natural numbers and store it in the natural_sum variable\n    for i in range(1, n+1):\n        natural_sum += i\n    \n    # Calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = abs(cubes_sum - natural_sum)\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i ** 3 for i in range(1, n + 1)])\n    sum_numbers = sum(range(1, n + 1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # Compute the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Compute the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    # Find the sum of the first n natural numbers\n    first_sum = sum(range(1, n+1))\n\n    # Find the sum of cubes of the first n natural numbers\n    cube_sum = sum([x**3 for x in range(1, n+1)])\n\n    # Find the difference between the two sums\n    difference_sum = first_sum - cube_sum\n\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = [i for i in range(1, n+1)]  # creating a list of first n natural numbers\n    first_n_cubed = [i**3 for i in first_n]  # creating a list of cubes of first n natural numbers\n    sum_first_n = sum(first_n)  # finding the sum of first n natural numbers\n    sum_first_n_cubed = sum(first_n_cubed)  # finding the sum of cubes of first n natural numbers\n    difference = sum_first_n_cubed - sum_first_n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    first_n_sum = sum(range(1, n+1))\n    return sum_cubes - first_n_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n\n    # difference between the two sums\n    difference_sum = sum_of_numbers - sum_of_cubes\n\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_cubes(n):\n    \"\"\"\n    Calculate the sum of the cubes of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    return sum_cubes\n\ndef difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes_n = sum_of_cubes(n)\n    sum_n = sum(range(1, n+1))\n    return sum_cubes_n - sum_n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function counts the number of odd pairs in an array.\n\n    Parameters:\n    A (list): list of integers\n    N (int): size of the array\n\n    Returns:\n    int: number of odd pairs\n\n    Example:\n    A = [1, 2, 3, 4, 5, 6, 7, 8]\n    N = 8\n    Output: 4\n    '''\n    # Initialize variables\n    count = 0\n    odd_sum = 0\n\n    # Iterate through the array\n    for i in range(N):\n        # Calculate the xor of the element and the rest of the elements\n        xor_sum = sum([x ^ A[j] for j in range(i) if j < N])\n        # Check if the xor is odd\n        if xor_sum % 2!= 0:\n            # Increment the count and the sum of odd elements\n            count += 1\n            odd_sum += A[i]\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    xor_sum = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n        count += (xor_sum % 2!= 0)\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n\n    # Initialize a variable to store the count of odd pairs\n    count = 0\n\n    # Iterate over all possible pairs of integers in the array A\n    for i in range(N):\n        for j in range(i+1, N):\n\n            # Check if the xor of the two integers is odd\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A of N integers and returns the number of pairs whose xor value is odd.\n    '''\n\n    # XOR all the elements of A\n    xor_val = sum(A)\n\n    # Initialize a counter to keep track of the number of odd pairs\n    count = 0\n\n    # Iterate over the range of N-1 to 1\n    for i in range(N-1, -1, -1):\n\n        # Find the xor of the first i elements of A\n        xor_pair = xor_val ^ A[i]\n\n        # If the xor of the pair is odd, increment the counter\n        if xor_pair % 2 == 1:\n            count += 1\n\n    # Return the final count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        xor_value = 0\n        for j in range(N):\n            xor_value ^= A[i][j]\n        if xor_value % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert string to lowercase\n    string = string.lower()\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert it to lowercase\n        if string[i] == string[i].upper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert it to uppercase\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # convert the string back to uppercase\n    return string.upper()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum to 0\n    sum_diff = 0\n    # convert each number to a list of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    # loop through each digit in n1\n    for i in range(len(n1_list)):\n        # subtract the corresponding digit from n2\n        diff = int(n2_list[i]) - int(n1_list[i])\n        # add the per-digit difference to the sum\n        sum_diff += diff**2\n    # calculate the square root of the sum\n    root_sum = (sum_diff ** 0.5)\n    # return the sum of the per-digit differences\n    return root_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # initialize the sum of differences\n    total_diff = 0\n\n    # iterate through the digits of the numbers\n    for i in range(len(s1)):\n        # get the digits of the two numbers\n        d1 = int(s1[i])\n        d2 = int(s2[i])\n\n        # calculate the absolute difference between the digits\n        diff = abs(d1 - d2)\n\n        # add the difference to the total difference\n        total_diff += diff\n\n    # return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to lists of digits\n    digit_list1 = [int(d) for d in str(n1)]\n    digit_list2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference between the two lists\n    diff_list = [abs(d1 - d2) for d1, d2 in zip(digit_list1, digit_list2)]\n    \n    # Calculate the sum of the per-digit difference\n    sum_diff = sum(diff_list)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to a list of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    \n    # Calculate the sum of the per-digit differences between the two lists of digits\n    sum_diff = 0\n    for i in range(len(num1_digits)):\n        diff = abs(num1_digits[i] - num2_digits[i])\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Find the difference between the two integers\n    diff = n1 - n2\n    \n    # Convert the difference to a list of digits\n    diff_list = [int(x) for x in str(diff)]\n    \n    # Initialize the sum variable\n    sum_diff = 0\n    \n    # Loop through each digit in the list and add its absolute value to the sum variable\n    for digit in diff_list:\n        sum_diff += abs(digit)\n    \n    # Return the sum\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of the differences\n    digit_diff_sum = 0\n\n    # Loop through each digit in the first integer\n    for digit1 in str(n1):\n        # Convert the current digit to an integer\n        digit1 = int(digit1)\n\n        # Loop through each digit in the second integer\n        for digit2 in str(n2):\n            # Convert the current digit to an integer\n            digit2 = int(digit2)\n\n            # Calculate the difference between the two digits\n            digit_diff = abs(digit1 - digit2)\n\n            # Add the difference to the digit difference sum\n            digit_diff_sum += digit_diff\n\n    # Return the sum of the digit difference\n    return digit_diff_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    # Calculate the difference between the two numbers in reverse order\n    n1_reversed = int(str(n1)[::-1])\n    n2_reversed = int(str(n2)[::-1])\n    # Calculate the sum of the per-digit differences between the two reversed numbers\n    for i in range(len(str(n1_reversed))):\n        distance += abs(n1_reversed % 10 - n2_reversed % 10)\n        n1_reversed //= 10\n        n2_reversed //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables to store the per-digit differences\n    diff1 = 0\n    diff2 = 0\n    # convert both numbers to strings and iterate through each digit\n    for i in str(n1):\n        diff1 += abs(int(i) - int(str(n2)[i]))\n    for i in str(n2):\n        diff2 += abs(int(i) - int(str(n1)[i]))\n    # return the sum of the per-digit differences\n    return diff1 + diff2"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum of differences to zero\n    sum_diff = 0\n    \n    # loop through each digit of the first integer\n    for digit in str(n1):\n        # compute the difference between this digit and the corresponding digit in the second integer\n        diff = int(digit) - int(n2 % 10)\n        # add this difference to the running total\n        sum_diff += diff\n        # shift the second integer's decimal point right by one digit\n        n2 //= 10\n        \n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = list(map(int, str(n1)))\n    n2_digits = list(map(int, str(n2)))\n    \n    # Calculate the absolute differences between the two lists of digits\n    abs_diff_digits = [abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n    \n    # Calculate the sum of the absolute differences\n    sum_abs_diff_digits = sum(abs_diff_digits)\n    \n    return sum_abs_diff_digits"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    for i in range(size):\n        # Initialize current sum and start index\n        cur_sum = a[i]\n        cur_start = i\n        \n        # Slide the window till the end of the list\n        for j in range(i+1, size):\n            cur_sum += a[j]\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                start = cur_start\n                end = j\n    \n    # Return the sum of the largest subarray\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size < 1:\n        return []\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if i >= size - 1:\n            if current_sum > max_sum:\n                max_sum = current_sum\n        \n        elif current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n        elif current_sum < 0:\n            current_sum = 0\n    \n    if current_sum > max_sum:\n        max_sum = current_sum\n    \n    return a[start:start+max_sum]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables to store the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the list and update the current sum\n    for num in a:\n        current_sum += num\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current sum is greater than the size of the subarray, update the current sum to zero\n        if current_sum > size:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Use set() to remove duplicates from the combined tuple\n    unique_tup = set(combined_tup)\n\n    # Convert the unique tuple back to a list and sort it\n    sorted_list = sorted(list(unique_tup))\n\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates from the combined tuple using set()\n    unique_tup = list(set(combined_tup))\n    \n    # Sort the unique tuple in ascending order\n    unique_tup.sort()\n    \n    # Return the sorted tuple\n    return unique_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a new empty list to store the union of the two tuples\n    union = []\n    # Loop through each element of the first tuple and add it to the union list if it doesn't already exist in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            union.append(element)\n    # Loop through each element of the second tuple and add it to the union list if it doesn't already exist in the first tuple\n    for element in test_tup2:\n        if element not in test_tup1:\n            union.append(element)\n    # Sort the union list in ascending order\n    union.sort()\n    # Return the union list\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union))\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store the union of the two tuples\n    union_set = set()\n    # add the elements of the first tuple to the union set\n    union_set.update(test_tup1)\n    # add the elements of the second tuple to the union set\n    union_set.update(test_tup2)\n    # convert the set back to a sorted list and return it\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = tuple(set(test_tup1).union(test_tup2))\n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() function to convert tuples to sets and then combine them\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert set back to tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union_set))\n    return sorted_union"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 1\n    sublist = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] == sublist[-1]:\n            sublist.append(lst[i])\n        else:\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n            sublist = [lst[i]]\n\n    if len(sublist) > max_length:\n        max_length = len(sublist)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if max_length < len(sublist):\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n\n    def sublists(lst, start=0, max_length=0, current_length=0):\n        if start == len(lst):\n            if current_length > max_length:\n                max_length = current_length\n            return max_length\n\n        sublists(lst, start + 1, max_length, current_length)\n        current_length += 1\n        sublists(lst, start + 1, max_length, current_length)\n        return sublists(lst, start + 1, max_length, current_length)\n\n    return sublists(lst)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n\n    # Initialize variables\n    max_len = 1\n    start = 0\n\n    # Iterate through the list and update the max_len and start variables\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            max_len = max(max_len, i-start+1)\n            start = i\n\n    # Add the last sublist\n    max_len = max(max_len, len(lst)-start)\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if lst[i] == max_len:\n            continue\n        else:\n            if len(lst[i]) > max_len:\n                max_len = len(lst[i])\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n    \n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        \n        # Initialize a variable to store the length of the current sublist\n        current_length = 1\n        \n        # Loop through the remaining sublists and check if each sublist is a subset of the current sublist\n        for j in range(i+1, len(lst)):\n            \n            # Check if the current sublist is a subset of the sublist in the loop variable 'j'\n            if all(x in lst[j] for x in lst[i]):\n                \n                # If it is, increment the current length by 1\n                current_length += 1\n                \n        # Update the maximum length if the current length is greater than the current maximum length\n        if current_length > max_length:\n            max_length = current_length\n            \n    # Return the maximum length of any sublist in the list\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize max length to 0\n    max_length = 0\n\n    # loop through the list of sublists\n    for sublist in lst:\n        # loop through the sublist and add 1 to the max length for each element\n        for element in sublist:\n            max_length += 1\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function finds the length of the longest sublists in a list of lists.\n    '''\n    max_len = 0  # initialize max_len to 0\n    for sublist in lst:  # iterate over each sublist in the list\n        if len(sublist) > max_len:  # if the length of the sublist is greater than max_len\n            max_len = len(sublist)  # update max_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # Initialize a variable to keep track of the maximum length found so far\n    max_length = 0\n    # Initialize a list to store the current sublist being checked\n    current_sublist = []\n    # Loop through the list\n    for i in lst:\n        # If the current element is not equal to the first element of the current sublist, add it to the sublist\n        if i!= current_sublist[0]:\n            current_sublist.append(i)\n        # If the current sublist is longer than the current maximum length, update the maximum length\n        if len(current_sublist) > max_length:\n            max_length = len(current_sublist)\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes a string as input and returns a list of all the values between quotation marks.\n    \"\"\"\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\\")([^\\\"]*)|(?<=\\')([^\\']*)|(?<=\\`)([^\\`]*)|(?<=\\b)[0-9]+(?=\\b)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input, and extracts all values between quotation marks from the string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match values between quotation marks\n    pattern = r'\"(\\w|\\s)+?\"'\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    values = re.findall(pattern, text)\n    # Return a list of all the values extracted from the text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use a regular expression to find all the quoted values\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n\n    # Create a list of extracted values\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the `re.findall` function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and extract the values between quotation marks\n    values = []\n    for match in matches:\n        values.append(match[1:-1])\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    # Count the number of pairs\n    count = 0\n    # Sort the array in ascending order\n    arr.sort()\n    # Traverse the array and check for pairs\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Check if the elements are equal\n            if arr[i] == arr[j]:\n                continue\n            # Check if the elements are unequal\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    # Initialize a counter variable to store the number of possible pairs\n    count = 0\n\n    # Iterate through all pairs of elements in the list\n    for i in freq_dict:\n        for j in freq_dict:\n            # Check if both elements are unequal and the frequency of the elements in the dictionary is greater than 1\n            if i!= j and freq_dict[i] > 1 and freq_dict[j] > 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    # create a set to keep track of seen pairs\n    seen_pairs = set()\n    # loop over all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the elements are equal\n            if arr[i]!= arr[j]:\n                # add the pair to the set\n                seen_pairs.add((arr[i], arr[j]))\n    # return the size of the set\n    return len(seen_pairs)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Initialize a variable to store the count of pairs\n    count = 0\n\n    # Loop through all possible pairs of elements from the list\n    for i in range(n):\n        for j in range(i+1,n):\n            # Check if the elements are unequal\n            if arr[i]!= arr[j]:\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: the string to split\n    :return: a list of characters from the input string\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    # loop through each digit in the integer\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add the digit to the total sum\n        total += digit\n        # remove the last digit from the number\n        n //= 10\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit from the integer\n        n = n // 10\n    \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum\n    sum = 0\n    \n    # loop through each digit in the integer n\n    while n > 0:\n        # extract the last digit from the integer n\n        digit = n % 10\n        \n        # add the last digit to the sum\n        sum += digit\n        \n        # remove the last digit from the integer n\n        n //= 10\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through each character in the string\n    for digit in num_str:\n        # add the integer value of the character to the sum variable\n        sum += int(digit)\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and split it into a list of characters\n    digits = [int(digit) for digit in str(n)]\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over the digits list and add each digit to the sum\n    for digit in digits:\n        sum += digit\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    # Loop through the list of digits and add each digit to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add it to the sum variable\n        sum += digit\n        # remove the last digit from the number\n        n //= 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum\n    digit_sum = 0\n    # Loop through each character in the string and add its integer value to the sum\n    for digit in num_str:\n        digit_sum += int(digit)\n    # Return the sum of the digits\n    return digit_sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if all elements of the list are unique\n    for i in range(len(list1) - 1):\n        if list1[i] == list1[i + 1]:\n            return False\n\n    # If all elements are unique, the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and checks whether it is sorted or not.\n\n    Args:\n    lst (list): List to be checked.\n\n    Returns:\n    bool: True if the list is sorted, else False.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    return [empty_dict for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if isinstance(list1[i][j], list):\n                list1[i][j].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        # Convert the sublist to a string and sort it using the built-in sorted function\n        sublist_str = ''.join(sublist)\n        sublist.sort()\n        # Convert the sorted sublist back to a list and store it back in the original list\n        sublist = list(sublist)\n        list1.remove(sublist)\n        list1.append(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for i in range(len(list1)):\n        # loop through each element in the sublist\n        for j in range(len(list1[i])):\n            # convert the element to a string and sort it\n            sorted_sublist = sorted(str(list1[i][j]))\n            # replace the original element with the sorted string\n            list1[i][j] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in the given list\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # If the number is not already in the set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Return a new list with only unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    :param nums: list of numbers\n    :return: list of unique numbers\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Returns:\n    A new list containing unique elements from the input lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize empty list for unique numbers\n    unique_nums = []\n    # iterate through each list in the input\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # check if the number is already in the unique_nums list\n            if num not in unique_nums:\n                # if not, add it to the list\n                unique_nums.append(num)\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    return 1 if len(unique_list) == 1 else unique_list[0] * unique_product(unique_list[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # create a set of unique numbers from the input list\n    unique_set = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert the list into a set to remove duplicate numbers\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))  # convert list to set and remove duplicates\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_number_product = 1\n    for unique_number in unique_numbers:\n        unique_number_product *= unique_number\n    return unique_number_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_list = list(set(list_data)) # remove duplicates from the list\n    return reduce(lambda x, y: x * y, unique_list) # calculate the product of the unique numbers"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * r\n    volume = math.pi * r * r * h\n    surface_area = (2 * math.pi * r * h) + (math.pi * r * r)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi*r*r + 2*math.pi*r*h + math.pi*h*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    area = 2 * pi * r * h + 2 * pi * r**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    \n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n    \n    Returns:\n    float: the surface area of the cylinder\n    '''\n    \n    surface_area = 2*3.14159*(r**2) + 2*3.14159*r*h + 2*3.14159*h**2\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, False otherwise.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    else: \n        i = 0 \n        j = 0 \n        while j < len(B): \n            if B[j] == A[i]: \n                i += 1 \n                if i == len(A): \n                    return True \n                j += 1 \n            else: \n                i = 0 \n                j += 1 \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            j = B.index(A[i])\n            if i + 1 == j:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    for i in range(len(B)):\n        if A == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # Check if B is a sublist of A\n    if all(a in A for a in B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if A is sublist of B using in operator\n    if all(x in B for x in A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    i=0 \n    j=0 \n    flag=False \n    while i<len(A) and j<len(B): \n        if A[i]==B[j]: \n            flag=True \n            i+=1 \n        else: \n            flag=False \n            j+=1 \n    if flag==True: \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the last digit of the factorial\n    last_digit = int(num_str[-1])\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # initialize the result variable to 0\n    result = 0\n    \n    # convert the input number to a string\n    num_str = str(n)\n    \n    # convert the last character of the string to an integer\n    last_digit = int(num_str[-1])\n    \n    # multiply the result by the last digit\n    result *= last_digit\n    \n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to hold the last digit of the factorial\n    last_digit = 0\n    # loop through the digits of the number\n    while n > 0:\n        # get the last digit of the number and store it in the last_digit variable\n        last_digit = n % 10\n        # divide the number by 10 to remove the last digit\n        n = n // 10\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # Loop through each digit of the factorial\n    while n > 0:\n        # Calculate the last digit of the factorial\n        last_digit = n % 10\n\n        # Remove the last digit from the factorial\n        n = n // 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # First, find the factorial of the input number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Then, find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Finally, return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Initialize variables to store the last digit and factorial\n    last_digit = 0\n    factorial = 1\n\n    # Calculate the factorial of the given number\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit from the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initializing the variable to store the last digit in factorial\n    last_digit = 0\n    #finding the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    #finding the last digit in the factorial\n    for i in str(factorial):\n        last_digit = int(i)\n    #returning the last digit in factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert input number to string\n    num_str = str(n)\n    # get the last digit of the string\n    last_digit = num_str[-1]\n    # convert the last digit to integer and find its factorial\n    factorial = 1\n    for i in range(1, int(last_digit) + 1):\n        factorial *= i\n    # return the factorial of the last digit\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit from the factorial\n    last_digit = int(factorial % 10)\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        return None\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[j])\n        flat_list.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        flat_list.extend(list1[i:])\n    if j < len(list2):\n        flat_list.extend(list2[j:])\n    if k < len(list3):\n        flat_list.extend(list3[k:])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Calculate the length of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n\n    # Check if all the lists have the same length\n    if len1!= len2 or len1!= len3:\n        raise ValueError(\"All lists must have the same length\")\n\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Initialize a counter variable to keep track of the current position in the interleaved list\n    current_pos = 0\n\n    # Iterate through each of the lists\n    for i in range(len1):\n        # Check if the current position is less than the length of the first list\n        if current_pos < len1:\n            # Add the first element of the first list to the interleaved list\n            interleaved_list.append(list1[current_pos])\n            # Increment the current position\n            current_pos += 1\n        # Check if the current position is less than the length of the second list\n        if current_pos < len2:\n            # Add the second element of the second list to the interleaved list\n            interleaved_list.append(list2[current_pos])\n            # Increment the current position\n            current_pos += 1\n        # Check if the current position is less than the length of the third list\n        if current_pos < len3:\n            # Add the third element of the third list to the interleaved list\n            interleaved_list.append(list3[current_pos])\n            # Increment the current position\n            current_pos += 1\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # find the length of the shortest list\n    shortest_length = min(len(list1), len(list2), len(list3))\n    # initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # loop through each list and append its elements to the interleaved list\n    for i in range(shortest_length):\n        interleaved_list.append(list1[i] if i < len(list1) else list2[i - len(list1)] if i < len(list1) + len(list2) else list3[i - len(list1) - len(list2)])\n    # add any remaining elements of the shortest list to the interleaved list\n    interleaved_list += list1[shortest_length:]\n    interleaved_list += list2[shortest_length:]\n    interleaved_list += list3[shortest_length:]\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # Initialize a counter for the current index in each list\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    # Loop through each element in each list\n    for i in range(len(list1)):\n        # Append the element from list1 to the interleaved list\n        interleaved_list.append(list1[index1])\n        # Increment the index in list1\n        index1 += 1\n        # Append the element from list2 to the interleaved list\n        interleaved_list.append(list2[index2])\n        # Increment the index in list2\n        index2 += 1\n        # Append the element from list3 to the interleaved list\n        interleaved_list.append(list3[index3])\n        # Increment the index in list3\n        index3 += 1\n    # Return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single list\n    that contains all the elements of the input lists in the order given.\n\n    Example:\n    Input: list1 = [1, 2, 3], list2 = [4, 5, 6], list3 = [7, 8, 9]\n    Output: [1, 4, 2, 5, 3, 6, 7, 8, 9]\n    \"\"\"\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Loop through each list in the input\n    for i in range(len(list1)):\n        # Add the element from the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the element from the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the element from the third list to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved result\n    result = []\n    # Use a for loop to iterate through each list\n    for i in range(len(list1)):\n        # Add the ith element of list1 to the result list\n        result.append(list1[i])\n        # Add the ith element of list2 to the result list\n        result.append(list2[i])\n        # Add the ith element of list3 to the result list\n        result.append(list3[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # loop through each element in the 3 input lists\n    for i in range(len(list1)):\n        # append the first element from list1 to interleaved_list\n        interleaved_list.append(list1[i])\n        # append the second element from list2 to interleaved_list\n        interleaved_list.append(list2[i])\n        # append the third element from list3 to interleaved_list\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Get the lengths of the input lists\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n    \n    # Check if the input lists are of the same length\n    if length1!= length2 or length1!= length3:\n        print(\"Error: all input lists must have the same length.\")\n        return []\n    \n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Iterate through the input lists\n    for i in range(length1):\n        # Add the first element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the second element of each list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the third element of each list to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length as input and returns a single flat list.\n    The function takes three lists as input, and concatenates them into a single list, in the order given as input.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the dissimilar elements between the two tuples.\n    '''\n    dissimilar_list = []\n    # Loop through each element of the first tuple and compare it to all elements of the second tuple\n    for i in test_tup1:\n        # If the element is not present in the second tuple, add it to the dissimilar list\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common = [x for x in test_tup1 if x in test_tup2]\n    dissimilar = [x for x in test_tup1 if x not in test_tup2]\n    dissimilar.extend([x for x in test_tup2 if x not in test_tup1])\n    dissimilar.extend([x for x in common if x not in dissimilar])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the elements in the first tuple\n    for element in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar set\n        if element not in test_tup2:\n            dissimilar_set.add(element)\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize a list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal to the corresponding element of the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Append it to the dissimilar_list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through the elements in the two tuples\n    for i in range(len(test_tup1)):\n        # if the element in the first tuple is not equal to the element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # add the element to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the dissimilar element to the set\n            dissimilar_set.add(test_tup1[i])\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            even_list.append(even_fnc(elem))\n        elif isinstance(elem, list):\n            even_list.append(even_fnc(elem))\n        else:\n            even_list.append(elem)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    def process_nested(nested):\n        if isinstance(nested, list):\n            return [process_nested(item) for item in nested]\n        elif isinstance(nested, tuple):\n            return tuple(process_nested(item) for item in nested)\n        else:\n            if even_fnc(nested):\n                return even_fnc(nested)\n            else:\n                return [nested]\n    \n    return process_nested(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_lst = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            even_lst.append(even_ele(elem, even_fnc))\n        else:\n            even_lst.append(even_fnc(elem))\n    return tuple(filter(lambda x: x is not None, even_lst))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_fnc(item))\n        else:\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes in a nested mixed tuple and a function as arguments.\n    The function is applied to each element of the nested tuple, and only elements that satisfy the function's return value are kept.\n    The remaining elements are returned as a new tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n    odd_list = []\n\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n\n    return (even_list, odd_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            for j in i:\n                if even_fnc(j):\n                    new_tuple.append(j)\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result\n\ndef even_fnc(x):\n    if isinstance(x, str):\n        return len(x) % 2 == 0\n    else:\n        return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_tuple.append(even_fnc(item))\n        else:\n            even_tuple.append(item)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple: \n        if isinstance(i, tuple):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef even_num(num): \n    return num % 2 == 0\n\neven_list = even_ele((1, (2, (3, 4), 5), 6), even_num)\nprint(even_list) # Output: [2, 4, 6]"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    print(\"The surface area of a square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Base and height are given as input\n    base = b\n    height = s\n\n    # Surface area of the base of the pyramid is the base edge squared\n    base_area = b*b\n\n    # Surface area of the side of the pyramid is (2/3) of the base edge squared + the height squared\n    side_area = (2/3)*b*b + height*height\n\n    # Total surface area of the pyramid is the sum of the surface areas of the base and side of the pyramid\n    total_area = base_area + side_area\n\n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculating the half of the base edge\n    half_b = b / 2\n\n    # Calculating the area of the base\n    area_base = half_b * half_b * 3\n\n    # Calculating the area of the pyramid\n    area_pyramid = (3 * half_b * s) / 2\n\n    # Adding up the areas of both parts of the pyramid\n    surface_area = area_base + area_pyramid\n\n    # Returning the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of the base\n    base_area = b * b\n\n    # Calculate the area of the pyramid\n    pyramid_area = (base_area + s * s) / 2\n\n    # Calculate the surface area of the pyramid\n    pyramid_surface = 6 * pyramid_area\n\n    # Return the surface area of the pyramid\n    return pyramid_surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * s * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = b * s + (s * s) + (b * b)\n    surface_area = (b * s * 3) / 2 + (s * s * 2) + (b * b * 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculating the surface area using the Heron's formula\n    area = 0.5 * b * s * (s + b)\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*(b*s + b*s + s*s)/2\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (base * height) + (base * (height * 2)) + (height * (base * 2))\n    return surfaceArea"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # check if the dictionary is empty\n    if dict1 == {}:\n        # print the message that the dictionary is empty\n        print(\"The dictionary is empty\")\n    else:\n        # print the dictionary\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num > 1:\n        return catalan_number(num-1) + catalan_number(num-2)\n\nprint(catalan_number(0)) # Output: 1\nprint(catalan_number(1)) # Output: 1\nprint(catalan_number(2)) # Output: 2\nprint(catalan_number(3)) # Output: 5\nprint(catalan_number(4)) # Output: 14"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(2*n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \n    Args:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (1 - (1/(2*n+1)))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    # Catalan number formula: C(n, k) = (2n)!/(n!(n-k)!k!)\n    catalan_num = 1\n    for i in range(1, n + 1):\n        catalan_num *= (2 * i) // (i * (i - 1))\n\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number (also known as the Chebyshev polynomial of the first kind).\n    \"\"\"\n    from math import sqrt\n\n    # calculate the ratio of n to sqrt(2*n+1)\n    r = sqrt(2*n+1)\n\n    # calculate the first term of the sequence\n    c = 0.5 * r * (n - 0.5)\n\n    # calculate the second term of the sequence\n    s = 1.0 / sqrt(2*n+1)\n\n    # calculate the nth term of the sequence\n    c_n = c + s\n\n    # return the nth term of the sequence\n    return int(c_n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Define the factors of the first n natural numbers\n        factors = [1] * n\n        # Calculate the factors of the first n-1 natural numbers\n        for i in range(1, n):\n            factors[i] = (i+1) * factors[i-1]\n        # Calculate the catalan number\n        catalan = 0\n        for i in range(n):\n            catalan += factors[i] * factors[n-1-i]\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        c = [0] * (num + 1)\n        for i in range(1, num + 1):\n            c[i] = c[i - 1] + c[i - 2]\n        return c[num]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb and its position in the string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    \n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverbs ending with 'ly':\")\n        for i, match in enumerate(matches):\n            print(f\"{i+1}. {match}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b(ly|n\\'t)\\b'\n\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over the matches and store their positions in the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for adverbs ending with ly\n    pattern = r'\\b(?:[a-zA-Z]+)ly\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize empty list to store adverb positions\n    adverb_positions = []\n\n    # Iterate over matches and add position to list if adverb found\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Sort list of adverb positions in ascending order\n    adverb_positions.sort()\n\n    # Return list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b\\w*ly\\b', re.IGNORECASE)\n\n    # Use the search() method to find all non-overlapping matches of the pattern in the given text\n    matches = pattern.findall(text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Sort the matches by their starting positions in the text\n    matches.sort(key=lambda x: x.start())\n\n    # Return a list of (start position, end position) tuples for each adverb match\n    return [(match.start(), match.end()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text, re.IGNORECASE)\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}')\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverb ending with ly\n    pattern = r'\\bly\\b'\n    # Use the re.findall() function to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb positions and their lengths\n    positions = []\n    # Iterate through all the matches and extract the position of the first adverb\n    for match in matches:\n        # Use the start() and end() functions to extract the positions of the adverb in the text\n        start = text.find(match)\n        end = start + len(match)\n        # Extract the length of the adverb\n        length = end - start\n        # Add the adverb position and its length to the positions list\n        positions.append((start, length))\n    # Return the list of positions of the adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'(?<=\\b)(ly)$', text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, text.find(adv)))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds all the adverbs ending with ly in a given text.\n\n    Parameters:\n        text (str): A string containing the text in which we want to find adverbs ending with ly.\n\n    Returns:\n        A list of tuples containing the adverbs and their positions in the given text.\n    \"\"\"\n    # Define a regular expression to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() method to find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the adverbs and their positions in the given text\n    result = []\n    for i, match in enumerate(matches):\n        # Extract the adverb from the match and its position\n        adverb = match\n        position = i\n\n        # Add the adverb and its position to the result list\n        result.append((adverb, position))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(ly)\\b'\n    # Use re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text[match.start():match.end()].find(match)) for match in matches]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as input, and returns the n most expensive items.\n    '''\n    # create a min-heap of size n and initialize the heap with the items\n    min_heap = [None] * n\n    for item in items:\n        heapq.heappush(min_heap, -item)\n    \n    # pop the heap and add the next item to the heap, until the heap has n items\n    result = []\n    while len(min_heap)!= 0:\n        item = -heapq.heappop(min_heap)\n        result.append(item)\n        \n        if len(min_heap) < n:\n            # add the next item to the heap if there are still n items left\n            item = items.pop()\n            heapq.heappush(min_heap, -item)\n    \n    # return the n most expensive items in the result list\n    return result[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n\n    # Initialize the min-heap with the first n items in the dataset\n    heapq.heapify(min_heap, items[:n])\n\n    # Loop through the remaining items in the dataset\n    for item in items[n:]:\n        # If the item is cheaper than the smallest item in the min-heap, remove the smallest item from the min-heap\n        if item < heapq.heappop(min_heap):\n            # If the min-heap is already empty, add the item to the heap\n            if not min_heap:\n                heapq.heappush(min_heap, item)\n            # Otherwise, compare the new item with the smallest item in the min-heap, and add the smaller item to the heap\n            else:\n                if item < heapq.heappop(min_heap):\n                    heapq.heappush(min_heap, item)\n\n        # If the item is not cheaper than the smallest item in the min-heap, add it to the heap\n        else:\n            heapq.heappush(min_heap, item)\n\n    # Extract the n most expensive items from the min-heap and return them as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < heapq.heappop(min_heap):\n                heapq.heappush(min_heap, item)\n    # Return the n most expensive items as a list\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items to a min heap\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, (-item, item))\n        \n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        neg_price, price = heapq.heappop(min_heap)\n        result.append(price)\n        \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of items to be analyzed\n    :param n: the number of most expensive items to find\n    :return: a list of n most expensive items in the dataset\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items in the list.\n    '''\n\n    # Create a min heap of size n to store the top n items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, float('-inf'))\n\n    # Iterate through the items and update the heap with their prices\n    for item in items:\n        # If the heap is full, remove the smallest price and add the current price\n        if len(heap) == n:\n            heapq.heappop(heap)\n        heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to be returned as input.\n    It returns a sorted list of the n most expensive items in the input list.\n    '''\n    heap = []\n    \n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n        \n    # Add the remaining items to the heap in decreasing order of value\n    for item in items[n:]:\n        if item > heap[0]:\n            heapq.heappushpop(heap, item)\n            \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of items with prices.\n    n (int): The number of items to return.\n\n    Returns:\n    list: The n most expensive items in the dataset.\n    \"\"\"\n\n    # Create a min-heap of the n largest items\n    heap = [heapq.nsmallest(n, items)]\n\n    # Iterate over the remaining items in the dataset\n    for item in items:\n        # Remove the smallest item from the heap\n        heapq.heappop(heap)\n\n        # Add the new item to the heap\n        heapq.heappush(heap, item)\n\n    # Return the n largest items in the dataset\n    return heapq.nsmallest(n, heap[0])"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        else:\n            if -item > -heap[0]:\n                heapq.heappushpop(heap, -item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    \n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items from the heap\n    return min_heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l.copy()\n    arr.insert(n, arr.pop(0))\n    return arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 0 or n > len(l):\n        print(\"Invalid input. The element index should be between 0 and\", len(l))\n        return None\n    else:\n        first_part = l[:n]\n        last_part = l[n:]\n        return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    a, b = l[:n], l[n:]\n    # Add the first part to the end of the second part\n    c = b + a\n    return c"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than n\n    if len(l) < n:\n        print(\"The length of the list should be greater than or equal to n.\")\n        return None\n    # check if n is an integer or a float\n    if not isinstance(n, int) and not isinstance(n, float):\n        print(\"n should be an integer or a float.\")\n        return None\n    # check if n is within the range of the length of the list\n    if n < 0 or n >= len(l):\n        print(\"n should be between 0 and the length of the list, inclusive.\")\n        return None\n    # create a new list to store the splitted elements\n    splitted_list = []\n    # loop through the list from 0 to n-1\n    for i in range(n):\n        # add the i-th element to the splitted list\n        splitted_list.append(l[i])\n    # add the remaining elements to the end of the splitted list\n    for i in range(n, len(l)):\n        splitted_list.append(l[i])\n    return splitted_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # find the index of the nth element\n    index = len(l) // 2\n    while True:\n        if index == n:\n            break\n        elif index > n:\n            index -= 1\n        else:\n            index += 1\n\n    # split the list into two parts\n    part1 = l[:index]\n    part2 = l[index:]\n\n    # add part1 to the end of part2\n    l = part2 + part1\n\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list and converts it to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize minimum and maximum values to the first element in the list\n    min_val = max_val = nums[0]\n    # Loop through the list and update minimum and maximum values accordingly\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return \"The list is empty.\"\n    \n    # Find the smallest and largest values in the list\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"The list should have at least two elements\")\n        return\n    \n    # find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty\"\n    elif len(nums) == 1:\n        return \"Error: List contains only one value\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Check if the list is not empty\n    if not nums:\n        return \"List is empty!\"\n    \n    # Find the largest value in the list\n    max_num = max(nums)\n    \n    # Find the smallest value in the list\n    min_num = min(nums)\n    \n    # Calculate the difference between the largest and smallest value\n    diff = max_num - min_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables for largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # iterate through the list and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # find the difference between largest and smallest values\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Check if a is less than b\n    if a < b:\n        a, b = b, a\n\n    # Initialize variables\n    count = 0\n    num = a\n\n    # While a is less than or equal to b\n    while a <= b:\n        # Calculate square root of num\n        sqrt_num = num ** 0.5\n\n        # Check if square root is an integer\n        if sqrt_num == int(sqrt_num):\n            count += 1\n\n        # Increment num and decrement a\n        num += 1\n        a -= 1\n\n    # Return count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        square = i * i\n        if square == i * i:\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return \"Please enter positive integers only.\"\n    \n    if a > b:\n        a, b = b, a\n    \n    perfect_square_count = 0\n    for num in range(a, b+1):\n        if num ** 2 == a or num ** 2 == b:\n            perfect_square_count += 1\n    \n    return perfect_square_count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a list to store the perfect squares\n    squares = []\n    \n    # loop through the numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**0.5 == int(i**0.5):\n            # if it is, add it to the list of perfect squares\n            squares.append(i)\n            \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5) + 1):\n        for j in range(int(b**0.5) + 1):\n            if i * i + j * j == a * a:\n                return i * i, j * j\n    return 'No perfect squares found'"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i**2 and i**2 > 0:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == sum([int(j**0.5) for j in range(1, int(i**0.5)+1)]):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i and perfect_square(square):\n            yield square\n\ndef perfect_square(n):\n    '''\n    Helper function to check if a given number is a perfect square.\n    '''\n    root = int(n**0.5)\n    for i in range(1, root+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # iterate over the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if the current number is a perfect square\n        square_root = int(i**0.5)\n        if i == square_root**2:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radial distance from the origin.\n    theta (float): The angle (in radians) measured from the positive x-axis.\n\n    Returns:\n    x (float): The rectangular x-coordinate.\n    y (float): The rectangular y-coordinate.\n    \"\"\"\n\n    # Convert radians to degrees\n    theta = cmath.degrees(theta)\n\n    # Calculate x and y coordinates using the formula x = r * cos(theta), y = r * sin(theta)\n    x = r * cmath.cos(cmath.pi * theta / 180)\n    y = r * cmath.sin(cmath.pi * theta / 180)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius value of the polar coordinate.\n    phi (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: The x and y coordinates of the rectangular coordinate.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    This function takes in two arguments, x and y, which are the polar coordinates\n    of a point in the complex plane. It returns a tuple containing the rectangular\n    coordinates of that point in the form (x, y).\n    \n    The conversion is done using the formula:\n    \n    x = r * cos(theta)\n    y = r * sin(theta)\n    \n    where r is the distance from the origin (0, 0) and theta is the angle of the \n    point from the origin.\n    '''\n    \n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function takes in two parameters x and y, which represent the polar\n    coordinates in the form (r, theta), and returns the corresponding\n    rectangular coordinates in the form (x, y).\n\n    Note: r is the distance from the origin, and theta is the angle in radians.\n    '''\n\n    # convert the polar coordinates to rectangular coordinates\n    x = x * cmath.cos(y)\n    y = x * cmath.sin(y)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle to radians\n    theta = cmath.radians(theta)\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Return results\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes a polar coordinate (r,theta) and converts it to a rectangular coordinate.\n\n    Parameters:\n        r (float): The radius of the circle.\n        theta (float): The angle of the line in degrees.\n\n    Returns:\n        tuple: (x, y): The rectangular coordinates of the point (r*cos(theta), r*sin(theta))\n    \"\"\"\n\n    theta = cmath.radians(theta)  # Convert angle from degrees to radians\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        # swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements to swap.\")\n        return None\n    \n    first = newList[0]\n    last = newList[-1]\n    \n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return None\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length-1]\n    newList[length-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # check if list has at least two elements\n        return \"Error: List should have at least two elements\"\n    \n    first = newList[0] # get first element\n    last = newList[-1] # get last element\n    \n    newList[0] = last # interchange first and last elements\n    newList[-1] = first\n    \n    return newList # return the modified list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input is a list\n    if type(newList)!= list:\n        raise ValueError(\"Input must be a list\")\n    elif len(newList) < 2:\n        raise ValueError(\"Input list must have at least 2 elements\")\n    else:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Initialize the factorial variables to 1\n    fact = 1\n    fact_n = 1\n\n    # Calculate the factorial of n\n    for i in range(1, n+1):\n        fact *= i\n\n    # Calculate the factorial of k\n    for i in range(1, k+1):\n        fact_n *= i\n\n    # Calculate the binomial coefficient\n    bin_coeff = fact // (fact_n * (fact_n-1))\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        sum += bin_coeff * (i * (n-i+1)) // (i+1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    sum_c = 0\n    for i in range(k):\n        sum_c += binomial_Coeff(n - i, k - i)\n\n    return sum_c"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of product to 0\n    product_sum = 0\n\n    # Calculate the binomial coefficient using a loop\n    for i in range(1, k+1):\n        binomial = (n-i+1) * i // (i-1)\n        product_sum += binomial\n\n    return product_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the range from k to n\n    for i in range(k,n+1):\n        # Calculate the binomial coefficient\n        coeff = (n+1-i) * (i) // k\n        # Add the coefficient to the sum\n        sum += coeff\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    Parameters: \n    n (int): total number of elements in the set\n    k (int): the number of consecutive elements to be summed\n\n    Returns: \n    (int): the sum of the product of consecutive binomial co-efficients\n    '''\n    \n    # calculate the sum of the first n terms of the binomial coefficient sequence\n    sum = 0\n    for i in range(1,n+1):\n        sum += ((n-i+1)*1)/i\n    \n    # calculate the product of the first k terms of the binomial coefficient sequence\n    product = 1\n    for i in range(1,k+1):\n        product *= (n-i+1)\n    \n    # calculate the sum of the product of consecutive binomial co-efficients\n    sum_of_consecutive_coefficients = sum * product\n    \n    return sum_of_consecutive_coefficients"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        total = 1\n        for i in range(1, k+1):\n            total *= (n - i + 1) / i\n        return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k > 0 and k < n:\n        if k % 2 == 0:\n            return binomial_Coeff(n, k // 2) * binomial_Coeff(n, k // 2)\n        else:\n            return binomial_Coeff(n - 1, k) + binomial_Coeff(n, k - 1)\n\n    return None\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    sum_product = 0\n\n    # Initialize loop\n    for i in range(k+1):\n        # Calculate the term in the sum and product\n        term = (n-i)/(i+1)\n        product = 1\n        for j in range(i+1):\n            product *= (n-j)\n        # Add the term to the sum and multiply the product by it to get the next term in the sum\n        sum_product += term*product\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize variables\n    binomial_coeff = 1\n\n    # loop through consecutive k values starting from 0 and multiply by n-k\n    for i in range(k):\n        binomial_coeff *= (n-k+i)\n\n    # return the sum of the binomial coefficients\n    return binomial_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?=\\d)','',ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^0*'\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?:\\d+\\.\\d+\\.\\d+\\.\\d+)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each part of the IP address\n    ip = re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\1', ip)\n    ip = re.sub(r'^(\\d+\\.\\d+\\.\\d+)$', r'\\1', ip)\n    ip = re.sub(r'^(\\d+\\.\\d+)$', r'\\1', ip)\n    ip = re.sub(r'^(\\d+)$', r'\\1', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expression to remove leading zeroes\n    ip = re.sub(r'^(?:[0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r'\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n    return re.sub(ip_regex, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def removezero_ip(ip):\n    # Remove leading zeroes from each octet\n    return re.sub(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})', r'\\1.\\2.\\3.\\4', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num += num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    # Initialize two variables to store even and odd numbers\n    even = 0\n    odd = 0\n    # Iterate over each number in the list\n    for num in lst:\n        # If the number is even, increment the even variable\n        if num % 2 == 0:\n            even += num\n        # If the number is odd, increment the odd variable\n        else:\n            odd += num\n    # Return the difference between the even and odd variables\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables\n    even = 0\n    odd = 0\n    diff = 0\n    \n    # Loop through the list\n    for i in range(len(list1)):\n        # Check if the current number is even\n        if list1[i] % 2 == 0:\n            even = list1[i]\n        # Check if the current number is odd\n        else:\n            odd = list1[i]\n    \n    # Calculate the difference\n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list of integers and returns the difference of the first even and first odd number.\n    '''\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num - num\n    return 'No even or odd number found in the list'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # find the first even number\n    even_index = next((i for i, x in enumerate(list1) if x % 2 == 0), None)\n    if even_index is None:\n        raise ValueError('The list does not contain any even numbers.')\n    even_num = list1[even_index]\n    # find the first odd number\n    odd_index = next((i for i, x in enumerate(list1[even_index+1:]) if x % 2 == 1), None)\n    if odd_index is None:\n        raise ValueError('The list does not contain any odd numbers.')\n    odd_num = list1[even_index+1+odd_index]\n    # calculate the difference\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list of numbers as input and returns the difference of the first even and first odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    first_even = float('inf')\n    first_odd = float('inf')\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            if first_even > num:\n                first_even = num\n        else:\n            odd_count += 1\n            if first_odd > num:\n                first_odd = num\n    \n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the given list is empty or not\n    if len(list1) == 0:\n        return \"The list is empty.\"\n    \n    # Check if all elements of the list are integers or not\n    for num in list1:\n        if not isinstance(num, int):\n            return \"The list contains non-integer elements.\"\n    \n    # Find the first even number and first odd number of the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num == None:\n                even_num = num\n            else:\n                return \"The list contains two even numbers.\"\n        else:\n            if odd_num == None:\n                odd_num = num\n            else:\n                return \"The list contains two odd numbers.\"\n    \n    # Find the difference of the even and odd numbers and return it\n    if even_num == None or odd_num == None:\n        return \"The list does not contain two even or two odd numbers.\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for swap count and current swap\n    swap_count = 0\n    current_swap = 0\n\n    # Iterate through each bit of the binary strings\n    for i in range(32):\n        # Check if both bits are equal\n        if (num1 & (1 << i)) == (num2 & (1 << i)):\n            # If both bits are equal, no swap is required\n            continue\n        # If bits are different, swap the bits\n        else:\n            # Increment the swap count\n            swap_count += 1\n            # Get the position of the bit that needs to be flipped\n            bit_to_flip = (num1 & (1 << i)) ^ num2\n            # Flip the bit at the position\n            num1 ^= bit_to_flip\n            # Flip the bit at the position of the original string\n            num2 ^= (1 << i)\n            # Increment the current swap count\n            current_swap += 1\n\n    # Return the minimum swap count\n    return min(swap_count, current_swap)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps as infinity\n    min_swaps = float('inf')\n\n    # Perform bitwise XOR operation on the two numbers and find the number of set bits\n    for i in range(32):\n        xor_bit = (num1 ^ num2) & (1 << i)\n        if xor_bit!= 0:\n            min_swaps = min(min_swaps, i + 1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input, str1 and str2, and returns the minimum number of swaps required to convert one number to another.\n    '''\n    n = len(str1)\n    swaps = 0\n    i = j = 0\n    while i < n:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            swaps += 1\n            str1[i], str1[j] = str1[j], str1[i]\n            i -= 1\n            j += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert\n    one binary number to another.\n    \"\"\"\n    n = len(str1)\n    if n!= len(str2):\n        raise ValueError(\"Both binary strings should have the same length.\")\n    if any(x not in {'0', '1'} for x in str1):\n        raise ValueError(\"Both binary strings should consist only of '0' and '1' characters.\")\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the number of swaps required\n    num1_swaps = 0\n    num2_swaps = 0\n\n    # Check if the number of bits in each number is the same\n    if n!= num1.bit_length() or n!= num2.bit_length():\n        raise ValueError(\"Both binary strings should have the same number of bits.\")\n\n    # Iterate through the bits of the integers\n    for i in range(n):\n        # Check if the bits are different\n        if num1 & (1 << i)!= num2 & (1 << i):\n            # If they are different, swap the bits\n            num1 ^= 1 << i\n            num2 ^= 1 << i\n\n            # Increment the swaps for the two numbers\n            num1_swaps += 1\n            num2_swaps += 1\n\n    # Return the minimum number of swaps required\n    return min(num1_swaps, num2_swaps)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # converting binary strings to integer arrays\n    int_arr1 = [int(i) for i in str1]\n    int_arr2 = [int(i) for i in str2]\n    # getting the length of the arrays\n    n1 = len(int_arr1)\n    n2 = len(int_arr2)\n    # initializing result variable\n    min_swaps = 0\n    # checking if the number of bits in the arrays are equal\n    if n1 == n2:\n        # initializing two pointers i and j\n        i = 0\n        j = 0\n        # checking if the arrays are equal\n        while i < n1 and j < n2:\n            # if they are not equal, swapping the elements at i and j and incrementing the result variable by 1\n            if int_arr1[i]!= int_arr2[j]:\n                int_arr1[i], int_arr1[j] = int_arr1[j], int_arr1[i]\n                int_arr2[i], int_arr2[j] = int_arr2[j], int_arr2[i]\n                min_swaps += 1\n            # incrementing i and j pointers\n            i += 1\n            j += 1\n        # checking if the last element of the arrays are not equal\n        if i < n1 or j < n2:\n            # if not, swapping them and incrementing the result variable by 1\n            if int_arr1[i]!= int_arr2[j]:\n                int_arr1[i], int_arr1[j] = int_arr1[j], int_arr1[i]\n                int_arr2[i], int_arr2[j] = int_arr2[j], int_arr2[i]\n                min_swaps += 1\n    # if the number of bits in the arrays are not equal, there is no way to convert them\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # loop through all possible swaps and check if the resulting number is valid\n    for i in range(32):\n        num3 = num1 ^ (1 << i)\n        num4 = num2 ^ (1 << i)\n\n        # check if the resulting number is within the range of valid numbers\n        if num3 >= 0 and num3 <= 2**31 - 1 and num4 >= 0 and num4 <= 2**31 - 1:\n            # count the number of swaps required to convert the numbers\n            count = 0\n            while num3!= num4:\n                if num3 < num4:\n                    num3 = (num3 << 1) + 1\n                    count += 1\n                else:\n                    num4 = (num4 << 1) + 1\n                    count += 1\n\n            return count\n\n    # if no valid swap is found, return -1\n    return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    min_swaps = 0\n    i, j = 0, 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n        else:\n            j += 1\n            min_swaps += 1\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # convert both strings to binary numbers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    \n    # find the bitwise XOR of both numbers\n    xor = num1 ^ num2\n    \n    # initialize a counter variable\n    count = 0\n    \n    # iterate through all bits in the binary number\n    for bit in bin(xor)[2:]:\n        # if the bit is 0, increase the counter variable\n        if bit == '0':\n            count += 1\n        else:\n            break\n    \n    # return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # create a dictionary to store the frequency of each character in str1\n    freq1 = {}\n    for i in str1:\n        if i in freq1:\n            freq1[i] += 1\n        else:\n            freq1[i] = 1\n\n    # create a dictionary to store the frequency of each character in str2\n    freq2 = {}\n    for i in str2:\n        if i in freq2:\n            freq2[i] += 1\n        else:\n            freq2[i] = 1\n\n    # check for common characters\n    common = []\n    for i in freq1:\n        if i in freq2:\n            common.append(i)\n\n    # find the frequency of the characters in common in both strings\n    freq_common_str1 = {}\n    freq_common_str2 = {}\n    for i in common:\n        freq_common_str1[i] = freq1[i]\n        freq_common_str2[i] = freq2[i]\n\n    # find the frequency of the characters in common in str1 and str2\n    freq_common_both = {}\n    for i in common:\n        freq_common_both[i] = freq1[i] + freq2[i]\n\n    # calculate the minimum number of swaps required to convert both strings\n    min_swaps = 0\n    for i in freq_common_both:\n        if freq_common_str1[i] > freq_common_str2[i]:\n            min_swaps += freq_common_str1[i] - freq_common_str2[i]\n        else:\n            min_swaps += freq_common_str2[i] - freq_common_str1[i]\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # convert strings to binary numbers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n\n    # calculate the difference between the two numbers\n    diff = num1 ^ num2\n\n    # find the number of leading zeros in the difference number\n    count = 0\n    while diff:\n        diff &= diff - 1\n        count += 1\n\n    # calculate the minimum number of swaps required\n    swaps = count\n    for i in range(count):\n        # swap the ith bit of num1 and num2\n        temp = num1 & ~(1 << i)\n        num1 = num1 | (temp << i)\n\n        temp = num2 & ~(1 << i)\n        num2 = num2 | (temp << i)\n\n        if num1 == num2:\n            swaps = min(swaps, i+1)\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple in bytes\n    tuple_size = sys.getsizeof(tuple_list)\n\n    # Return the tuple size in bytes\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    # Convert the size to bytes\n    size_bytes = size.to_bytes(8, byteorder='big')\n    # Return the size in bytes\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            size += sys.getsizeof(item)\n        else:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # get the size of each tuple element\n    element_size = sys.getsizeof(tuple_list[0])\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size * element_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Get the size of the first tuple\n    size = sys.getsizeof(tuple_list[0])\n\n    # Calculate the size of all the tuples\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n\n    # Return the total size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a target value k. It returns the kth smallest element from the two arrays.\n    \"\"\"\n    # Initialize two pointers to traverse the arrays\n    i, j = 0, 0\n\n    # Traverse both arrays to find the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    # If k is greater than the length of the remaining array, return the last element of that array\n    if k > len(arr1) - i:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and a number k, and returns the kth element from the two arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i, j = 0, 0\n    \n    # Compare the elements at the current indices of both arrays\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    # If the remaining elements in arr1 are smaller than k, then add them to the kth element of arr2\n    while i < n1:\n        if i < k:\n            k -= i\n            arr2.insert(0, arr1[i])\n        i += 1\n    \n    # If the remaining elements in arr2 are smaller than k, then add them to the kth element of arr1\n    while j < n2:\n        if j < k:\n            k -= j\n            arr1.insert(0, arr2[j])\n        j += 1\n    \n    # If k is still greater than 0, then the last element of arr1 or arr2 should be the kth element of the combined array\n    if k > 0:\n        return arr1[k-1]\n    else:\n        return arr2[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            k -= 1\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the midpoints of the two arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # If the first array is smaller, then the kth element must be in the first half of the first array\n    if len(arr1) < len(arr2):\n        # Check if the kth element exists in the first half of the first array\n        if k <= mid1:\n            return find_kth(arr1[:mid1], arr2, k)\n        # If the kth element does not exist in the first half of the first array, then it must be in the second half of the first array\n        else:\n            return find_kth(arr1[mid1:], arr2, k - mid1 - 1)\n    # If the second array is smaller, then the kth element must be in the first half of the second array\n    else:\n        # Check if the kth element exists in the first half of the second array\n        if k <= mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        # If the kth element does not exist in the first half of the second array, then it must be in the second half of the second array\n        else:\n            return find_kth(arr1, arr2[mid2:], k - mid2 - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers\n    i, j = 0, 0\n\n    # Initialize the result array\n    result = []\n\n    # Keep track of the current element in each array\n    curr_arr1 = arr1[0]\n    curr_arr2 = arr2[0]\n\n    # Loop until we have found the kth element\n    while i < n1 and j < n2 and k > 0:\n        if curr_arr1 < curr_arr2:\n            # Add the current element from arr1 to the result array\n            result.append(curr_arr1)\n\n            # Increment the current element in arr1\n            curr_arr1 = arr1[i+1]\n\n            # Decrement k\n            k -= 1\n        else:\n            # Add the current element from arr2 to the result array\n            result.append(curr_arr2)\n\n            # Increment the current element in arr2\n            curr_arr2 = arr2[j+1]\n\n            # Decrement k\n            k -= 1\n\n        # Increment i or j depending on the current element\n        if curr_arr1 == curr_arr2:\n            if k == 0:\n                return result\n\n            # If k is greater than zero, increment i\n            if i < n1-1:\n                i += 1\n            else:\n                j += 1\n        else:\n            if k == 0:\n                return result\n\n            # If k is greater than zero, increment j\n            if j < n2-1:\n                j += 1\n            else:\n                i += 1\n\n    # If k is greater than zero, return the remaining elements in arr1 or arr2\n    if k > 0:\n        return result\n    else:\n        return arr1 + arr2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the total number of elements in both arrays\n    total_elements = n1 + n2\n\n    # Initialize the result array\n    result = []\n\n    # Initialize the left and right pointers for both arrays\n    i, j = 0, 0\n\n    # Iterate till k is greater than or equal to the total number of elements\n    while k >= total_elements:\n        # If the left pointer is not at the end of the left array\n        if i < n1:\n            # If the current element in the left array is smaller than the current element in the right array\n            if arr1[i] < arr2[j]:\n                # Add the current element in the left array to the result array and move the left pointer to the next element\n                result.append(arr1[i])\n                i += 1\n        else:\n            # If the left pointer is at the end of the left array but the right pointer is not at the end of the right array\n            if j < n2:\n                # Add the current element in the right array to the result array and move the right pointer to the next element\n                result.append(arr2[j])\n                j += 1\n        # Decrement k by the total number of elements in both arrays\n        k -= total_elements\n\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    # Initialize two pointers to the beginning of the arrays\n    i, j = 0, 0\n\n    # Initialize a variable to keep track of the index of the kth element\n    kth_index = 0\n\n    # Loop through the arrays until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        # If the current elements are equal, increment both pointers\n        if arr1[i] == arr2[j]:\n            kth_index += 1\n            i += 1\n            j += 1\n        # If the current element in the first array is smaller, increment the first pointer\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If the current element in the second array is smaller, increment the second pointer\n        else:\n            j += 1\n\n    # If we have not found the kth element yet, return None\n    if kth_index < k:\n        return None\n\n    # If the kth element is in the first array, return its index\n    elif i == len(arr1):\n        return kth_index\n\n    # If the kth element is in the second array, return its index\n    else:\n        return kth_index + len(arr1)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    sum_of_squares = 0\n    for digit in number_str:\n        digit_squared = int(digit) ** 2\n        sum_of_squares += digit_squared\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether the given number is an armstrong number or not.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        total = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        return total == n\n\ndef armstrong_number(n):\n    \"\"\"\n    This function checks whether the given number is an armstrong number or not.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        if is_armstrong_number(n):\n            return True\n        else:\n            return armstrong_number(n+1)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    '''\n    This function takes an integer input and returns True if the integer is an Armstrong number, else False.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of the number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n //= 10\n    # check if the sum is equal to the original number\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    \n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Calculate the sum of the power of each digit\n    sum = 0\n    for digit in num_str:\n        sum += int(digit)**len(num_str)\n        \n    # Compare the sum of the digits with the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # calculate the sum of the digits of the number\n    digit_sum = sum(int(digit) ** len(str(number)) for digit in str(number))\n    # return True if the sum is equal to the original number\n    return number == digit_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_length = len(num_str)\n    sum = 0\n    \n    for digit in num_str:\n        sum += int(digit) ** num_length\n    \n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_digits = len(str(number))\n    sum_of_squares = 0\n\n    # Calculate the sum of squares of each digit of the number\n    for i in range(num_digits):\n        digit = number // 10**(num_digits-i-1) % 10\n        sum_of_squares += digit ** i\n\n    # Check if the sum of squares of all digits is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def is_armstrong(n):\n        sum = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return n == sum\n\n    if is_armstrong(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the given number to a string\n    number_str = str(number)\n    # Initialize a variable to store the sum of the cubes of digits in the number\n    sum_of_cubes = 0\n    # Iterate through each digit of the number and add the cube of that digit to the sum_of_cubes\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n    # Check if the sum of the cubes of digits is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    number_str = str(number)\n    sum_of_powers = 0\n    power = len(number_str)\n\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_powers += digit ** power\n\n    return number == sum_of_powers"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize variables for sum and count of natural numbers\n    sum = 0\n    count = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, number+1):\n        # Add the current number to the sum\n        sum += i\n        # Increment the count of natural numbers\n        count += 1\n\n    # Calculate the average of the first n natural numbers\n    average = sum / count\n\n    # Return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Invalid input. Number should be a positive integer.\"\n    \n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum / number\n    \n    return \"The sum of the first {} natural numbers is: {}\".format(number, sum), \"The average of the first {} natural numbers is: {}\".format(number, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_num += i\n        count += 1\n    average = sum_num / count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    sum_of_numbers = 0\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n    average = sum_of_numbers / number\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    average = total / count\n    print(\"Sum of the first\", number, \"natural numbers is:\", total)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Loop through the string\n    for char in str1:\n        # If the character is already in the dictionary, return the character\n        if char in freq:\n            return char\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # If the function has gone through the entire string and found no repeated characters, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first character that appears more than once in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # loop through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n\n    # loop through the string again and find the first character that appears more than once\n    for char in str1:\n        if freq_dict[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string and check if it has been repeated before\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no character has been repeated before, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char = str1[0]\n    count = 1\n    \n    for char in str1[1:]:\n        if char == first_char:\n            count += 1\n        else:\n            count = 1\n            first_char = char\n            \n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character by iterating through the dictionary\n    for char, count in freq.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    # Iterate through the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in freq:\n            return char\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # If the loop completes without finding a repeated character, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if all(int(digit) >= int(digit) for digit in str(i)) and len(str(i)) == len(str(n)):\n            ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    num = 2\n    while num <= n:\n        if num % 2!= 0 or num == 2:\n            ludic.append(num)\n        num += 1\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2:\n            lucid_numbers.append(i)\n        else:\n            j = 2\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 1\n            if j * j > i:\n                lucid_numbers.append(i)\n    return lucid_numbers\n\nn = int(input(\"Enter a number: \"))\nprint(\"Lucid numbers smaller than or equal to\", n, \"are:\")\nprint(get_ludic(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    def is_ludic(num):\n        \"\"\"\n        A function to check if a given number is a Lucid number or not.\n        \"\"\"\n        if num < 1:\n            return False\n        elif num == 1:\n            return True\n        else:\n            return is_ludic(num + 1)\n\n    lucid_numbers = []\n\n    for i in range(1, n+1):\n        if is_ludic(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % sum(map(int, str(i))) == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n            j = i + 2\n            while j <= n:\n                lucid_numbers.append(j)\n                j += 2\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of digits in the integer\n        num_digits = len(str(i))\n\n        # Check if the number of digits is a multiple of 2\n        if num_digits % 2 == 0:\n            # If the number of digits is even, multiply it by itself and add 1\n            lucid_numbers.append(i*i + 1)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = [0]\n    i = 1\n    while i <= n:\n        ludic.append(ludic[i-1] + 2**i)\n        i += 1\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Write a function to check if a given integer is a lucid number or not.\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_list = []\n    for i in range(1, n + 1):\n        if i == 1:\n            lucid_list.append(i)\n        else:\n            prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                lucid_list.append(i)\n    return lucid_list"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of words in the list\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces and reverse each word in the list\n    reversed_words = [word[::-1] for word in s.split()]\n    # join the reversed words by spaces\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by space and reverse each word\n    words = s.split()\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with space as separator\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store reversed words\n    reversed_words = []\n    # Loop through each word in the list and add its reverse to the reversed_words list\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    # Join the reversed words into a single string\n    reversed_s =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2\n    elif num == 2:\n        return True\n    # check if the number is divisible by any number from 3 to the square root of the number\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        # iterate from 5 to the square root of the number\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Checks if the given integer is a prime number and returns True if it is,\n    and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = 7\nprint(prime_num(num))  # Output: True\n\nnum = 12\nprint(prime_num(num))  # Output: False\n\nnum = 100\nprint(prime_num(num))  # Output: True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return round(radian, 4)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        match = matches[0]\n        start = text.find(match)\n        end = start + len(match)\n        return match, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        result = matches[0]\n        start = text.index(result)\n        end = start + len(result)\n        return result, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    return matches[0], 0, len(matches[0])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    start_index = matches.pop(0).start()\n    end_index = matches.pop(-1).end()\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    start, end = matches[0].span()\n    return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(0), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # use re.search function to find the pattern in the text\n    match = re.search(pattern, text)\n\n    # if pattern is found, return the match object, start index and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth Bell number by iteratively adding the previous two bell numbers.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    first = 1\n    second = 2\n    third = 0\n    \n    for i in range(3, n+1):\n        third = first + second\n        first = second\n        second = third\n    \n    return third"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            a, b = b, a + b\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            print(f'Bell Number {i}: {pow(i, n)}')"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    if n < 1:\n        return \"n must be greater than or equal to 1\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_Number(n//2) * 2\n    else:\n        return (bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_dict = {0: 0, 1: 1}\n    for i in range(2, n+1):\n        bell_dict[i] = bell_dict[i-1] + bell_dict[i-2]\n    return bell_dict[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (2 * bell_Number(n-1) - bell_Number(n-2)) // n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # the index of the k'th element to be removed\n    \n    # use a temporary list to store the elements before the k'th element\n    temp = []\n    \n    # loop through the list and append the elements before the k'th element to the temporary list\n    for i in range(L):\n        if i < k:\n            temp.append(list1[i])\n        else:\n            temp.append(list1[i + 1])\n            \n    return temp"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"The list should have at least L elements\")\n\n    k = L - 1\n    for i in range(len(list1) - 1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i] = list1[i + 1]\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    i = 0\n\n    while i < n:\n        if i == k:\n            i += 1\n            continue\n        else:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n        i += 1\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input. It returns a new list with all elements of the original list except the kth element.\n    \n    Example:\n    input: list1 = [1, 2, 3, 4, 5], L = 2\n    output: [1, 2, 4, 5]\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n            return list1\n        elif i < k:\n            list1.pop(i)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [elem for i, elem in enumerate(list1) if i!= L-1]\n    else:\n        kth_elem = list1[L-1]\n        return remove_kth_element([elem for elem in list1 if elem!= kth_elem], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return [x for i, x in enumerate(list1) if i!= k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        return \"List is less than L.\"\n    else:\n        return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(set(list1))  # remove duplicates\n    n = len(list1)\n    if L > n:\n        return []\n    if L == n:\n        return []\n    if L == 1:\n        return [list1.pop()]\n    if L == n - 1:\n        return list1[:-1]\n    if L % 2 == 0:\n        return remove_kth_element(list1[:-1], L // 2) + [list1.pop()]\n    else:\n        return remove_kth_element(list1[:-1], L // 2 + 1) + [list1.pop()]\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    if N >= m:\n        return \"The value of N is greater than or equal to the number of columns.\"\n    max_val = float('-inf')\n    for i in range(n):\n        if i < m:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the length of the list to find the maximum value\n    length = len(test_list)\n\n    # Loop through each row in the matrix\n    for i in range(length):\n        # Calculate the value of then'th column\n        nth_col = [row[N-1] for row in test_list[i]]\n        # Find the maximum value in the nth column\n        max_val = max(nth_col)\n        # Assign the maximum value to the nth row\n        test_list[i][N-1] = max_val\n\n    # Return the modified matrix\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Returns the maximum value of the Nth column in a matrix.\n\n    Args:\n        matrix (list[list]): a matrix represented as a list of lists\n        N (int): the n-th column to find the maximum value of\n\n    Returns:\n        int: the maximum value of the Nth column in the matrix\n    \"\"\"\n    # Find the length of the first row in the matrix\n    num_rows = len(matrix)\n    col_len = len(matrix[0])\n\n    # Check if the Nth column exists\n    if N >= col_len:\n        raise ValueError(\"N must be less than the number of columns in the matrix\")\n\n    # Initialize a list to store the maximum values of each row\n    row_maxes = [None] * num_rows\n\n    # Iterate over the rows in the matrix\n    for i in range(num_rows):\n        # If the row has already been processed, skip it\n        if row_maxes[i] is not None:\n            continue\n\n        # Initialize the maximum value for the Nth column to the first value in the row\n        max_value = matrix[i][N]\n\n        # Iterate over the remaining columns in the row\n        for j in range(N + 1, col_len):\n            # If the current value is greater than the maximum value, update the maximum value\n            if matrix[i][j] > max_value:\n                max_value = matrix[i][j]\n\n        # Update the row_maxes list with the maximum value for the current row\n        row_maxes[i] = max_value\n\n    # Find the maximum value of the Nth column in the matrix\n    max_col_value = max(row_max for row_max in row_maxes)\n\n    return max_col_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        if i == N:\n            max_val = max(test_list[i])\n            print(\"The maximum value of the\", N, \"th column is:\", max_val)\n        else:\n            test_list[i].insert(N, 0)\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(row[N-1] for row in test_list))\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    \n    # Find the length of the first row\n    first_row_length = len(test_list[0])\n\n    # Check if N is within range\n    if N < 1 or N > first_row_length:\n        return None\n    \n    # Initialize a variable to store the max value of then'th column\n    max_value = None\n    \n    # Iterate through each row in the matrix\n    for row in test_list:\n        # Check if the row length is within range\n        if N > len(row):\n            continue\n        \n        # If the value at then'th column is greater than the current max, update the max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n            \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_val = None\n    for row in test_list:\n        if max_val is None or row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the input is a valid list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input must be a list of lists.')\n    # check if the input is a square matrix\n    if len(test_list)!= len(test_list[0]):\n        raise ValueError('Input must be a square matrix.')\n    \n    # get the length of the n-th column\n    col_length = len(test_list[0])\n    \n    # check if N is a valid index\n    if N < 0 or N >= col_length:\n        raise ValueError('N must be a valid index.')\n    \n    # find the max of the n-th column\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('Input must be a list')\n\n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError('Input must be a list of lists')\n\n    if len(test_list) < 1:\n        raise ValueError('Input list must not be empty')\n\n    if len(test_list[0]) < 1:\n        raise ValueError('Input list must not have any empty rows')\n\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer')\n\n    max_val = 0\n    for row in test_list:\n        if len(row) < N:\n            raise ValueError('N must be less than the length of each row')\n        col = row[N-1]\n        if col > max_val:\n            max_val = col\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []  \n    for sublist in lst:  \n        result.append([sublist[0], sublist[1]])  \n    return result  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Get the first element of the tuple\n        first = tup[0]\n        \n        # If the first element is not a number, skip it\n        if not isinstance(first, (int, float)):\n            continue\n        \n        # Initialize a variable to store the running cumulative sum\n        running_sum = 0\n        \n        # Iterate over the remaining elements of the tuple\n        for num in tup[1:]:\n            # If the number is not a number, skip it\n            if not isinstance(num, (int, float)):\n                continue\n            \n            # Add the number to the running cumulative sum\n            running_sum += num\n        \n        # Append the running cumulative sum to the cumulative sum list\n        cum_sum.append(running_sum)\n    \n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cum_sum = 0\n    \n    # Loop through the tuple list\n    for num in test_list:\n        # Add the current value to the cumulative sum\n        cum_sum += num\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum\n    cum_sum = 0\n\n    # Iterate over the tuple list\n    for i in range(len(test_list)):\n        # Add the value at the current index to the cumulative sum\n        cum_sum += test_list[i]\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for num in test_list:\n        sum += num\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input should be a list of tuples\")\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum list\n    cum_sum_list = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Initialize the cumulative sum for the current tuple to 0\n        cum_sum = 0\n\n        # Loop through each value in the current tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n\n        # Add the cumulative sum for the current tuple to the cumulative sum list\n        cum_sum_list.append(cum_sum)\n\n    # Return the cumulative sum list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initializing an empty list to store the cumulative sum\n    cum_sum_list = []\n    \n    # loop through the tuple list\n    for i in range(len(test_list)):\n        # if the current index is not equal to the previous index, add the value to the cumulative sum list\n        if i == 0 or test_list[i][0]!= test_list[i-1][0]:\n            cum_sum_list.append(test_list[i][1])\n    \n    # return the cumulative sum list\n    return cum_sum_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    averages = []\n    # iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the average value for this tuple\n        avg = sum(tup) / len(tup)\n        # append the average value to the list of averages\n        averages.append(avg)\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num) / len(num) for num in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if not all(isinstance(sub_tuple, tuple) for sub_tuple in nums):\n        raise TypeError(\"All elements in the tuple must be tuples\")\n    result = []\n    for sub_tuple in nums:\n        if not all(isinstance(num, (int, float)) for num in sub_tuple):\n            raise TypeError(\"All elements in a tuple must be integers or floats\")\n        if len(sub_tuple) == 0:\n            result.append(0)\n        else:\n            result.append(sum(sub_tuple) / len(sub_tuple))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        average = total/len(nums[i])\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of each tuple and append it to the averages list\n        averages.append(sum(tup)/len(tup))\n    \n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        total = 0\n        for j in i:\n            total += j\n        average = total / len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # If the length of the two tuples are not equal, return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # Iterate through the tuples and perform the element wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo operation on each element of both tuples.\n    '''\n    # If the two tuples are of different lengths, raise a TypeError\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('The two input tuples must have the same length.')\n    \n    # Initialize a new tuple to store the result of the modulo operation\n    result_tup = ()\n    \n    # Loop through both tuples and perform element-wise modulo operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the point (d, 0) is reachable or not\n    if d <= 0:\n        return 0\n    \n    # Initialize the variables\n    curr_pos = (0, 0)\n    jumps = 1\n    count = 0\n    \n    # Iterate until the point (d, 0) is reached\n    while curr_pos!= (d, 0) and count < steps:\n        # Calculate the next position\n        next_pos = (curr_pos[0] + 1, curr_pos[1])\n        # Check if the next position is valid or not\n        if next_pos[0] < 0 or next_pos[1] < 0 or next_pos[0] >= steps or next_pos[1] >= d:\n            return -1\n        # Check if the next position is reachable or not\n        if next_pos[0] == steps - 1 and next_pos[1] == d - 1:\n            return jumps\n        # Check if the next position can be reached with a single jump\n        if next_pos[0] == steps - 1:\n            return jumps + 1\n        # Update the variables\n        curr_pos = next_pos\n        jumps += 1\n        count += 1\n        \n    # If the point (d, 0) is not reached, then return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d > steps:\n        return \"Invalid input: d should be less than or equal to steps.\"\n    \n    jumps = 0\n    curr_pos = 0\n    total_steps = 0\n    steps_left = steps\n    while steps_left > 0:\n        if curr_pos >= d:\n            steps_left -= 1\n            jumps += 1\n            curr_pos += d\n        else:\n            steps_left -= 1\n            total_steps += 1\n            curr_pos += 1\n    return jumps + total_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the given length is greater than or equal to the distance between two points on the x-axis\n    if steps >= d:\n        return -1\n\n    # Initialize variables\n    visited = set()\n    visited.add((0, 0))\n    jump_count = 0\n\n    # Keep track of the current position and the length of the steps taken so far\n    current_pos = (0, 0)\n    length = 1\n\n    # Loop until the point (d, 0) is reached\n    while length <= steps:\n        # Check if the current position is within the given range\n        if current_pos[0] < 0 or current_pos[0] >= d or current_pos[1] < 0 or current_pos[1] >= d:\n            return -1\n\n        # Check if the current position has already been visited\n        if current_pos in visited:\n            return -1\n\n        # Mark the current position as visited\n        visited.add(current_pos)\n\n        # Move to the next position\n        if current_pos[0] == 0:\n            current_pos = (current_pos[0], current_pos[1] + 1)\n            length += 1\n        elif current_pos[1] == 0:\n            current_pos = (current_pos[0] - 1, current_pos[1])\n            length += 1\n        elif current_pos[0] == d - 1:\n            current_pos = (current_pos[0], current_pos[1] - 1)\n            length += 1\n        else:\n            current_pos = (current_pos[0] - 1, current_pos[1] - 1)\n            length += 1\n\n        # Check if the point of form (d, 0) has been reached\n        if current_pos == (d, 0):\n            return jump_count\n\n    # If the point of form (d, 0) has not been reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1:\n        return -1\n    elif steps == 1:\n        return 0\n    elif d == 0:\n        return -1\n    elif d < 0:\n        return -1\n    else:\n        return 1 + min_Jumps(steps - 1, d - 1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # The number of jumps required to reach (0, 0) from origin is 0\n    if d == 0:\n        return 0\n\n    # Calculate the number of jumps required to reach (0, d) from origin\n    jump_from_origin = min_Jumps(steps - 1, d - 1)\n\n    # Calculate the number of jumps required to reach (d, 0) from origin\n    jump_from_end = min_Jumps(steps - 1, 0)\n\n    # Return the minimum of the two jumps\n    return min(jump_from_origin, jump_from_end) + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables to store the number of jumps and the index of the last step\n    count = 0\n    last_step = -1\n\n    # Loop through the steps and check if the position is at (d, 0)\n    for i in range(len(steps)):\n        if steps[i][0] == d and steps[i][1] == 0:\n            # Check if the last step was at the same position as the current step\n            if i == last_step:\n                # Increment the count if the position is the same as the previous step\n                count += 1\n            else:\n                # Reset the count and set the last step index to the current step index\n                count = 0\n                last_step = i\n                # Increment the count if the position is not the same as the previous step\n                count += 1\n                # Return the count of jumps required\n                return count\n        # Check if the last step was at a position that is less than the current step\n        elif i < last_step:\n            # Decrement the count of jumps required as the previous step is skipped\n            count -= 1\n\n    # If the loop completes without finding the point (d, 0) return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables to store number of jumps and current position\n    jumps = 0\n    curr_pos = (0, steps)\n\n    # Loop until we reach (d, 0) from origin\n    while curr_pos!= (d, 0):\n        # Calculate the next position after jumping\n        next_pos = (curr_pos[0] + 1, curr_pos[1] - 1)\n\n        # Check if we have reached the end of the level\n        if next_pos == (d, 0):\n            return jumps + 1\n\n        # If we have not reached the end of the level, increment the number of jumps and continue searching for (d, 0)\n        jumps += 1\n        curr_pos = next_pos\n\n    # If we reach the end of the level, return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # calculate the number of jumps required for each step\n    jumps = [0] * steps\n    jumps[0] = 0\n    jumps[1] = 1\n    for i in range(2, steps):\n        jumps[i] = min(jumps[i-1], jumps[i-2]) + 1\n\n    # find the number of jumps required for d to reach (d, 0)\n    for i in range(steps):\n        if jumps[i] >= d:\n            return i + 1\n\n    # if no such jump exists, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    i = 0\n    j = 0\n    jumps = 0\n\n    # Iterate over the steps and find the minimum jumps required\n    while i < steps:\n        j += 1\n        if j == d:\n            jumps += 1\n            j = 0\n            i += 1\n        elif j > d:\n            i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps = list(map(int, steps.split()))\n    jumps = 0\n    \n    # Check for minimum number of jumps\n    for i in range(len(steps)-1):\n        if steps[i+1]-steps[i] >= d:\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError('Cannot divide by zero.')\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    # loop through the lists\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    return test_str + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize empty string to store numbers\n    num_str = \"\"\n    # Iterate over each character in the given string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the number string\n            num_str += char\n        # Check if the character is not a number\n        else:\n            # Append the non-number character to the original string\n            test_str += char\n    # Return the modified string with all numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    is_num = False\n    \n    for char in test_str:\n        if char.isdigit():\n            is_num = True\n        else:\n            if is_num:\n                new_str += char\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Create an empty string to store numbers\n    num_str = ''\n\n    # Loop through each character in the input string\n    for char in test_str:\n\n        # If the character is a number, append it to the number string\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, append it to the end of the string\n        else:\n            test_str += char\n\n    # Return the final string with numbers at the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    new_str = \"\"\n    for i, c in enumerate(test_str):\n        if c.isdigit():\n            new_str += c\n        else:\n            new_str += test_str[i]\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty string to store the numbers\n    num_str = ''\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, add it to the number string\n        if char.isdigit():\n            num_str += char\n        # if the character is not a number, add it to the end of the input string\n        else:\n            test_str = test_str.replace(char, '')\n    # add the numbers to the end of the input string\n    test_str += num_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            if numbers:\n                test_str = ''.join(numbers + [char])\n                numbers = []\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a regular expression pattern to match all numbers in the string\n    num_pattern = re.compile(r'\\d+')\n    \n    # Find all the numbers in the string using the regular expression pattern\n    nums = num_pattern.findall(test_str)\n    \n    # Reverse the order of the numbers in the list\n    nums.reverse()\n    \n    # Join the numbers in the list back into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_count = 0\n    num_flag = False\n    temp_str = ''\n\n    # iterate over each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the temporary string\n        if char.isdigit():\n            num_count += 1\n            temp_str += char\n        else:\n            # if the number count is greater than 0, move all the numbers to the end of the string\n            if num_count > 0:\n                for i in range(num_count):\n                    temp_str += str(i+1)\n                num_count = 0\n                num_flag = False\n            # append the remaining characters to the temporary string\n            temp_str += char\n    \n    # if there are any remaining numbers, move all the numbers to the end of the string\n    if num_count > 0:\n        for i in range(num_count):\n            temp_str += str(i+1)\n    \n    # return the modified string\n    return temp_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a = sorted(a)\n    n = len(a)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            subset = a[i:j]\n            if all(x % 2 == 0 for x in subset):\n                max_len = max(max_len, len(subset))\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the count of each number in the list\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # create a list of the numbers in descending order of their frequency\n    sorted_count = sorted(count.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize a set to store the result\n    result = set()\n    \n    # loop through the sorted list of numbers\n    for num, freq in sorted_count:\n        # if the number is divisible by 2, add it to the result set\n        if freq % 2 == 0:\n            result.add(num)\n    \n    # return the size of the largest subset of even numbers in the list\n    return len(result)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = {}\n    max_subset_size = 0\n    for num in a:\n        remainder = num % 2\n        if remainder not in pairs:\n            pairs[remainder] = [num]\n        else:\n            pairs[remainder].append(num)\n        if len(pairs[remainder]) > max_subset_size:\n            max_subset_size = len(pairs[remainder])\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # find the size of the largest subset that contains every pair divisible by 3\n    largest_divisible_by_3 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 3 == 0 and a[j] % 3 == 0:\n                largest_divisible_by_3 = max(largest_divisible_by_3, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 5\n    largest_divisible_by_5 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 5 == 0 and a[j] % 5 == 0:\n                largest_divisible_by_5 = max(largest_divisible_by_5, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 7\n    largest_divisible_by_7 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 7 == 0 and a[j] % 7 == 0:\n                largest_divisible_by_7 = max(largest_divisible_by_7, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 11\n    largest_divisible_by_11 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 11 == 0 and a[j] % 11 == 0:\n                largest_divisible_by_11 = max(largest_divisible_by_11, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 13\n    largest_divisible_by_13 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 13 == 0 and a[j] % 13 == 0:\n                largest_divisible_by_13 = max(largest_divisible_by_13, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 17\n    largest_divisible_by_17 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 17 == 0 and a[j] % 17 == 0:\n                largest_divisible_by_17 = max(largest_divisible_by_17, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 19\n    largest_divisible_by_19 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 19 == 0 and a[j] % 19 == 0:\n                largest_divisible_by_19 = max(largest_divisible_by_19, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 23\n    largest_divisible_by_23 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 23 == 0 and a[j] % 23 == 0:\n                largest_divisible_by_23 = max(largest_divisible_by_23, j-i+1)\n    \n    # find the size of the largest subset that contains every pair divisible by 29\n    largest_divisible_by_29 = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % 29 == 0 and a[j] % 29 == 0:\n                largest_divisible_by_29 = max(largest_div"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    # Create a list to store the sizes of subsets\n    subset_sizes = []\n\n    # Iterate through the numbers in the list\n    for i in range(len(a)):\n        # For each number, iterate through the remaining numbers in the list\n        for j in range(i+1, len(a)+1):\n            # Check if the current subset of numbers is divisible by the number\n            if a[i] % a[j] == 0:\n                # If it is, add its size to the list of subset sizes\n                subset_sizes.append(j-i)\n                # Exit the inner loop to avoid checking the same subset again\n                break\n\n    # Find the maximum size of any subset\n    max_size = max(subset_sizes)\n\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a dictionary to store the number of times each number appears in the list\n    num_dict = {}\n    for num in a:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n\n    # Sort the dictionary by the values in descending order\n    sorted_dict = dict(sorted(num_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # Initialize a variable to store the largest subset size\n    max_size = 0\n\n    # Loop through the sorted dictionary\n    for num, count in sorted_dict.items():\n        # Check if the number is divisible by the index of the number\n        if num % a.index(num) == 0:\n            # If it is, add 1 to the current subset size\n            max_size += 1\n        else:\n            # If it's not, check if the previous number is divisible by the index of the current number\n            if sorted_dict[a.index(num) - 1] % a.index(num) == 0:\n                # If it is, add 1 to the current subset size\n                max_size += 1\n\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # create a set of unique pairs of numbers\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.add((a[i], a[j]))\n    \n    # sort the pairs by the size of the set\n    sorted_pairs = sorted(pairs, key=len, reverse=True)\n    \n    # initialize the largest subset to be empty\n    largest_subset = set()\n    \n    # iterate through the sorted pairs and add them to the largest subset until the sum of the numbers is divisible by 2\n    for pair in sorted_pairs:\n        total = sum(pair)\n        if total % 2 == 0:\n            largest_subset.add(pair)\n        else:\n            break\n    \n    # return the size of the largest subset\n    return len(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(set(a)) # remove duplicates and sort the list\n    n = len(a)\n    dp = [1]*n # create an array to store the size of the largest subset that is divisible by every number in the list\n    dp[0] = 1 # base case: if the first number is divisible, then the largest subset that is divisible by every number is 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j]+1) # if a[j] is divisible by a[i], then the largest subset that is divisible by every number is the maximum of the size of the largest subset that is divisible by every number up to and including j and the size of the largest subset that is divisible by a[j]\n    \n    return max(dp) # return the size of the largest subset that is divisible by every number in the list"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    # Initialize variables\n    n = len(a)\n    dp = [0] * (2 * n + 1)\n    max_size = 0\n\n    # Fill the dynamic programming table\n    for i in range(2 * n + 1):\n        for j in range(i):\n            if i % a[j] == 0 and j % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for the largest subset size and current subset size\n    max_size = 0\n    curr_size = 1\n\n    # Iterate through the list from right to left\n    for i in range(len(a)-1, -1, -1):\n        # If the current number is divisible by the previous number, add it to the current subset\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n        else:\n            # If the current subset size is greater than the maximum subset size, update the maximum subset size\n            if curr_size > max_size:\n                max_size = curr_size\n            # Reset the current subset size to 1\n            curr_size = 1\n\n    # If the current subset size is greater than the maximum subset size, update the maximum subset size\n    if curr_size > max_size:\n        max_size = curr_size\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_arr = arr1 + arr2\n    \n    # Find the length of the merged list\n    length = len(merged_arr)\n    \n    # Find the middle index of the merged list\n    mid = length // 2\n    \n    # If the length is odd, the median is the middle element\n    if length % 2!= 0:\n        return merged_arr[mid]\n    \n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into one sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If n is even, take the average of the middle two elements\n        mid = n // 2\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # If n is odd, take the middle element\n        mid = n // 2\n        median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two lists to form a single list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Calculate the length of the merged list\n    length = len(merged_list)\n\n    # Find the middle index of the merged list\n    middle_index = length // 2\n\n    # Calculate the median based on the middle index\n    if length % 2 == 0:\n        # If the length is even, take the average of the two middle indices\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        # If the length is odd, take the middle index\n        median = merged_list[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the middle element of the merged list\n    mid_element = sorted_list[n//2]\n    \n    # Return the median\n    return mid_element"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Calculate the median\n    median = sorted_list[n]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Calculate the median\n    median_index = n // 2\n    median = merged_list[median_index]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Calculate the median\n    median = sorted(merged_list)[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge both arrays into a single sorted array\n    merged = merge_sorted_arrays(arr1, arr2)\n\n    # Get the length of the merged array\n    length = len(merged)\n\n    # Find the middle index of the merged array\n    middle_index = length // 2\n\n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return merged[middle_index]\n    else:\n        # If the length is even, the median is the average of the two middle elements\n        return (merged[middle_index - 1] + merged[middle_index]) / 2\n\n\ndef merge_sorted_arrays(arr1, arr2):\n    \"\"\"\n    Merge two sorted arrays into a single sorted array.\n    \"\"\"\n\n    # Initialize variables to keep track of the current index of each array\n    i = 0\n    j = 0\n\n    # Create a new array to hold the merged sorted array\n    merged_array = []\n\n    # Iterate through the arrays until one of them is exhausted\n    while i < len(arr1) and j < len(arr2):\n\n        # If the current element of arr1 is smaller, add it to the merged array and increment i\n        if arr1[i] < arr2[j]:\n            merged_array.append(arr1[i])\n            i += 1\n        else:\n            merged_array.append(arr2[j])\n            j += 1\n\n    # Add any remaining elements of arr1 or arr2 to the merged array\n    merged_array += arr1[i:]\n    merged_array += arr2[j:]\n\n    return merged_array"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the lists are of equal size\n    if len(arr1)!= len(arr2):\n        return \"Error: Lists are not of equal size.\"\n    \n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size and finds the median.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # Find the middle index\n    mid = n // 2\n    # Check if the array is even or odd\n    if n % 2 == 0:\n        # If it's even, find the average of the two middle elements\n        median = (sorted_arr[mid - 1] + sorted_arr[mid]) / 2\n    else:\n        # If it's odd, find the middle element\n        median = sorted_arr[mid]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input\n    and returns a new list containing the nth power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Check if the string is empty\n    if not string:\n        return string\n    \n    # Check if the first character is uppercase\n    if string[0].isupper():\n        return string\n    \n    # Convert the first character to uppercase and the rest to lowercase\n    new_string = string[0].upper() + string[1:].lower()\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert string to uppercase\n    string = string.upper()\n    # Return uppercase string\n    return string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1: \n        return newList\n    \n    # Swap the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    for i in range(n-1): \n        newList[i], newList[n-1-i] = newList[n-1-i], newList[i] "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap.\")\n        return\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[-1]\n    \n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n        return\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the new list\n    print(\"New list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # using slicing to interchange the first and last elements\n    newList = newList[::-1]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in it.\n    '''\n    if len(newList) >= 2:\n        # Swap the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Extracting the last element from the list\n    last = newList[-1]\n    # Removing the last element from the list\n    newList.pop()\n    # Inserting the last element at the beginning of the list\n    newList.insert(0, last)\n    # Returning the modified list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using Heron's formula to calculate the area of a triangle\n    s = (3 * r ** 2) ** 0.5\n    area = (s * (s - r) * (s - r + r)) ** 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for the area of a triangle given its three sides:\n    # Area = 1/2 * base * height\n    # base = sqrt(3) * h * r\n    # height = h * r\n    # h = (base**2 + height**2)**0.5\n    # h = 1/3 * sqrt(3) * r * r\n    h = 1/3 * r * r\n    area = h * (3 * r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r\n    \n    # Calculate the area of the largest triangle\n    area = (s * (s - r) * (s - r - 1) * (s - r + 1)) ** 0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r\n    b = 2 * r\n    c = r\n    s = (a**2 + b**2 - c**2) / (2 * b)\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle diameter\n    s = 2 * r\n    # Calculate the area of the first triangle inscribed in the semicircle\n    a = 0.5 * r * r * math.sin(math.pi/3)\n    # Calculate the area of the second triangle inscribed in the semicircle\n    b = 0.5 * r * r * math.sin(2 * math.pi/3)\n    # Calculate the area of the third triangle inscribed in the semicircle\n    c = 0.5 * r * r * math.sin(4 * math.pi/3)\n    # Calculate the maximum area of any triangle that can be inscribed in the semicircle\n    max_area = max(a, b, c)\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = math.pi * r * r\n    # Return the area of the largest triangle inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = 0\n    for i in range(3):\n        area += math.sqrt(r**2 - (i+1)**2)\n    area *= 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the radius of the semicircle\n    s = r * 2 \n\n    # Find the length of the base of the largest triangle that can be inscribed in the semicircle\n    base = s / math.tan(math.pi/3) \n\n    # Find the height of the largest triangle that can be inscribed in the semicircle\n    height = r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * base * height\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * math.pi * r ** 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculating the semi-perimeter\n    s = 2 * r\n\n    # Calculating the area using Heron's formula\n    area = (s*(s-r)*(s-r-r))**(1/2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    import math\n\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * semi_perimeter * (math.sin(math.pi / 3) ** 3 + math.sin(2 * math.pi / 3) ** 3 + math.sin(4 * math.pi / 3) ** 3)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n    if start > end:\n        return -1\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] < mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0:\n            if array[0]!= mid:\n                return mid\n            start = mid + 1\n        elif mid == end:\n            if array[mid]!= mid:\n                return mid\n            end = mid - 1\n        else:\n            if array[mid - 1] < array[mid]:\n                if array[mid - 1] == mid - 1:\n                    return mid\n                else:\n                    return array[mid - 1] + 1\n            else:\n                if array[mid] == mid + 1:\n                    return mid\n                else:\n                    return array[mid] - 1\n\n    return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    \n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array: list of integers\n    start: (optional) start index of the search range\n    end: (optional) end index of the search range\n\n    Returns:\n    int: the smallest missing number in the array\n\n    Example usage:\n    >>> array = [1, 2, 3, 4, 5]\n    >>> find_First_Missing(array)\n    6\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for num in range(start, end):\n        if array[num]!= num+1:\n            return num+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n\n    # If all the numbers in the array are present, then the largest number is missing.\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    \n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \n    Args:\n    array (list): A sorted list of natural numbers.\n    \n    Keyword Args:\n    start (int): The starting index of the search range. Default is 0.\n    end (int): The ending index of the search range. Default is None, which means the end of the array.\n    \n    Returns:\n    int: The smallest missing number.\n    \"\"\"\n    \n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    \n    return end + start + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as an input and returns a new list containing only even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_list = []\n    \n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0) or (i == 0 and j in [-1, 1]) or (i in [-1, 1] and j == 0):\n                continue\n            x1, y1 = x + i, y + j\n            if (0 <= x1 < len(sub) and 0 <= y1 < len(sub[0])):\n                adj.append((x1, y1))\n                sub[x1][y1] = ele\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Check if the coordinate tuple is empty\n    if not ele:\n        return sub\n\n    # Extract the first coordinate of the tuple\n    x, y = ele\n\n    # Extract all adjacent coordinates\n    adj = [(x, y+1), (x+1, y), (x-1, y), (x, y-1)]\n\n    # Add the adjacent coordinates to the sublist\n    sub.extend(adj)\n\n    # Recursively call the function for the remaining coordinates\n    return adjac(adj, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub == []:\n        sub = [(x, y+1), (x, y-1), (x+1, y), (x-1, y)]\n    return [sub.pop(0) for i in range(len(sub))]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # get all adjacent coordinates\n    x, y = ele\n    adjs = [(x+dx, y+dy) for dx, dy in ((0,1), (1,0), (0,-1), (-1,0)) if 0<=x+dx<n and 0<=y+dy<m]\n    \n    # add subsets of adjacent coordinates to the result list\n    for a in adjs:\n        sub.append(a)\n        adjac(a, sub)\n        sub.pop()\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    for i in range(3):\n        for j in range(3):\n            if i!= j:\n                adjacent.append((ele[0] + i, ele[1] + j))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj = [(x+dx, y+dy) for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]]\n    sub.append(ele)\n    return adj + adjac(adj, sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the row and column of the given tuple\n    row, col = ele\n    \n    # Using nested for loop to generate all the adjacent coordinates of the given tuple\n    for i in range(max(row-1, 0), min(row+2, 9)):\n        for j in range(max(col-1, 0), min(col+2, 9)):\n            # Checking if the adjacent coordinate is not equal to the current element\n            if not (i == row and j == col):\n                # Adding the adjacent coordinate to the sublist\n                sub.append((i, j))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 99:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 99:\n        adj.append((x, y+1))\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    x, y = ele\n    if x == 0:\n        adjacent.append((x+1, y))\n    if x == len(sub)-1:\n        adjacent.append((x-1, y))\n    if y == 0:\n        adjacent.append((x, y+1))\n    if y == len(sub[0])-1:\n        adjacent.append((x, y-1))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    if len(sub) == 2:\n        return sub\n    return adjac(tuple(ele[0]-1, ele[1]), sub) + adjac(tuple(ele[0]+1, ele[1]), sub) + \\\n           adjac(tuple(ele[0], ele[1]-1), sub) + adjac(tuple(ele[0], ele[1]+1), sub)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_index = text.find(' ')\n    while space_index!= -1:\n        text = text[:space_index] + '_' + text[space_index+1:]\n        space_index = text.find(' ')\n    underscore_index = text.find('_')\n    while underscore_index!= -1:\n        text = text[:underscore_index] +'' + text[underscore_index+1:]\n        underscore_index = text.find('_')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    # Convert spaces to underscores and vice versa\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into a list of characters\n    chars = list(text)\n    \n    # Loop through each character\n    for i in range(len(chars)):\n        # Check if the character is a whitespace character\n        if chars[i].isspace():\n            # Replace the whitespace with an underscore\n            chars[i] = '_'\n        # Check if the character is an underscore\n        elif chars[i] == '_':\n            # Replace the underscore with a whitespace\n            chars[i] =''\n            \n    # Join the list of characters back into a string\n    result = ''.join(chars)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n            num_list.pop(i)\n        else:\n            break\n    num_list.extend([0] * zero_count)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a flag variable to keep track of whether we have found a non-zero number\n    found_non_zero = False\n    \n    # Iterate over the numbers in the list\n    for i in range(len(num_list)):\n        # If we have found a non-zero number, we skip the zero\n        if num_list[i]!= 0 and found_non_zero:\n            # Move the zero to the end of the list\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n    \n    # If we have found a non-zero number, the list is already sorted\n    if found_non_zero:\n        return\n    \n    # If all numbers are zero, we need to reverse the list\n    num_list = num_list[::-1]\n    \n    # Move the zero to the end of the list\n    num_list[-1], num_list[0] = num_list[0], num_list[-1]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    i = n - 1\n    \n    # Traverse the list from right to left\n    while i >= 0:\n        \n        # If a non-zero element is found, move it to its correct position\n        if num_list[i]!= 0:\n            temp = num_list[i]\n            num_list[i] = num_list[n-1]\n            num_list[n-1] = temp\n        \n        # Move the pointer to the next non-zero element\n        i -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    # initialize a variable to store the number of zeroes\n    num_zeroes = 0\n    # loop through the list of numbers\n    for num in num_list:\n        # check if the number is zero\n        if num == 0:\n            # increment the number of zeroes\n            num_zeroes += 1\n        else:\n            # if the number is not zero, append it to the end of the list\n            num_list.append(num)\n    # remove the zeroes from the list by slicing the list\n    num_list = num_list[:num_list.index(0)]\n    # return the list with the zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all zeroes to the end of the list.\n    '''\n    # Initialize two pointers i and j to the start and end of the list respectively\n    i = j = 0\n    \n    # Traverse the list using i pointer\n    while i < len(num_list):\n        # If the current element is not zero, move it to the next position\n        if num_list[i]!= 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n        i += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        print(\"All zeroes moved to the end of the list:\", num_list)\n    else:\n        print(\"No zeroes found in the list\")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        return move_zero(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create an empty list to store non-zero numbers\n    non_zero_list = []\n\n    # Iterate through the list and add non-zero numbers to the non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append all the zeroes to the end of the non_zero_list\n    non_zero_list.extend([0] * (len(num_list) - len(non_zero_list)))\n\n    # Return the non_zero_list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers to start and end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # Loop through the list from start to end\n    while start < end:\n        # If the current element is not zero\n        if num_list[start]!= 0:\n            # Move the current element to the next position in the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            \n            # Move the start pointer to the next position\n            start += 1\n        # If the current element is zero\n        else:\n            # Move the start pointer to the next position\n            start += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initializing the sum variable as 0\n    xor_sum = 0\n    # Looping through the list\n    for i in range(n):\n        # Looping through the list\n        for j in range(i+1, n):\n            # XOR operation between arr[i] and arr[j]\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            xor = arr[i] ^ arr[j] \n            sum += xor \n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using the heap sort algorithm.\n    '''\n    # Create a min heap from the given iterable\n    hq.heapify(iterable)\n    \n    # Sort the iterable by popping the smallest elements\n    sorted_iterable = []\n    while iterable:\n        sorted_iterable.append(hq.heappop(iterable))\n    \n    return sorted_iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n        \n    for i in range(n-1, 0, -1):\n        hq.heapreplace(iterable, iterable[i])\n        \n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while len(heap) > 0:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    hq.heapify(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap data structure\n    heap = [0] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap)\n\n    # Extract the items from the heap and store them in a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a list of tuples\n    data = [(value, index) for index, value in enumerate(iterable)]\n\n    # build the max heap from the list of tuples\n    hq.heapify(data)\n\n    # extract the elements from the max heap and append them to a new list\n    sorted_list = []\n    while data:\n        sorted_list.append(data[0][0])\n        data[0] = data.pop()\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable into a list\n    lst = list(iterable)\n\n    # Build the max heap using the list as the initial input\n    hq.heapify(lst)\n\n    # Pop the maximum element from the heap and append it to the sorted list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n\n    return sorted_lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        print(\"Sale amount cannot be greater than actual cost\")\n        return False\n    else:\n        # check if the sale amount is equal to the actual cost\n        if sale_amount == actual_cost:\n            print(\"Sale amount cannot be equal to actual cost\")\n            return False\n        else:\n            # if the sale amount is less than the actual cost, then the sale amount has no profit or no loss\n            print(\"Sale amount has no profit or no loss\")\n            return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profitable and not no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments, actual_cost and sale_amount, and returns True if the \n    given amount has no profit and no loss, and False otherwise.\n\n    The function checks if the actual cost is greater than or equal to the sale amount, \n    and if the sale amount is greater than or equal to the profit margin.\n\n    The profit margin is a constant defined in the function as 5% of the actual cost.\n    \"\"\"\n\n    profit_margin = 0.05 * actual_cost\n\n    if actual_cost >= sale_amount and sale_amount >= profit_margin:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount being sold\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    '''\n\n    if actual_cost > sale_amount:\n        return False\n\n    if sale_amount - actual_cost < 0.01:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost < sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 0\n    \n    # Conversion from km/h to m/s\n    wind_speed = v * 1.609344\n    \n    # Celsius to Fahrenheit\n    temperature = t * 1.8 + 32\n    \n    # Equations for the wind chill index\n    if temperature < 0:\n        chill = math.floor(35.74 + 0.6215 * temperature - 35.75 * math.pow(wind_speed, 0.16) + 0.4275 * temperature * math.pow(wind_speed, 0.16))\n    else:\n        chill = math.floor(35.74 + 0.6215 * temperature - 35.75 * math.pow(wind_speed, 0.16) + 0.4275 * temperature * math.pow(wind_speed, 0.16))\n    \n    # Rounding to the next integer\n    chill = math.ceil(chill)\n    \n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -273.15 or t > 400:\n        return \"Invalid temperature\"\n    elif v <= 0:\n        return \"Invalid wind velocity\"\n    else:\n        # convert temperature to Fahrenheit\n        f = (t * 1.8) + 32\n        # calculate the wind chill index\n        wc = (f - 32) * 5 / 9 + 32\n        # round the wind chill index to the nearest integer\n        wc_rounded = round(wc)\n        return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # calculate the wind chill temperature\n    wc = 35.74 + 0.6215*v + 35.75*math.log(t/293.15) - 0.4275*v*t/293.15 + 0.0065*v*v*t/293.15\n    \n    # round the wind chill temperature to the nearest integer\n    wc_int = math.ceil(wc)\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate the wind chill index using the following formula:\n    # wci = 13.12 + 0.6215 * temperature - 11.37 * math.log(temperature) + 0.3965 * v**0.16\n    wci = 13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * v**0.16\n    \n    # Round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10:\n        return None\n    elif t < 0:\n        t = -t\n    else:\n        t = -t + 273.15\n    v_c = v * 1.60934\n    if v_c > 8.6:\n        return None\n    elif v_c > 1.8:\n        return int(round(23.79 + 0.6215 * t - 3.86 * math.log(v_c) + 0.14 * t * (t - 273.15)))\n    else:\n        return int(round(23.79 + 0.6215 * t - 3.567 * math.log(v_c) + 0.14 * t * (t - 273.15)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the dew point temperature\n    dp = (0.62197 * (math.log(k/(t + 273.15))) + 17.27) * 1.8 - 459.67\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v + 13.37 * dp - 0.3965 * k\n\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t < -273.15:\n        return None # invalid input\n    else:\n        w = 35.72 + 0.6215*t - 35.75*t**2 + 0.4275*t*v + 0.0065*v**2\n        w = math.ceil(w)\n        return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 0\n\n    # Calculate the dew point temperature using the formula D = T - 0.0065 * (T - 273.15)\n    dew_point = t - (0.0065 * (t - 273.15))\n\n    # Calculate the heat index using the formula HI = 13.12 + 0.6215 * T - 11.37 * math.log(p) + 0.3965 * T * math.log(p) - 0.14 * math.log(p)\n    heat_index = 13.12 + (0.6215 * t) - (11.37 * math.log(t)) + (0.3965 * t * math.log(t)) - (0.14 * math.log(t))\n\n    # Calculate the wind chill index using the formula WCI = 23.44 * math.log(v) - 0.79 * dew_point + 0.20 * heat_index\n    wind_chill_index = round(23.44 * math.log(v) - 0.79 * dew_point + 0.20 * heat_index)\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    uppercase_names = [name for name in sample_names if name[0].islower()]\n    sum_length = sum(len(name) for name in lowercase_names)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if name[0].isupper()]\n\n    # Calculate the sum of the lengths of the names\n    total_length = sum(len(name) for name in sample_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the non-lowercase names\n    non_lowercase_names = []\n\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name[0].islower():\n            # If it does, add it to the non-lowercase list\n            non_lowercase_names.append(name)\n    \n    # Sum the length of the names in the non-lowercase list\n    total_length = sum([len(name) for name in non_lowercase_names])\n\n    # Return the total length of the names in the non-lowercase list\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list to store the valid names\n    valid_names = []\n    \n    # loop through each name in the original list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, append it to the valid_names list\n            valid_names.append(name)\n    \n    # sum the lengths of the valid_names list and return the result\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name.isalpha()]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove all the space between the parenthesis\n    items = re.sub(r'\\s+','', items)\n    # Remove all the empty space at the start and end of the string\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r\"\\(.*?\\)\"\n    return re.sub(pattern, \"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\(.*?\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\(([^)]+)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an input, removes the parenthesis and what is inbetween them,\n    and returns the modified string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    while True:\n        if a * a + b * b > n:\n            return b * b - a * a\n        a += 1\n        b += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (is_nonagonal(n-1) + is_nonagonal(n-2))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    for i in range(n):\n        nonagonal_num += (i+1) * (2*i+1)\n    return nonagonal_num\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    nonagonal_number = 0\n    for i in range(1, n+1):\n        nonagonal_number += i**2\n\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First nonagonal number is 1\n    if n == 1:\n        return 1\n    \n    # Last nonagonal number is 2\n    elif n == 2:\n        return 2\n    \n    # Calculate the nonagonal number using the formula:\n    # Nonagonal number = (2*n-1)^2\n    else:\n        return (2*n-1)**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(n):\n        nonagonal_numbers.append(4 * i * (i + 1))\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return 2 * is_nonagonal(n // 2) + 1\n    else:\n        return 2 * is_nonagonal(n // 2) + 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Using the formula for the nonagonal number: n^2 + 2n + 1 = (n^2 + 2)(n^2 + 3)\n    return (n**2 + 2) * (n**2 + 3) - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize a counter variable to count the number of squares in the rectangle\n    counter = 0\n\n    # Loop from 1 to n-1 and add the square of each integer to the counter variable\n    for i in range(1, n):\n        counter += i*i\n\n    # Return the value of the counter variable which is the nth nonagonal number\n    return counter"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    prev_row = 0\n    current_row = 1\n    next_row = 1\n\n    # loop until nth nonagonal number is found\n    while True:\n        if current_row == n:\n            return next_row\n        prev_row, current_row, next_row = current_row, next_row, current_row + prev_row + next_row"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define a regular expression to match word characters (letters, digits, and underscores)\n    word_re = re.compile(r'\\w+')\n\n    # Split the text into words using the regular expression\n    words = word_re.findall(text)\n\n    # Loop through the words and check if 'z' appears at the start or end of a word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n\n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\1)[zZ]\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r\"(?<!\\w)z(?!\\w)\")\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![\\w\\s])z(?!\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match 'z' in the middle of words\n    pattern = r'\\b[a-zA-Z]+\\b\\w*z\\w*'\n    \n    # Use the search() method of the regular expression to find all occurrences of 'z' in the given text\n    result = re.search(pattern, text)\n    \n    # If 'z' is found, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k: \n        return input \n    else: \n        # reverse array from 0 to k-1 \n        input[:k] = input[:k][::-1] \n        # reverse array from k to end \n        input[k:] = input[k:][::-1] \n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[0], input[i] = input[i], input[0]\n\n    # reverse the array from k to len(input)-1\n    for i in range(k, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # reverse the array from len(input)-1 to 0\n    for i in range(len(input)-1, -1, -1):\n        input[i], input[0] = input[0], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two pointers i and j to 0 and the length of the array respectively\n    i = 0\n    j = len(input) - 1\n    \n    # Loop until i and j meet\n    while i < j:\n        # Swap the elements at i and j\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n        \n        # Increment i and decrement j\n        i += 1\n        j -= 1\n        \n        # If i reaches the given position, break the loop\n        if i >= k:\n            break"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        input[k-1], input[len(input)-1] = input[len(input)-1], input[k-1]\n        return reverse_Array_Upto_K(input, k+1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # create a variable to store the number of elements in the array\n    n = len(input)\n    \n    # check if k is less than or equal to zero or greater than the size of the array\n    if k <= 0 or k > n:\n        return \"Invalid input\"\n    \n    # create a variable to store the new reversed array\n    reverse_array = []\n    \n    # loop from the end of the array to the starting position k\n    for i in range(n-k, -1, -1):\n        reverse_array.append(input[i])\n        \n    # return the reversed array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    \n    reverse = input[::-1]\n    reverse[:k] = input[n-k:n]\n    return reverse"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n    \n    # If the position is greater than or equal to the length of the array, reverse the entire array\n    if k >= n:\n        return input\n    \n    # Initialize two pointers - one at the beginning of the array and another at the end\n    left = 0\n    right = k - 1\n    \n    # Reverse the array using two pointers\n    while left < right:\n        # Swap the values at the two pointers\n        input[left], input[right] = input[right], input[left]\n        \n        # Move the pointers towards each other\n        left += 1\n        right -= 1\n    \n    # Reverse the array from the position k to the end\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array\n    input.reverse()\n    # reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n    # Check if k is less than or equal to the length of the array\n    if k > n:\n        return input\n    # Initialize two pointers - one at the beginning and one at the end of the array\n    start = 0\n    end = n - 1\n    # Swap elements upto k-1 and then k element with the element at the kth position\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # unpacking the tuple\n    key, value = test_tup\n    # adding the dictionary to the tuple\n    return (key, value, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tuple = new_tuple + (value,)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the dictionary added to the end\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)  # make a copy of the tuple\n    test_tup += (test_dict,)  # add the dictionary to the tuple\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    path_max_avg = 0\n\n    # Base case: all cells have the same cost\n    if n == 1:\n        return cost[0][0]\n\n    # Base case: when there is only one cell left\n    if n == 2:\n        return (cost[0][0] + cost[1][1]) / 2\n\n    # Recursive case: iterate over all possible paths\n    for i in range(n):\n        for j in range(n):\n            # If we have already visited this cell, skip it\n            if dp[i][j]!= 0:\n                continue\n\n            # Check if this cell is the bottom-right cell\n            if i == n-1 and j == n-1:\n                dp[i][j] = cost[i][j]\n                path_max_avg = max(path_max_avg, dp[i][j])\n                continue\n\n            # Check if we can move to the right or down\n            if i < n-1:\n                dp[i][j] = max(dp[i][j], dp[i][j+1] + cost[i+1][j])\n            if j < n-1:\n                dp[i][j] = max(dp[i][j], dp[i+1][j] + cost[i][j+1])\n\n            # Update maximum average\n            path_max_avg = max(path_max_avg, dp[i][j])\n\n    return path_max_avg / (n*n)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    start = (0, 0)\n    end = (N-1, N-1)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def find_path(i, j, path):\n        if i == end[0] and j == end[1]:\n            nonlocal max_avg\n            global max_avg\n            if path not in paths:\n                paths.append(path)\n                if len(paths) == 1:\n                    max_avg = total_cost / total_cells\n                if len(paths) > 1:\n                    avg = total_cost / total_cells\n                    if avg > max_avg:\n                        max_avg = avg\n            return\n        \n        visited[i][j] = True\n        total_cells += 1\n        for dir in directions:\n            x, y = i+dir[0], j+dir[1]\n            if 0 <= x < N and 0 <= y < N and not visited[x][y]:\n                find_path(x, y, path+[dir])\n        visited[i][j] = False\n        total_cells -= 1\n    \n    paths = []\n    max_avg = 0\n    find_path(start[0], start[1], [start])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    path_max_avg = 0\n    path_cells = 0\n    path = []\n    i = 0\n    j = 0\n    path_avg = 0\n    \n    # Traverse the matrix using BFS\n    while i < n and j < n:\n        if (i == n-1 and j == n-1) or (i < n-1 and j < n-1):\n            # Check if the current cell is already visited\n            if (i, j) in path:\n                # If yes, update the current path average\n                path_avg = (path_avg*path_cells - cost[i][j])/(path_cells-1)\n                # Update the maximum average if necessary\n                path_max_avg = max(path_max_avg, path_avg)\n            else:\n                # If not, add the current cell to the path and initialize the current path average and cells visited\n                path.append((i, j))\n                path_avg = cost[i][j]\n                path_cells = 1\n        elif i < n-1 and j < n-1:\n            # If current cell is not the last cell, move right and down\n            i += 1\n            j += 1\n        elif i < n-1 and j == n-1:\n            # If current cell is not the last column and last cell, move right\n            i += 1\n            j = 0\n        elif i == n-1 and j < n-1:\n            # If current cell is not the last row and last cell, move down\n            i = 0\n            j += 1\n        \n        # Update the current path average\n        path_avg = (path_avg*path_cells - cost[i][j])/(path_cells-1)\n        \n        # Update the maximum average if necessary\n        path_max_avg = max(path_max_avg, path_avg)\n        \n    return path_max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Get the size of the matrix\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum average and the current path\n    max_avg = float('-inf')\n    path = []\n\n    # Traverse the matrix using a DFS (Depth-First Search) algorithm\n    def dfs(i, j, total_cost):\n        # Base case: if we reach the bottom-right cell, update the maximum average and return\n        if i == N-1 and j == N-1:\n            if total_cost > max_avg:\n                max_avg = total_cost\n                path = [(i, j)]\n            return\n\n        # Recursive case: move right if the cost at the current cell is less than the cost at the next cell\n        if j < N-1 and cost[i][j] < cost[i][j+1]:\n            dfs(i, j+1, total_cost + cost[i][j+1])\n        # Move down if the cost at the current cell is less than the cost at the next cell\n        if i < N-1 and cost[i][j] < cost[i+1][j]:\n            dfs(i+1, j, total_cost + cost[i+1][j])\n\n    # Call the DFS function to traverse the matrix\n    dfs(0, 0, 0)\n\n    # If there is a path with the maximum average, return the path\n    if max_avg!= float('-inf'):\n        return path\n    # Otherwise, return an empty list to indicate that no path exists\n    else:\n        return []"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize a variable to keep track of the maximum average\n    max_avg = 0\n\n    # loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # check if the current cell is in the top row or top column\n            if i == 0 or j == 0:\n                # if it is, add the cost of that cell to the current total cost\n                total_cost = cost[i][j] + total_cost\n            else:\n                # if it's not, add the cost of the cell to the total cost and subtract the cost of the previous cell\n                total_cost = cost[i][j] + total_cost - cost[i-1][j-1]\n            # check if the current total cost is greater than the current maximum average\n            if total_cost > max_avg:\n                # if it is, update the maximum average\n                max_avg = total_cost\n\n    # return the maximum average\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_cost = float('-inf')\n    max_path = None\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            \n            if i > 0 and (i == N-1 or j > 0 and cost[i-1][j] < cost[i][j-1]):\n                # Check if the cell to the right is cheaper\n                cost[i][j] += cost[i-1][j]\n            elif j > 0 and (j == N-1 or i > 0 and cost[i][j-1] < cost[i-1][j]):\n                # Check if the cell below is cheaper\n                cost[i][j] += cost[i][j-1]\n            else:\n                # If none of the above conditions are met, the cell is the best one\n                cost[i][j] += cost[i-1][j-1]\n                \n            if i == N-1 and j == N-1:\n                # Found the bottom-right cell, now find the path with the maximum average\n                path_cost = cost[i][j]\n                visited_cells = 1\n                curr_path = [i, j]\n                while i > 0 and j > 0:\n                    i -= 1\n                    j -= 1\n                    if i > 0 and (i == N-1 or j > 0 and cost[i-1][j] < cost[i][j-1]):\n                        # Check if the cell to the right is cheaper\n                        path_cost += cost[i-1][j]\n                    elif j > 0 and (j == N-1 or i > 0 and cost[i][j-1] < cost[i-1][j]):\n                        # Check if the cell below is cheaper\n                        path_cost += cost[i][j-1]\n                    else:\n                        # If none of the above conditions are met, the cell is the best one\n                        path_cost += cost[i-1][j-1]\n                    \n                    visited_cells += 1\n                    curr_path.append((i, j))\n                \n                if path_cost > max_cost:\n                    max_cost = path_cost\n                    max_path = curr_path\n                \n    return max_path, max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = []\n    \n    for i in range(N):\n        # Check all possible paths starting from cell (i, 0)\n        for j in range(1, N):\n            # Check if cell (i, j) can be visited in this path\n            if cost[i][j-1] < cost[i][j] and cost[i][j] < cost[i+1][j]:\n                # If yes, check if the current path is better than the previous max path\n                avg = (cost[i][j-1] + cost[i][j] + cost[i+1][j]) / 3\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [i, j]\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, path_cost, path_length, max_cost):\n        if i == n-1 and j == m-1:\n            # We have reached the bottom right cell, calculate the average and update the maximum if necessary\n            average = path_cost / path_length\n            if average > max_cost:\n                max_cost = average\n            return max_cost\n        \n        # Try to move right\n        dfs(i, j+1, path_cost+cost[i][j], path_length+1, max_cost)\n        \n        # Try to move down\n        dfs(i+1, j, path_cost+cost[i][j], path_length+1, max_cost)\n        \n        return max_cost\n    \n    n = len(cost)\n    m = len(cost[0])\n    max_cost = float('-inf')\n    dfs(0, 0, 0, 1, max_cost)\n    return max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Calculate the number of rows and columns in the matrix\n    N = len(cost)\n    \n    # Initialize the maximum average and the path with maximum average\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Initialize the visited cells and the current path\n    visited = []\n    current_path = []\n    \n    # Iterate through each cell in the matrix\n    for i in range(N):\n        for j in range(N):\n            \n            # If the cell has not been visited yet\n            if (i, j) not in visited:\n                \n                # Initialize the total cost and the number of visited cells in the path\n                total_cost = 0\n                num_visited = 0\n                \n                # Create a recursive function to find the maximum average path starting from this cell\n                def findMaxAveragePath(i, j, current_cost, current_path):\n                    # If we reach the bottom right cell, update the maximum average and the path\n                    if i == N-1 and j == N-1:\n                        if current_cost > max_avg:\n                            max_avg = current_cost\n                            max_path = current_path.copy()\n                    # If we have not reached the bottom right cell, try to move in either direction\n                    else:\n                        # Move right\n                        if j < N-1 and cost[i][j] < cost[i][j+1]:\n                            new_cost = current_cost + cost[i][j]\n                            new_path = current_path.copy()\n                            new_path.append((i, j))\n                            new_path.append((i, j+1))\n                            findMaxAveragePath(i, j+1, new_cost, new_path)\n                        # Move down\n                        if i < N-1 and cost[i][j] < cost[i+1][j]:\n                            new_cost = current_cost + cost[i][j]\n                            new_path = current_path.copy()\n                            new_path.append((i, j))\n                            new_path.append((i+1, j))\n                            findMaxAveragePath(i+1, j, new_cost, new_path)\n                        \n                # Call the recursive function to find the maximum average path starting from this cell\n                findMaxAveragePath(i, j, cost[i][j], [(i, j)])\n                \n                # Add this path to the visited cells and the total cost and number of visited cells\n                visited.append((i, j))\n                total_cost += cost[i][j]\n                num_visited += 1\n                \n                # If the maximum average path has not been found, add this path to the visited cells and the total cost and number of visited cells\n                if max_path is None:\n                    visited.append((i, j))\n                    total_cost += cost[i][j]\n                    num_visited += 1\n                    \n                # Compute the average of the visited cells\n                avg_cost = total_cost/num_visited\n                \n                # If the average is greater than the maximum average, update the maximum average and the path\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = [(i, j)] + current_path.copy()\n                    \n                # Print the maximum average path\n                print(\"Max average path:\", max_path)\n                \n    # Print the maximum average path\n    print(\"Maximum average:\", max_avg)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    rows = len(cost)\n    cols = len(cost[0])\n    max_cost = 0\n    max_path = None\n    total_cost = 0\n    visited = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Initialize max_cost and max_path\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif i == 0:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif j == 0:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif i == rows - 1 and j == cols - 1:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif i == rows - 1:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif j == cols - 1:\n                if cost[i][j] > max_cost:\n                    max_cost = cost[i][j]\n                    max_path = [(i, j)]\n            elif cost[i][j] > max_cost:\n                max_cost = cost[i][j]\n                max_path = [(i, j)]\n\n    # Calculate total cost and visited cells\n    for cell in max_path:\n        total_cost += cost[cell[0]][cell[1]]\n        visited[cell[0]][cell[1]] += 1\n\n    # Calculate average cost and return result\n    if total_cost == 0:\n        return 0\n    else:\n        return max_cost / total_cost"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student_name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[student_name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the values and their indices\n    index_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in index_dict:\n            index_dict[nums1[i]].append(i)\n        else:\n            index_dict[nums1[i]] = [i]\n    # Iterate through the second list and check if it has the same values as the keys in the dictionary\n    count = 0\n    for num in nums2:\n        if num in index_dict:\n            for index in index_dict[num]:\n                if nums1[index]!= num:\n                    break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the power of the digit to the specified power\n        digit_power = digit_int ** power\n\n        # Add the power of the digit to the sum\n        total += digit_power\n\n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for digit in str(base):\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit\n        base //= 10\n        power -= 1\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n    # loop through the digits of the base\n    for digit in str(base):\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'(?<!\\\\)\"(.*?)\"(?<!\\\\)'\n    # Find all the matches using the regular expression pattern\n    matches = re.findall(pattern, text1)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(quotation_pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract the values between quotation marks \" \" of the given string.\n    '''\n\n    # Define a regular expression pattern to find all the quotation marks\n    pattern = r'\"[^\"]*\"'\n\n    # Find all the matches of the pattern in the given text\n    matches = re.findall(pattern, text1)\n\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n\n    # Iterate through all the matches and append the values to the extracted_values list\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n\n    # Return the extracted values list\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # define a regular expression pattern to match the quotation marks\n    pattern = re.compile(r'\"(.+?)\"')\n    \n    # find all the occurrences of the pattern in the given string\n    matches = pattern.findall(text)\n    \n    # return the values between the quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\\\"(.*?)\\\"'\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text1)\n    # Join all the matches into a single string\n    result =''.join(matches)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regular expressions to find all the matches between quotation marks\n    matches = re.findall(r'\"[^\"]*\"', text)\n\n    # Extract the values between the quotation marks\n    values = []\n    for match in matches:\n        value = match[1:-1]\n        values.append(value)\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = (test_tup[0],) * N\n    for i in range(1, N-1):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    result = result + (test_tup[-1],) * N\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [0] * N\n    for i in range(N-1):\n        result[i] = test_tup[i] * test_tup[i+1]\n    result[N-1] = test_tup[N-1] * test_tup[0]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Create a new tuple with length N+1\n    new_tup = tuple(test_tup) + (0,)\n    \n    # Iterate through the new tuple\n    for i in range(len(new_tup)-1):\n        # Multiply the current element and the next element of the tuple and assign the result to the current element of the new tuple\n        new_tup[i] = new_tup[i] * new_tup[i+1]\n        \n    return new_tup[1:]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize a new tuple of length N\n    new_tup = (None,) * len(test_tup)\n    # iterate through the tuple and calculate the product of each pair of elements\n    for i in range(len(test_tup)):\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2 # assuming the input tuple has an even number of elements\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+N],) # adding the product of the i-th and (i+N)-th elements of the tuple to the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby() function from itertools to group the numbers by their consecutive duplicates\n    groups = groupby(enumerate(nums), lambda x: x[1]-x[0] == 1)\n    \n    # Use a list comprehension to create a new list without consecutive duplicates\n    result = [x[0] for x in groups]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) == 1, groupby(sorted(set(nums)))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(sorted(set(nums))) if not (k == g.next() and k == g.next())]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator object that groups consecutive duplicates of the same number\n    grouped = groupby(nums)\n    # Use a list comprehension to remove consecutive duplicates and return the result\n    return list(set(num for key, group in grouped for num in group))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r**2 * h) / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    s = math.pi * r**2 * h\n    \n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base area of the cone using the formula A = pi r^2\n    A = math.pi * r**2\n    # calculate the lateral surface area using the formula L = 2 A h / 3\n    L = 2 * A * h / 3\n    # return the lateral surface area\n    return L"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given radius r and height h.\n    '''\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*r**2)+(h/2)**2\n    area = math.sqrt(s)*math.pi*r\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # convert radius and height to radians and meters respectively\n    r = math.radians(r)\n    h = math.radians(h)\n    \n    # calculate lateral surface area of the cone using Heron's formula\n    s = (3*r**2 + h**2) * math.sin(r)\n    \n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h/3\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    area = math.pi * r * (r + h) * h / 3\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to replace all occurrences of spaces, commas, or dots with a colon\n    pattern = r'[^\\w\\s]|_|-|\\.|,'\n    # replace all occurrences of the pattern in the text with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # replace all matches with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_specialchar(text):\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n    # Use the pattern to find all occurrences of special characters in the text\n    special_chars = pattern.findall(text)\n    # Replace all occurrences of special characters with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,.]'\n    # use the replace() function to replace all matches with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-word and non-space characters\n    text = re.sub(r'\\s+', ':', text) # replace multiple spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(' +', ':', re.sub(',', ':', re.sub('\\.', ':', text)))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for spaces, commas, and dots\n    pattern = r'\\s+|\\,\\s+|\\.\\s+'\n    # Use the re.sub() function to replace the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            # found the first occurrence\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if x is not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize variables\n    left = 0\n    right = len(A) - 1\n    first_occurrence = -1\n\n    # loop through array and find first occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Iterate through the array and compare each element with the target number\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    # initialize first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # iterate through the array\n    for i in range(len(A)):\n        # if the current element is equal to the target number, update first occurrence index\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n    \n    # return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted list of numbers.\n        x (int): The number we want to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of x in A.\n\n    Examples:\n        >>> A = [1, 2, 3, 3, 4, 4, 4, 5, 6, 7]\n        >>> x = 4\n        >>> find_first_occurrence(A, x)\n        3\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the first occurrence index to -1\n    first_occurrence = -1\n\n    # Loop through the array until we find the first occurrence\n    while left <= right:\n        # Compute the midpoint\n        mid = left + (right - left) // 2\n\n        # If the midpoint element is equal to x, we have found the first occurrence\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        # If the midpoint element is greater than x, we have to search the left half\n        elif A[mid] < x:\n            left = mid + 1\n        # If the midpoint element is less than x, we have to search the right half\n        else:\n            right = mid - 1\n\n    # Return the first occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the first index where x is greater than or equal to A[i]\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # If x is not in A, return -1\n    if i == len(A):\n        return -1\n    # Find the first occurrence of x in A[i:]\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    # If x is not found, return -1\n    if j == len(A):\n        return -1\n    # Return the index where x was found in A[i:]\n    return j - i - 1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(1, n):\n        for j in range(i):\n            temp = 1\n            for k in range(i-j):\n                temp *= arr[j+k]\n            sum_prod += temp\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Calculate the sum of all the elements in the array\n    total_sum = sum(arr)\n    \n    # Calculate the sum of the products of the first and last elements\n    first_last_prod = arr[0] * arr[-1]\n    \n    # Initialize the result to the first last product\n    result = first_last_prod\n    \n    # Iterate through the array and calculate the product of each sublist\n    for i in range(n):\n        # Calculate the sum of the products of the previous sublists and the current element\n        sublist_prod = arr[i] * result\n        \n        # Update the result to the sum of the previous sublist product and the current element\n        result = sublist_prod + result\n        \n        # If the sum of products is greater than the total sum, return 0\n        if result > total_sum:\n            return 0\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n\n    n = len(arr)\n\n    # Find the maximum element in the list\n    max_element = max(arr)\n\n    # Initialize two arrays to store the products of all possible sublists of the maximum element\n    prod_arr = [0] * (n + 1)\n    prod_arr[0] = 1\n\n    # Iterate through all elements in the list\n    for i in range(1, n + 1):\n\n        # Calculate the product of all elements in the current subarray\n        prod_subarray = 1\n\n        # Iterate through all elements to the left of the current element\n        for j in range(i):\n\n            # Calculate the product of the current element and the element to the left of the current element\n            prod_subarray *= arr[j]\n\n        # Update the product array with the product of the current element and all previous elements\n        prod_arr[i] = prod_subarray * (max_element - prod_subarray)\n\n    # Find the sum of all products in the product array\n    sum_products = 0\n    for product in prod_arr:\n        sum_products += product\n\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n\n    # Calculate sum of sublists\n    sublist_sum = 0\n    for i in range(n):\n        sublist_sum += arr[i]\n\n    # Calculate sum of products of sublists\n    sublist_prod = 1\n    for i in range(n):\n        sublist_prod *= arr[i]\n\n    # Calculate sum of products of all possible subarrays\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            total_sum += sublist_prod * sublist_sum * (j - i) // 2\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n\n    def helper(start, end):\n        \"\"\"\n        Helper function to calculate the product of all elements in the given sublist.\n        \"\"\"\n        product = 1\n        for i in range(start, end+1):\n            product *= arr[i]\n        return product\n\n    def sum_of_products(start, end):\n        \"\"\"\n        Helper function to calculate the sum of products of all possible sublists between start and end index.\n        \"\"\"\n        result = 0\n        for i in range(start, end+1):\n            product = helper(start, i)\n            result += product\n        return result\n\n    # Main function to find the sum of products of all possible sublists of the given list\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result += sum_of_products(i, j)\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        # Create a 2D array to store the products of subarrays\n        dp = [[1] * (n+1) for _ in range(n+1)]\n        # Fill the first row and the first column\n        for i in range(2, n+1):\n            dp[i][1] = dp[i-1][1] + arr[i-1] * dp[i-1][1]\n            dp[1][i] = dp[1][i-1] + arr[i-1] * dp[1][i-1]\n\n        # Fill the rest of the array\n        for i in range(2, n+1):\n            for j in range(2, i+1):\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] * arr[i-1] * dp[i][j-1]\n\n        # Find the sum of products of all possible sublists\n        result = 0\n        for i in range(n+1):\n            result += dp[n][i]\n        return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # create a new list to store all products\n    products = []\n    # loop through all possible sublists of the list\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            # compute the product of the sublist and add it to the list of products\n            products.append(1)\n            for k in range(i):\n                products[-1] *= arr[j+k]\n    # compute the sum of products\n    sum_of_products = sum(products)\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 1000000007\n    dp = [1] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = (dp[i - 1] * arr[i - 1]) % MOD\n\n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 2, n + 1):\n            result = (result + (dp[j] - dp[i] * arr[i - 1] % MOD)) % MOD\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            sub_arr = arr[j:j+i]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        left_sum = arr[i]\n        right_sum = arr[i]\n\n        for j in range(i+1, n):\n            left_sum *= arr[j]\n            right_sum *= arr[n-1-j]\n\n        total_sum += left_sum - right_sum\n\n    return total_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # convert the given number to a list\n    bits = [int(bit) for bit in bin(n)[2:]]\n    \n    # toggle the middle bits\n    mid = len(bits) // 2\n    for i in range(mid-1, mid+2):\n        bits[i] = not bits[i]\n    \n    # convert the list back to an integer and return it\n    return int(\"\".join(map(str, bits)), 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the first and last bit, we can XOR it with 1\n    n ^= 0b11111111111111111111111111111111\n    \n    # To toggle the middle bits, we can XOR it with the first and last bits\n    n ^= 0b1000000000000000000000000000000\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    first_bit = n & 1   # get the first bit of the number\n    last_bit = n & (2**31 - 1)   # get the last bit of the number\n    middle_bit = n ^ (first_bit | last_bit)   # XOR the two bits except the first and last\n    return middle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Remove the last and first bits from the number\n    n = n & (n - 1)\n    \n    # Set the middle bits\n    n = n | (n >> 1)\n    \n    # Add the last and first bits back\n    n = n | (n & -n)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the middle bit\n    mid_bit = (n & 1) + (n >> 1)\n    mid_bit = mid_bit & n\n    # Toggle all bits except first and last\n    n = n ^ mid_bit\n    # Set first and last bit as 0\n    n = n | 1\n    n = n | mid_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize mask to 111111111111111111111111111111111\n    mask = 0xffffffffffffffff\n    # Extract bits of the number except the first and the last bit\n    num = n & mask\n    # Shift the number to the right by one position\n    shifted = num >> 1\n    # Toggle the bits of the shifted number\n    toggled = shifted ^ mask\n    # Combine the toggled bits with the first and the last bits\n    result = toggled | (n & (1 << 63))\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1) << 31\n    last_bit = (n & (1 << 30)) >> 30\n    toggled_bits = first_bit ^ last_bit\n    return n ^ toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Find the position of the first and last bits\n    first_bit_pos = len(binary_str) - 2\n    last_bit_pos = len(binary_str) - 1\n    \n    # Set the middle bits to toggle\n    for i in range(first_bit_pos + 1, last_bit_pos):\n        if binary_str[i] == '0':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n        else:\n            binary_str = binary_str[:i] + '0' + binary_str[i+1:]\n    \n    # Convert the binary string to an integer\n    new_n = int(binary_str, 2)\n    \n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits to 1 to exclude them from the toggle.\n    n = n | ((n ^ 0b111111111111111111111111111111111111111111111111111111111111111) & 0b11111111111111111111111111111111111111111111111111111111111111111)\n    # Toggle all the other bits.\n    n = n ^ ((n ^ 0b11111111111111111111111111111111111111111111111111111111111111) & 0b10000000000000000000000000000000000000000000000000000000000000)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Initialize variables for first and last bit of n\n    first_bit = (n & 1)  # Get the first bit of n\n    last_bit = (n >> 31)  # Get the last bit of n\n    \n    # XOR the first bit with the last bit\n    middle_bits = n ^ first_bit ^ last_bit\n    \n    # Return the modified number\n    return middle_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect module to find the insertion point\n    i = bisect.bisect_left(a, x)\n    # Check if the value is already in the list\n    if i!= len(a) and a[i] == x:\n        return i\n    # If the value is greater than all the elements to the left, insert at the end\n    if i == 0:\n        return i\n    # If the value is between two elements, return the previous insertion point\n    if a[i-1] < x:\n        return i - 1\n    # If the value is smaller than all the elements to the left, return the previous insertion point\n    return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # Find the index of the first element greater than or equal to x in the list\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        # If x is less than the first element in the list, return 0\n        return 0\n    else:\n        # Otherwise, return the index of the element to its left\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Find the index of the leftmost element in the sorted list that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If x is not in the list, return the index where x should be inserted\n    if index == len(a):\n        return index\n    # If x is already in the list, return the index where x should be inserted\n    if a[index] == x:\n        return index\n    # Otherwise, return the index where x should be inserted\n    return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (n * geometric_sum(n - 1)) / (1 - ((1 - 1/n) ** (n - 1)))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number\n    smallest_triangular = 10**n\n\n    # Initialize the index of smallest triangular number\n    index = 0\n\n    # Initialize the counter for triangular numbers\n    counter = 0\n\n    # Loop until the smallest triangular number is greater than the number of digits in the smallest triangular number\n    while smallest_triangular >= 10:\n\n        # Calculate the next triangular number\n        next_triangular = smallest_triangular + counter\n\n        # Check if the next triangular number is greater than the current smallest triangular number\n        if next_triangular > smallest_triangular:\n            # Update the smallest triangular number and its index\n            smallest_triangular = next_triangular\n            index = counter\n\n        # Increase the counter for triangular numbers\n        counter += 1\n\n    # Return the index of smallest triangular number with n digits\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize count and result variables\n    count = 0\n    result = 0\n\n    # Loop until the count is equal to n\n    while count < n:\n        # Calculate the next triangular number\n        current_triangular = int(math.factorial(n-1)/math.factorial(count))\n        \n        # Check if the current triangular number is smaller than the current result\n        if current_triangular < result:\n            result = current_triangular\n        \n        # Increment the count\n        count += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # create a list of all the triangular numbers with n digits\n    triangular_numbers = []\n    for i in range(1, 10**(n-1)):\n        triangular_numbers.append(i*10**(n-1))\n    triangular_numbers = sorted(triangular_numbers)\n\n    # find the index of the smallest triangular number with n digits\n    smallest_triangular_number = triangular_numbers[0]\n    smallest_triangular_number_index = 0\n    for i in range(1, len(triangular_numbers)):\n        if triangular_numbers[i] == smallest_triangular_number:\n            smallest_triangular_number_index = i\n            break\n\n    return smallest_triangular_number_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize a variable to store the smallest triangular number with n digits\n    smallest_num = 0\n\n    # loop through all triangular numbers with n digits\n    for i in range(1, 10**n):\n        # check if the triangular number is smaller than the current smallest triangular number\n        if i < smallest_num:\n            # if it is, update the smallest triangular number\n            smallest_num = i\n        else:\n            # if it is not, check if it is a smaller triangular number with n digits\n            temp = i\n            for j in range(1, n):\n                temp *= 10\n            if temp < smallest_num:\n                # if it is, update the smallest triangular number\n                smallest_num = temp\n\n    # return the index of the smallest triangular number with n digits\n    return math.floor(math.log10(smallest_num)) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # create a list of all triangular numbers up to 10^n\n    triangular_numbers = [math.comb(i, j) * i * (10**(n-j)) for i in range(1, 10**(n-1))+1 for j in range(i)]\n    # find the index of the smallest triangular number in the list\n    index = triangular_numbers.index(min(triangular_numbers))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    #initialize the sum of digits of 1\n    sum_digits = 0\n    \n    #initialize the count of digits of 1\n    count_digits = 1\n    \n    #initialize the current number of digits\n    count = 1\n    \n    #initialize the sum of digits of the triangular number\n    sum_digits_tr = 0\n    \n    #initialize the sum of the triangular number\n    sum_tr = 0\n    \n    #initialize the index of the smallest triangular number with n digits\n    smallest_index = 0\n    \n    #initialize the smallest triangular number with n digits\n    smallest_number = 1\n    \n    #loop until the count of digits is equal to n\n    while count_digits < n:\n        #increment the count of digits\n        count_digits += 1\n        \n        #initialize the current number\n        current_number = 0\n        \n        #loop until the current number is greater than 9\n        while current_number <= 9:\n            #increment the current number by 1\n            current_number += 1\n            \n            #append the current number to the sum of digits of the triangular number\n            sum_digits_tr += int(current_number)\n            \n            #update the sum of the triangular number with the current number\n            sum_tr += int(current_number)**count\n            \n            #check if the sum of the triangular number is less than the sum of digits of 1\n            if sum_tr < sum_digits:\n                #update the index of the smallest triangular number with n digits\n                smallest_index = count\n                #update the smallest triangular number with n digits\n                smallest_number = sum_tr\n                \n        #update the count of digits by 1\n        count_digits -= 1\n        \n        #update the count by 1\n        count += 1\n        \n    #return the index of the smallest triangular number with n digits\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize first triangular number as 1\n    i = 1\n    while(True):\n        # Check if current triangular number has n digits\n        if(len(str(i)) == n):\n            # If yes, return its index\n            return i\n        # If not, increment i\n        i += 1\n\n    # To prevent execution\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    # defining an array to store the length of triangular numbers with n digits \n    arr = [0] * (n + 1) \n\n    # initializing the length of the first triangular number with n digits to 1 \n    arr[0] = 1 \n\n    # iterating through the array from 1 to n \n    for i in range(1, n + 1): \n\n        # calculating the length of the i-th triangular number with n digits \n        arr[i] = arr[i - 1] * (i + 1) // 2 \n\n        # iterating through the array from 0 to i-1 and checking if arr[i] is smaller than arr[j] + arr[k] for any j, k (j!= i) \n        for j in range(i - 1): \n            if arr[j] + arr[i] < arr[j] + arr[k] and k < i - j - 1: \n                k = i - j - 1 \n                break \n\n    # returning the index of the smallest triangular number with n digits \n    return k "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(1, 10**n):\n        triangular_numbers.append(i)\n    min_triangular_number = min(triangular_numbers)\n    return triangular_numbers.index(min_triangular_number)\n\nn = int(input(\"Enter number of digits: \"))\nindex = find_Index(n)\nprint(\"The index of the smallest triangular number with\", n, \"digits is:\", index)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the number of digits\n    num_of_digits = len(str(n))\n\n    # Initialize the smallest triangular number and its index\n    smallest_triangular_num = 10**(num_of_digits-1)\n    smallest_index = 1\n\n    # Calculate the smallest triangular number with n digits\n    for i in range(2, smallest_triangular_num+1):\n        triangular_num = i*smallest_triangular_num**2\n        triangular_num_str = str(triangular_num)\n        if len(triangular_num_str) == n:\n            if triangular_num < smallest_triangular_num:\n                smallest_triangular_num = triangular_num\n                smallest_index = i\n\n    return smallest_index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_temp = {}\n    for i in range(len(test_tup)-1):\n        dict_temp[test_tup[i]] = test_tup[i+1]\n    return dict_temp"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    i = 0\n    while i < len(test_tup):\n        if i % 2 == 0:\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        i += 1\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    d = {}\n    # Loop through the tuple and add the pairs of adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    i = 0\n    while i < len(test_tup)-1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n        i += 2\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        val = test_tup[i+1]\n        test_dict[key] = val\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # using list comprehension to convert the tuple to a dictionary\n    return {i: test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n\n    # Use range to loop through the tuple and use zip to create adjacent pairs\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Create an empty dictionary\n    my_dict = {}\n\n    # Loop through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # Use the first element as key and second element as value\n        my_dict[test_tup[i]] = test_tup[i+1]\n\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    list_of_chars = list(s)\n    # Check if the length of the list is 1\n    if len(list_of_chars) == 1:\n        return True\n    # Check if all the characters in the list are the same\n    for i in range(len(list_of_chars)):\n        if list_of_chars[i]!= list_of_chars[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    s_list = list(s)\n    # Sort the list\n    s_list.sort()\n    # Check if the sorted list is equal to the original string\n    if s_list == s_list[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # initialize variables\n    char = s[0]\n    count = 1\n    \n    # loop through each character in the string\n    for i in range(1, len(s)):\n        # check if the current character matches the first character\n        if s[i] == char:\n            # increment the count of the same characters\n            count += 1\n        else:\n            # if the current character is different, break the loop and return the count\n            break\n    \n    # return the count if the loop was broken\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    \n    # Iterate over the string and check if all the characters are same or not\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    \n    # If all the characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # check if all characters are same\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same and False otherwise.\n    \"\"\"\n    # if the length of the string is less than 2, return False\n    if len(s) < 2:\n        return False\n    \n    # otherwise, check if all the characters in the string are the same\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            return False\n    \n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and checks if all the characters in the string are the same or not.\n    It returns a boolean value indicating whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # Loop through the rest of the string\n    for i in range(1, len(s)):\n        # If the character at the current index is not the same as the first character, return False\n        if s[i]!= first_char:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side**2 + 6*side + 12)/12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side**2)/3 # semi-perimeter\n    return (4/3) * math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * math.pow(side, 2) / (4 * math.tan(math.pi/3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given the length of its base and height.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = 3 * side\n\n    # calculate the area of the parallelepiped using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - 2 * side) * (s - 3 * side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Define the formula for the area of a tetrahedron using Heron's formula\n    # area = sqrt(s*(s-a)*(s-b)*(s-c))\n    # where s = (1/3)*side**3, a, b, c are the sides of the tetrahedron\n    s = (1/3) * side ** 3\n    a, b, c = 0.5 * side, 0.5 * side, 0.5 * side\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(3) / 4 * half_perimeter ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    return 1/3 * side**2 * math.sqrt(2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n\n    # Calculate the length of the list\n    n = len(list)\n\n    # If the rotation is more than the length of the list, simply return the list as is\n    if m > n:\n        return list\n\n    # Rotate the list by m items to the right using recursion\n    return rotate_right(list[m:] + list[:m], n - m)\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Reverse the list\n    list = list[::-1]\n    # Check if the length of the list is less than the required number of items to be rotated\n    if len(list) < m:\n        # If the length of the list is less, then the rotation count is equal to the length of the list\n        m = len(list)\n    # Calculate the starting index for the rotation\n    start_index = len(list) - m\n    # Rotate the list\n    list = list[start_index:] + list[:start_index]\n    # Reverse the list again\n    list = list[::-1]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list and an integer m as input, and returns a new list \n    rotated by m items to the right direction.\n    '''\n    n = len(lst)\n    # If m is greater than the length of the list, we simply return the original list.\n    if m > n:\n        return lst\n    # If m is equal to 0, we simply return the original list.\n    elif m == 0:\n        return lst\n    # If m is less than 0, we rotate m items to the left by shifting the first m items to the end of the list.\n    else:\n        return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    elif m < 0:\n        m = (n + m) % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    list.extend(list[:n-m])\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = [int(digit) for digit in str(startnum) if digit.isdigit()]\n    for num in range(startnum, endnum + 1):\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(str(x)[i]) == 0 for i, digit in enumerate(str(x))), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Using a list comprehension to filter out numbers that are not divisible by every digit in their number\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if all(int(digit) % num == 0 for digit in str(num))]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(int(i) % int(x) == 0 for i in str(x)) and int(x) >= startnum and int(x) <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: sum(int(digit) for digit in str(x)) == 0, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_divisible(num):\n        '''\n        Check if a given number is divisible by every digit it contains.\n        '''\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % len(digits)!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        # calculate the area using the formula area = pi * r^2 * sin(a)\n        area = math.pi * r**2 * math.sin(math.radians(a))\n        # return the calculated area\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        print(\"The angle is larger than 360 degrees. Returning None.\")\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        print(\"The area of the sector is: \",area)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = r*r*math.pi*(a/360)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    #convert angle to radians\n    a = math.radians(a)\n    #calculate area of sector\n    area = math.pi * r * r\n    #return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * math.sin(math.radians(a))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle from degrees to radians\n    angle = math.radians(a)\n    \n    # calculate area using formula\n    area = r**2 * angle\n    \n    # return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle should be less than or equal to 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Find the length of each string\n    m, n, p = len(X), len(Y), len(Z) \n\n    # Create a table to store the length of LCS for subproblems \n    # dp[i][j][k] will store the length of LCS for X[0:i], Y[0:j], and Z[0:k] \n    dp = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)] \n\n    # Fill the table using dynamic programming approach \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    # If last characters are same, then LCS will be previous LCS plus 1 \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else: \n                    # If last characters are different, then LCS will be max of previous LCSs \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n\n    # Initialize variables to store the length of LCS and the indices of LCS \n    max_len = 0\n    i, j, k = n, m, p\n    lcs_str = \"\"\n\n    # Recursively fill the lcs string from the table \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            # If last characters are same, then add current character to LCS string and move backwards in table \n            lcs_str = X[i-1] + lcs_str\n            max_len = dp[i-1][j-1][k-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]: \n            # If last characters are different, then move to previous row in table \n            i -= 1\n        else: \n            # If last characters are different, then move to previous column in table \n            j -= 1\n\n    # Return the length of LCS and the lcs string \n    return max_len, lcs_str[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a matrix to store the lengths of longest common subsequences of all three sequences\n    L = [[0] * (o+1) for _ in range(m+1)]\n\n    # fill the matrix in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k-1])\n\n    # return the longest common subsequence as a string\n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        elif L[i][j-1] > L[i-1][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    LCS = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j] = LCS[i - 1][j - 1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1], LCS[i - 1][j - 1])\n\n    # Printing the LCS\n    i = m\n    j = n\n    k = p\n    lcs_seq = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs_seq.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j] > LCS[i][j - 1] and LCS[i - 1][j] > LCS[i][j - 1]:\n            i -= 1\n        elif LCS[i][j - 1] > LCS[i - 1][j - 1] and LCS[i][j - 1] > LCS[i][j - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    lcs_seq.reverse()\n    print(\"The longest common subsequence is:\", ''.join(lcs_seq))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        L = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] \n        for i in range(1, len(X)+1): \n            for j in range(1, len(Y)+1): \n                if X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n        return L\n    \n    L1, L2, L3 = lcs(X, Y), lcs(X, Z), lcs(Y, Z)\n    L = [[0] * (len(Z)+1) for i in range(len(X)+1)]\n    \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if L1[i][j] == L2[i][j]: \n                L[i][j] = L1[i][j] \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[0] * (p+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Create a 3D table to store lengths of longest common subsequences of all prefixes of X, Y, and Z\n    table = [[[0 for j in range(len(Z) + 1)] for i in range(len(Y) + 1)] for k in range(len(X) + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If all characters are same, then the length of LCS is 1 more than length of LCS of X[0:i], Y[0:j], Z[0:k]\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = 1 + table[i - 1][j - 1][k - 1]\n                else:\n                    # Otherwise, the length of LCS is maximum of length of LCS of X[0:i] and length of LCS of Y[0:j]\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # Backtrack to get the actual LCS\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n        elif table[i][j - 1][k] == table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    def helper(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n + 1) for _ in range(m + 1)] \n  \n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                if X[i - 1] == Y[j - 1]: \n                    p[i][j] = p[i - 1][j - 1] + 1 \n                else: \n                    p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n        return p \n  \n    m = len(X) \n    n = len(Y) \n    p = [[0] * (n + 1) for _ in range(m + 1)] \n  \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    i = m \n    j = n \n    LCS = [] \n  \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            LCS.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    LCS.reverse() \n    return ''.join(LCS) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Creating a 2D array to store lengths of subsequences of X, Y and Z\n    L = [[0] * (n+1) for i in range(m+1)]\n\n    # Build L[m+1][n+1] in bottom up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following backtrack to find the actual longest common subsequence\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the longest common subsequence for the given three string sequence.\n\n    Parameters:\n    X (str): First string sequence.\n    Y (str): Second string sequence.\n    Z (str): Third string sequence.\n\n    Returns:\n    (list): The longest common subsequence for the given three string sequence.\n\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0 for _ in range(p + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    lcs = []\n    i, j, k = m, p, p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store the lengths of LCS for all subsequences \n    L = [[[0]*(p+1) for j in range(n+1)] for i in range(m+1)] \n\n    # fill the table \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n\n    # backtrack to find the LCS \n    i = m \n    j = n \n    k = p \n    lcs = \"\" \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i-1][j][k-1]: \n            i -= 1 \n        elif L[i][j-1][k] == L[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters and convert to lowercase\n    str1 = re.sub('[^a-zA-Z0-9]', '', str1).lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word and add spaces before capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces\n    str1 =''.join(words)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-word characters (including spaces) with empty string\n    str1 = re.sub('[^a-zA-Z0-9]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first word and join the rest of the words with spaces\n    result = words[0].capitalize() +'' +''.join(words[1:])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w*[A-Z][a-z]+\\w*\\b'\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        result.append(word)\n        if word[0].isupper():\n            result.append(\" \")\n    return \"\".join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w*[A-Z]\\w*\\b'\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall('\\b[a-z][a-z]+\\b', str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+[A-Z]\\w+\\b', str1)\n    words = [' '.join(word.split()) for word in words]\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    \n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    words = []\n    for match in matches:\n        words.append(match.capitalize())\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces and return\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 \\2', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = [int(num) for num in nums_str]\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a list of integers from the strings\n    nums = [int(x) for x in nums_str]\n    # sort the list in ascending order using the sorted() function\n    nums = sorted(nums)\n    # convert the sorted list back to strings and return it\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    # Convert all strings to float and then sort them in numerical order\n    nums_float = sorted(list(map(float, nums_str)), key=float)\n    return nums_float"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        list: A sorted list of strings of numbers.\n    \"\"\"\n    # Convert all strings to float to sort them numerically\n    nums = [float(x) for x in nums_str]\n    # Sort the list of numbers using the built-in sort function\n    nums.sort()\n    # Convert all sorted numbers back to strings and return them as a list\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and returns a sorted list of strings in numerical order.\n    '''\n    # Remove non-numeric characters from the strings\n    nums_str = [x.replace(',', '').replace('.', '').replace('-', '').replace(' ', '').replace('+', '').replace('(', '').replace(')', '').replace('e', '').replace('E', '') for x in nums_str]\n    # Convert the strings to numeric values\n    nums = [float(x) for x in nums_str]\n    # Sort the numeric values\n    nums.sort()\n    # Convert the sorted numeric values back to strings\n    sorted_nums = [str(x) for x in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the floats in ascending order\n    sorted_floats = sorted(nums_float)\n    # Convert the sorted floats back to strings\n    sorted_nums_str = [str(num) for num in sorted_floats]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a list of numerical values from the list of strings\n    nums = [float(num_str) for num_str in nums_str]\n\n    # sort the list of numerical values in ascending order\n    nums.sort()\n\n    # create a list of strings from the sorted list of numerical values\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x.replace(',','')))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through the given list\n    for item in test_list:\n        # Check if the item is already in the tuple\n        if item in test_tup:\n            # If it is, add the tuple to the list\n            test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Loop through the list and add each item to the tuple\n    for item in test_list:\n        test_tup += (item,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    test_list = set(test_list)\n\n    # Add the tuple to the list\n    test_list.update(test_tup)\n\n    # Convert the set back to a list\n    test_list = list(test_list)\n\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    \n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    if len(arr) % 2 == 1:\n        return check_min_heap_helper(arr, len(arr)//2)\n    else:\n        return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2)\n\n\narr = [5, 10, 8, 2, 1, 3]\nprint(\"Given array:\", arr)\nprint(\"Is the array a min heap?\", check_min_heap(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if arr[i] > arr[i*2+1]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n//2:\n        return True\n    if arr[i] > arr[i*2+1]:\n        return False\n    return check_min_heap_helper(arr, i*2+1)\n\ndef check_min_heap(arr):\n    if not is_min_heap(arr):\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    else:\n        if arr[i] >= arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i < 1:\n        return True\n\n    # Check if the left child of i is smaller than arr[i]\n    if arr[i] < arr[2 * i]:\n        return False\n\n    # Check if the right child of i is smaller than arr[i]\n    if i < len(arr) // 2:\n        if arr[i] < arr[2 * i + 1]:\n            return False\n\n    # Recursively check for the left and right children\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the first element is the minimum element\n    if len(arr) > 1 and arr[1] > arr[0]:\n        return False\n\n    # Call the helper function to check if the array is min heap or not\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    if len(arr) < 2:\n        return True\n\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_num = 0\n        curr_num = 1\n        for i in range(2, n+1):\n            next_num = prev_num + curr_num\n            prev_num = curr_num\n            curr_num = next_num\n        return curr_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    d = 0\n\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    j = 0\n    while j < n:\n        a, b = b, a + b\n        j += 1\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3) + jacobsthal_num(n-4) + jacobsthal_num(n-5)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 0\n    jacobsthal_prev = 0\n    for i in range(n):\n        jacobsthal_next = 4 * jacobsthal_prev + 1\n        jacobsthal = jacobsthal_next\n        jacobsthal_prev = jacobsthal\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # initialize the jacobsthal number\n    jacobsthal = 1\n\n    # loop through the sequence\n    for i in range(n):\n        jacobsthal += 1\n\n        # calculate the next number in the sequence\n        if i % 2 == 0:\n            jacobsthal *= 2\n        else:\n            jacobsthal += 1\n\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [1, 1]\n    lucas = [1, 1]\n    for i in range(2, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return jacobsthal[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (jacobsthal_num(n//2) - 1)\n    else:\n        return 2 * (jacobsthal_num(n//2) + 1)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples and an integer K, and returns the minimum K records from the list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1]) # sort the list by the second element (which is the score)\n    min_list = test_list[:K] # get the first K records from the sorted list\n    min_scores = [record[1] for record in min_list] # extract the scores from the min_list\n    return min(min_scores) # find the minimum score from the min_scores list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a minimum list to store the minimum k records\n    min_list = []\n\n    # Iterate over the sorted list and add the first k records to the minimum list\n    for i in range(K):\n        min_list.append(sorted_list[i])\n\n    # Return the minimum list as the result\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Returns a list of k tuples from the input list of tuples where the length of the list is at least K.\n    The length of the list will be at most K.\n    \"\"\"\n    k_min = []\n    for i in range(K):\n        min_index = 0\n        min_val = float('inf')\n        for j in range(len(test_list)):\n            if test_list[j][i] < min_val:\n                min_val = test_list[j][i]\n                min_index = j\n        k_min.append(test_list[min_index])\n    return k_min"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list of tuples based on the first element of each tuple\n    test_list = sorted(test_list)\n\n    # Initialize minimum number of records to infinity\n    min_count = float('inf')\n\n    # Initialize minimum records to an empty list\n    min_list = []\n\n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        # If the length of the current tuple is less than K, skip it\n        if len(test_list[i]) < K:\n            continue\n\n        # If the current tuple has less records than the minimum records, update minimum records and count\n        if len(min_list) < K:\n            min_list = test_list[i]\n            min_count = len(test_list[i])\n        # If the current tuple has more records than the minimum records, check if the current tuple is smaller than the minimum records\n        elif len(min_list) == K and len(test_list[i]) < len(min_list):\n            min_list = test_list[i]\n            min_count = len(test_list[i])\n\n    # Return the minimum number of records and the minimum records\n    return min_count, min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_values = []\n    for i in range(len(test_list)):\n        if len(min_values) < K:\n            min_values.append(test_list[i])\n        else:\n            min_values[0] = min(min_values[0], test_list[i])\n    return min_values"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # initialize a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # iterate over the list and update the frequency dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # sort the dictionary by the frequency of each element in descending order\n    sorted_dict = dict(sorted(freq_dict.items(), key=lambda x: x[1], reverse=True))\n    # create a list of the keys of the sorted dictionary\n    key_list = sorted_dict.keys()\n    # initialize a variable to store the minimum k records\n    min_records = []\n    # iterate over the first K keys of the key list\n    for i in range(K):\n        # if the current key's frequency is less than the maximum frequency, add it to the list\n        if sorted_dict[key_list[i]] < max(freq_dict.values()):\n            min_records.append(key_list[i])\n    # return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list): A list of tuples.\n    K (int): The number of records to be returned.\n    \n    Returns:\n    A tuple of the minimum K records from the given list.\n    \n    Example:\n    test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    K = 2\n    \n    Output:\n    (3, 4)\n    '''\n\n    # Sort the list by first element in ascending order\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a variable to keep track of the minimum k records\n    min_k_records = []\n\n    # Loop through the sorted list until the number of records in the minimum k records list is equal to K\n    while len(min_k_records) < K:\n        # Add the next record to the minimum k records list\n        min_k_records.append(test_list.pop(0))\n\n    # Return the minimum k records list\n    return tuple(min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by second element (second item of tuples)\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to store the minimum records\n    min_records = []\n    min_count = K\n\n    # Iterate through the sorted list of tuples\n    for record in test_list:\n        # If the count of records is less than K, add the record to the min_records list\n        if len(min_records) < min_count:\n            min_records.append(record)\n\n        # If the count of records is equal to K, add the record to the min_records list\n        elif len(min_records) == min_count:\n            min_records.append(record)\n\n            # If the new record is smaller than the minimum record, update the minimum record and decrease the count of records\n            if record[1] < min_records[0][1]:\n                min_records[0] = record\n                min_count -= 1\n\n    # Return the minimum K records as a list of tuples\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the minimum k value\n    min_k_value = float('inf')\n\n    # Iterate through the sorted list and update the minimum k value\n    for i in range(K):\n        if test_list[i][1] < min_k_value:\n            min_k_value = test_list[i][1]\n\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # Sort the list by frequency\n    sorted_list = sorted(test_list, key=lambda x: x[0], reverse=True)\n\n    # Initialize minimum k count\n    min_count = 0\n\n    # Traverse the sorted list and count minimum k\n    for i in range(K):\n        if sorted_list[i][1] == 1:\n            min_count += 1\n        else:\n            break\n\n    # Return minimum k count\n    return min_count"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty set to store common elements\n    common_elements = set()\n    \n    # Iterate through each index in each list\n    for i in range(len(l1)):\n        # If the element at that index is present in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # Add it to the set of common elements\n            common_elements.add(l1[i])\n            \n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for index, element in enumerate(l1):\n        if element in l2 and element in l3:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create a set of common elements for each list\n    common1 = set(l1) & set(l2)\n    common2 = set(l2) & set(l3)\n    common3 = set(l3) & set(l1)\n    \n    # create a set of elements that appear in all three lists\n    shared = set(common1) & set(common2) & set(common3)\n    \n    # convert the set to a list and return it\n    return list(shared)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common = []\n\n    # iterate over the indices of the first list\n    for i in range(len(l1)):\n        # check if the element at the current index is also in the second and third lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # if it is, append it to the common list\n            common.append(l1[i])\n\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # create a dictionary to store the frequency of each element in each list\n    freq1 = {}\n    freq2 = {}\n    freq3 = {}\n\n    # iterate through each element in each list and update the dictionary with its frequency\n    for elem in l1:\n        freq1[elem] = freq1.get(elem, 0) + 1\n    for elem in l2:\n        freq2[elem] = freq2.get(elem, 0) + 1\n    for elem in l3:\n        freq3[elem] = freq3.get(elem, 0) + 1\n\n    # create a new list to store the common elements\n    common = []\n\n    # iterate through each element in the first dictionary\n    for elem in freq1:\n        # check if the element is also in the second dictionary\n        if elem in freq2 and elem in freq3:\n            # if it is, add it to the common list and decrement its frequency in the second and third dictionaries\n            common.append(elem)\n            freq2[elem] -= 1\n            freq3[elem] -= 1\n\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements\")\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements.\"\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return \"The list contains only one number.\"\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second element of the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a.*b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"ab+\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    pattern = r'a(?=[^b]*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        print(\"Match found!\")\n        print(match.group(0))\n    else:\n        print(\"No match found!\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        print(\"Match found!\")\n        print(\"Match object:\", match)\n        print(\"Match string:\", match.group())\n        print(\"Match start index:\", match.start())\n        print(\"Match end index:\", match.end())\n    else:\n        print(\"Match not found.\")\n\ntext = \"aaaabbbb\"\ntext_match_zero_one(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match'\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*)'\n    return re.search(pattern, text)\n\ntext = \"There is an 'a' followed by one or more 'b's.\"\nresult = text_match_zero_one(text)\nif result:\n    print(\"The pattern 'a(?=b*)' is found in the text.\")\nelse:\n    print(\"The pattern 'a(?=b*)' is not found in the text.\")\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # create a dictionary to store the frequency of each string in the list\n    freq = {}\n    for string in test_list:\n        if string in freq:\n            freq[string] += 1\n        else:\n            freq[string] = 1\n\n    # count the number of pairs of reverse strings\n    count = 0\n    for string in test_list:\n        if freq[string] > 1:\n            for i in range(len(string)):\n                if i < len(string) // 2:\n                    for j in range(len(string) - i - 1):\n                        if j < len(string) // 2:\n                            if string[i:i+j] == string[j:j+i][::-1]:\n                                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the count of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n        # Reverse the string and check if it is present in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in count_dict:\n            # Increment the count of the reverse pair\n            count_dict[reverse_string] += 1\n        else:\n            # Add the reverse pair to the dictionary with a count of 1\n            count_dict[reverse_string] = 1\n\n    # Iterate through the dictionary and count the pairs of reverse strings\n    count = 0\n    for pair in count_dict:\n        if count_dict[pair] > 1:\n            count += count_dict[pair]\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs_count = 0\n    # Create a dictionary to store the reverse of each string\n    reverse_dict = {}\n    for i in range(len(test_list)):\n        reverse_dict[test_list[i][::-1]] = i\n    # Iterate over the list and count the reverse pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if reverse_dict[test_list[j][::-1]] > i:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # initialize a dictionary to store the counts of reverse strings\n    reverse_counts = {}\n\n    # iterate over the list of strings\n    for string in test_list:\n\n        # reverse the string and check if it is already in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in reverse_counts:\n            # if it is, increment the count of the current string\n            reverse_counts[reverse_string] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            reverse_counts[reverse_string] = 1\n\n    # initialize the count of pairs\n    count = 0\n\n    # iterate over the dictionary and add the pairs to the count\n    for value in reverse_counts.values():\n        count += (value * (value - 1)) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create an empty dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # loop through each string in the list\n    for string in test_list:\n\n        # reverse the string and convert it to a string\n        reversed_string = string[::-1]\n\n        # check if the reversed string is already in the dictionary\n        if reversed_string in count_dict:\n\n            # add 1 to the count of reverse pairs\n            count_dict[reversed_string] += 1\n\n        # if the reversed string is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[reversed_string] = 1\n\n    # initialize the count of reverse pairs to 0\n    count = 0\n\n    # loop through the dictionary to find the pairs of reverse pairs\n    for pair_count in count_dict.values():\n        count += pair_count * (pair_count - 1) // 2\n\n    # return the count of reverse pairs\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in unique_sublists_dict:\n                unique_sublists_dict[sublist_tuple] += 1\n            else:\n                unique_sublists_dict[sublist_tuple] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for item in list1:\n        tuple_item = tuple(item)\n        if tuple_item not in sublist_dict:\n            sublist_dict[tuple_item] = 1\n        else:\n            sublist_dict[tuple_item] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n\n    # Create an empty dictionary to store unique sublists as key and their occurencies as value\n    sublist_count = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if the tuple is already present in the dictionary\n        if tuple(sublist) not in sublist_count:\n            # If the tuple is not present, add it as a key in the dictionary and set its value to 1\n            sublist_count[tuple(sublist)] = 1\n        # If the tuple is already present in the dictionary, increment its value by 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n\n    # Return the dictionary containing the unique sublists and their occurencies\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        count_dict[tuple(list1[i])] = list1[i].count(list1[i])\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the unique sublists and their count\n    count_dict = {}\n\n    # Loop through the list1 and append each list to a tuple\n    for i in list1:\n        sublist = tuple(i)\n        # Check if the sublist exists in the dictionary\n        if sublist not in count_dict:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[sublist] = 1\n        else:\n            # If it does, increment its count by 1\n            count_dict[sublist] += 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the unique sublists and their counts\n    sublists = {}\n    \n    # loop through the original list\n    for item in list1:\n        # check if the item is a list\n        if isinstance(item, list):\n            # convert the list to a tuple and check if it is already in the dictionary\n            if tuple(item) in sublists:\n                # increment the count for the existing tuple\n                sublists[tuple(item)] += 1\n            else:\n                # add the tuple and its count to the dictionary\n                sublists[tuple(item)] = 1\n                \n    # return the dictionary of unique sublists and their counts\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # loop through each element of the list\n    for item in list1:\n        # convert the element to a tuple and add it to the dictionary\n        count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    counts = {}\n    # loop through each list in the original list\n    for lst in list1:\n        # convert the list to a tuple and add it to the dictionary\n        if tuple(sorted(lst)) in counts:\n            counts[tuple(sorted(lst))] += 1\n        else:\n            counts[tuple(sorted(lst))] = 1\n    # return the dictionary\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) > 15:\n        return False\n    elif '.' in num:\n        return True\n    else:\n        if len(num) > 15:\n            return False\n        elif '.' in num:\n            return True\n        else:\n            if '.' in num:\n                return True\n            else:\n                return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1 and '.' in num:\n        # check if the number contains only digits after the decimal point\n        num_parts = num.split('.')\n        int_part = num_parts[0]\n        if int(int_part) == int_part:\n            frac_part = num_parts[1]\n            if len(frac_part) <= 2:\n                # check if the fractional part is less than or equal to 2 digits long\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_point = num.index('.')\n        if len(num[decimal_point:]) > 2:\n            return False\n        for digit in num[decimal_point:]:\n            if not digit.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    if len(num_parts[0]) > 10:\n        return False\n    if len(num_parts[1]) > 2:\n        return False\n    for digit in num_parts[1]:\n        if not digit.isdigit():\n            return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.split('.')[1].startswith('0'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        num = int(num * 100) / 100\n        if num == int(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    # check if the given number is a float number with a precision of 2\n    try:\n        float(num)\n        if str(num).count('.') == 1 and '.' not in str(num) and len(str(num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if i!= arr.index(arr[i]):\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_element = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique_element = False\n            break\n    return unique_element"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if it contains only one distinct element and False otherwise.\n    \"\"\"\n\n    # convert the list to set to remove duplicate elements\n    unique_set = set(arr)\n\n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list contains only one element\n    if len(arr) == 1:\n        return True\n    # Create a set of the elements in the list to remove duplicates\n    unique_set = set(arr)\n    # Check if the set has only one element\n    if len(unique_set) == 1:\n        return True\n    # If no element is unique, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    unique_set = set()\n    for num in arr:\n        if num in unique_set:\n            return False\n        unique_set.add(num)\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks if each number appears only once or not.\n    If the number appears only once, it returns True, otherwise it returns False.\n    '''\n\n    # create a dictionary to count the number of occurrences of each number in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # check if all the counts are equal to 1\n    all_one = True\n    for count in counts.values():\n        if count!= 1:\n            all_one = False\n            break\n    return all_one"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0]!= arr[1]\n    elif len(arr) > 2:\n        return unique_Element(arr[:-1]) and (arr[-1]!= arr[0] and arr[-1]!= arr[-2])"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 4 == 0:\n        return True\n    elif monthnum3 % 4 == 0 and monthnum3 % 100!= 0:\n        return True\n    elif monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in months:\n        if months[monthnum3] == 28 and monthnum3 % 2 == 0:\n            return True\n        elif months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        print(monthnum, \"contains 30 days.\")\n    else:\n        print(monthnum, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum3 in range(1, 13) and monthnum3 not in [2, 4, 6, 9, 11]:\n        if monthnum3 in range(4, 10):\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0):\n                days_in_months[2] = 29\n        return days_in_months[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0):\n                return True\n            else:\n                return False\n        else:\n            return month_days[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Create a dictionary to store the days of each month\n    days_of_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    # Check if the given month number exists in the dictionary\n    if monthnum3 in days_of_month:\n        # If the month number exists, check if the month contains 30 days\n        if days_of_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If the month number doesn't exist, return an error message\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print(monthnum3, 'contains 30 days.')\n    elif monthnum3 in [4,6,9,11]:\n        print(monthnum3, 'contains 31 days.')\n    else:\n        print(monthnum3, 'is not a valid month number.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        if monthnum3 % 2 == 0:\n            return \"30\"\n        else:\n            return \"29\"\n    elif monthnum3 in [4,6,9,11]:\n        return \"30\"\n    else:\n        return \"31\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print('Invalid month number.')\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in the given array.\n    '''\n    # Find the minimum value in the array\n    min_val = min(arr)\n\n    # Initialize the minimum difference and the current difference\n    min_diff = float('inf')\n    curr_diff = min_val - min_val\n\n    # Iterate through the array and find the minimum difference\n    for i in range(n):\n        if i == 0:\n            curr_diff = arr[i+1] - arr[0]\n        else:\n            curr_diff = arr[i+1] - arr[i]\n\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\ndef find_min_diff(arr, n):\n    arr = merge_sort(arr)\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    min_diff = float('inf') # initialize min_diff to infinity\n    min_elem = None # initialize min_elem to none\n    for i in range(n): \n        for j in range(i+1,n): \n            diff = abs(arr[i]-arr[j]) # calculate the difference between arr[i] and arr[j]\n            if diff < min_diff: # if the difference is smaller than the current min_diff, update min_diff and min_elem\n                min_diff = diff\n                min_elem = (arr[i],arr[j])\n    return min_elem # return the minimum difference and its pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n):\n    # sort the array in ascending order\n    arr.sort()\n    # find the minimum difference\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1,n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference to the first element of the array\n    min_diff = arr[1] - arr[0]\n    # Loop through the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in two arguments:\n    - arr: a list of integers\n    - n: the length of the list\n    \n    It returns the minimum difference between any two elements in the array, \n    as well as the indices of those elements.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    min_indices = []\n\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            min_indices = [i-1, i]\n\n    return min_diff, min_indices"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n-1] - arr[n-2]\n\n    # Loop through the remaining elements of the array and calculate the difference between each pair\n    for i in range(n-2):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n        elif diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    return sum(1 for digit in str if digit.isdigit())"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        # Initialize the first two polite numbers\n        polite_numbers = [0, 0]\n\n        # Iterate through the remaining numbers\n        for i in range(2, n + 1):\n            # Calculate the next polite number\n            next_polite = 2 * polite_numbers[i - 2] + 1\n\n            # Check if the next polite number is greater than the current polite number\n            if next_polite > polite_numbers[i - 1]:\n                polite_numbers.append(next_polite)\n            else:\n                # Calculate the difference between the current polite number and the next polite number\n                diff = polite_numbers[i - 1] - polite_numbers[i - 2]\n\n                # Add the difference to the next polite number and check if it's greater than the next polite number\n                next_next_polite = 2 * polite_numbers[i - 2] + 1\n                if next_polite + diff > next_next_polite:\n                    polite_numbers.append(next_polite + diff)\n                else:\n                    # Add the difference to the next polite number and subtract the difference from the next next polite number\n                    polite_numbers.append(next_polite + diff - next_next_polite)\n\n        return polite_numbers[-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    num = 0\n    i = 0\n    while i <= n:\n        if i == 0:\n            num = 0\n        elif i == 1:\n            num = 1\n        else:\n            num = 4 * i + 1\n        if num % 2 == 0:\n            num += 1\n        i += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    polite_numbers = [0, 1] # initialize the list of polite numbers\n\n    for i in range(2, n + 1): # iterate from 2 to n\n        is_prime = True # assume prime until proven otherwise\n        for j in range(2, int(math.sqrt(i)) + 1): # check if i is divisible by any number between 2 and sqrt(i)\n            if i % j == 0: # if i is divisible by j, it's not prime\n                is_prime = False\n                break\n        if is_prime: # if i is prime, it's polite and add it to the list\n            polite_numbers.append(i)\n\n    return polite_numbers[n - 1] # return the nth polite number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        i = 1\n        while True:\n            if is_prime(i) and i >= n:\n                return i\n            i += 1\n\n    def nth_polite(n):\n        if n == 1:\n            return 2\n        else:\n            prime = nth_prime(n - 1)\n            return 4 * prime + 2\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2 * is_polite(n // 2)\n    else:\n        return 2 * is_polite(n // 2) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    \n    result = 0\n    polite_number = 1\n    \n    while polite_number <= n:\n        result += polite_number\n        polite_number += 2\n    \n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns True if it is a polite number, \n    otherwise it returns False.\n    \n    A polite number is a positive integer that is divisible by 11 or 13.\n    '''\n\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    def is_divisible_by_11_or_13(num):\n        return is_divisible(num, 11) or is_divisible(num, 13)\n\n    if is_divisible_by_11_or_13(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number using the math library.\n    \"\"\"\n    count = 0\n    number = 0\n\n    # Calculate the nth prime number\n    while True:\n        prime = math.isqrt(n)\n        if prime * prime!= n:\n            for i in range(2, prime):\n                if n % i == 0:\n                    break\n            else:\n                count += 1\n                if count == n:\n                    number = prime\n                    break\n        n += 1\n\n    return number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_polite(n): \n    \"\"\"\n    This function takes an integer `n` and returns the nth polite number.\n    A polite number is a positive integer that is divisible by 5.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n\n    :param n: The nth polite number to find.\n    :return: The nth polite number.\n    \"\"\"\n\n    # Initialize the polite number and count to 0\n    polite_number = 0\n    count = 0\n\n    # Iterate through the numbers from 1 to n\n    while count < n:\n        # Check if the number is polite\n        if is_prime(polite_number) and is_prime(count + 1):\n            polite_number += 1\n        else:\n            polite_number += 2\n            count += 1\n\n        # Check if the polite number exceeds the limit of n\n        if polite_number > n:\n            break\n\n    return polite_number\n\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n\n    :param num: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and num - 1\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    if len(l1) < 2:\n        return result\n    \n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    elif len(l1) == 2:\n        return [(l1[0], l1[1])]\n    else:\n        result = []\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    n = len(lst)\n    if n < 2:\n        return []\n    else:\n        return [(lst[i], lst[i+1]) for i in range(n-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers as input and a target sum as an argument.\n    It returns the number of pairs in the list whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    # Create a set of all elements in both lists\n    combined = set(li1 + li2)\n    # Create a set of all elements in the first list only\n    li1_only = set(li1)\n    # Create a set of all elements in the second list only\n    li2_only = set(li2)\n    # Subtract the sets to get the difference\n    diff = combined - li1_only - li2_only\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1)-set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a list containing the difference between the two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements of the first list that are not present in the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # Define a set to store the unique elements of both lists\n    unique_set = set(li1 + li2)\n\n    # Define a set to store the elements of the first list only\n    li1_set = set(li1)\n\n    # Define a set to store the elements of the second list only\n    li2_set = set(li2)\n\n    # Remove the common elements from the unique_set\n    unique_set = unique_set.difference(li1_set.intersection(li2_set))\n\n    # Convert the set back to a list and return the difference\n    return list(unique_set)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize the sum of fourth power to 0\n    fourth_power_sum = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the current number\n        fourth_power = i ** 4\n        # add the fourth power to the sum of fourth power\n        fourth_power_sum += fourth_power\n\n    return fourth_power_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    count = 0\n\n    # Iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        fourth_power = i ** 4\n        # Add the fourth power to the sum of fourth powers\n        sum_of_fourth_powers += fourth_power\n        # Increment the count by 1\n        count += 1\n\n    return sum_of_fourth_powers, count"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i**4\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first n odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i**4\n        i += 1\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j == len(exp) // 2:\n                continue\n            if exp[j] == '(' or exp[j] == ')':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return \"Error: Unmatched parentheses\"\n            top_char = stack.pop()\n            if char in [')', '}']:\n                if top_char!= '(':\n                    return \"Error: Mismatched parentheses\"\n            elif char in ['[', ']']:\n                if top_char!= '{':\n                    return \"Error: Mismatched parentheses\"\n    if stack:\n        return \"Error: Unmatched parentheses\"\n    else:\n        return \"Expression is balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalnum() or i in '()':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and a number K as input and returns a new string with all words with length K removed.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Remove words with length K\n    words = [word for word in words if len(word)!= K]\n    # Join the words back into a string\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a new list to store the non-K-length words\n    new_words = []\n\n    # Loop through each word in the words list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, add it to the new_words list\n            new_words.append(word)\n\n    # Join the words in the new_words list into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        for match in matches:\n            print(f'Match found at position {text.find(match)} with value {match}')\n    else:\n        print('No match found')"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Initialize variables for storing the match and position\n    match_count = 0\n    match_pos = None\n    match_obj = None\n\n    # Iterate through the matches and update the variables accordingly\n    for match in matches:\n        match_count += 1\n        match_pos = match.start()\n        match_obj = match.group()\n\n    # Return the match count, position and object\n    return match_count, match_pos, match_obj"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        matches = re.findall(pattern, text)\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    \n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Position: {match.start()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # if no matches are found, return None\n    if not matches:\n        return None\n    \n    # iterate through all matches and get their position and length\n    for match in matches:\n        # get the start and end position of the match\n        start_position = text.find(match)\n        end_position = start_position + len(match)\n        \n        # print the match and its position\n        print(f\"{match} at position {start_position}\")\n    \n    return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if the index is even\n            if nums[i] % 2 == 0:  # check if the number at the index is even\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i]))) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through the list of numbers, starting at the second index\n    for i in range(1, len(nums), 2):\n        # Check if the number at the current index is odd\n        if nums[i] % 2!= 0:\n            # If it's not, return False immediately\n            return False\n    # If we make it through the loop without returning False, we've found an odd number at an odd index\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and checks whether every odd index contains odd numbers.\n    Returns True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 1) and (i % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if i is odd\n            count = 0\n            for num in nums:\n                if num % 2!= 0:  # check if number is odd\n                    count += 1\n                    if count % 2 == 1:  # check if count is odd\n                        return False\n            if count == 0:  # if no odd numbers found in this position, return False\n                return False\n    return True  # if all odd positions have odd numbers, return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels and test_str[i + 1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        for j in range(len(test_str)):\n            if j == i + 1 or j == i - 1:\n                if test_str[i] in vowels and test_str[j] in vowels:\n                    count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # convert set back to list\n    unique_list = list(unique_set)\n\n    # initialize a sum variable to 0\n    sum_var = 0\n\n    # loop through the unique list and add its elements to the sum variable\n    for num in unique_list:\n        sum_var += num\n\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_set = set(arr)\n    non_repeated_sum = sum(arr_set)\n    return non_repeated_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # remove duplicates from the list\n    unique_arr = list(set(arr))\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # iterate over the unique elements in the list\n    for element in unique_arr: \n        # add the element to the sum of non-repeated elements\n        sum_non_repeated += element\n    \n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Using a set to store the unique elements in the list\n    unique_elements = set(arr)\n    # Finding the sum of the unique elements\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_arr = set(arr)\n    # Convert the set back to a list to get the sum\n    sum_arr = list(set_arr)\n    return sum(sum_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the list and update the count_dict and sum\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n        sum += num * count_dict[num]\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of the elements that have been seen\n    seen = set()\n    # Initialize a variable to keep track of the sum\n    total = 0\n    # Iterate over the elements in the list\n    for num in arr:\n        # Check if the element has already been seen\n        if num not in seen:\n            # If it hasn't, add it to the set and to the total sum\n            seen.add(num)\n            total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    arr_set = set(arr)\n\n    # Calculate the sum of the non-repeated elements in the set\n    return sum(arr_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr) # convert the list to a set, which automatically removes duplicates\n    sum_of_unique = sum(unique_elements) # calculate the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            # If the element is already in the dictionary, increment its frequency by 1\n            freq[num] += 1\n        else:\n            # Otherwise, add the element to the dictionary with a frequency of 1\n            freq[num] = 1\n    \n    # Create an empty list to store the non-repeated elements\n    non_repeated = []\n    \n    # Iterate through the dictionary and add the non-repeated elements to the list\n    for num, freq in freq.items():\n        if freq == 1:\n            non_repeated.append(num)\n    \n    # Calculate the sum of the non-repeated elements\n    return sum(non_repeated)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(enumerate(list1), lambda x: x[1] == x[0]-1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouper = lambda x: groupby(x)\n    packed_list = []\n    for item, group in grouper(list1):\n        if len(list(group)) > 1:\n            packed_list.append([item])\n        else:\n            packed_list[-1].append(item)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Helper function to check if two consecutive elements are duplicates\n    def check_duplicates(a, b):\n        if a == b:\n            return True\n        return False\n\n    # Create a list of tuples of consecutive duplicates\n    consecutive_duplicates = [(k, list(g)) for k, g in groupby(list1, check_duplicates)]\n\n    # Extract the elements of the consecutive duplicates and pack them into sublists\n    packed_consecutive_duplicates = []\n    for a, b in consecutive_duplicates:\n        if a < b:\n            packed_consecutive_duplicates.append(a)\n            packed_consecutive_duplicates.append(b)\n        else:\n            packed_consecutive_duplicates.append(b)\n            packed_consecutive_duplicates.append(a)\n\n    return packed_consecutive_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n\n    for item in grouped_list:\n        if len(list(item)) == 1:\n            packed_list.append(list(item))\n        else:\n            sublist = []\n            for sub_item in list(item):\n                sublist.append(sub_item)\n            packed_list.append(sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped_list = groupby(enumerate(list1), lambda x: x[1] == x[0])\n    packed_list = []\n    for key, group in grouped_list:\n        if key:\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a list to store the packed sublists\n    packed_sublists = []\n\n    # iterate over each element of the given list\n    for i, elem in enumerate(list1):\n        # if the current element is equal to the next element,\n        # add it to the current sublist and move on to the next element\n        if i < len(list1)-1 and list1[i] == list1[i+1]:\n            # add the current element to the current sublist\n            current_sublist = [list1[i]]\n            # move to the next element and keep track of the previous element\n            i += 1\n            # keep adding elements to the current sublist until the next element is different\n            while i < len(list1)-1 and list1[i] == list1[i-1]:\n                current_sublist.append(list1[i])\n                i += 1\n            # add the current sublist to the packed_sublists list\n            packed_sublists.append(current_sublist)\n        # if the current element is not equal to the next element,\n        # start a new sublist with the current element\n        else:\n            current_sublist = [elem]\n            # move on to the next element and keep track of the previous element\n            i += 1\n            # keep adding elements to the current sublist until the next element is different\n            while i < len(list1)-1 and list1[i] == list1[i-1]:\n                current_sublist.append(list1[i])\n                i += 1\n            # add the current sublist to the packed_sublists list\n            packed_sublists.append(current_sublist)\n\n    # return the packed_sublists list\n    return packed_sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == len(list1) - 1:\n            result.append(list(group))\n        elif key == 0:\n            result.append(list(group))\n            result.append(list(group))\n        else:\n            if list(group)[0] == list(group)[1]:\n                result[-1].extend(list(group))\n            else:\n                result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Iterate over the list and group consecutive duplicates together\n    grouped_list = [(k, list(g)) for k, g in groupby(enumerate(list1), lambda x: x[1] == x[0])]\n\n    # Flatten the grouped list and return the result\n    return [y for x in grouped_list for y in x[1]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, key=str.join))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list where all the consecutive duplicates of the input list elements are packed into sublists.\n    \"\"\"\n\n    # group the list by consecutive duplicates and pack the elements into sublists\n    grouped_lst = list(groupby(lst))\n\n    # get the first element of each sublist and append it to the new list\n    new_lst = [list(group)[0] for sublist in grouped_lst for group in sublist]\n\n    # return the new list\n    return new_lst"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count:\n            count[item_tuple] += 1\n        else:\n            count[item_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if tuple(item) in count:\n            count[tuple(item)] += 1\n        else:\n            count[tuple(item)] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create a dictionary to store the count of each unique sublist\n    sublist_counts = {}\n    \n    # Loop through each list in the main list\n    for item in list1:\n        # Check if the item is already in the dictionary\n        if item not in sublist_counts:\n            # If it's not, add it and set its count to 1\n            sublist_counts[item] = 1\n        else:\n            # If it is, increment its count\n            sublist_counts[item] += 1\n            \n    # Return the dictionary\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each element of the list\n    for item in list1:\n        # Convert the item to a tuple if it's not already a tuple\n        if not isinstance(item, tuple):\n            item = (item,)\n            \n        # If the item is already a tuple, add it to the dictionary if it's not already there\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list\n    unique_list = list(set(list1))\n\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Loop through each unique list and count its occurrences\n    for i, elem in enumerate(unique_list):\n        count_dict[elem] = unique_list.count(elem)\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the number of occurrences of each unique sublist\n    counts = {}\n    \n    # Loop through each sublist in the original list\n    for sublist in list1:\n        # Turn the sublist into a tuple and add it to the counts dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create a dictionary to store the counts of each unique sublist\n    sublist_counts = {}\n\n    # loop through each item in the list\n    for item in list1:\n        # if the item is a list, convert it to a tuple and add it to the sublist_counts dictionary\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist in sublist_counts:\n                sublist_counts[sublist] += 1\n            else:\n                sublist_counts[sublist] = 1\n\n    # return the sublist_counts dictionary\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    \n    # iterate through each element in the list1\n    for element in list1:\n        # if the element is a list, convert it to a tuple and check if it is in the sublist_count dictionary\n        if isinstance(element, list):\n            if element in sublist_count:\n                # if the element is already in the dictionary, increment its value\n                sublist_count[element] += 1\n            else:\n                # if the element is not in the dictionary, add it with a value of 1\n                sublist_count[element] = 1\n    \n    # return the dictionary containing the sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in unique_sublists_dict:\n            unique_sublists_dict[sublist] += 1\n        else:\n            unique_sublists_dict[sublist] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    combinations = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = tuple(test_list[i:j])\n            combinations.add(combination)\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    # initialize an empty dictionary to store the combinations of sums with tuples\n    combinations_dict = {}\n    # iterate through the tuple list and for each tuple, find all possible combinations of sums\n    for tup in test_list:\n        for i in range(len(tup)):\n            # create a list of all possible values of the current tuple element except for the current value\n            values_left = list(tup)\n            values_left.remove(values_left[i])\n            # create a list of all possible sums for the current tuple element\n            sums_left = [sum(tup[j:i] + values_left) for j in range(i+1)]\n            # iterate through the list of possible sums and for each sum, check if it exists in the combinations_dict\n            for sum_left in sums_left:\n                if sum_left in combinations_dict:\n                    # if the sum exists in the dictionary, append the current tuple to the combinations of sums with tuples\n                    combinations_dict[sum_left].append(tup)\n                else:\n                    # if the sum does not exist in the dictionary, create a new list with the current tuple and append it to the dictionary\n                    combinations_dict[sum_left] = [tup]\n    # return the combinations of sums with tuples in the given tuple list\n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = set()\n    result = []\n\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) in sums:\n                continue\n            sums.add(sum(combo))\n            result.append(combo)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n\n    # Find all unique tuples in the list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n\n    # Find all unique combinations of unique tuples\n    unique_combinations = set(combinations(unique_tuples, r) for r in range(1, len(unique_tuples) + 1))\n\n    # Create a list of tuples containing the sum and tuple\n    result_list = [(sum(x), tuple(sorted(x))) for x in unique_combinations]\n\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    comb_list = []\n    for i in range(2, n+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if sum(test_list[i]) + sum(test_list[j]) == sum(test_list[k]) + sum(test_list[l]):\n                        print(\"combination:\", tuple(test_list[i]), tuple(test_list[j]), tuple(test_list[k]), tuple(test_list[l]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            total = sum(comb)\n            if total in test_list:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(nums, target, start, current_sum, comb):\n        if current_sum == target:\n            comb.append(tuple(nums[:start]))\n            return\n        if current_sum > target:\n            return\n        for i in range(start, len(nums)):\n            find_combinations_helper(nums, target, i+1, current_sum+nums[i], comb)\n        return comb\n    \n    def find_combinations_with_tuples(nums, target):\n        nums.sort()\n        comb = []\n        find_combinations_helper(nums, target, 0, 0, comb)\n        return comb\n    \n    return find_combinations_with_tuples(test_list, sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)):\n        for comb in combinations(test_list, i):\n            total = sum(comb)\n            if total in test_list:\n                result.append(tuple(comb))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and is_prime(i):\n            count += 1\n            if count == 2:\n                return True\n    \n    if count > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Function to check the count of divisors\n    def count_divisors(num):\n        count = 0\n        for i in range(1, num + 1):\n            if (num % i == 0):\n                count += 1\n        return count\n\n    # Function to check whether the count of divisors is even or odd\n    def check_even_odd(num):\n        count = count_divisors(num)\n        if count % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Function to check whether the number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if (num % i == 0):\n                return False\n        return True\n\n    # Check whether the number is prime or not\n    if is_prime(n):\n        print(\"The number is prime\")\n    else:\n        print(\"The number is not prime\")\n\n    # Check whether the count of divisors is even or odd\n    print(\"The count of divisors is even or odd:\", check_even_odd(n))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    # find the sum of the divisors of n\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i!= n // i:\n                divisors_sum += n // i\n\n    # check if the count of divisors is even\n    if divisors_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n/i:\n                divisors.append(n/i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number n. \n    \"\"\"\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 1\n    divisors += 1 # if n is prime, it has at least 2 divisors\n    if n == 1:\n        divisors = 0\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n and returns True if the count of its divisors is even, otherwise it returns False.\n    \"\"\"\n    # Define a function to count the number of divisors of a number n\n    def count_divisors_of_n(n):\n        # Initialize count to 0\n        count = 0\n        # Check each number from 1 to n-1\n        for i in range(1, n+1):\n            # If n is divisible by i, increment the count\n            if n % i == 0:\n                count += 1\n        # Return the count of divisors of n\n        return count\n\n    # Check if the count of divisors of n is even\n    if count_divisors_of_n(n) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_divisors(n):\n    \"\"\"\n    This function counts the divisors of a given number using a for loop.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n        if n // i == i:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even,\n    and False otherwise.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function counts the number of divisors of a given integer.\n    '''\n    # initialize the count of divisors as 0\n    count = 0\n    # iterate over all numbers from 1 to the square root of the given integer\n    for i in range(1, int(math.sqrt(n))+1): \n        # if the integer is divisible by i, add 1 to the count\n        if n % i == 0: \n            count += 1 \n    # if the count is odd, it means that there are an even number of divisors\n    if count % 2 == 1: \n        # return True\n        return True \n    else: \n        # return False\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    total = 0\n    \n    for i in range(n):\n        if i == 0:\n            count = 1\n            total += arr[i]\n        else:\n            count += 1\n            if count % 2 == 0:\n                count -= 1\n                total -= arr[i - 1]\n        total += arr[i]\n        \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of odd length subarrays\n    sum = 0\n    # Traverse through the array\n    for i in range(n):\n        # Check if the current subarray is odd length\n        if i % 2!= 0 and i + 1 <= n:\n            # Initialize the sum of the subarray\n            subsum = 0\n            # Traverse through the subarray\n            for j in range(i, n):\n                subsum += arr[j]\n                # Check if the sum of the subarray is odd\n                if subsum % 2!= 0:\n                    # Add the subarray to the sum of all odd length subarrays\n                    sum += subsum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len_subarr = 0\n    n = len(arr)\n    for i in range(n):\n        # calculate the sum of odd length subarray\n        sum_odd_len_subarr += sum(arr[i:i+3])\n    return sum_odd_len_subarr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, min(2*i+2, n)):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                sum += sum(sub_arr)\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    sum_of_subarrays = 0\n    \n    # Traverse through all possible subarrays\n    for i in range(n):\n        for j in range(i+1, min(n, i+5)):\n            # Check if the subarray is odd length\n            if j-i+1%2!= 0:\n                # If it is, add the subarray's elements to the sum_of_subarrays\n                sum_of_subarrays += arr[i] + arr[j]\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, min(2*i+2, n)):\n            sum += arr[j]\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0: # check if the length is odd\n                subarr = arr[i:j+1] # slice the array to get the subarray\n                sum += sum(subarr) # add all elements of the subarray to the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n\n    # Loop through each subarray in the array\n    for i in range(len(arr)):\n\n        # Find the sum of odd length subarrays by using a sliding window approach\n        left = i\n        right = i\n\n        # Initialize a variable to store the current sum of odd length subarrays\n        current_sum = 0\n\n        # While the right pointer is within the range of the array\n        while right < len(arr):\n\n            # Add the current element to the sum of odd length subarrays\n            current_sum += arr[right]\n\n            # If the current element is odd, add it to the sum_odd variable\n            if right % 2!= 0:\n                sum_odd += current_sum\n\n            # Move the right pointer to the right by one\n            right += 1\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    v = cmax\n    s = 0\n    if delta!= 0:\n        s = delta / (1 - abs(2 * cmax - 1))\n    \n    h = None\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = (h * 60) % 360\n    h = h if 0 <= h <= 360 else h + 360\n    \n    return (int(h * 255), int(s * 255), int(v * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    \n    # Calculate max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta\n    delta = max_val - min_val\n    \n    # Calculate h, s, and v values\n    if max_val == 0:\n        h = 0\n        s = 0\n        v = max_val\n    elif delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        s = delta / max_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h *= 60\n        \n        v = max_val\n    \n    # Return h, s, and v values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values and divide by 255\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the value of h\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Calculate the value of s\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Calculate the value of v\n    v = max_val\n\n    # Convert h, s, and v to percentage\n    h = h * 60\n    if h < 0:\n        h += 360\n    s = s * 100\n    v = v * 100\n\n    # Return h, s, and v as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to LAB color model\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        del_max = max_val - min_val\n        s = del_max / max_val\n\n        if max_val == r:\n            h = (g - b) / del_max\n        elif max_val == g:\n            h = 2 + (b - r) / del_max\n        else:\n            h = 4 + (r - g) / del_max\n\n        h = h * 60\n        if h < 0:\n            h += 360\n\n    return (h, s, max_val)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert r,g,b to floating point values between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate delta value\n    delta = max_val - min_val\n\n    # Calculate h,s,v\n    if delta == 0:\n        h = s = v = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = round(h * 60)\n\n        if h < 0:\n            h += 360\n\n        s = delta / max_val\n\n        if max_val == 0:\n            v = 0\n        else:\n            v = max_val\n\n    # Return hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \n    Args:\n    r: int, red color channel value\n    g: int, green color channel value\n    b: int, blue color channel value\n    \n    Returns:\n    h: int, hue value [0, 360]\n    s: int, saturation value [0, 100]\n    v: int, value value [0, 100]\n    '''\n    \n    r, g, b = r/255, g/255, b/255 # Convert RGB values to range [0, 1]\n    \n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0: # If the color is a shade of gray\n        h = 0\n        s = 0\n        v = cmax*100\n    else:\n        h = 60 * (((cmax - r)/delta) % 6)\n        if h < 0:\n            h += 360\n        s = delta*100/cmax\n        v = cmax*100\n    \n    return int(h), int(s), int(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to HSV color model.\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    elif max_val == r:\n        hue = (g - b) / delta\n        saturation = (max_val - min_val) / max_val\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n        saturation = (max_val - min_val) / max_val\n    else:\n        hue = 4 + (r - g) / delta\n        saturation = (max_val - min_val) / max_val\n\n    hue = hue % 6\n\n    if hue < 0:\n        hue += 6\n\n    value = max_val\n    if saturation == 0:\n        saturation = 1\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        s = delta/max_value\n        \n        if max_value == r:\n            h = (g-b)/delta\n        elif max_value == g:\n            h = 2 + (b-r)/delta\n        else:\n            h = 4 + (r-g)/delta\n            \n        h = h/6\n        \n    h = round(h*60)\n    s = round(s*100)\n    v = round(max_value*100)\n    \n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters, r, g, and b, which are the red, green, and blue components of the RGB color.\n    It then converts the RGB color to HSV color using the conversion formula:\n\n    HSV = [(R/max(R, G, B))*360, (G/max(R, G, B))*100%, (B/max(R, G, B))*100%]\n\n    where R, G, and B are the red, green, and blue values of the input RGB color, and max(R, G, B) is the maximum value among the R, G, and B components.\n\n    The function then returns the converted HSV color as a tuple.\n    \"\"\"\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_rgb / 255.0\n\n    if max_rgb!= 0:\n        s = (max_rgb - min_rgb) / max_rgb\n    if max_rgb == min_rgb:\n        h = 0\n    else:\n        if r == max_rgb:\n            h = (g - b) / (max_rgb - min_rgb)\n        elif g == max_rgb:\n            h = 2 + (b - r) / (max_rgb - min_rgb)\n        else:\n            h = 4 + (r - g) / (max_rgb - min_rgb)\n        if h < 0:\n            h += 6\n        h = h / 6\n\n    return (h * 360, s * 100, v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert an RGB color to HSV color.\n    '''\n    r_max = max(r, g, b)\n    c = r_max - min(r, g, b)\n    h = 0\n    s = 0\n    v = r_max / 255.0\n\n    if c == 0:\n        h = 0\n        s = 0\n    else:\n        if r_max == r:\n            h = ((g - b) / c) % 6\n        elif g_max == g:\n            h = (b - r) / c + 2\n        else:\n            h = (r - g) / c + 4\n\n        h = h / 6.0\n\n        if h < 0:\n            h += 1\n\n        s = c / (1 - abs(2 * v - 1))\n\n    hsv = (h, s, v)\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            product *= i\n    \n    for i in range(count, len(list1)):\n        if list1[i] % 2!= 0:\n            product *= list1[i]\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return \"The list does not contain even and odd numbers\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    '''\n    even_num = 1\n    odd_num = 1\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num += 1\n            product *= num\n        else:\n            odd_num += 1\n            product *= num\n    \n    if even_num > 0 and odd_num > 0:\n        return product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list\n    for i in list1:\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the even number to the total\n            even_num += i\n        else:\n            # Add the odd number to the total\n            odd_num += i\n    \n    # Calculate the product of even and odd numbers and return it\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return \"The list doesn't have any even numbers.\"\n    elif odd_count == 0:\n        return \"The list doesn't have any odd numbers.\"\n    else:\n        return lst[0] * lst[1]\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n\n    Args:\n    list1 (list): list of integers\n\n    Returns:\n    int: product of first even and odd number of the list, or 0 if the list is empty\n    \"\"\"\n\n    if not list1:  # if list is empty\n        return 0\n\n    even_num = 1  # initialize even number to 1\n    odd_num = 1  # initialize odd number to 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    tup_list = [tuple(x.split(',')) for x in test_str.split('|')]\n    # Convert each tuple in the list to an integer tuple\n    int_tup_list = [[int(x) for x in tup] for tup in tup_list]\n    return int_tup_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma\n    tuple_str = test_str.split(\",\")\n\n    # Convert each string to integer\n    int_tuple = [int(i) for i in tuple_str]\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    result = tuple(eval(item) for item in test_str.split())\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by ',' and convert each item to integer\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer\n    int_list = [int(x.strip()) for x in str_list]\n    \n    # Convert the list of integers back to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to list of strings\n    test_list = test_str.split(',')\n    # Convert each string to integer and append to integer list\n    int_list = []\n    for string in test_list:\n        int_list.append(int(string))\n    # Convert list of integers to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer\n    int_list = [int(s) for s in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a tuple of characters\n    char_tuple = tuple(test_str)\n    # Initialize an empty list to store the integers\n    int_list = []\n    # Loop through each character in the tuple\n    for char in char_tuple:\n        # If the character is an integer, append it to the list of integers\n        if char.isdigit():\n            int_list.append(int(char))\n    # Convert the list of integers into a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Find the index of the element to be inserted\n    i = bisect.bisect_right(a, x)\n\n    # If the element is already present in the list, return the index\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If the element is greater than all elements to the right of the insertion point,\n    # return the index of the insertion point\n    if i == len(a):\n        return i\n\n    # If the element is greater than the next element, return the index of the next insertion point\n    if a[i] < x < a[i+1]:\n        return i+1\n\n    # If the element is greater than the previous element, return the index of the previous insertion point\n    if a[i-1] < x < a[i]:\n        return i-1\n\n    # If the element is not in the list, return the index of the next insertion point\n    return i+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect module to find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # Return the index of the insertion point\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif x > a[i-1]:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where x should be inserted in a using bisect.bisect_right()\n    i = bisect.bisect_right(a, x)\n    \n    # If x is greater than all the elements in a, the insertion point is len(a)\n    if i == len(a):\n        return len(a)\n    \n    # If x is greater than the last element in a, the insertion point is i+1\n    elif x > a[i-1]:\n        return i+1\n    \n    # If x is less than the first element in a or equal to the last element in a, the insertion point is i\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the right pointer to the last index of the array\n    right = len(a) - 1\n\n    # Loop until the left pointer is less than or equal to the right pointer\n    while right >= 0:\n        # Calculate the middle index of the array\n        mid = (right + left) // 2\n\n        # If the middle element is greater than the specified value,\n        # then the right insertion point is between the left and right pointers\n        if a[mid] > x:\n            right = mid - 1\n        # If the middle element is less than or equal to the specified value,\n        # then the right insertion point must be to the left of the mid index\n        else:\n            return mid\n\n    # If the specified value is not present in the array,\n    # then the right insertion point must be at the leftmost index\n    return 0"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\1{2}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*b\\s*b\\s*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str +'' + str(elem) for elem in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list with the given string and list\n    new_list = [test_str] + test_list\n    # Create a new tuple with the new list\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    \n    # Join the two tuples into a new tuple\n    new_tuple = (test_str, new_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the given list and string using the + operator\n    new_tuple = test_list + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the string and the list to create a new tuple\n    new_tuple = (test_str + str(new_list))\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n    # Reverse the list\n    test_list.reverse()\n    # Combine the list and the string into a tuple\n    new_tuple = tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a variable to store the result\n    result = True\n    \n    # Loop through the list and check whether every even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            result = False\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count == odd_count"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) / 2:\n        print(\"Every even index contains even numbers.\")\n    else:\n        print(\"Not all even indices contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a variable to store the count of even numbers at each even index\n    even_count = [0] * (len(nums) // 2)\n\n    # iterate through the list and count the even numbers at each even index\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count[i // 2] += 1\n\n    # iterate through the even_count list and check if all the numbers are even\n    for count in even_count:\n        if count % 2!= 0:\n            return False\n\n    # if all the conditions are met, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            count += 1\n            if nums[j] % 2!= 0:\n                return False\n        if count % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        if len(test_tup) == 0:\n            return []\n        elif len(test_tup) == 1:\n            return [test_tup[0]]\n        else:\n            flat_list = [val for tup in test_tup for val in tup]\n            return remove_nested(flat_list)\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the count of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n\n    for element in input_list: \n        if isinstance(element, list): \n            count += 1\n            count += count_list(element)\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr) - 1\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    index = -1\n\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Traverse through the array\n    for i in range(n-1, -1, -1):\n        # If the element is equal to x, return its index\n        if arr[i] == x:\n            return i\n    # If element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: A sorted array\n    x: The element to be searched for in the array\n    \n    This function returns the index of the last occurrence of the element x in the array.\n    If x is not found in the array, it returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Use binary search to find the last position of x in arr\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If x is found in the middle, check if x is to its left or right\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters:\n    arr: the sorted array\n    x: the element to search for\n\n    It returns the last position of the element in the array. If the element is not in the array, it returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if left == len(arr) else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"(?i)(?<=a)\\w*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_starta_endb(text):\n    pattern = r'\\ba.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=[^a])a.*?(?=[^b])b')\n    matches = pattern.findall(text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a[^b]*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"(?<=^a)\\w+(?=b)\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all its values.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_val = 0\n    for val in dict.values():\n        sum_val += val\n    return sum_val"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit of the range: \"))\n    r = int(input(\"Enter upper limit of the range: \"))\n\n    sum = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            sum += i\n\n    print(\"Sum of all odd natural numbers within the given range is:\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    if n % 2 == 0:\n        r -= 1\n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    sum_val = 0\n\n    # iterate through odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add current odd number to sum\n        sum_val += i\n\n    return sum_val"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through odd numbers from l to r\n    for i in range(1, n+1, 2):\n        sum += i\n\n    # return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n        \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # calculate the number of bits to be rotated\n    num_bits = 32\n    if d >= num_bits:\n        d = d % num_bits\n    \n    # calculate the mask to be applied to the number\n    mask = 0xffffffff\n    mask = mask << d\n    \n    # shift the number to the left by d bits and and with mask to get the rotated number\n    rotated_num = (n << d) & mask\n    \n    # return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Shift the number to the left by d bits\n    n = n << d\n    # Add the shifted number to the original number\n    n = n | (n >> (32 - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # initialize result to 0\n    result = 0\n    # find the last set bit of n\n    index = 0\n    while (n & 0x1) == 0:\n        n >>= 1\n        index += 1\n    # rotate left by d bits\n    for _ in range(d):\n        result = (result << 1) | (n & 0x1)\n        n >>= 1\n    # shift right by (32 - d) bits to get the original value\n    result = (result << (32 - d)) | (n >> (index - d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary format\n    binary_format = format(n, '032b')\n\n    # Calculate the number of bits to rotate\n    rotate_bits = binary_format[-d:].zfill(d)\n\n    # Calculate the new binary format\n    new_binary_format = rotate_bits + binary_format[:-d]\n\n    # Convert the new binary format to an integer\n    new_integer = int(new_binary_format, 2)\n\n    return new_integer"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the total number of bits in the original number\n    total_bits = 32\n\n    # Calculate the total number of bits after rotation\n    new_bits = total_bits - d\n\n    # Mask to extract the leftmost d bits of the original number\n    left_mask = (1 << d) - 1\n\n    # Shift the original number to the left by d bits\n    left_shift = n << d\n\n    # Extract the rightmost d bits of the shifted number\n    right_shift = (n >> (total_bits - d)) & left_mask\n\n    # Combine the left shift and the right shift\n    rotated_number = left_shift | right_shift\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to binary\n    binary = bin(n)[2:]\n    # get the number of bits in binary\n    bits = len(binary)\n    # get the number of bits to rotate by\n    rot_bits = bits - d\n    # rotate binary\n    rotated_binary = binary[rot_bits:] + binary[:rot_bits]\n    # convert back to decimal\n    rotated_decimal = int(rotated_binary, 2)\n    # return the rotated decimal\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d > 31:\n        return n\n    mask = (1 << 32) - 1\n    d %= 32\n    n = (n << d) & mask\n    n = (n >> (32 - d)) | (n & ((1 << (32 - d)) - 1))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert number to binary and get the length of binary representation\n    length = len(bin(n)[2:])\n\n    # Compute the binary representation of d\n    binary_d = bin(d)[2:]\n\n    # Compute the number of bits to rotate\n    num_bits_to_rotate = length + d\n\n    # Pad the binary representation of d with leading zeros\n    while len(binary_d) < num_bits_to_rotate:\n        binary_d = '0' + binary_d\n\n    # Compute the rotation mask\n    rotation_mask = (1 << num_bits_to_rotate) - 1\n\n    # Compute the final result by shifting the bits left by d bits and masking the rotated bits\n    final_result = ((n << d) & rotation_mask) | ((n & rotation_mask) >> (32 - d))\n\n    return final_result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF # 32 bit mask to get the last 32 bits\n    temp = (n << d) & mask # temp contains the shifted bits\n    return ((n >> (32-d)) | temp) & mask # final result contains the rotated bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    rotated_n = ((n<<d) & mask) | ((n>>(32-d)) & ~mask)\n    return rotated_n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # Remove all whitespaces using string slicing\n    # text = text.replace(' ', '')\n    # text = text.replace('\\t', '')\n    # text = text.replace('\\n', '')\n    # text = text.replace('\\r', '')\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove all spaces after each word\n    words = text.split()\n    text =''.join(words)\n    # Remove all leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, z+1):\n        if i % 2 == 0:\n            if i in [x, y, z]:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    :param arr: An unsorted array\n    :return: An integer representing the number of rotations required to generate a sorted array.\n    \"\"\"\n\n    n = len(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # Initialize the count and the last element of the array\n    count = 0\n    last = arr[n - 1]\n\n    # Iterate through the array from the first element to the last element\n    for i in range(n - 1):\n        # If the current element is greater than the last element, the array is already sorted\n        if arr[i] > last:\n            return count\n\n        # Update the count and the last element of the array\n        count += 1\n        last = arr[i]\n\n    # If the array is not sorted, return the count of rotations required to generate a sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return i-j+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            continue\n        else:\n            for j in range(i+1, n):\n                if arr[j] < arr[i]:\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Base case: If the array has only one element, return 0\n    if n == 1:\n        return 0\n    # If the array has more than one element, check if the first and last elements are equal\n    if arr[0] == arr[n-1]:\n        # If they are, return 0, as the array is already sorted\n        return 0\n    # Initialize the count to 0\n    count = 0\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n-1\n    # While left pointer is less than right pointer\n    while left < right:\n        # If the left and right elements are equal, increment the count and move both pointers towards each other\n        if arr[left] == arr[right]:\n            count += 1\n            left += 1\n            right -= 1\n        # If the left element is less than the right element, increment the left pointer\n        elif arr[left] < arr[right]:\n            left += 1\n        # If the right element is less than the left element, decrement the right pointer\n        else:\n            right -= 1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    if len(arr) < 2:\n        return 0\n\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    count = 0\n    while left < right:\n        # Check if the current window is sorted\n        if arr[left] <= arr[right]:\n            left += 1\n            count += 1\n        else:\n            right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            count += 1\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Find the minimum value in the array\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize count as 0\n    count = 0\n\n    # Traverse through the array and count the number of rotations\n    for i in range(1, len(arr)):\n        # Calculate the difference between the current element and the minimum value\n        diff = arr[i] - min_val\n        # If the difference is positive, the minimum value is already at the end of the array\n        if diff > 0:\n            break\n        # Otherwise, rotate the array by one element\n        count += 1\n        min_val = arr[i]\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i+1]:\n            return i\n    return n-1\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5) + 1\n    return sqrt_n*sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It returns True if the given number is a perfect square and False otherwise.\n    \"\"\"\n    import math\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 2:\n        return False\n    \n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        elif i*i < n:\n            i += 1\n        else:\n            i -= 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    Returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if n is a perfect square by checking if it is equal to the square root of n\n    x = n\n    y = n\n    while x!= y:\n        x = (x + n // x) // 2\n        y = (y + n // y) // 2\n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    # Check if n is a perfect square\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It returns True if it is a perfect square, and False otherwise.\n    \"\"\"\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    \n    # Check if the number is already a perfect square\n    square = int(n**0.5) + 1\n    if n == square*square:\n        return True\n    \n    # Check if the number is divisible by a prime number between 2 and the square root of the number\n    for i in range(2, int(square**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # If the number is not a perfect square, it is not divisible by any prime number\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the given number is less than 2 (the square of 2 is 4)\n    if n < 2:\n        return False\n    \n    # Initialize two variables, low and high, to check for perfect squares\n    low = 2\n    high = n\n    \n    # Iterate until low is greater than or equal to high (i.e., the number is a perfect square)\n    while low <= high:\n        # Calculate the midpoint of the current range\n        mid = (low + high) // 2\n        \n        # Check if the square of mid is equal to the given number\n        if mid * mid == n:\n            return True\n        \n        # If the square of mid is less than the given number, check the upper half of the range\n        if mid * mid < n:\n            low = mid + 1\n            \n        # If the square of mid is greater than the given number, check the lower half of the range\n        else:\n            high = mid - 1\n    \n    # If the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n\n    # Check if the number is a perfect square\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        i = 0\n        while i * i <= n:\n            i += 1\n        if i * i == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as an argument and checks whether the product of the numbers in the list is even or odd.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return 'The product of the numbers in the list is even.'\n    else:\n        return 'The product of the numbers in the list is odd.'"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize variables for sum and product\n    sum_of_numbers = 0\n    product_of_numbers = 1\n\n    # loop through the list of numbers\n    for num in arr:\n        # add each number to the sum\n        sum_of_numbers += num\n        # multiply the product by the number\n        product_of_numbers *= num\n\n    # check if the product is even or odd\n    if product_of_numbers % 2 == 0:\n        # if even, return True\n        return True\n    else:\n        # if odd, return False\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as an input and returns True if the product of all the numbers in the list is even, and False otherwise.\n    '''\n    if not arr:\n        return False\n    \n    # calculate the product of all the numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes an array as an input and returns True if the product of all the elements in the array is even, otherwise False.\n    \"\"\"\n    # Compute the product of all elements in the array\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    # Step 1\n    max_sum = max(sum(lst) for lst in lists)\n\n    # Step 2-9\n    result = []\n    for lst in lists:\n        result += lst\n        if sum(result) > max_sum:\n            max_sum = sum(result)\n        result = []\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_lists = [lst]\n        elif sum_lst == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in lists:\n        sum_list = sum(i)\n        if sum_list > max_sum:\n            max_sum = sum_list\n            result = i\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for sublist in lists:\n        sum = 0\n        for elem in sublist:\n            sum += elem\n        if sum > max_sum:\n            max_sum = sum\n            result = sublist\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    def find_max_sum(sublist):\n        '''\n        Helper function to find the maximum sum of a sublist.\n        '''\n        total = 0\n        for num in sublist:\n            total += num\n        return total\n\n    max_sum = float('-inf')\n    max_sublist = None\n\n    for sublist in lists:\n        sublist_sum = find_max_sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sublist = sublist\n\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum variable\n    max_sum = float('-inf')\n    # Initialize max_list variable\n    max_list = []\n    \n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize current_sum variable\n        current_sum = 0\n        # Loop through each element in the current list\n        for num in lst:\n            # Add the current element to the current_sum\n            current_sum += num\n        # If the current_sum is greater than max_sum, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            result = lst\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        sub_sum = sum(lists[i])\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            result = [lists[i]]\n        elif sub_sum == max_sum:\n            result.append(lists[i])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(i + 1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_run_start = 0\n    current_run_start = 0\n    current_run_length = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run_length += 1\n            if current_run_length > max_run:\n                max_run = current_run_length\n                max_run_start = current_run_start\n        else:\n            current_run_length = 0\n            current_run_start = i + 1\n    \n    return test_str[max_run_start:max_run_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables to keep track of max run and current run lengths\n    max_run_length = 0\n    curr_run_length = 0\n\n    # iterate through the string\n    for char in test_str:\n        # if the current character is uppercase, increment the current run length\n        if char.isupper():\n            curr_run_length += 1\n        # if the current character is not uppercase, reset the current run length and check if it's longer\n        else:\n            if curr_run_length > max_run_length:\n                max_run_length = curr_run_length\n            curr_run_length = 0\n\n    # check if the current run length is longer than the max run length\n    if curr_run_length > max_run_length:\n        max_run_length = curr_run_length\n\n    # return the max run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    max_run = 0\n    run_length = 0\n    uppercase_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            run_length = 0\n\n        if uppercase_count > max_run:\n            max_run = uppercase_count\n            run_length = 1\n        elif uppercase_count == max_run and char.isupper():\n            run_length += 1\n        else:\n            pass\n\n        if uppercase_count == len(test_str):\n            max_run = run_length\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables for the current run of uppercase characters and the maximum run\n    current_run = 0\n    max_run = 0\n\n    # iterate over the characters in the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the current run by 1\n            current_run += 1\n        else:\n            # if the character is not uppercase, reset the current run to 0\n            current_run = 0\n\n        # update the maximum run if the current run is greater than the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize max_run and current_run variables\n    max_run = 0\n    current_run = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, add 1 to the current_run and compare it to max_run\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        # if the current character is not uppercase, reset the current_run to 0\n        else:\n            current_run = 0\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n            elif current_run == max_run:\n                uppercase_count += 1\n        else:\n            if max_run > 0:\n                uppercase_count += max_run\n            max_run = 0\n            current_run = 0\n    if max_run > 0:\n        uppercase_count += max_run\n    return uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    run_len = 1\n    run_count = 1\n    max_run = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            run_count += 1\n        else:\n            if run_count > max_run:\n                max_run = run_count\n            if run_len > max_run:\n                max_run = run_len\n            run_start = i\n            run_len = 1\n            run_count = 1\n\n    if run_count > max_run:\n        max_run = run_count\n    if run_len > max_run:\n        max_run = run_len\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Check if the input list is empty\n    if len(nums) == 0:\n        return None\n    \n    # Initialize the first odd number variable to None\n    first_odd_num = None\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, set the first_odd_num variable to the number\n            first_odd_num = num\n    \n    # Return the first odd number\n    return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # No odd numbers in the list were found"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # loop through the tuples\n    for tup in test_tup:\n        # check if the tuple contains the K value\n        if K in tup:\n            return True\n    \n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n\n    # Iterate through the tuple and count the number of occurrences of each element\n    for num in test_tup:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Check if the count of the Kth element is greater than zero\n    if count_dict[K] > 0:\n        print(\"The tuple contains the Kth element.\")\n    else:\n        print(\"The tuple does not contain the Kth element.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple of tuples as input and checks if the given K value exists in the tuple.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and the value of k as a parameter.\n    It checks if the tuple contains the k or not. If the tuple contains k,\n    it returns True, otherwise it returns False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        if len(set(test_tup).intersection(set(K))) == len(K):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the tuple contains the given key or not\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if all elements are smaller, then return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Element of first tuple is greater than its corresponding element in the second tuple.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]