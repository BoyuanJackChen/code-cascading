[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty set to store shared elements\n    shared_elements = set()\n\n    # iterate through each element in the first list\n    for element in test_tup1:\n        # check if the element is present in the second list\n        if element in test_tup2:\n            # if it is, add it to the shared_elements set\n            shared_elements.add(element)\n\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing all the elements that are\n    present in both the input tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set of the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set of the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared.append(item)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert lists to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the shared elements in both sets\n    shared_elements = set1.intersection(set2)\n    # convert back to list and return\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return sorted(list(common_elements))"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return False\n    \n    # Check if the number is a multiple of 2\n    if n % 2 == 0:\n        return True\n    \n    # Check if the number is a multiple of 3\n    if n % 3 == 0:\n        return True\n    \n    # Check if the number is a multiple of 5\n    if n % 5 == 0:\n        return True\n    \n    # Check if the number is a multiple of 7\n    if n % 7 == 0:\n        return True\n    \n    # Check if the number is a multiple of 11\n    if n % 11 == 0:\n        return True\n    \n    # Check if the number is a multiple of 13\n    if n % 13 == 0:\n        return True\n    \n    # Check if the number is a multiple of 17\n    if n % 17 == 0:\n        return True\n    \n    # Check if the number is a multiple of 19\n    if n % 19 == 0:\n        return True\n    \n    # Check if the number is a multiple of 23\n    if n % 23 == 0:\n        return True\n    \n    # Check if the number is a multiple of 29\n    if n % 29 == 0:\n        return True\n    \n    # Check if the number is a multiple of 31\n    if n % 31 == 0:\n        return True\n    \n    # Check if the number is a multiple of 37\n    if n % 37 == 0:\n        return True\n    \n    # Check if the number is a multiple of 41\n    if n % 41 == 0:\n        return True\n    \n    # Check if the number is a multiple of 43\n    if n % 43 == 0:\n        return True\n    \n    # Check if the number is a multiple of 47\n    if n % 47 == 0:\n        return True\n    \n    # Check if the number is a multiple of 53\n    if n % 53 == 0:\n        return True\n    \n    # Check if the number is a multiple of 59\n    if n % 59 == 0:\n        return True\n    \n    # Check if the number is a multiple of 61\n    if n % 61 == 0:\n        return True\n    \n    # Check if the number is a multiple of 67\n    if n % 67 == 0:\n        return True\n    \n    # Check if the number is a multiple of 71\n    if n % 71 == 0:\n        return True\n    \n    # Check if the number is a multiple of 73\n    if n % 73 == 0:\n        return True\n    \n    # Check if the number is a multiple of 79\n    if n % 79 == 0:\n        return True\n    \n    # Check if the number is a multiple of 83\n    if n % 83 == 0:\n        return True\n    \n    # Check if the number is a multiple of 89\n    if n % 89 == 0:\n        return True\n    \n    # Check if the number is a multiple of 97\n    if n % 97 == 0:\n        return True\n    \n    # Check if the number is a multiple of 101\n    if n % 101 == 0:\n        return True\n    \n    # Check if the number is a multiple of 103\n    if n % 103 == 0:\n        return True\n    \n    # Check if the number is a multiple of 107\n    if n % 107 == 0:\n        return True\n    \n    # Check if the number is a multiple of 109\n    if n % 109 == 0:\n        return True\n    \n    # Check if the number is a multiple of 113\n    if n % 113 == 0:\n        return True\n    \n    # Check if the number is a multiple of 127\n    if n % 127 == 0:\n        return True\n    \n    # Check if the number is a multiple of 131\n    if n % 131 == 0:\n        return True\n    \n    # Check if the number is a multiple of 137\n    if n % 137 == 0:\n        return True\n    \n    # Check if the number is a multiple of 139\n    if n % 139 == 0:\n        return"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not prime, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check for divisors\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If none of the divisors were found, then n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n < 2 or n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if the number is not prime, and False otherwise.\n    '''\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = hq.nsmallest(n, nums)\n\n    # Build the max heap from the min heap\n    max_heap = []\n    for num in nums:\n        if num > min_heap[0]:\n            hq.heappushpop(max_heap, num)\n        elif num < min_heap[0]:\n            min_heap[0] = num\n\n    # Return the largest n elements of the max heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # convert the list of numbers into a min-heap\n    heap = hq.nlargest(n, nums)\n\n    # extract the largest n numbers from the heap\n    largest_nums = [heapq.heappop(heap) for _ in range(n)]\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = hq.nsmallest(n, nums)\n    # Return the min heap as the result\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    hq.heapify(max_heap) # convert the list to a max heap\n    \n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    \n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    heap = hq.nlargest(n, nums)\n    # Convert the heap back to a list and return it\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # build a max heap from the first n numbers in the list\n    hq.heapify(nums[:n])\n    \n    # remove the smallest number from the heap\n    for _ in range(n, len(nums)):\n        max_num = hq.heappop(nums)\n        # add the next number to the heap\n        hq.heappush(nums, max_num)\n    \n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = [-x for x in nums]\n    hq.heapify(max_heap)\n    \n    while n > 1:\n        hq.heappop(max_heap)\n        n -= 1\n    \n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        return x & (x-1) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x % 2 == 0: \n            x //= 2 \n        else: \n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    count = 0\n    while x!= 1:\n        if x & 1 == 1:\n            count += 1\n        x >>= 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0 or x == 1:\n        return True\n    elif x & (x-1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x-1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert both numbers to binary strings\n    num1 = bin(x)[2:]\n    num2 = bin(y)[2:]\n    # Compare the bit positions at which the numbers differ\n    diff_bit = [x!= y for x, y in zip(num1, num2)]\n    # Count the number of different bit positions\n    diff_count = sum(diff_bit)\n    # Check if the count is one or zero\n    if diff_count == 1 or diff_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x & (x-1) == 0:\n        return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    # check if x is a power of 2\n    if x == 0 or x == 1:\n        return True\n    while x!= 0:\n        if x & 1!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x & 1 == 1: \n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize a boolean variable to keep track of the differences\n    has_difference = False\n\n    # Iterate over all bits of the input number\n    for i in range(32):\n        # Calculate the mask to check if the corresponding bit in both numbers is set or not\n        mask = 1 << i\n\n        # If the bit in the first number is set and not set in the second number, return False\n        if (x & mask) and not (x_prime & mask):\n            has_difference = True\n            break\n\n        # If the bit in the second number is set and not set in the first number, return False\n        if (x_prime & mask) and not (x & mask):\n            has_difference = True\n            break\n\n    # If all bits are the same, return True\n    return not has_difference"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the string using regex pattern\n    long_words = [] # initialize an empty list to store long words\n    \n    for word in words:\n        if len(word) >= 4: # check if the length of the word is at least 4\n            long_words.append(word) # if yes, append the word to the list\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define the regular expression pattern for finding words with at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Find all matches using the regular expression pattern\n    matches = re.findall(pattern, text)\n    \n    # Return the list of words that meet the criteria\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word has at least 4 characters\n        if len(word) >= 4:\n            # Append the word to the result list\n            result.append(word)\n    # Return the result list\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for num in nums:\n        # find the square of the number and add it to a new list\n        squared_num = num ** 2\n        squared_nums.append(squared_num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_str = str[i:j+1]\n            if sub_str == str:\n                min_rotations = min(min_rotations, j-i+1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # get the length of the string\n    n = len(str)\n    # get the minimum number of rotations required\n    count = 0\n    while n > 1:\n        count += 1\n        # calculate the new length of the string\n        n = n // 2\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Create a new string by rotating the original string by 1\n        rotated_str = str[-(i+1):] + str[:-i-1]\n        \n        # Check if the new string is equal to the original string\n        if rotated_str == str:\n            # If the new string is equal to the original string, increment the minimum number of rotations by 1\n            min_rotations = min(min_rotations, i+1)\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the frequency of each character in the reversed string\n    rev_freq = {}\n    for char in str[::-1]:\n        if char in rev_freq:\n            rev_freq[char] += 1\n        else:\n            rev_freq[char] = 1\n    \n    # Find the intersection of the two dictionaries\n    intersection = {key: freq[key] for key in freq if key in rev_freq}\n    \n    # Calculate the minimum number of rotations required\n    min_rotations = 0\n    for key in intersection:\n        if intersection[key] > 1:\n            min_rotations += (intersection[key] // 2) + (intersection[key] % 2)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    str_length = len(str)\n    count = 0\n    for i in range(str_length // 2):\n        if str[i]!= str[str_length - i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    # Initialize the minimum number of rotations to infinity \n    min_rot = float('inf') \n    # Loop through all possible rotations of the string \n    for i in range(n): \n        for j in range(i+1, n): \n            # Compare the two substrings and update min_rot if the first substring is greater than the second \n            if str[i:j+1] > str[j:i+1]: \n                min_rot = min(min_rot, j-i) \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # Check if the string is empty or consists only of a single character\n    if len(str) < 2:\n        return 0\n    \n    # Initialize variables for the current string and the result\n    current_str = str\n    count = 0\n    \n    # Iterate through the string and find the minimum number of rotations required to get the same string\n    while current_str!= str:\n        count += 1\n        current_str = current_str[1:] + current_str[:1]\n        \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    str = str.lower()\n    n = len(str)\n\n    # If the string is not of even length, then it cannot be rotated\n    if n % 2!= 0:\n        return \"Cannot rotate.\"\n\n    # Initialize two pointers, one at the beginning and the other at the end of the string\n    left, right = 0, n - 1\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Initialize the minimum number of rotations required\n    min_rotations = n\n\n    # Iterate through the string and update the minimum number of rotations required\n    while left < right:\n        # Find the pivot point to split the string into two halves\n        pivot_char = str[left]\n        count_left = freq[pivot_char]\n        count_right = n - freq[pivot_char]\n        pivot_index = min(left + count_left - 1, right - count_right + 1)\n        if pivot_index == left:\n            pivot_index = left + 1\n        pivot_char = str[pivot_index]\n        freq[pivot_char] -= 1\n        freq[str[left]] -= 1\n        freq[str[right]] -= 1\n        str[left], str[pivot_index] = str[pivot_index], str[left]\n        str[right], str[pivot_char] = str[pivot_char], str[right]\n\n        # Update the minimum number of rotations required\n        count_left = freq[str[left]]\n        count_right = freq[str[right]]\n        new_count_left = count_right - 1 if str[left] < pivot_char else count_left - 1\n        new_count_right = count_left - 1 if str[right] < pivot_char else count_right - 1\n        min_rotations = min(min_rotations, new_count_left + new_count_right)\n\n        # Move the left pointer towards the middle of the string\n        left += count_left\n        # Move the right pointer towards the beginning of the string\n        right -= count_right\n\n    # If the last two characters are not equal, then a rotation is required to make them equal\n    if str[left]!= str[right]:\n        min_rotations += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    min_rotations = 0\n    prev_char = str[0]\n    \n    # Loop through the string\n    for char in str:\n        if char == prev_char:\n            continue\n        else:\n            min_rotations += 1\n            prev_char = char\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through each possible rotation\n    for i in range(1, n):\n        # Initialize the current and rotated strings\n        current = str[i:n]\n        rotated = str[:i] + str[i:]\n\n        # If the current and rotated strings are equal, increment the result variable\n        if current == rotated:\n            result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\",1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into two parts - first part excluding the character and second part including the character\n        parts = s.split(ch)\n        # Check if there are two parts left\n        if len(parts) == 2:\n            # Remove the last occurrence of the character\n            parts[0] = parts[0][:-1]\n        # Join the two parts and return the result\n        return ''.join(parts)\n    # If the character is not present in the string, return the original string\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    if ch in s:\n        return s[:s.index(ch)+1]+s[s.index(ch)+1:-1]+s[-s.index(ch):]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # remove first occurrence\n        s = s.replace(ch, '')\n        # remove last occurrence\n        s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize variables\n    start = 0\n    end = len(s)-1\n    \n    # Find the index of first occurrence of the character\n    while s[start]!= ch and start < end:\n        start += 1\n    \n    # If the character is not present in the string, return the original string\n    if start == end:\n        return s\n    \n    # Find the index of last occurrence of the character\n    while s[end]!= ch and start < end:\n        end -= 1\n    \n    # If the character is not present in the string, return the original string\n    if start == end:\n        return s\n    \n    # Return the substring between the first occurrence of the character and the second occurrence of the character\n    return s[start+1:end]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.replace(ch,'',1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the string is empty or only contains one character\n    if len(s) <= 1:\n        return s\n    \n    # find the index of the first occurrence of the character\n    i = s.find(ch)\n    \n    # if the character is not found, return the original string\n    if i == -1:\n        return s\n    \n    # remove the first occurrence and find the index of the last occurrence\n    j = s.rfind(ch)\n    \n    # if the character is not found, return the original string\n    if j == -1:\n        return s\n    \n    # remove the last occurrence and return the modified string\n    return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s or not ch:\n        return s\n\n    return s.replace(ch, \"\").replace(ch, \"\")[:len(s)-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    s = list(s)\n    i = 0\n    while i < len(s) and s[i] == ch:\n        i += 1\n    j = len(s) - 1\n    while j >= 0 and s[j] == ch:\n        j -= 1\n    if i < j:\n        s = s[:i] + s[j+1:]\n    else:\n        s = s[:j+1] + s[i+1:]\n    return ''.join(s)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j][j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    for i in range(n):\n        M[i].sort()\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # Get the length of the matrix\n    n = len(M)\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Initialize two variables to keep track of the maximum and minimum values in the rows\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # Loop through each row of the matrix\n    for i in range(n):\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        \n        # If the sum is greater than the current maximum, update the maximum\n        if row_sum > max_val:\n            max_val = row_sum\n        \n        # If the sum is less than the current minimum, update the minimum\n        if row_sum < min_val:\n            min_val = row_sum\n            \n        # Create a new list to store the row with its sum and its index\n        row_list = [row_sum, i]\n        \n        # Append the row list to the sorted matrix list\n        sorted_M.append(row_list)\n    \n    # Sort the sorted matrix list using the first element of each row list (sum) as the sorting key\n    sorted_M.sort(key=lambda x: x[0])\n    \n    # Extract the indices of the sorted rows from the sorted matrix list and create a new matrix with only those rows\n    result_matrix = [M[i][1] for i in sorted_M]\n    \n    return result_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the result matrix with zeros\n    N = len(M)\n    result = [[0 for j in range(N)] for i in range(N)]\n\n    # Iterate through each row of the matrix\n    for i in range(N):\n        # Initialize a variable to store the sum of the current row\n        row_sum = 0\n        # Iterate through each element in the current row\n        for j in range(N):\n            # Add the value of the current element to the row sum\n            row_sum += M[i][j]\n            # Store the current element in the result matrix\n            result[i][j] = M[i][j]\n        # Sort the current row in ascending order\n        result[i] = sorted(result[i])\n        # Add the row sum to the row sum in the result matrix\n        for j in range(N):\n            result[i][j] += row_sum\n\n    # Return the sorted matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows of the matrix based on the sum of their rows\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[row[i] for row in sorted_rows] for i in range(len(sorted_rows[0]))]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a new matrix to store the sorted matrix\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n    \n    # Loop through each row of the matrix\n    for i in range(rows):\n        # Initialize a variable to store the sum of the current row\n        row_sum = 0\n        \n        # Loop through each column of the current row\n        for j in range(cols):\n            # Add the current element to the row sum\n            row_sum += M[i][j]\n        \n        # Sort the elements of the current row in ascending order\n        sorted_row = sorted(M[i])\n        \n        # Loop through each column of the current row and add the sorted elements to the sorted matrix\n        for k in range(cols):\n            sorted_matrix[i][k] = sorted_row[k]\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Sort the matrix in ascending order of sum of its rows\n    for i in range(rows):\n        for j in range(cols-i-1):\n            if sum(M[i:i+j+1]) > sum(M[i:i+j]):\n                M[i:i+j+1], M[i:i+j] = M[i:i+j], M[i:i+j+1]\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Loop over all rows and sort them according to their sum\n    for i in range(len(M)):\n        # Use the bubble sort algorithm to sort the row\n        n = len(M[i])\n        for j in range(n-1):\n            # Swap rows if the sum of the row is greater than the sum of the next row\n            if M[i][j] + M[i][j+1] > M[i+1][j] + M[i+1][j+1]:\n                M[i], M[i+1] = M[i+1], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    n = len(M)\n    # find the sum of each row\n    sums = [sum(M[i]) for i in range(n)]\n    # sort the matrix based on the sums\n    for i in range(n):\n        for j in range(i+1, n):\n            if sums[i] < sums[j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Sort the matrix in ascending order based on the sum of each row\n    for j in range(m):\n        for i in range(n-1):\n            for k in range(i+1, n):\n                if M[i][j] + M[k][j] < M[i][j] + M[i][k]:\n                    M[i], M[k] = M[k], M[i]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h #formula to calculate the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return (1/6)*l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h # forming the formula for volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in length, width, and height as input parameters and returns the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3 # calculating volume using formula for a triangular prism\n    return volume # returning the volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = 1/3 * l * b * h\n\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # Define pattern for checking sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]{1,}\\_\\w+'\n    # Use re.findall() function to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Return True if there are matches and False otherwise\n    return True if len(matches) > 0 else False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<!_)([a-z]+(?:_[a-z]+)*)_(?![a-z])\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]*_[a-z]*'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+)_([a-z]+)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define regular expression pattern for checking if the input string contains sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Check if the input string matches the pattern\n    match = re.search(pattern, text)\n    \n    # If the input string matches the pattern, return True, else return False\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define the pattern for matching lowercase letters followed by underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # use the re.search() function to search for the pattern in the input string\n    result = re.search(pattern, text)\n    # check if the result is not None\n    if result:\n        # return True if the pattern is found in the string\n        return True\n    else:\n        # return False if the pattern is not found in the string\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^(?i)[a-z]*_[a-z]*$'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z][a-z0-9]*_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    underscore = re.compile(r'\\b_+\\b')\n    matches = underscore.findall(text)\n\n    if len(matches) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    chars_to_remove = set(string)\n    chars_to_remove.remove(' ')\n    new_string = ''.join(char for char in string if char not in chars_to_remove)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # create a list of unique characters in the second string\n    set_chars = set(string)\n\n    # create an empty list to store the characters to be removed from the first string\n    result = []\n\n    # iterate through each character in the first string\n    for char in string:\n        # if the character is not present in the second string, add it to the result list\n        if char not in set_chars:\n            result.append(char)\n\n    # join the characters in the result list into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and removes characters from the first string which are present in the second string.\n    \"\"\"\n    string1 = list(string1)\n    for char in string2:\n        if char in string1:\n            string1.remove(char)\n    return ''.join(string1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > NO_OF_CHARS:\n        return \"Error: The string length is greater than the constant value of NO_OF_CHARS.\"\n    \n    list_string = list(string)\n    list_chars = list(set(string) - set(string.replace(\" \", \"\")))\n    \n    for char in list_chars:\n        list_string.remove(char)\n    \n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_set = set(string)\n    second_set = set(string)\n    first_set.discard(max(first_set, key=ord)) # remove the character with the highest ASCII value\n    return ''.join(c for c in string if c not in first_set)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string:\n            string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    char_list = list(string)\n\n    # remove characters from first list which are present in second list\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n\n    # convert list of characters back to string and return\n    return ''.join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string1, string2): \n    '''\n    This function takes two strings as input and returns the first string without any characters that are present in the second string.\n    '''\n\n    # Convert both strings to lists of characters\n    char_list1 = list(string1)\n    char_list2 = list(string2)\n\n    # Create a set of characters from the second string\n    set_of_chars = set(char_list2)\n\n    # Iterate over the characters of the first string and check if they are present in the set of characters\n    for char in char_list1:\n        if char in set_of_chars:\n            # If a character is present in the second string, remove it from the first string\n            char_list1.remove(char)\n\n    # Convert the first list back to a string and return it\n    result = ''.join(char_list1)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.remove(char_list[i])\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set()\n    for i in range(NO_OF_CHARS):\n        char_set.add(chr(i))\n    \n    list_string = []\n    for char in string:\n        if char not in char_set:\n            list_string.append(char)\n    \n    return ''.join(list_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_nums = set()\n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    # check if the set has any elements in it\n    if len(unique_nums) < len(arraynums):\n        # if it does, return True\n        return True\n    else:\n        # if it doesn't, return False\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = set()\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.append(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements in the array\n    element_dict = {}\n    # loop through the array and add each element to the dictionary\n    for num in arraynums:\n        element_dict[num] = True\n    # loop through the dictionary and check if any element is found that has a value of True\n    for key in element_dict:\n        if element_dict[key] == True:\n            return True\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a dictionary to store the numbers and their occurrences in the array\n    num_occurrences = {}\n    for num in arraynums:\n        if num in num_occurrences:\n            num_occurrences[num] += 1\n        else:\n            num_occurrences[num] = 1\n    # Iterate through the dictionary to check if any number appears more than once\n    for num in num_occurrences:\n        if num_occurrences[num] > 1:\n            return True\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x <= 199:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is a woodball or not.\n\n    The function checks if the given number is a valid woodball by checking if the \n    sum of its digits is odd and the sum of its digits raised to the power of three \n    is odd.\n\n    Args:\n        x (int): The number to check.\n\n    Returns:\n        bool: True if the number is a woodball, False otherwise.\n    \"\"\"\n\n    digits = [int(digit) for digit in str(x)]\n    sum_digits = sum(digits)\n    sum_digits_raised_to_the_power_of_three = sum(digit ** 3 for digit in digits)\n\n    return sum_digits % 2 == 1 and sum_digits_raised_to_the_power_of_three % 2 == 1"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return \"Woodball\"\n    elif x == 2: \n        return \"Woodball\"\n    elif x == 3: \n        return \"Woodball\"\n    elif x == 4: \n        return \"Woodball\"\n    elif x == 5: \n        return \"Woodball\"\n    elif x == 6: \n        return \"Woodball\"\n    elif x == 7: \n        return \"Woodball\"\n    elif x == 8: \n        return \"Woodball\"\n    elif x == 9: \n        return \"Woodball\"\n    elif x == 10: \n        return \"Woodball\"\n    elif x == 11: \n        return \"Woodball\"\n    elif x == 12: \n        return \"Woodball\"\n    elif x == 13: \n        return \"Woodball\"\n    elif x == 14: \n        return \"Woodball\"\n    elif x == 15: \n        return \"Woodball\"\n    elif x == 16: \n        return \"Woodball\"\n    elif x == 17: \n        return \"Woodball\"\n    elif x == 18: \n        return \"Woodball\"\n    elif x == 19: \n        return \"Woodball\"\n    elif x == 20: \n        return \"Woodball\"\n    elif x == 21: \n        return \"Woodball\"\n    elif x == 22: \n        return \"Woodball\"\n    elif x == 23: \n        return \"Woodball\"\n    elif x == 24: \n        return \"Woodball\"\n    elif x == 25: \n        return \"Woodball\"\n    elif x == 26: \n        return \"Woodball\"\n    elif x == 27: \n        return \"Woodball\"\n    elif x == 28: \n        return \"Woodball\"\n    elif x == 29: \n        return \"Woodball\"\n    elif x == 30: \n        return \"Woodball\"\n    elif x == 31: \n        return \"Woodball\"\n    elif x == 32: \n        return \"Woodball\"\n    elif x == 33: \n        return \"Woodball\"\n    elif x == 34: \n        return \"Woodball\"\n    elif x == 35: \n        return \"Woodball\"\n    elif x == 36: \n        return \"Woodball\"\n    elif x == 37: \n        return \"Woodball\"\n    elif x == 38: \n        return \"Woodball\"\n    elif x == 39: \n        return \"Woodball\"\n    elif x == 40: \n        return \"Woodball\"\n    elif x == 41: \n        return \"Woodball\"\n    elif x == 42: \n        return \"Woodball\"\n    elif x == 43: \n        return \"Woodball\"\n    elif x == 44: \n        return \"Woodball\"\n    elif x == 45: \n        return \"Woodball\"\n    elif x == 46: \n        return \"Woodball\"\n    elif x == 47: \n        return \"Woodball\"\n    elif x == 48: \n        return \"Woodball\"\n    elif x == 49: \n        return \"Woodball\"\n    elif x == 50: \n        return \"Woodball\"\n    else: \n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 10 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x >= 10:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return False\n    elif x % 2 == 1 and x % 3 == 0 and x % 5 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    woodball = [1, 4, 5, 10, 20, 50, 100, 200]\n\n    if x in woodball:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 13 or x == 23 or x == 33 or x == 43 or x == 53 or x == 63 or x == 73 or x == 83 or x == 93 or x == 103 or x == 113 or x == 123 or x == 133 or x == 143 or x == 153 or x == 163 or x == 173 or x == 183 or x == 193 or x == 203 or x == 213 or x == 223 or x == 233 or x == 243 or x == 253 or x == 263 or x == 273 or x == 283 or x == 293 or x == 303 or x == 313 or x == 323 or x == 333 or x == 343 or x == 353 or x == 363 or x == 373 or x == 383 or x == 393 or x == 403 or x == 413 or x == 423 or x == 433 or x == 443 or x == 453 or x == 463 or x == 473 or x == 483 or x == 493 or x == 503: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num % 2 == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num*10) + (num % 10)\n        num //= 10\n    return rev_num!= (rev_num*2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    reverse_str = str(num)[::-1]\n    # Convert the reversed string back to a number and compare to the original number\n    return (int(reverse_str) + 1) * 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num = str(num)\n    # reverse the string\n    rev_num = num[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_num)\n    # check if the original number is one less than twice its reverse\n    if num < (2 * rev_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    \n    # Convert the reversed string to an integer\n    rev_int = int(rev_str)\n    \n    # Check if the original number is one less than twice its reverse\n    if num-1 < 2*rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    reversed_str = str(num)[::-1]\n    # calculate the reversed number\n    reversed_num = int(reversed_str)\n    # check if the original number minus the reversed number is one less than 2 times the reversed number\n    if num-reversed_num == 2*reversed_num-1:\n        print(f'{num} is one less than twice its reverse.')\n    else:\n        print(f'{num} is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return num == rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to integer\n    rev_num = int(rev_str)\n    # check if the reverse number is one less than twice the original number\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num = num // 10\n    return reverse == 2 * reverse"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    count = 0\n\n    for i in arr:\n        if i < 0:\n            return -1\n\n        if i == 0:\n            count += 1\n        else:\n            if count > 0:\n                max_num = max(max_num, i*10**count)\n                count = 0\n            else:\n                max_num = max(max_num, i)\n\n    if count > 0:\n        max_num = max(max_num, arr[-1]*10**count)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # initialize variables to keep track of the largest and current numbers\n    max_num = 0\n    curr_num = 0\n\n    # loop through the list of digits\n    for digit in arr:\n        # calculate the next number by appending the current number and the digit\n        next_num = curr_num * 10 + digit\n        # update the largest number if the next number is greater than the current largest number\n        if next_num > max_num:\n            max_num = next_num\n            # update the current number to be the next number\n            curr_num = next_num\n\n    # return the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num = max(max_num, arr[i]+arr[i-1])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables\n    max_num = arr[0]\n    max_len = len(str(max_num))\n    result = max_num\n\n    # Iterate over all possible numbers and check if they can be formed with the given digits\n    for num in arr:\n        num_str = str(num)\n        num_len = len(num_str)\n\n        # Check if the current number is less than or equal to 9000000000000000000000000000000\n        if num <= 9000000000000000000000000000000:\n            # Check if the current number can be formed by adding the next digit to the maximum number\n            for i in range(max_len, num_len):\n                new_num = int(max_num) + int(num_str[i])\n                # Check if the new number is greater than the maximum number found so far\n                if new_num > max_num:\n                    max_num = new_num\n                    max_len = num_len\n                    result = num\n\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def backtrack(curr_num, i):\n        if i == len(arr):\n            return curr_num\n        else:\n            return max(curr_num, backtrack(curr_num * 10 + arr[i], i+1))\n\n    return backtrack(1, 0)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))\n    max_num = 0\n    for i in range(1, 10):\n        temp = 0\n        for j in range(len(arr)):\n            if arr[j] == i:\n                temp += 1\n        if temp > max_num:\n            max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_sum = arr[0]\n    for i in range(1, n):\n        curr_sum = arr[i]\n        for j in range(i):\n            curr_sum += arr[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr:\n        return 0\n    \n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    # check if both numbers are of the same sign\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y > 0:\n        return \"The sign of the two integers are the same\"\n    else:\n        return \"The sign of the two integers are different\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y <= 0 and y*x <= 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 and y == 0: \n        print(\"Both numbers are zero.\") \n        return \n    elif x == 0: \n        print(\"The second number is zero, and the first number is positive.\") \n        return \n    elif y == 0: \n        print(\"The first number is zero, and the second number is positive.\") \n        return \n    elif x > 0 and y > 0: \n        print(\"Both numbers are positive.\") \n        return \n    elif x < 0 and y < 0: \n        print(\"Both numbers are negative.\") \n        return \n    elif x < 0 and y > 0: \n        print(\"The second number is positive, and the first number is negative.\") \n        return \n    elif x > 0 and y < 0: \n        print(\"The first number is negative, and the second number is positive.\") \n        return "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if the two numbers have the same sign\n    if x*y >= 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    \"\"\"\n    This function takes two integers as input and returns True if the two integers have opposite sign, else False.\n    \"\"\"\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    \n    # recursive case\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 8 * is_octagonal(n-1) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Helper function to calculate the nth triangular number\n    def triangular_number(n): \n        if n == 1: \n            return 1\n        elif n == 2: \n            return 3\n        else: \n            return 3 * triangular_number(n - 1) + 1\n\n    # Calculate the nth triangular number\n    nth_triangular = triangular_number(n)\n\n    # Calculate the nth octagonal number\n    nth_octagonal = nth_triangular * (2 * triangular_number(n - 1) - 1) // 3\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    for i in range(1, n+1):\n        j = n - i + 1\n        for k in range(2):\n            print(j, end=' ')\n            j += 1\n        print()\n\nn = int(input(\"Enter the value of n: \"))\nis_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def square(x):\n        return x*x\n    \n    def octagonal(n):\n        return n*square(n+1)\n    \n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + 8 * n) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def helper(a, b, c, d):\n        return a**2 + b**2 + c**2 + d**2 == n**2\n\n    a = 1\n    b = 8\n    c = 27\n    d = 64\n    while not helper(a, b, c, d):\n        if a**2 + b**2 > c**2 + d**2:\n            a += 1\n        else:\n            b -= 1\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_number(n):\n        if n == 0:\n            return 0\n        return (2 * (n - 1) ** 2) + (1 * (n - 1) ** 2)\n    \n    return get_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if it's an octagonal number and False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    if n % 2 == 0:\n        return False\n    a = 1\n    while n >= 10:\n        n -= 10\n        a *= 10\n    return a ** 3 == n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                counts[substring] += 1\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of characters in the substrings\n    char_count = defaultdict(int)\n\n    # iterate through the string and count the number of substrings with sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if sum(int(c) for c in substr) == len(substr):\n                char_count[substr] += 1\n\n    # return the count of substrings\n    return sum(char_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    # store the count of each substring with sum of digits equal to their length\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 == len(str(sum(map(int, s[i:j+1])))):\n                count[j - i + 1] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(n):\n        dp[i+1] = dp[i]\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j-i+1:\n                dp[i+1] += dp[j]\n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    dp = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        dp[i] = dp[i-1] + 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(int(s[k]) for k in range(i, j+1)) == j-i+1:\n                count += dp[j] - dp[i-1]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            dp[int(sum(digit) * len(digit)) % 1000000007] += 1\n    return sum(dp.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            count_dict[digits_sum] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # iterate through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                count_dict[substring] += 1\n\n    # return the total count of substrings\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings(s, prev_sum=0, count=0):\n        if not s:\n            return count\n        if s[-1] == '0':\n            return count_substrings(s[:-1], prev_sum, count)\n        curr_sum = sum(int(d) for d in s)\n        if curr_sum == len(s):\n            return count_substrings(s[:-1], prev_sum + curr_sum, count + 1)\n        if curr_sum < len(s):\n            return count_substrings(s[:-1], prev_sum, count)\n        return count_substrings(s[:-1], prev_sum, count)\n\n    count = 0\n    for i in range(len(s)):\n        count += count_substrings(s[i:])\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "The problem can be solved using a dictionary to count the number of substrings with each length of digits. Let's write the code to solve this problem.<|im_sep|>"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to be the first element in the list\n    smallest = xs[0]\n    # iterate over the rest of the elements in the list\n    for num in xs[1:]:\n        # if the current number is smaller than the smallest number, update the smallest number\n        if num < smallest:\n            smallest = num\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]  # assuming the first element is the smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # find the first number in the list\n    smallest = xs[0]\n\n    # iterate through the list and update the smallest number as needed\n    for x in xs:\n        if x < smallest:\n            smallest = x\n\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max_diff to be the first element in the list\n    max_diff = test_list[0]\n\n    # Iterate over the rest of the list\n    for i in range(1, len(test_list)):\n        # Calculate the difference between current element and next element in the list\n        diff = test_list[i] - test_list[i+1]\n        # Update max_diff if the current difference is greater than max_diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns the maximum difference between available pairs in the list.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the list.\n    \"\"\"\n    # Convert the list of tuples to a list of lists\n    flattened_list = [list(t) for t in test_list]\n\n    # Sort the flattened list of tuples\n    sorted_list = sorted(flattened_list)\n\n    # Initialize the maximum difference to be the first difference between pairs\n    max_diff = sorted_list[1][1] - sorted_list[0][1]\n\n    # Loop through the sorted list of tuples and update the maximum difference if a pair is found that increases the difference\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i+1][1] - sorted_list[i][1] > max_diff:\n            max_diff = sorted_list[i+1][1] - sorted_list[i][1]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize two variables to store the minimum and maximum values in the list\n    min_val = test_list[0][0]\n    max_val = test_list[0][1]\n\n    # Iterate through the list of tuples and update the minimum and maximum values as needed\n    for item in test_list:\n        if item[0] < min_val:\n            min_val = item[0]\n        if item[1] > max_val:\n            max_val = item[1]\n\n    # Calculate the maximum difference between the minimum and maximum values\n    max_diff = max_val - min_val\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list and update the count_dict\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n\n    # Iterate through the count_dict and find the maximum difference\n    for elem in count_dict:\n        if count_dict[elem] > 1:\n            for i in range(2, count_dict[elem] + 1):\n                diff = i * elem\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i][0] - test_list[j][0]))\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(1, len(pairs)):\n        diff = pairs[i][0] - pairs[i-1][0]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples with subject name and marks\n    subject_marks_list = [(subject, marks) for subject, marks in subjectmarks]\n\n    # sort the list of tuples based on the marks\n    sorted_list = sorted(subject_marks_list, key=lambda x: x[1])\n\n    # create a dictionary to store the subject and marks\n    subject_marks_dict = {}\n\n    # iterate over the sorted list and add each subject and marks to the dictionary\n    for subject, marks in sorted_list:\n        subject_marks_dict[subject] = marks\n\n    return subject_marks_dict"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        first_element = data_list[0]\n        remaining_elements = data_list[1:]\n        return first_element + recursive_list_sum(remaining_elements)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if the list is empty or contains only one element\n    if len(data_list) == 1:\n        return data_list[0]\n    # Flatten the list\n    flattened_list = [x for sublist in data_list for x in sublist]\n    # Recursively sum the flattened list\n    return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result += flatten_list(item)\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    total = sum(flattened_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n\n    return sum(recursive_list_sum(item) for item in data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(item) for item in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the input list is empty, return 0.\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursive case: Flatten the input list and sum all of its elements.\n    else:\n        # Flatten the input list.\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list += recursive_list_sum(item)\n            else:\n                flat_list.append(item)\n        \n        # Sum all of the flattened elements.\n        total = 0\n        for item in flat_list:\n            total += item\n        \n        return total"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1) + 1) * bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = set(range(1, n+1))\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if i in bell_set:\n            count += bell_set.remove(i)\n    return count\n\nn = int(input(\"Enter the number of elements in the set: \"))\nprint(\"Number of ways to partition the set:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the count of ways to partition\n    ways = 0\n\n    # Loop through all possible partitions of the Bell numbers\n    for i in range(2, n+1):\n        for j in range(i):\n            ways += 1\n\n    # Return the count of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0, there is only one way to partition the set\n    if n == 0:\n        return 1\n    # Base case: if n is 1, there is only one way to partition the set\n    if n == 1:\n        return 2\n    # Base case: if n is 2, there are two ways to partition the set\n    if n == 2:\n        return 4\n    \n    # Initialize a variable to store the number of ways to partition the set\n    num_ways = 0\n    \n    # Iterate through all possible partitions of the set\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the current set\n        ways = bell_number(i-1) * bell_number(n-i)\n        \n        # Update the variable to store the number of ways to partition the set\n        num_ways += ways\n    \n    # Return the final number of ways to partition the set\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) * (n-1) // (n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (n * (n-1)) // 2"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                return False\n        return True\n    elif A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[len(A)-1] >= A[len(A)-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[1] - A[0] < 0:\n        for i in range(1, len(A)-1):\n            if A[i+1] - A[i] < 0:\n                return False\n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[-1] - A[-2] < 0:\n        for i in range(len(A)-2, 0, -1):\n            if A[i] - A[i+1] < 0:\n                return False\n        return True\n    \n    # If all conditions fail, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty\n    if len(A) == 0: \n        return True\n\n    # initialize variables\n    n = len(A)\n    prev_num = A[0]\n\n    # iterate over the array and compare adjacent elements\n    for i in range(1, n): \n        if A[i] <= prev_num: \n            return False\n        prev_num = A[i]\n\n    # if no errors, the array is monotonic\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    # Check if the array is empty\n    if not A:\n        return True\n    # If the array has only one element, it is always monotonic\n    elif len(A) == 1:\n        return True\n    # Check if all elements are the same\n    elif A[0] == A[-1]:\n        return True\n    else:\n        # Check if the array is monotonic in increasing order\n        if A[1] <= A[-2] and all(A[i] <= A[i+1] for i in range(len(A)-2)):\n            return True\n        # Check if the array is monotonic in decreasing order\n        elif A[-2] >= A[1] and all(A[i] >= A[i+1] for i in range(len(A)-2)):\n            return True\n    # If none of the above conditions are satisfied, it is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    # Initialize variables to keep track of direction of each element\n    direction = [1] * len(A)\n\n    # Iterate through the array and update the direction variable\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            direction[i] = 1\n        elif A[i] < A[i - 1]:\n            direction[i] = -1\n        else:\n            direction[i] = direction[i - 1]\n\n    # Check if all elements have the same direction\n    for i in range(1, len(direction)):\n        if direction[i]!= direction[0]:\n            return False\n\n    # All elements have the same direction, so the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and returns True if it is monotonic, and False otherwise.\n    A is an array of integers.\n    '''\n    if len(A) < 2: \n        return True\n    else: \n        # Check if the array is monotonic \n        if A[0] < A[1] and A[2] < A[3]: \n            return True\n        elif A[0] > A[1] and A[2] > A[3]: \n            return True\n        else: \n            # Check if the array is decreasing or increasing \n            if A[0] < A[1]: \n                for i in range(1, len(A)-1): \n                    if A[i] < A[i-1]: \n                        return False\n                return True\n            else: \n                for i in range(1, len(A)-1): \n                    if A[i] > A[i-1]: \n                        return False\n                return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # check if the sublist is empty\n    if not s:\n        return True\n\n    # iterate through the list\n    for i in range(len(l) - len(s) + 1):\n        # check if the sublist matches the elements in the list\n        if l[i:i+len(s)] == s:\n            return True\n\n    # if no match is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    - l: list of elements to search in\n    - s: list of elements to search for\n\n    Returns:\n    - True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the first element of the list matches the first element of the sublist\n    if l[0] == s[0]:\n        # If the first element matches, check if the remaining elements of the list match the remaining elements of the sublist\n        for i in range(1, len(l)):\n            if l[i]!= s[i]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    \n    # Find the index of the first element of the sublist\n    index = 0\n    \n    # Loop through the list until we find the first element of the sublist\n    for i in l:\n        if i == s[0]:\n            # If we find the first element of the sublist, check if the sublist is a proper sublist of the list\n            if s == l[index:]:\n                return True\n            else:\n                # If the sublist is not a proper sublist, move to the next index of the list\n                index += 1\n                \n    # If we reach the end of the list and haven't found the first element of the sublist, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if all the tuples in the Input list have equal length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if all the tuples have equal length\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums) // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            gap = (gap + 1) // 2"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        gap //= 1\n\n        if sorted:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        gap = min(gap, n // 2)\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    Parameters:\n    nums (list): a list of numbers to be sorted.\n\n    Returns:\n    The sorted list of numbers.\n\n    \"\"\"\n\n    # Initialize the variables\n    gap = len(nums)\n    swapped = True\n\n    # Iterate until the gap is 1\n    while gap > 1 or swapped:\n\n        # Set the gap to half of the previous gap\n        gap = int(gap / 1.3)\n\n        # Set swapped to True\n        swapped = False\n\n        # Iterate over the list\n        for i in range(len(nums) - gap):\n\n            # If the elements are not in order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # Set swapped to False\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while gap > 0 and swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int((gap + n // gap) / 2)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    max_gap = n\n    swapped = True\n    count = 0\n\n    # sort the list using the comb sort algorithm\n    while swapped:\n        swapped = False\n        max_gap = 1\n        for i in range(n-1):\n            count += 1\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                max_gap = max(max_gap, i+1)\n                swapped = True\n\n        n = max_gap\n\n    return nums, count"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = (gap * 10) // 13  # a better gap calculation\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = min(gap, n//4)\n        i = 0\n        while i < gap:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            i += 1\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n // 2\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # If n is less than or equal to 0, return False\n    if n <= 0:\n        return False\n    # Check if the square of n is less than or equal to the given number\n    elif n**2 <= abs(n):\n        return False\n    # Check if the square of the difference of n and n/2 is less than or equal to the given number\n    else:\n        return n**2 - (n/2)**2 <= abs(n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Base case\n    if n < 0:\n        return \"Cannot be represented as the difference of two squares.\"\n\n    # Initialize variables\n    first_square = n**2\n    second_square = (n + 1)**2\n    diff = first_square - second_square\n\n    # Check if difference is 0, in which case the square can be represented as the difference\n    if diff == 0:\n        return True\n\n    # Check if difference is odd, in which case the square cannot be represented as the difference\n    elif diff % 2!= 0:\n        return False\n\n    # Check if difference is even, in which case the square can be represented as the difference\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0: # checking if n is divisible by 4\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                if n % (i**2) == 0:\n                    return True\n            else:\n                break\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_difference_of_squares(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n\n    # calculate the square of n\n    square_n = n ** 2\n\n    # check if square_n is a perfect square\n    is_perfect_square = lambda x: all(x % i!= 0 for i in range(1, int(x ** 0.5) + 1))\n    if not is_perfect_square(square_n):\n        return False\n\n    # check if square_n - n is a perfect square\n    square_diff = square_n - n\n    if not is_perfect_square(square_diff):\n        return False\n\n    # if all checks pass, n is a difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            for j in range(2, int(n/i)+1):\n                if j!= i and n % j == 0:\n                    return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        print(\"The input must be a positive integer.\")\n        return\n    \n    # check if the input can be represented as the difference of two squares\n    if n == 1:\n        print(\"The given number is 1.\")\n        return\n    elif n == 4:\n        print(\"The given number is 4.\")\n        return\n    elif n == 9:\n        print(\"The given number is 9.\")\n        return\n    elif n == 16:\n        print(\"The given number is 16.\")\n        return\n    elif n == 25:\n        print(\"The given number is 25.\")\n        return\n    elif n == 36:\n        print(\"The given number is 36.\")\n        return\n    elif n == 49:\n        print(\"The given number is 49.\")\n        return\n    elif n == 64:\n        print(\"The given number is 64.\")\n        return\n    elif n == 81:\n        print(\"The given number is 81.\")\n        return\n    elif n == 100:\n        print(\"The given number is 100.\")\n        return\n    \n    # check if the input can be represented as the difference of two squares\n    x = int(n**0.5)\n    y = n - x**2\n    if x**2 + y == n:\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    # Check if n is a square\n    if n == int(n ** 0.5) ** 2:\n        return True\n    # Check if n is the difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        if n - i ** 2 == int(i ** 0.5) ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            square1 = i**2 + j**2\n            square2 = n - square1\n            if square2 == 0:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**0.5)+1):\n        if n-i*i==i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square of the number\n    square = n ** 2\n    # check if it is a square\n    if square ** 0.5 == int(square ** 0.5):\n        # if it is a square, find the difference between the square and the number\n        diff = square - n\n        # check if it can be represented as the difference of two squares\n        if diff ** 2 == square:\n            return True\n        else:\n            return False\n    else:\n        # if it is not a square, it cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two lists as input, colors and patterns, where colors represents the colors of the tiles on the board,\n    and patterns represents the sequence of patterns in which the tiles must be arranged.\n\n    The function returns True if the colors are arranged in the same sequence as the patterns,\n    and False otherwise.\n\n    A pattern is a sequence of colors that represents the configuration of the tiles on the board.\n    For example, the pattern 0110 represents a row of red and blue tiles, and the pattern 1010 represents a row of black and white tiles.\n\n    The function first checks if the lengths of the two lists are equal, which means that the colors are arranged in a row.\n    If the lengths are not equal, the function returns False.\n\n    Next, the function iterates through the colors list and checks if each color is present in the patterns list.\n    If a color is present in the patterns list, it is removed from the patterns list.\n    If a color is not present in the patterns list, the function returns False.\n\n    Finally, if all the colors in the colors list are present in the patterns list, the function returns True.\n    \"\"\"\n\n    # Check if the lengths of the lists are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate through the colors list and remove colors from the patterns list\n    for color in colors:\n        if color not in patterns:\n            return False\n        patterns.remove(color)\n\n    # If all colors are present in the patterns list, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if all elements in the colors array are valid patterns\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # check if there are any missing patterns in the colors array\n    missing_patterns = list(set(patterns) - set(colors))\n    if missing_patterns:\n        return False\n\n    # check if there are any extra patterns in the colors array\n    extra_patterns = list(set(colors) - set(patterns))\n    if extra_patterns:\n        return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if not colors or not patterns:\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns) - 1):\n        if colors.count(patterns[i]) < colors.count(patterns[i + 1]):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if the colors follow the patterns\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # if all conditions are true, it means the colors follow the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    start = 0\n    end = 0\n    prev = None\n\n    # Iterate through the patterns array\n    for pattern in patterns:\n        # Iterate through the colors array\n        for color in colors:\n            # If the color matches the pattern, update start and end indices\n            if color == pattern:\n                start = end\n                end += 1\n                # Check if there is a repeated color in the pattern\n                if prev and prev == color:\n                    return False\n                prev = color\n\n    # Check if all the colors have been used\n    if end!= len(colors):\n        return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in a list of colors and a list of patterns. It checks whether the colors follow the given sequence of patterns.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n\n    # Loop through the colors and patterns\n    while i < len(colors):\n        # If the current color matches the pattern\n        if colors[i] == patterns[count]:\n            count += 1\n\n            # If the count reaches the length of the pattern, move to the next pattern\n            if count == len(patterns[count]):\n                count = 0\n                i += 1\n        else:\n            # If the current color doesn't match the pattern, move to the next color\n            i += 1\n\n    # Return whether the colors follow the given sequence of patterns\n    return i == len(colors)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n\n    # Check if all the patterns have the same length as the colors\n    for pattern in patterns:\n        if len(pattern)!= n:\n            return False\n\n    # Check if the patterns follow the given sequence\n    pattern_map = {}\n    for i in range(n):\n        color = colors[i]\n        pattern = patterns[pattern_map.get(color, -1)]\n\n        # Check if this color is part of any pattern\n        if pattern == 'all':\n            return False\n\n        # Check if this pattern has already been used\n        if pattern in pattern_map:\n            if pattern_map[pattern]!= i:\n                return False\n        else:\n            pattern_map[pattern] = i\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i, pattern in enumerate(patterns):\n        if len(pattern)!= len(colors):\n            return False\n\n        for j, color in enumerate(pattern):\n            if colors[i+j]!= color:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize the index of the current pattern\n    pattern_index = 0\n    \n    # Loop through the colors and patterns arrays\n    for color in colors:\n        if pattern_index < len(patterns) and color in patterns[pattern_index]:\n            # If the color is present in the current pattern, move to the next index in the patterns array\n            pattern_index += 1\n        else:\n            # If the color is not present in the current pattern, return False\n            return False\n        \n    # If all the colors in the colors array have been matched to a pattern, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = all(num % K == 0 for num in tup)\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and returns a list of tuples that have all \n    elements divisible by K from the input list.\n\n    Parameters:\n        test_list: list of tuples.\n        K: integer.\n\n    Returns:\n        A list of tuples that have all elements divisible by K from the input list.\n    \"\"\"\n\n    # Create an empty list to store the resultant tuples\n    result_list = []\n\n    # Loop through each tuple in the input list\n    for tup in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result_list.append(tup)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer k as input.\n    The function returns a list of tuples which have all elements divisible by k from the input list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the tuples\n    result = []\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # loop through the remaining elements of each tuple\n        for j in range(len(test_list[i])):\n            # check if the current element is divisible by k\n            if test_list[i][j] % K!= 0:\n                # if it's not, break the inner loop and continue with the next tuple\n                break\n        # if all elements in the current tuple are divisible by k, add it to the result list\n        else:\n            result.append(test_list[i])\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    found = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            found.append(tuple_)\n    return found"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple in test_list:\n        divisible = True\n        for num in tuple:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        if all(x % K == 0 for x in tuple1):\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if it is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even\")\n        else:\n            print(\"The length of the word is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # loop through the words and check the length\n    for word in words:\n        if len(word) % 2 == 1:  # if the length is odd\n            print(word + \" is odd-length.\")\n        else:\n            print(word + \" is even-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2!= 0: # if the length of the word is odd\n            return False # return False\n    return True # return True if all words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    # Initialize a variable to store the length of the word\n    len_word = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is a space, set the length of the word to 0\n        if char =='':\n            len_word = 0\n        # Otherwise, add 1 to the length of the word\n        else:\n            len_word += 1\n            \n    # Check if the length of the word is odd or even\n    if len_word % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    This function takes a string s as input and returns True if the length of the word is odd, else False.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Check if the length of the first word is odd or even\n    if len(words[0]) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # Split the string by space and get first word\n    len_word = len(word)\n    if len_word % 2 == 0: # Check if length of word is even or not\n        return f\"{word} is an even length word\"\n    else:\n        return f\"{word} is an odd length word\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two tetrahedral numbers\n    t1 = 0\n    t2 = 4\n\n    # Find the nth tetrahedral number\n    for i in range(n):\n        # Calculate the sum of the previous two tetrahedral numbers\n        t = t1 + t2\n\n        # Update the values of the previous two tetrahedral numbers\n        t1 = t2\n        t2 = t\n\n        # Print the nth tetrahedral number\n        print(t)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the sum of tetrahedral numbers to 0\n    tetrahedral_sum = 0\n    \n    # Initialize the current value of the tetrahedral number to 0\n    current_value = 0\n    \n    # Loop through the values of the tetrahedral number\n    for i in range(1, n+1):\n        # Add the current value to the sum of tetrahedral numbers\n        tetrahedral_sum += current_value\n        \n        # Compute the new value of the tetrahedral number\n        current_value = 4 * (current_value ** 3) - 6 * (current_value ** 2) + i\n        \n    # Return the sum of the nth tetrahedral number\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return a + b + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    \n    return 4 * (n - 1) * (n - 2) * (n - 3) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_tetrahedral(n):\n        if n <= 1:\n            return False\n        num = n\n        while num > 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n        return num == 1\n    \n    def generate_tetrahedral_numbers(n):\n        tetrahedral_numbers = []\n        for i in range(1, n+1):\n            if is_tetrahedral(i):\n                tetrahedral_numbers.append(i)\n        return tetrahedral_numbers\n    \n    tetrahedral_numbers = generate_tetrahedral_numbers(n)\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def sum_of_digits(n):\n        '''\n        Helper function to calculate the sum of digits of a given number.\n        '''\n        return sum(int(digit) for digit in str(n))\n\n    def is_tetrahedral(n):\n        '''\n        Helper function to check if a given number is a tetrahedral number or not.\n        '''\n        return (n == sum_of_digits(n**2) + sum_of_digits(n**3) - sum_of_digits(n**4))\n\n    tetrahedral_numbers = []\n    current_tetrahedral = 0\n    i = 1\n\n    while len(tetrahedral_numbers) < n:\n        if is_tetrahedral(current_tetrahedral):\n            tetrahedral_numbers.append(current_tetrahedral)\n        current_tetrahedral += i\n        i += 1\n\n    return tetrahedral_numbers[-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedron_sides(n):\n        if n == 1:\n            return [1]\n        else:\n            a, b, c, d = tetrahedron_sides(n-1)\n            return [a+b, b+c, c+d, a+c+d]\n    \n    def sum_tetrahedra(tetrahedron_sides):\n        return sum(tetrahedron_sides)\n    \n    return sum_tetrahedra(tetrahedron_sides(n-1))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) * (n+3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (n*(n+1)*(n+2)*(n+3)) // 6\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 0\n    d = 0\n    count = 0\n\n    # Calculate the nth tetrahedral number\n    while count < n:\n        # Update the values of a, b, c, and d\n        a = b\n        b = c\n        c = d\n\n        # Calculate the value of d\n        d = (a + b + c) / 2\n\n        # Increment the count\n        count += 1\n\n    # Return the value of d\n    return d"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere using the formula: V = (4/3) * pi * r^3\n\n    Parameters:\n    r (float): The radius of the sphere\n\n    Returns:\n    float: The volume of the sphere\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return ascii_sum % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = sum(ord(c) for c in strr) % 26\n    return chr(ascii_value + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char_ascii = char_sum % 26\n    char_chr = chr(char_ascii + ord('A'))\n    return char_chr"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total += ord(i)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum of ASCII values of characters to 0\n    sum = 0\n    # iterate over each character of the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_val = ord(char)\n        # add the ASCII value to the sum\n        sum += ascii_val\n    # find the remainder of the sum divided by 26\n    char_code = sum % 26\n    # get the character corresponding to the ASCII value of the remainder\n    char = chr(char_code + ord('A'))\n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the character\n    char = \"\"\n    # loop through each character in the string\n    for i in range(len(strr)):\n        # convert the ASCII value of the current character to a number\n        num = ord(strr[i])\n        # add the ASCII value of the current character to the sum of all characters\n        char_num = (num + sum([ord(charr) for charr in strr[:i]])) % 26\n        # convert the number back to a character and append it to the string\n        char += chr(char_num)\n    # return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        \n        # Add the ASCII value to the sum\n        sum += ascii_val\n    \n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    next_num = 1\n    \n    while len(sequence) < n:\n        next_num = 3 * sequence[-1] - sequence[-2]\n        sequence.append(next_num)\n    \n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, 4*a + b\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    count = 2\n    \n    while count < n:\n        if sequence[count % 2] == 1:\n            sequence.append(0)\n        else:\n            sequence.append(1)\n        count += 1\n    \n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        print(a, end=\" \")\n        a, b = b, a + b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n+1)\n    sequence[1] = 1\n    for i in range(2, n+1):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    while len(sequence) < n:\n        next_sequence = [2 * i - 1 for i in sequence]\n        next_sequence = [1] + next_sequence[:-1] + [1]\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [0] * 25\n    sequence[0] = 1\n    sequence[1] = 1\n\n    for i in range(2, 25):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n        if sequence[i] > n:\n            break\n    \n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if sequence[-1] == 1:\n            sequence.append(2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"number in the Newman Conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to calculate the surface area of a sphere\n    surface_area = (4 * math.pi * r**2) / 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    hexagonal_number = 1\n    hexagonal_numbers = [1]\n\n    for i in range(2, n+1):\n        centered_hexagonal_number = hexagonal_number - (2 * (i - 1))\n        hexagonal_numbers.append(centered_hexagonal_number)\n        hexagonal_number = centered_hexagonal_number\n\n    return hexagonal_numbers[-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 1\n    if n == 1:\n        return 1\n    \n    # Second centered hexagonal number is 5\n    elif n == 2:\n        return 5\n    \n    # Calculate the n-th centered hexagonal number using the formula\n    # (2n + 1)^2 - (n^2 + 3n + 6)\n    else:\n        return ((2*n + 1)**2 - (n**2 + 3*n + 6))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    num = 0\n    i = 0\n\n    # Iterate through numbers until nth centered hexagonal number is found\n    while num < n:\n        # Compute centered hexagonal number using formula\n        num = 1 + 6*i*(5*i-3) // 2\n        i += 1\n\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    prev_num = 1\n    current_num = 2\n\n    # Loop through the sequence of centered hexagonal numbers\n    for i in range(1, n + 1):\n        # Calculate the centered hexagonal number\n        centered_hex_num = (current_num + prev_num) // 2\n\n        # Print the centered hexagonal number\n        print(centered_hex_num)\n\n        # Update the previous and current numbers\n        prev_num = current_num\n        current_num = centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = (n - 1) // 2\n    return hexagonal**2 + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 2\n    hexagonal_number = 0\n    while n > 0:\n        hexagonal_number += a\n        n -= 1\n        a += 2 * b\n        b += 1\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    def centered_hexagonal_helper(n):\n        if n <= 1:\n            return n\n        else:\n            return centered_hexagonal_helper(n-1) * 3 + centered_hexagonal_helper(n-1) * 2\n\n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    def centered_hexagonal(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return centered_hexagonal(n//2) + centered_hexagonal(n//2) + 1\n        else:\n            return centered_hexagonal((n-1)//2) + centered_hexagonal(n//2) + 1\n    \n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    c = 0\n    a = 0\n    \n    # Iterate until n is reached\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number using the formula\n        h = ((a**2) + (c**2))**0.5\n        \n        # Add the centered hexagonal number to the sum\n        c += h\n        \n        # Move the values for a and c\n        a += 1\n        c += 1\n        \n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (2 * (n**2)) + 1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = ct.ChainMap(value, merged_dict[key])\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = ct.ChainMap(value, merged_dict[key])\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in dict1.keys():\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in dict1.keys() and key not in dict2.keys():\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a merged dictionary.\n\n    The function uses the merge() method of the dictionary class to merge the dictionaries.\n\n    The merged dictionary will have the keys of the input dictionaries, and the values will be the merged values of those keys.\n\n    If any key is found in more than one of the input dictionaries, the value of that key in the merged dictionary will be a list of the values from all the input dictionaries.\n    '''\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to be merged.\n        dict2 (dict): Second dictionary to be merged.\n        dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all the dictionaries into one\n    all_dict = dict1.copy()\n    for key, value in dict2.items():\n        all_dict[key] = value\n    for key, value in dict3.items():\n        all_dict[key] = value\n    # Convert the combined dictionary to a set to remove duplicates\n    combined_dict = set(all_dict.items())\n    # Convert the set back to a dictionary\n    final_dict = dict(combined_dict)\n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as inputs, and returns a single dictionary\n    that contains all the key-value pairs from all three dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequencies\n    freq = {}\n    # loop over the list and update the frequency of each element in the dictionary\n    for elem in lst:\n        freq[elem] = freq.get(elem, 0) + 1\n    # return the dictionary with the frequencies\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all its elements.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Given a list of elements, return a dictionary where each key is an element from the list and the value is the frequency of that element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n\n    # iterate through each element in the list\n    for element in list1:\n        # increment the frequency of the current element in the dictionary\n        freq_dict[element] += 1\n\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    # Convert the dictionary to a dictionary of lists\n    freq_list = dict(freq_dict.items())\n    return freq_list"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    left, right = 0, N\n    closest = N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == 0 or abs(mid) < abs(closest):\n            closest = mid\n        if mid == 0:\n            return mid\n        if mid * (mid - 1) < N:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    \n    smallest_num = float('inf')\n    closest_num = float('inf')\n    \n    for i in range(1, N+1):\n        num = int(i * (i + 1) // 2)\n        if num < n:\n            if abs(num) < abs(closest_num):\n                closest_num = num\n        else:\n            if abs(num) < abs(smallest_num):\n                smallest_num = num\n    \n    if abs(n - closest_num) < abs(n - smallest_num):\n        print(\"The closest smaller number is\", closest_num)\n    else:\n        print(\"The closest smaller number is\", smallest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = []\n    for num in range(1, N+1):\n        if num > N:\n            break\n        smaller.append(num)\n    return smaller[-1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Args:\n    N (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than N.\n    \"\"\"\n    # Find the difference between N and its smallest multiple of 5\n    remainder = N % 5\n    diff = (5 - remainder) % 5\n\n    # Find the number that is closest to N by adding diff to N\n    closest_num = N + diff\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller(n):\n        '''\n        Helper function to find the closest smaller number than n.\n        '''\n        closest = n\n        for i in range(1, 10):\n            smaller = n - i\n            if smaller > closest:\n                closest = smaller\n        return closest\n\n    return closest_smaller(N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        if num == 1:\n            break\n        if num >= 2:\n            num -= 1\n        elif num == 0:\n            break\n        else:\n            num += 1\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    smallest = N\n    for i in range(N, 0, -1):\n        if i - N < 0:\n            return i\n        elif abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = 10**9\n    closest_num = None\n    for i in range(N+1):\n        if i == N:\n            closest_num = i\n            break\n        if abs(i - N) < abs(closest_num - N) or closest_num is None:\n            closest_num = i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_num = min(N, N + 1)\n    max_num = max(N - 1, N)\n    closest = min(min_num, max_num)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    closest_smaller_num = float('inf')\n    \n    for i in range(N):\n        num = int(input())\n        \n        if num < smallest_num:\n            smallest_num = num\n            closest_smaller_num = num\n        elif abs(smallest_num - num) < abs(smallest_num - closest_smaller_num):\n            closest_smaller_num = num\n            \n    print(closest_smaller_num)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_word = 0\n\n    # iterate through each word in the list\n    for word in list1:\n        # check if the length of the current word is greater than the longest word found so far\n        if len(word) > longest_word:\n            longest_word = len(word)\n\n    # return the length of the longest word found\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_lengths = []\n    for word in list1:\n        word_lengths.append(len(word))\n    return max(word_lengths)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # loop through each word in the list\n    longest_word = \"\"\n    for word in list1:\n\n        # check if the word is longer than the current longest word\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    # return the length of the longest word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    return any(sub_str in s for s in str_list)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, list):\n        for s in str1:\n            if s in sub_str:\n                return True\n        return False\n    else:\n        raise TypeError(\"Both inputs should be lists.\")\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, list):\n        for word in str1:\n            if word in sub_str:\n                return True\n    else:\n        return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str_list:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Split the given string into a list of strings\n    str_list = str1.split()\n\n    # Check if the substring is present as a substring in any of the strings in the list\n    for item in str_list:\n        if sub_str in item:\n            return True\n\n    # If no substrings are found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n > 0:\n        for i in range(1, n+1):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even numbers are undulating\"\n    else:\n        return \"Odd numbers are not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # define the list of positive and negative integers\n    positive = [i for i in range(1, n+1)]\n    negative = [i for i in range(-n, -1)]\n    \n    # check if the number is in either list\n    if n in positive:\n        return \"Positive\"\n    elif n in negative:\n        return \"Negative\"\n    else:\n        return \"Not a number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even numbers are undulating\"\n    else:\n        return \"Odd numbers are not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check whether the given number is negative or not\n    if n < 0:\n        return 'The given number is negative.'\n    # Check whether the given number is even or odd\n    if n % 2 == 0:\n        return 'The given number is even.'\n    else:\n        return 'The given number is odd.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # We can use a loop to iterate through the digits of the number and check if they are consecutive or not\n    for i in range(len(str(n))):\n        if i == 0:\n            if int(str(n)[i]) > int(str(n)[i+1]):\n                return True\n        else:\n            if int(str(n)[i]) > int(str(n)[i-1]):\n                return True\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2,3)) # Output: 8"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result*a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_val = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_index = i\n            min_val = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 99999999999999\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list.\n    '''\n    min_length = float('inf')  # initialize minimum length variable to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    smallest_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_len:\n            smallest_len = len(sublist)\n    return smallest_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    #initialize minimum length variable\n    min_length = len(lst[0])\n\n    #iterate through list of lists and update minimum length variable\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    #return minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the length variable to a large number\n    min_length = float('inf')\n\n    # Iterate through the list of lists and find the length of the smallest list\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 9999999999\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    shortest_length = float('inf')\n    shortest_list = None\n    for sublist in lst:\n        length = len(sublist)\n        if length < shortest_length:\n            shortest_length = length\n            shortest_list = sublist\n    return shortest_length, shortest_list"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length as infinity\n    for sublist in lst:  # iterate through each sublist in the list\n        if len(sublist) < min_length:  # check if the length of the sublist is less than the current minimum\n            min_length = len(sublist)  # update the minimum length\n    return min_length  # return the minimum length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    # Initialize a variable to store the number of divisors\n    count = 0\n\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(n**0.5)+1):\n        # Check if the given number is divisible by the current number\n        if n % i == 0:\n            # If it is, increment the count variable\n            count += 1\n\n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n/2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store frequency of each element in the flattened list\n    freq_dict = {}\n    \n    # Loop through the flattened list and update the frequency of each element in the dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the dictionary containing the frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    :param list1: a list of lists\n    :return: a dictionary of elements and their frequencies\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # loop through each list in the flattened list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for elem in sublist:\n            # if the element is already in the dictionary, increment its frequency by 1\n            if elem in freq:\n                freq[elem] += 1\n            # if the element is not in the dictionary, add it with a frequency of 1\n            else:\n                freq[elem] = 1\n\n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Flatten the list\n    flat_list = [num for sublist in list1 for num in sublist]\n    \n    # Initialize an empty dictionary\n    freq_dict = {}\n    \n    # Iterate through the flattened list\n    for num in flat_list:\n        # If the number is already in the dictionary, increment its count\n        if num in freq_dict:\n            freq_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[num] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the flattened list\n    for item in list1:\n        # If the item is already in the dictionary, increment its frequency by 1\n        if item in freq:\n            freq[item] += 1\n        # If the item is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[item] = 1\n            \n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_result = 1\n    for num in numbers:\n        multiply_result *= num\n\n    return multiply_result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = sum(numbers) * 1.0 / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert decimal number to binary string.\n    \"\"\"\n    # Initialize an empty string to store binary equivalent of decimal number\n    binary_string = \"\"\n    # Convert decimal number to binary using a loop\n    while n > 0:\n        # Extract the last digit of the decimal number\n        last_digit = n % 2\n        # Convert the last digit to binary and append it to the binary string\n        binary_string = str(last_digit) + binary_string\n        # Remove the last digit from the decimal number\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string variable to store the binary equivalent\n    binary_str = \"\"\n    \n    # Convert the decimal number to binary and add it to the string variable\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    \n    # If the binary string starts with '0', remove it\n    if binary_str[0] == '0':\n        binary_str = binary_str[1:]\n    \n    # Reverse the binary string and return it\n    return binary_str[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using bitwise operators\n    binary = bin(n)[2:]\n    # Add leading zeros if necessary\n    if binary[0] == '0':\n        binary = '0' + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary representation as a string.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary string\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    # Reverse the binary string and add leading zeros\n    return ('0'*(8-len(binary)) + binary)[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty string to store the binary equivalent\n    binary_str = ''\n\n    # loop through each digit of the number, converting to binary and adding to the binary string\n    while n > 0:\n        binary_digit = n % 2\n        binary_str = str(binary_digit) + binary_str\n        n = n // 2\n\n    # remove any leading zeros from the binary string\n    while binary_str[0] == '0':\n        binary_str = binary_str[1:]\n\n    # return the binary string\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # initialize variables\n    n = len(str(num))\n    is_palindrome = True\n    smallest_palindrome = sys.maxsize\n    \n    # loop through all possible palindromes up to num\n    for i in range(2, num+1):\n        # check if i is a palindrome\n        is_palindrome = True\n        j = i-1\n        while j >= 0:\n            if num%10!= int(str(i)[j]):\n                is_palindrome = False\n                break\n            j -= 1\n        if is_palindrome:\n            # check if i is smaller than smallest_palindrome\n            if i < smallest_palindrome:\n                smallest_palindrome = i\n    \n    # return smallest_palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Initialize the next smallest palindrome\n    next_palindrome = int(num_str)\n\n    # Check if the next smallest palindrome is less than 10^9+1 (to avoid overflow)\n    if next_palindrome >= 10**9:\n        return None\n\n    # Find the next largest palindrome greater than or equal to the next smallest palindrome\n    i = next_palindrome\n    while True:\n        i += 1\n        if is_palindrome(i):\n            next_palindrome = i\n            break\n\n    return next_palindrome\n\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a given number is a palindrome.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_next_prime(num):\n    '''\n    Check if a given number is the next smallest prime palindrome.\n    '''\n    return is_prime(num+2)\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not is_prime(num):\n        return None\n    \n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num):\n            if is_next_prime(next_num):\n                return next_num\n            else:\n                num = next_num\n        else:\n            return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    reverse = lambda x: int(str(x)[::-1])\n\n    # find the largest palindrome smaller than num\n    smaller_palindrome = reverse(num) - 1\n    while not is_palindrome(smaller_palindrome):\n        smaller_palindrome -= 1\n\n    # find the next smallest palindrome that is larger than the largest palindrome smaller than num\n    next_smallest_palindrome = reverse(smaller_palindrome) + 1\n\n    return next_smallest_palindrome\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def reverse_digits(n):\n        '''\n        Reverse the digits of a number and return it as an integer.\n        '''\n        reverse = 0\n        while n > 0:\n            reverse = reverse*10 + n%10\n            n //= 10\n        return reverse\n\n    def is_palindrome(n):\n        '''\n        Check if a number is a palindrome.\n        '''\n        reverse = reverse_digits(n)\n        return reverse == n\n\n    def next_smaller_palindrome(n):\n        '''\n        Find the next smallest palindrome that is less than n.\n        '''\n        while True:\n            n -= 1\n            if not is_palindrome(n):\n                return n\n\n    # Get the next smaller palindrome of num\n    next_num = next_smaller_palindrome(num)\n\n    # Return the next smallest palindrome as an integer\n    return reverse_digits(next_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input integer is a palindrome or not\n    if num == int(str(num)[::-1]):\n        return num + 1\n    else:\n        # If the input integer is not a palindrome, iterate until a palindrome is found\n        while True:\n            # Calculate the next smallest palindrome of the current palindrome\n            new_num = 10**9 + num\n            new_str = str(new_num)\n            new_num = 0\n            for i in range(len(new_str)):\n                new_num += int(new_str[i]) * (10**(len(new_str)-i-1))\n            # Check if the new number is a palindrome\n            if new_num == int(str(new_num)[::-1]):\n                return new_num\n            else:\n                num = new_num\n                # If a new palindrome is found, return it\n                if num == int(str(num)[::-1]):\n                    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the input number to string and reverse it\n    num_str = str(num)[::-1]\n\n    # initialize a flag variable to keep track of palindromes\n    is_palindrome = True\n\n    # iterate over the characters of the reversed string\n    for char in num_str:\n        # if a non-palindrome character is found, return the current number\n        if char!= num % 10:\n            is_palindrome = False\n            break\n        # if all characters are palindromes, check if the current number is smaller than the original number\n        elif is_palindrome and int(num_str) < num:\n            num += 1\n\n    # return the next smallest palindrome as an integer\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is a positive integer\n    if num < 0:\n        print(\"Please input a positive integer.\")\n        return None\n    # Convert the input to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n    # Check if the reversed number is a palindrome\n    if reversed_num == int(reversed_str[::-1]):\n        # Increment the reversed number by 1\n        next_num = reversed_num + 1\n    else:\n        # Increment the reversed number by 10 until it becomes a palindrome\n        while not int(reversed_str[::-1]) == reversed_num:\n            reversed_num += 10\n        # Increment the reversed number by 1\n        next_num = reversed_num + 1\n    # Return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Base case: if num is already a palindrome, return itself\n    if str(num) == str(num)[::-1]:\n        return num\n    \n    # Check for negative numbers and convert to positive\n    if num < 0:\n        num = -num\n        \n    # Initialize variables to store the current and next smallest palindromes\n    current_palindrome = num\n    next_palindrome = None\n    \n    # Iterate through all the digits of the palindrome until we find the next smallest palindrome\n    while next_palindrome is None:\n        palindrome = ''\n        for digit in str(num):\n            palindrome += str(int(digit) + 1)\n        next_palindrome = int(palindrome)\n        \n        # Check if the next palindrome is smaller than the current palindrome\n        if next_palindrome < current_palindrome:\n            num = next_palindrome\n        else:\n            next_palindrome = None\n    \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Get the length of the string\n    length = len(num_str)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Initialize the largest possible palindrome to a string\n    max_palindrome = '0' * length\n    # Loop through all possible palindromes of length length-1\n    for i in range(length-1, -1, -1):\n        # Initialize the current palindrome to a string\n        curr_palindrome = '0' * length\n        # Loop through all possible digits for the current palindrome\n        for j in range(length-i-1, -1, -1):\n            # Add the digit to the current palindrome\n            curr_palindrome = str(int(num_str[j])+int(reversed_str[j]))\n            # Check if the current palindrome is greater than the current maximum palindrome\n            if int(curr_palindrome) > int(max_palindrome):\n                # Update the maximum palindrome\n                max_palindrome = curr_palindrome\n        # Check if the current palindrome is a palindrome\n        if int(max_palindrome) == int(curr_palindrome):\n            # If the current palindrome is a palindrome, check if it is less than the specified number\n            if int(curr_palindrome) < int(num_str):\n                # If the current palindrome is less than the specified number, return it as an integer\n                return int(curr_palindrome)\n    # If no palindromes were found, return -1 (since no palindrome exists)\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within the bounds of the array\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize two pointers at the beginning of the array\n    i, j = 0, len(arr) - 1\n    \n    # Keep swapping elements until i is equal to k-1\n    while i < k - 1:\n        i += 1\n        j -= 1\n    \n    # Return the kth element if it exists\n    if i == k - 1:\n        return arr[i]\n    \n    # If the kth element doesn't exist, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        print(\"Invalid input.\")\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_half = arr[:k-1]\n        right_half = arr[k-1:]\n        result = kth_element(left_half, n//2)\n        if k % 2 == 1:\n            result = arr[k-1]\n        return result"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if k == mid:\n                return arr[mid-1]\n            elif k < mid:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if array is empty\n    if not arr:\n        return None\n    # Find the length of the array\n    n = len(arr)\n    # Check if k is less than or equal to n\n    if k > n:\n        return None\n    # If k is equal to 1, return the first element\n    if k == 1:\n        return arr[0]\n    # If k is greater than 1, find the nth element from the end of the array\n    else:\n        # Initialize variables to keep track of current index and count of elements\n        i = n - k\n        count = 1\n        # Traverse the array from end to start\n        for j in range(n - 1, -1, -1):\n            # If the current element is not None, return it\n            if arr[j] is not None:\n                return arr[j]\n            # If we reach the nth element, return the current element\n            if count == i:\n                return arr[j]\n            count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = n // 2\n        if k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] > k:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    if k == 1:\n        return arr[0]\n    left = 1\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if k == mid:\n            return arr[k - 1]\n        elif k < mid:\n            right = mid\n        else:\n            left = mid + 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    # Convert the word to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with the underscores\n    camel_case_word = '_'.join(words)\n    # Remove the underscores from the beginning of the word\n    camel_case_word = camel_case_word[1:]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0].upper()\n    camel_case_word = first_letter + word[1:]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for letter in word:\n        if letter == '_':\n            camel_case += letter.upper()\n        else:\n            camel_case += letter.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the string to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them back together\n    camel_case = ''.join([w.capitalize() for w in words])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case.append(char.lower())\n        elif char.isupper():\n            camel_case.append(\"_\")\n            camel_case.append(char.lower())\n        else:\n            camel_case.append(char)\n    return \"\".join(camel_case)\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += '_' + letter.lower()\n    return camel_case.strip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.upper()\n        else:\n            if char.isupper():\n                camel_case += \"_\" + char.lower()\n            else:\n                camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words using underscores as separators\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them with an underscore\n    return ''.join([word.capitalize() if i == 0 else word for i, word in enumerate(words)])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n: int\n        The number of nodes in the graph.\n    m: int\n        The number of edges in the graph.\n\n    Returns:\n    int\n        The Eulerian number a(n, m).\n    \"\"\"\n    # Create an adjacency matrix to represent the graph\n    adj_matrix = [[0] * (m + 1) for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        adj_matrix[a][b] = 1\n        adj_matrix[b][a] = 1\n\n    # Calculate the Eulerian number using the Floyd-Warshall algorithm\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for k in range(1, n + 1):\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if adj_matrix[i][k] == 1 and adj_matrix[k][j] == 1:\n                    dp[i][j] = 1\n\n    # Initialize the Eulerian number to zero\n    eulerian_num = 0\n\n    # Calculate the Eulerian number using the Ternary search method\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if dp[i][j] == 1:\n                if i - 1 == 0 or dp[i - 1][j] == 1:\n                    eulerian_num = max(eulerian_num, j)\n                elif j - 1 == 0 or dp[i][j - 1] == 1:\n                    eulerian_num = max(eulerian_num, i)\n                else:\n                    eulerian_num = max(eulerian_num, j - 1)\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n*(m-1) + (m-1)*(n-1))/2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if m == 0:\n        return 1\n    # recurrence relation\n    else:\n        return eulerian_num(n, m-1) + (n*(m-1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # If n is odd, a(n, m) = 1 + n(m-1) + m(n-1) + n^2(m-2) + m^2(n-2)\n    if n % 2!= 0:\n        return 1 + n * (m-1) + m * (n-1) + n**2 * (m-2) + m**2 * (n-2)\n    # If n is even, a(n, m) = 2 * a(n/2, m) - 1\n    else:\n        return 2 * eulerian_num(n//2, m) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a(n, m) as 0\n    a = 0\n    \n    # Iterate through all possible values of n and m\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # If n and m are equal, add 1 to the Eulerian number\n            if i == j:\n                a += 1\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return n * (m - eulerian_num(n - 1, m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the list of digits and their corresponding values\n    digits = {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9}\n\n    # Initialize the list of values of a(n, m)\n    a = []\n\n    # Generate the list of values of a(n, m)\n    for i in range(n):\n        for j in range(m):\n            value = 0\n            for k in range(i+1):\n                value += digits[k]\n            a.append(value)\n\n    # Return the last value in the list\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a 2D list to store all possible paths\n    paths = [[1] * (m + 1) for _ in range(n + 1)]\n    # Initialize the starting point for each path to (1, 1)\n    paths[1][1] = 1\n    # Fill in the rest of the paths using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if paths[i - 1][j] == 1:\n                paths[i][j] = paths[i - 1][j]\n            elif paths[i - 1][j] == 2:\n                paths[i][j] = paths[i - 1][j] + paths[i - 1][j - 1]\n    # Return the last value in the bottom right corner of the 2D list\n    return paths[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m, i=1, j=0, count=1):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if i == n and j == m:\n        return count\n\n    count = eulerian_num(n, m, i+1, j, count)\n\n    # increment i to get next column\n    count = eulerian_num(n, m, i, j+1, count)\n\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Function to calculate sum of digits of a number\n    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        else:\n            return sum_of_digits(num // 10) + num % 10\n    \n    # Function to find a(n, m)\n    def a(n, m):\n        # Check if n and m are both prime numbers\n        if is_prime(n) and is_prime(m):\n            # Calculate the number of digits of n and m\n            n_digits = len(str(n))\n            m_digits = len(str(m))\n            \n            # Check if n and m have equal number of digits\n            if n_digits == m_digits:\n                # Calculate the sum of digits of n and m\n                n_sum = sum_of_digits(n)\n                m_sum = sum_of_digits(m)\n                \n                # Calculate the product of factorial of n and factorial of m\n                product = factorial(n) * factorial(m)\n                \n                # Calculate the sum of the products of n and m\n                sum_of_n_and_m = n_sum * m_sum\n                \n                # Calculate the value of a(n, m)\n                a_value = product / sum_of_n_and_m\n                \n                # Return the value of a(n, m)\n                return a_value\n            else:\n                # Return -1 if n and m have different number of digits\n                return -1\n        else:\n            # Return -1 if n or m is not a prime number\n            return -1\n    \n    # Call the a(n, m) function and return the result\n    return a(n, m)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist\n        sublist.sort()\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Use sorted() function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of true booleans in the list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_booleans(lst):\n    '''\n    This function counts the number of true booleans in a list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if type(num) == bool and num is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if type(i) is bool and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert lists to tuples\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new list to store the result\n    result_list = []\n    # Loop through the tuples and append the list to each tuple\n    for tup in test_tup:\n        new_tup = tup + test_list\n        result_list.append(new_tup)\n    # Return the list of tuples with the appended list\n    return result_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append list to tuples\n    test_list = list(test_list)\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert list to tuple\n    test_tup = tuple(test_list)\n\n    # Append list to tuple\n    return tuple(test_tup + test_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and merges them into a single sorted list.\n    \"\"\"\n    # initialize an empty list to store the merged list\n    merged_list = []\n    \n    # loop through each list and add its elements to the merged list\n    i = 0\n    while i < len(num1) and i < len(num2) and i < len(num3):\n        if num1[i] < num2[i] and num1[i] < num3[i]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[i] < num1[i] and num2[i] < num3[i]:\n            merged_list.append(num2[i])\n            i += 1\n        else:\n            merged_list.append(num3[i])\n            i += 1\n    \n    # if any of the lists have elements remaining, add them to the merged list\n    while i < len(num1) and i < len(num2) and i < len(num3):\n        if num1[i] < num2[i] and num1[i] < num3[i]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[i] < num1[i] and num2[i] < num3[i]:\n            merged_list.append(num2[i])\n            i += 1\n        else:\n            merged_list.append(num3[i])\n            i += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Concatenate all the lists\n    merged_list = num1 + num2 + num3\n\n    # Convert the merged list to a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Convert the min heap back to a list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the elements in the three input lists\n    all_nums = num1 + num2 + num3\n\n    # Use heapq to sort the elements in the list\n    heapq.heapify(all_nums)\n\n    # Extract the sorted elements from the heap\n    sorted_nums = []\n    while all_nums:\n        sorted_nums.append(heapq.heappop(all_nums))\n\n    return sorted_nums"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # initialize an empty heap and a list to store the sorted elements\n    min_heap = []\n    sorted_list = []\n\n    # add the elements of the first list to the heap\n    heapq.heapify(num1)\n    while num1:\n        min_heap.append(heapq.heappop(num1))\n\n    # add the elements of the second list to the heap\n    heapq.heapify(num2)\n    while num2:\n        min_heap.append(heapq.heappop(num2))\n\n    # add the elements of the third list to the heap\n    heapq.heapify(num3)\n    while num3:\n        min_heap.append(heapq.heappop(num3))\n\n    # while the heap is not empty, extract the smallest element from the heap and add it to the sorted list\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Sort the three lists in ascending order\n    sorted_num1 = sorted(num1)\n    sorted_num2 = sorted(num2)\n    sorted_num3 = sorted(num3)\n\n    # Merge the three lists into a single sorted list\n    merged_list = sorted_num1 + sorted_num2 + sorted_num3\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes in three sorted lists and merges them into a single sorted list.\n    The function uses the heapq module to efficiently merge the lists.\n    '''\n\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use heapify to sort the list in ascending order\n    heapq.heapify(merged_list)\n\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Convert the combined list to a min heap\n    heap = list(set(combined_list))\n    \n    # Create a new empty list to hold the merged sorted list\n    merged_list = []\n    \n    # Pop the smallest element from the heap and add it to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap of the merged list\n    min_heap = []\n    for i in merged_list:\n        heapq.heappush(min_heap, i)\n    \n    # Combine the sorted list with the min heap and remove duplicates\n    sorted_list = []\n    for _ in range(len(min_heap)):\n        i = heapq.heappop(min_heap)\n        if i not in sorted_list:\n            sorted_list.append(i)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes in three sorted lists and returns a single sorted list.\n\n    Args:\n        num1 (list): A sorted list of integers.\n        num2 (list): A sorted list of integers.\n        num3 (list): A sorted list of integers.\n\n    Returns:\n        list: A single sorted list of integers.\n    \"\"\"\n    # Combine all three lists into a single list\n    all_numbers = num1 + num2 + num3\n\n    # Create a min heap to store unique numbers in ascending order\n    unique_numbers = []\n    heapq.heapify(unique_numbers)\n\n    # Iterate through the combined list and add unique numbers to the min heap\n    for num in all_numbers:\n        if num not in unique_numbers:\n            heapq.heappush(unique_numbers, num)\n\n    # Convert the min heap back to a list and return it\n    return list(unique_numbers)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    \n    # Create a heap from the merged list\n    max_heap = []\n    for num in merged_list:\n        heapq.heappush(max_heap, -num)\n    \n    # Extract the negative numbers from the heap and return them as a sorted list\n    result = []\n    while max_heap:\n        result.append(-heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # initialize count to 0\n    count = 0\n\n    # convert the binary string to a list\n    binary_list = list(s)\n\n    # rotate the list n times\n    for i in range(n):\n        binary_list = binary_list[-1:] + binary_list[:-1]\n\n    # iterate through the rotated list and count the odd numbers\n    for num in binary_list:\n        if int(num) % 2!= 0:\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Function to rotate a binary string\n    def rotate_string(s, k):\n        return s[-k:] + s[:-k]\n\n    # Check if the binary string is odd length\n    if len(s) % 2 == 1:\n        return 0\n\n    # Count odd numbers in the first half of the rotated binary string\n    odd_count = sum(s[i]!= s[i+1] for i in range(len(s)//2))\n\n    # Rotate the binary string n times and count the number of odd numbers in the rotated binary string\n    for i in range(n-1):\n        s = rotate_string(s, 1)\n    odd_count += sum(s[i]!= s[i+1] for i in range(len(s)//2))\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            s = s[-j-1] + s[j]\n        if s.count('1') % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # convert binary string to integer\n    s = int(s, 2)\n    \n    # initialize count to 0\n    count = 0\n    \n    # loop n number of times\n    for i in range(n):\n        \n        # find the last bit in the binary string\n        last_bit = s & 1\n        \n        # shift the binary string to the right by 1\n        s >>= 1\n        \n        # if the last bit was odd, increment the count\n        if last_bit:\n            count += 1\n            \n    # return the count of odd numbers\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Initialize variables\n    count = 0\n    temp = 0\n    \n    # Convert the binary string to a list of binary digits\n    digits = [int(digit) for digit in s]\n    \n    # Perform n rotations\n    for i in range(n):\n        # Initialize temp to 0\n        temp = 0\n        \n        # Perform the XOR operation\n        for j in range(len(digits)):\n            temp ^= digits[j]\n        \n        # Set digits to temp\n        digits = [temp] * len(digits)\n        \n        # Increment count by 1\n        count += 1\n    \n    # Find the number of odd digits\n    odd_count = 0\n    for digit in digits:\n        if digit % 2!= 0:\n            odd_count += 1\n    \n    # Return the result\n    return count * odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input binary string to a list of digits\n    digits = [int(digit) for digit in s]\n    \n    # Initialize a count variable to store the number of odd digits after rotating the string n times\n    count = 0\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Initialize a temporary variable to store the next digit to be appended to the list\n        temp = 0\n        \n        # Traverse the list of digits in reverse order\n        for j in range(len(digits)-1, -1, -1):\n            # Calculate the next digit to be appended to the list\n            next_digit = (digits[j] + temp) % 2\n            \n            # Append the next digit to the temporary variable\n            temp = digits[j]\n            \n            # Update the current digit\n            digits[j] = next_digit\n        \n        # Append the last digit of the temporary variable to the beginning of the list\n        digits.insert(0, temp)\n        \n    # Traverse the list of digits in reverse order to count the number of odd digits\n    for digit in digits[::-1]:\n        if digit % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    def rotate(s):\n        return s[-1] + s[:-1]\n\n    count = 0\n    current = s\n    for _ in range(n):\n        current = rotate(current)\n        count += current.count('1')\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert binary string to a list\n    s = list(s)\n    # initialize a counter\n    count = 0\n    # loop through the list n times\n    for i in range(n):\n        # rotate the list to the left by shifting the first element to the end\n        s.append(s.pop(0))\n        # loop through the rotated list to check for odd values\n        for j in s:\n            if j % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    def rotate_string(s, n):\n        # Initialize an empty string to store the rotated string\n        rotated_string = ''\n        # Iterate through each character in the input string\n        for char in s:\n            # Calculate the index of the next character to be added to the rotated string\n            next_index = (n - 1) % len(s) + s.index(char)\n            # Add the character to the rotated string at the next index\n            rotated_string += s[next_index]\n        # Return the rotated string\n        return rotated_string\n\n    # Rotate the input string n times\n    rotated_string = rotate_string(s, n)\n\n    # Initialize a counter to keep track of the odd numbers in the rotated string\n    odd_count = 0\n\n    # Iterate through each character in the rotated string\n    for char in rotated_string:\n        # Check if the character is odd\n        if int(char) % 2!= 0:\n            odd_count += 1\n\n    # Return the number of odd numbers in the rotated string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    #convert the binary string to an array of binary digits\n    arr = [int(i) for i in s] \n    #initialize a counter variable to keep track of the number of odd numbers\n    count = 0 \n    #rotate the array the given number of times\n    for i in range(n): \n        #reverse the array\n        arr.reverse() \n        #initialize a counter variable to keep track of the number of odd digits\n        odd_count = 0 \n        #iterate through the reversed array\n        for j in arr: \n            #if the digit is odd, increment the counter\n            if j % 2!= 0: \n                odd_count += 1 \n        #add the counter to the total count\n        count += odd_count \n    #return the total count\n    return count "
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of common elements between all pairs of elements in the nested list.\n\n    Args:\n    nestedlist: A list of lists where each inner list contains a list of elements.\n\n    Returns:\n    common_elements: A list of common elements between all pairs of elements in the nested list.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the frequency of each element in the nested list\n    freq = {}\n\n    # Iterate through each element in the nested list\n    for element in nestedlist:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq:\n            freq[element] = 1\n        # Otherwise, increment the frequency of the element in the dictionary\n        else:\n            freq[element] += 1\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through each element in the dictionary\n    for element, count in freq.items():\n        # If the frequency of the element is greater than 1, add the element to the common_elements list\n        if count > 1:\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # initialize an empty set to store the common elements\n    common_set = set()\n\n    # loop through each element in the nested list\n    for element in nestedlist:\n        # if the element is a list, recursively call the function\n        if isinstance(element, list):\n            common_set = common_set.union(common_in_nested_lists(element))\n        else:\n            # if the element is not a list, add it to the set\n            common_set.add(element)\n\n    # return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list containing the common elements in the list.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for item in lst:\n            # Add the element to the set if it is not already there\n            if item not in common:\n                common.add(item)\n    \n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_elements = set()\n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # If the element is already in the set, add it to the list of common elements\n            if elem in common_elements:\n                common_elements.remove(elem)\n    # Return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common and j not in [x for sublist in nestedlist for x in sublist]:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                common.remove(j)\n            else:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through each dictionary in the list\n    for dic in list1:\n        # If the dictionary is not empty, return False\n        if dic:\n            return False\n    # If we reach this point, all dictionaries are empty, so return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:  # checking for an empty dictionary\n            for k, v in item.items():\n                if v:  # checking for an empty value\n                    return False  # if found empty, then return False\n            return True  # if all elements are empty, return True\n    return True  # if no empty dictionaries are found, then return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the integer variable to 0\n    total = 0\n    # Loop through the list of numbers\n    for num in nums_list:\n        # Add the number to the total\n        total += num\n    # Return the total integer value\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    # Iterate over the tuple and add each element to the sum\n    for num in nums:\n        total += num\n    # Return the total as the single integer\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty list to store the digits of the integer\n    int_list = []\n    # Iterate over each digit in the tuple\n    for num in nums:\n        # Convert the digit to an integer\n        digit = int(num)\n        # Append the integer to the list\n        int_list.append(digit)\n    # Convert the list of integers into a single integer\n    result = sum(int_list)\n    # Return the single integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the final integer\n    final_int = 0\n    # Loop through each number in the tuple\n    for num in nums:\n        # Convert the current number to an integer and add it to the final integer\n        final_int += int(num)\n    # Return the final integer\n    return final_int"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list to perform the summation\n    nums = list(nums)\n    # Convert all elements in the list to integers\n    nums = [int(n) for n in nums]\n    # Sum all integers in the list\n    result = sum(nums)\n    # Return the sum as an integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist.remove(element)\n                sublist.append(float(element))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            float_item = float(item)\n            result.append(float_item)\n        except ValueError:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for item in sub_list:\n            try:\n                float(item)\n            except ValueError:\n                if item.isnumeric():\n                    float(item)\n                else:\n                    print(f\"{item} cannot be converted to a float.\")\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if type(test_list[i][j]) in [str, int, float]:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, float) or isinstance(element, int):\n                continue\n            try:\n                float_element = float(element)\n                sublist[sublist.index(element)] = float_element\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character and store the resulting list in the variable 'words'\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    split_string = string.split()\n    # convert each element of the list to a string\n    list_of_strings = [str(elem) for elem in split_string]\n    # return the list of strings\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n\n    # Traverse the array from both ends\n    for i in range(n):\n        if arr[i] == arr[n-i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in count:\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):  # check if there are duplicates\n        return None\n    \n    # initialize a variable to keep track of the first occurrence of the element\n    first_occurrence = None\n    \n    # iterate over the array and keep track of the first occurrence of the element\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            first_occurrence = i\n            break\n    \n    # return the first occurrence of the element\n    return arr[first_occurrence]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    unique_element = None\n    \n    for i in range(len(arr)):\n        if count == 0:\n            unique_element = arr[i]\n            count = 1\n        elif arr[i] == unique_element:\n            count += 1\n        else:\n            count -= 1\n    \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n    return arr[n-count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for key, value in count.items():\n        if value == 1:\n            return key\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        i += 1\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for the first and last element\n    first = arr[0]\n    last = arr[-1]\n\n    # Initialize variables for the count of the first and last element\n    first_count = 0\n    last_count = 0\n\n    # Loop through the array and count the number of times the first and last element appears\n    for i in range(len(arr)):\n        if arr[i] == first:\n            first_count += 1\n        if arr[i] == last:\n            last_count += 1\n\n    # Check if the count of the first and last element is 1\n    if first_count == 1 and last_count == 1:\n        return first\n    else:\n        return \"The element that appears only once in the sorted array is not present in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the frequency dictionary and find the element that appears only once\n    for num, freq in freq.items():\n        if freq == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    count = 0\n    prev_elem = None\n    \n    # Iterate over the array\n    for elem in arr:\n        # If the current element is equal to the previous one, increment the count\n        if elem == prev_elem:\n            count += 1\n        # If the count reaches 1, return the current element\n        elif count == 1:\n            return elem\n        # Reset the count to 0 if the current element is different from the previous one\n        else:\n            count = 0\n            prev_elem = elem\n    \n    # If the array contains only one unique element, return it\n    if count == 1:\n        return arr[0]\n    \n    # If the array contains no unique element, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    '''\n    Function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i] * lst[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_abs_product = 0\n    max_product = [0, 0]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n                max_product = [list1[i][0], list1[j][1]]\n    return max_product, max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    # initializing a variable to keep track of the maximum absolute product\n    max_product = float('-inf')\n    \n    # iterating over the list of tuples\n    for i in range(len(lst)):\n        # iterating over the remaining tuples in the list\n        for j in range(i+1, len(lst)):\n            # calculating the absolute product of the two numbers in each pair\n            product = abs(lst[i][0] * lst[j][1])\n            \n            # updating the maximum absolute product if the new product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize variables to keep track of max product of two numbers in a tuple and max absolute product of all pairs of numbers\n    max_product_tuple = 0\n    max_abs_product = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two numbers in the tuple and take the absolute value\n            product = abs(list1[i]*list1[j])\n            # Update the max_product_tuple variable if the new product is greater\n            if product > max_product_tuple:\n                max_product_tuple = product\n            # Update the max_abs_product variable if the new product is greater\n            if abs(product) > max_abs_product:\n                max_abs_product = abs(product)\n\n    # Return the maximum absolute product of all pairs of numbers in the list\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum absolute product and minimum value\n    max_product = list1[0][0] * list1[0][1]\n    min_value = list1[0][0]\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Calculate the absolute difference between each pair of numbers in the tuple\n        diff_product = abs(tup[0] * tup[1])\n\n        # Update the maximum absolute product and minimum value if the current difference is greater\n        if diff_product > max_product:\n            max_product = diff_product\n            min_value = min(tup[0], tup[1])\n        elif diff_product < min_value:\n            min_value = diff_product\n\n    # Return the maximum absolute product and minimum value\n    return max_product, min_value"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n\n    # loop through each tuple in the list\n    for tup in list1:\n        # calculate the absolute difference between the first and second element of the tuple\n        diff = abs(tup[0] - tup[1])\n\n        # update max_product if the new absolute difference is greater\n        if diff > max_product:\n            max_product = diff\n\n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, prod)\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    max_abs_product = float('-inf')\n    pair_products = []\n\n    for pair in list1:\n        product = pair[0] * pair[1]\n        abs_product = abs(product)\n\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n            pair_products = [pair]\n        elif abs_product == max_abs_product:\n            pair_products.append(pair)\n\n    if not pair_products:\n        return 0\n\n    max_product = pair_products[0][0] * pair_products[0][1]\n\n    for pair in pair_products[1:]:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == 1:\n            continue\n        if is_prime(i) and is_prime(sum(divisors(i), divisors(i)))):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef divisors(num):\n    divs = []\n    for i in range(1, num):\n        if num % i == 0:\n            divs.append(i)\n    return divs"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize the sum of amicable numbers to zero\n    amicable_sum = 0\n    \n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        \n        # Check if the number is divisible by any of its factors\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            \n            # Check if the number is also a multiple of its factors\n            for k in range(1, int(i/j) + 1):\n                if j % k == 0:\n                    break\n            else:\n                # If the number is amicable, add it to the sum\n                amicable_sum += i\n    \n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0 and num // i!= i:\n            return True\n    return False\n\nprint(sum_amicable_numbers(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    # Check if limit is a positive integer\n    if not isinstance(limit, int) or limit <= 0:\n        raise ValueError(\"Limit must be a positive integer\")\n\n    # Initialize variables\n    sum_of_amicable = 0\n    previous_number = 0\n    current_number = 1\n\n    # Loop through all numbers up to limit\n    while current_number <= limit:\n        # Check if the current number is amicable\n        if is_amicable(previous_number, current_number):\n            sum_of_amicable += current_number\n        # Update previous and current numbers for the next iteration\n        previous_number = current_number\n        current_number += 1\n\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to any number between 1 and the square root of the number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0 and is_amicable(i):\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes an integer as input and returns the sum of all amicable numbers from 1 to the input number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    This function takes an integer as input and returns the sum of all proper divisors of the input number.\n    '''\n    proper_divisors_sum = 1\n    for i in range(2, num):\n        if num % i == 0:\n            proper_divisors_sum += i\n    return proper_divisors_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num in amicable_numbers:\n            continue\n        is_amicable = False\n        for x in range(1, num):\n            if num % x == 0:\n                is_amicable = True\n                break\n        if is_amicable:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i in amicable_pairs(i):\n            sum += i\n    return sum\n\ndef amicable_pairs(n):\n    '''\n    Write a function that returns a set of all amicable pairs of integers less than or equal to n.\n    '''\n    pairs = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            j = n // i\n            if i!= j and amicable(i, j):\n                pairs.add((i, j))\n    if amicable(n, int(n**0.5)+1):\n        pairs.add((n, int(n**0.5)+1))\n    return pairs\n\ndef amicable(a, b):\n    '''\n    Write a function that returns True if a and b are amicable, and False otherwise.\n    '''\n    sum_ab = a + b\n    sum_ba = b + a\n    if sum_ab == sum_ba:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # List of all prime numbers up to the limit\n    primes = [2]\n    i = 3\n    while i * i <= limit:\n        if i in primes:\n            primes.append(i)\n        i += 2\n\n    # Initialize variables for the sum and count of amicable numbers\n    sum_amicable = 0\n    count_amicable = 0\n\n    # Check each number up to the limit\n    for i in range(1, limit + 1):\n        # Check if the number is prime and not equal to 1 (since 1 is not an amicable number)\n        if i in primes and i!= 1:\n            # Check if the number is amicable to 1\n            if is_amicable(i, 1):\n                sum_amicable += i\n                count_amicable += 1\n\n    return sum_amicable, count_amicable\n\n\ndef is_amicable(num, den):\n    \"\"\"\n    Check if a given number is amicable to another number.\n    \"\"\"\n    return num == den * den"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in degrees.\n    \"\"\"\n    angle_rad = cmath.phase(a + b)\n    angle_deg = cmath.phase(angle_rad) * 180 / cmath.pi\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Define the base and the exponent\n    angle = cmath.phase(a + b * 1j)\n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers and returns the angle of the complex number using the cmath module.\n    \"\"\"\n    # Calculate the angle of the complex number using the cmath module\n    angle = cmath.phase(a + b*1j)\n    # Convert the angle from radians to degrees and return the result\n    return round(angle*180/cmath.pi,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers as inputs (a+bi) and returns the angle in radians.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = a + b * 1j\n    angle = cmath.phase(z)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of the length of the longest sub-string that contains 0s and 1s\n    max_diff = 0\n    longest_0s_1s = 0\n    \n    # Iterate through the string\n    for i in range(len(string)):\n        # Initialize variables to keep track of the number of 0s and 1s in the current sub-string\n        count_0s = 0\n        count_1s = 0\n        \n        # Iterate through the sub-string\n        for j in range(i, len(string)):\n            # Count the number of 0s and 1s in the current sub-string\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            \n            # Calculate the difference in the number of 0s and 1s\n            diff = count_0s - count_1s\n            \n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n                longest_0s_1s = count_0s\n                \n    return longest_0s_1s"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    # convert the string to a list of integers\n    binary_list = [int(bit) for bit in string]\n    n = len(binary_list)\n\n    # initialize the two counters\n    count_0 = 0\n    count_1 = 0\n\n    # loop through the list and update the counters\n    for i in range(n):\n        if binary_list[i] == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # find the maximum difference between the counters\n        max_diff = max(count_0 - count_1, count_1 - count_0)\n        if max_diff > 1:\n            return max_diff\n\n    # return 1 if the binary string has no sub-string with a difference greater than 1\n    return 1"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # initialize variables\n    max_diff = 0\n    current_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # iterate through the string\n    for i in range(len(string)):\n        # check if the current character is a 0 or a 1\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # update the current difference\n        current_diff = count_0 - count_1\n\n        # update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = i\n\n    for j in range(1, n + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if string[i - 1] == '0':\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n\n    return dp[n][n]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0s = 0\n        count_1s = 0\n        \n        for j in range(length):\n            if string[i] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            \n            if count_0s - count_1s > max_diff:\n                max_diff = count_0s - count_1s\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        if count_0s - count_1s > max_diff:\n            max_diff = count_0s - count_1s\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # Otherwise, increment the count of 1s\n        else:\n            count_1 += 1\n\n        # Calculate the difference between the counts\n        diff = abs(count_0 - count_1)\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    length = len(string)\n    for i in range(length - 1):\n        zero_count = 0\n        one_count = 0\n        for j in range(i+1, length):\n            if string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n\n    # Convert input numbers to sets to remove any duplicates\n    a_set = set(a)\n    b_set = set(b)\n\n    # Get the intersection of the two sets to get the common divisors\n    common_divisors = a_set.intersection(b_set)\n\n    # Calculate the sum of the common divisors\n    sum_of_divisors = sum(common_divisors)\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is divisible by any number from 1 to n\n    def is_common_divisor(n, m):\n        for i in range(1, n + 1):\n            if m % i == 0:\n                return False\n        return True\n    \n    # Initialize variables to store the sum and the divisor\n    common_divisor_sum = 0\n    divisor = 1\n    \n    # Loop through all numbers from 1 to b\n    for i in range(1, b + 1):\n        # Check if i is a common divisor of a and b\n        if is_common_divisor(a, i) and is_common_divisor(b, i):\n            # Add i to the sum and update the divisor to i\n            common_divisor_sum += i\n            divisor = i\n    \n    # Return the sum of common divisors of a and b\n    return common_divisor_sum // divisor"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # first, get all the common divisors of a and b\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    \n    # then, calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor (GCD) of two integers a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    # find the GCD of a and b\n    gcd_ab = gcd(a, b)\n    # find the GCD of the GCD of a and b and b\n    gcd_abc = gcd(gcd_ab, b)\n    # return the sum of the GCD of a and b and b\n    return gcd_abc"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the divisors of a and b\n    div_a = []\n    div_b = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            div_a.append(i)\n    for j in range(1, b + 1):\n        if b % j == 0:\n            div_b.append(j)\n    # Find the common divisors of the two numbers\n    div_common = []\n    for i in range(1, min(a, b) + 1):\n        if i in div_a and i in div_b:\n            div_common.append(i)\n    # Calculate the sum of common divisors\n    sum_common = 0\n    for i in div_common:\n        sum_common += i\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of common divisors\n    divisors_sum = 0\n    \n    # Calculate the sum of common divisors of a and b\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    \n    return divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        if a % b == 0:\n            return b + sum(a//b, b)\n        else:\n            return sum(a, b-1)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # function to check if a number is a common divisor of two numbers\n    def is_common_divisor(num, div1, div2):\n        return (num % div1 == 0 and num % div2 == 0)\n\n    # function to find the sum of common divisors of two numbers\n    def common_divisor_sum(num1, num2):\n        div1, div2 = 1, 1\n\n        while div1 <= num1 and div2 <= num2:\n            if is_common_divisor(num1, div1, div2):\n                num1 = num1 // div1\n            else:\n                div1 += 1\n\n            if is_common_divisor(num2, div1, div2):\n                num2 = num2 // div2\n            else:\n                div2 += 1\n\n        return num1 + num2\n\n    # find the sum of common divisors of the two given numbers\n    result = common_divisor_sum(a, b)\n\n    # print the result\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Set a set to store the divisors of a\n    divisors_a = set(divisor for divisor in range(1, a+1) if a % divisor == 0)\n    # Set a set to store the divisors of b\n    divisors_b = set(divisor for divisor in range(1, b+1) if b % divisor == 0)\n    # Find the common divisors of a and b\n    common_divisors = divisors_a.intersection(divisors_b)\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisor(a, b):\n    '''\n    This function returns the common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef sum(a, b):\n    '''\n    This function returns the sum of common divisors of two given numbers.\n    '''\n    return a + b - common_divisor(a, b)\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # extract the last bit of y\n        last_bit = y & 1\n        # calculate the new value of result\n        result = result << 1\n        if last_bit == 1:\n            result = result + x\n        # shift y to the right\n        y = y >> 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n\n    Parameters:\n    x (int): The first integer to be multiplied.\n    y (int): The second integer to be multiplied.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    product = 0\n    while y!= 0:\n        if y & 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n        n: an integer, the maximum number of characters that a word can have.\n        words: a list of words, the words that we want to check.\n\n    Returns:\n        A list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters in a list of words.\n\n    Parameters:\n    n (int): the number of characters that a word must have to be considered long\n    words (list): a list of strings\n\n    Returns:\n    list: a list of words that are longer than n characters in the input list of words\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for rows and columns of equal size\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check for rows and columns of equal sum\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= sum(my_matrix):\n            return False\n\n    # Check for diagonals of equal sum\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i][i])!= sum(my_matrix) or sum(my_matrix[i][len(my_matrix)-i-1])!= sum(my_matrix):\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        # Check each row for magic squares\n        for j in range(cols):\n            # Check if the number is present in the matrix\n            if my_matrix[i][j]!= sum(range(1, cols+1)) - sum(range(1, i+1)) + sum(range(i+1, rows+1)):\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(cols):\n        # Check each column for magic squares\n        for j in range(rows):\n            # Check if the number is present in the matrix\n            if my_matrix[j][i]!= sum(range(1, rows+1)) - sum(range(1, j+1)) + sum(range(j+1, cols+1)):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only unique elements\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if the matrix contains a row of zeros\n    row_of_zeros = [0] * len(my_matrix[0])\n    for row in my_matrix:\n        if row!= row_of_zeros:\n            return False\n    \n    # Check if the matrix contains a column of zeros\n    for col in range(len(my_matrix[0])):\n        column_of_zeros = [0] * len(my_matrix)\n        for row in my_matrix:\n            if row[col]!= column_of_zeros[col]:\n                return False\n    \n    # Check if the matrix contains a sub-square of zeros\n    sub_square_of_zeros = [0] * len(my_matrix[0])\n    for row in range(len(my_matrix) - len(my_matrix[0])):\n        for col in range(len(my_matrix[0]) - len(my_matrix[0])):\n            sub_square = [0] * len(my_matrix[0])\n            for i in range(len(my_matrix[0])):\n                sub_square[i] = my_matrix[row + i][col + i]\n            if sub_square!= sub_square_of_zeros:\n                return False\n    \n    # If all the tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a variable to store the sum of each row and column\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix[0])\n    \n    # Calculate the sum of each row and column\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n    \n    # Check if the sum of each row and column is equal to the sum of the matrix\n    if sum(row_sum)!= sum(col_sum) or sum(row_sum)!= len(my_matrix) ** 2 or sum(col_sum)!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if the matrix has any repeated values\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            count = 0\n            for k in range(len(my_matrix)):\n                if my_matrix[i][j] == my_matrix[k][j]:\n                    count += 1\n            if count > 1:\n                return False\n    \n    # If the matrix passes all the tests, it is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize variables to store the sums of the diagonals\n    diagonal1 = 0\n    diagonal2 = 0\n\n    # check if the dimensions of the matrix are valid\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # calculate the sum of the i-th row and j-th column\n            current_sum = my_matrix[i][j] + diagonal1 + diagonal2\n\n            # check if the current sum is a magic square number\n            if current_sum == i + j:\n                diagonal1 += i\n                diagonal2 += j\n            elif current_sum > i + j:\n                diagonal1 -= my_matrix[i][j]\n                diagonal2 -= my_matrix[j][i]\n\n    # if the function has not returned by now, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the elements in the matrix\n    sum_elements = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the elements is equal to the number of elements in the matrix\n    if sum_elements == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize the size of the matrix\n    size = len(my_matrix)\n\n    # check if the matrix is a square\n    if size!= size or size!= len(set(map(tuple, my_matrix))):\n        return False\n\n    # calculate the sum of all the elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # check if the total is equal to the sum of the squares of the first row, second column, and third diagonal\n    first_row_total = sum(row[0] ** 2 for row in my_matrix)\n    second_column_total = sum(my_matrix[i][1] ** 2 for i in range(size))\n    third_diagonal_total = sum(my_matrix[i][size - i - 1] ** 2 for i in range(size))\n\n    if total!= first_row_total + second_column_total + third_diagonal_total:\n        return False\n\n    # check if the matrix has the required sum of elements\n    for i in range(size):\n        if sum(my_matrix[i])!= size ** 2:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize the sum of the rows and columns\n    row_sum = 0\n    col_sum = 0\n\n    # loop through each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # add the current element to the sum of the row and column\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n\n    # check if the sum of the rows and columns is equal to the total number of elements in the matrix\n    if row_sum == len(my_matrix) * (len(my_matrix) + 1) // 2 and col_sum == len(my_matrix) * (len(my_matrix) + 1) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    if len(set([len(row) for row in my_matrix]))!= 1:\n        return False\n    \n    # Check if all columns have the same length\n    if len(set([len(row) for row in zip(*my_matrix)]))!= 1:\n        return False\n    \n    # Check if the main diagonal has all unique elements\n    if len(set(my_matrix[i][i] for i in range(len(my_matrix))))!= len(my_matrix):\n        return False\n    \n    # Check if the secondary diagonal has all unique elements\n    if len(set(my_matrix[i][-i-1] for i in range(len(my_matrix))))!= len(my_matrix):\n        return False\n    \n    # If none of the checks fail, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a list of the matrix's dimensions\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n    \n    # Check if the matrix contains only digits\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if each row sums to the same value\n    for i in range(rows):\n        sum_row = sum(my_matrix[i])\n        if sum_row!= rows:\n            return False\n    \n    # Check if each column sums to the same value\n    for j in range(cols):\n        sum_col = sum(row[j] for row in my_matrix)\n        if sum_col!= rows:\n            return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item\n\n    # If no item has the maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency in the dictionary\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    max_freq = max(freq_map.values())\n    max_item = None\n    for item, freq in freq_map.items():\n        if freq == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through each item in the list\n    for num in nums:\n        # Increment the frequency count for the current item\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    # Return the item with the maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of numbers\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_num = max(freq_dict, key=freq_dict.get)\n    max_count = freq_dict[max_num]\n\n    return max_num, max_count"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n            vowel_count += 1\n    while vowel_count > 0:\n        new_str = new_str[1:] + new_str[0]\n        vowel_count -= 1\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = ''\n    for char in string:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            if new_str == '':\n                new_str += char\n            elif char.lower() == 'a':\n                new_str = char + new_str\n            elif char.lower() == 'e':\n                new_str = new_str + char\n            elif char.lower() == 'i':\n                new_str = new_str + char\n            elif char.lower() == 'o':\n                new_str = new_str + char\n            elif char.lower() == 'u':\n                new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_count = 0\n    reversed_str = ''\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a vowel, increment the vowel count and append it to the reversed string\n        if char in vowels:\n            vowel_count += 1\n            reversed_str = char + reversed_str\n    \n    # If the string only had vowels, reverse the string and return the reversed string\n    if vowel_count == 0:\n        return str1\n    \n    # Reverse the vowels and return the reversed string\n    reversed_str = reversed(reversed_str)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = 'AEIOUaeiou'\n    result = []\n    for char in string:\n        if char in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert each element of the tuple to a string\n    str_list = [str(elem) for elem in tup1]\n    # join the list of strings with a comma and space\n    return \", \".join(str_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Join the tuple elements with a comma and a space\n    tup_str = \", \".join(str(elem) for elem in tup1)\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a string and return it\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum to zero\n    negative_sum = 0\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add it to the negative sum\n            negative_sum += num\n    \n    # Return the negative sum\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    while n > 0:\n        num += n\n        n -= 1\n    return num\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th hexagonal number is\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    elif n % 2 == 0:\n        return 2 * hexagonal_num(n//2) - 1\n    else:\n        return 2 * hexagonal_num((n-1)//2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0.5 * (1 + 5 ** 0.5)\n    b = 0.5 * (1 - 5 ** 0.5)\n    return int(a + (b * n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the value of the current hexagon to be n.\n    current = n\n    \n    # Iterate n times to generate the nth hexagon.\n    for i in range(n):\n        # Multiply the current hexagon by 3 and add 1.\n        current = 3 * current + 1\n        \n        # Print the current hexagon.\n        print(current, end=' ')"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Calculate the value of n (which is the number of rows)\n    num_rows = n\n    # Calculate the length of each row\n    row_length = 2 * num_rows - 1\n    # Initialize the value of the hexagonal number to 0\n    hex_num = 0\n    # Loop through each row\n    for row in range(num_rows):\n        # Multiply the row number by 2 (since each row is twice as long as the previous one)\n        row = 2 * row\n        # Loop through each number in the row\n        for col in range(row_length):\n            # Add the value of each number to the hexagonal number\n            hex_num += col\n        # Add the value of each row to the hexagonal number\n        hex_num += row\n        # Decrement the row_length by 1 to move on to the next row\n        row_length -= 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize sum\n    sum = 0\n\n    # loop through each row\n    for i in range(n):\n        # loop through each column\n        for j in range(i+1):\n            # add each hexagonal number to the sum\n            sum += 2 * (i+j) + 1\n\n    # return the sum of the nth row\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 2\n    for i in range(n):\n        a, b = b, a + b\n        c = a + b\n        print(c, end=\" \")"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # Convert the list of integers to an array of integers\n    zero_count = 0\n    non_zero_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to an array of bytes\n    arr = array('b', nums)\n    \n    # Initialize counters for non-zero and zero values\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate through the array of bytes and count the number of non-zero and zero values\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    if non_zero_count == 0:\n        return 0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    return zeros[0]/non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    if nonzeros == 0:\n        return 0\n    return zeros/nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums)) # initialize array to store counts of zeroes and non-zeroes\n    \n    for num in nums:\n        if num == 0:\n            zero_count[0] += 1 # increment count of zeroes\n        else:\n            zero_count[1] += 1 # increment count of non-zeroes\n    \n    zero_count[2] = round(zero_count[0] / zero_count[1], 3) # calculate ratio of zeroes to non-zeroes\n    \n    return zero_count[2] # return the ratio of zeroes to non-zeroes as a float"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n    \n    for num in nums:\n        if num == 0:\n            zeros.append(0)\n        else:\n            ones.append(1)\n    \n    zeros_count = zeros.count(0)\n    non_zeros_count = len(ones)\n    \n    zero_ratio = zeros_count / non_zeros_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a list to avoid modifying the original array\n    nums_list = list(nums)\n    zeros = 0\n    nonzeros = 0\n    for num in nums_list:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    if nonzeros == 0:\n        return None\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    if count[0] == 0:\n        return 0\n    else:\n        return count[1] / count[0]"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number is 0\n    if n == 0:\n        return True\n\n    # check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # check if the number is a sum of powers of 2\n    num = n\n    sum_of_powers_of_two = 0\n    while num > 0:\n        if num & 1 == 1:\n            sum_of_powers_of_two += num\n        num >>= 1\n\n    if n == sum_of_powers_of_two:\n        return True\n\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n > 0:\n        if n & 1 == 1:\n            if 2**i in n:\n                return False\n            else:\n                n -= 2**i\n        else:\n            n >>= 1\n        i += 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return \"Error: Input number should be a positive integer.\"\n\n    # Initialize variables\n    count = 0\n    num = n\n    \n    # Loop through each power of 2 from 0 to 32\n    while num > 0:\n        # Check if the number is a power of 2\n        if num & 1 == 1:\n            count += 1\n        # Move to the next power of 2\n        num >>= 1\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    if count == 32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number is power of 2 or not\n    if n & (n - 1) == 0: \n        return True\n    else: \n        # check whether the number can be represented as sum of powers of 2\n        for i in range(1, int(n**0.5)+1): \n            if n % i == 0: \n                if is_Sum_Of_Powers_Of_Two(n/i): \n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is less than 2^16\n    if n < 2**16:\n        # Check if the number is divisible by 2^16\n        if n % (2**16) == 0:\n            # Initialize a variable to count the number of powers of 2 in the number\n            count = 0\n            # Initialize a variable to store the sum of powers of 2 in the number\n            power_sum = 0\n            # Loop through all the bits in the number\n            for i in range(16):\n                # Check if the current bit is set to 1\n                if n & (1 << i):\n                    # Add 2^i to the power sum and increment the count\n                    power_sum += 2**i\n                    count += 1\n            # Check if the number is divisible by the sum of powers of 2\n            if n % power_sum == 0:\n                # Check if the count is equal to 16\n                if count == 16:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function checks whether a given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    # We check for non-zero powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two <<= 1\n    \n    # If no non-zero powers of 2 are found, we check for the sum of non-zero powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if power_of_two * power_of_two > n:\n            return True\n        if n % power_of_two == 0:\n            return False\n        power_of_two <<= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Base case: if n is 1, it can be represented as sum of non-zero powers of 2\n    if n == 1:\n        return True\n    \n    # Base case: if n is even, it can't be represented as sum of non-zero powers of 2\n    if n % 2 == 0:\n        return False\n    \n    # Recursive case: divide n by 2 and check if the result can be represented as sum of powers of 2\n    if is_Sum_Of_Powers_Of_Two(n // 2):\n        return True\n    \n    # If we reach here, it means we couldn't find a way to represent n as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True \n    elif n == 1: \n        return False \n    else: \n        for i in range(2, int(n**0.5)+1): \n            if n % i == 0: \n                if is_Sum_Of_Powers_Of_Two(n//i) == True: \n                    return True \n        return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    return count % 2 == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    \n    # Helper function to check whether n can be represented as sum of powers of 2\n    def helper(num):\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return helper(num // 2)\n        return helper(num * 3 + 1)\n    \n    # Check if the number can be represented as sum of powers of 2 using the helper function\n    if n == sum(range(2, int(n**0.5)+1)):\n        return True\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # convert radius to radians and multiply by 2 and pi\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # Formula to find the circumference of a circle using the formula of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r # assuming the unit of length is in meters\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r #formula for calculating circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        result = []\n        for sub_lst in lst:\n            result.extend(flatten(sub_lst))\n        result.extend(sub_lst)\n        return result\n    \n    flattened_list = flatten(test_list)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    unique_set = set()\n    for sublist in test_list:\n        for num in sublist:\n            unique_set.add(num)\n    return unique_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Define an empty set to store the flattened numbers\n    flattened_numbers = set()\n    \n    # Loop through each list in the test_list\n    for sublist in test_list:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Add the number to the flattened_numbers set\n            flattened_numbers.add(num)\n    \n    # Return the flattened_numbers set\n    return flattened_numbers"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # create a copy of the list to avoid modifying the original list\n    nums_copy = nums.copy()\n    \n    # bubble sort the copy of the list\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums_copy[j] > nums_copy[j+1]:\n                nums_copy[j], nums_copy[j+1] = nums_copy[j+1], nums_copy[j]\n    \n    # copy the sorted copy back to the original list\n    nums[:] = nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Perform bubble sort to reverse sorted sublists\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # Print the sorted list\n    print(\"Sorted list:\", nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list.\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the element at index i.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    nums = merge_sort(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start by sorting the first n-1 elements\n    for i in range(n-1):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # Now, sort the last element\n    max_index = n-1\n    for i in range(n-2, 0, -1):\n        if nums[i] < nums[max_index]:\n            max_index = i\n    nums[0], nums[max_index] = nums[max_index], nums[0]\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Create a list of length n with 1s\n    rev_nums = [1] * n\n    \n    # Reverse the order of the elements in the list\n    for i in range(n-1, -1, -1):\n        rev_nums[i] = nums[i]\n    \n    # Bubble sort the reversed list\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if rev_nums[j] > rev_nums[j+1]:\n                # Swap the elements\n                rev_nums[j], rev_nums[j+1] = rev_nums[j+1], rev_nums[j]\n                \n    # Return the sorted list\n    return rev_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def reverse(arr, low, high):\n        while low < high:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n    \n    def reverse_sort(arr, low, high):\n        if low < high:\n            pivot = arr[low]\n            i = low + 1\n            j = high\n            while i <= j:\n                if arr[i] < pivot:\n                    i += 1\n                elif arr[i] > pivot:\n                    j -= 1\n                else:\n                    i += 1\n                    j -= 1\n            reverse(arr, low, i - 1)\n            reverse(arr, i, j)\n            reverse_sort(arr, low, i - 2)\n            reverse_sort(arr, j + 1, high)\n    \n    # Initialize the array\n    nums.reverse()\n    \n    # Sort the array in reverse order\n    reverse_sort(nums, 0, len(nums) - 1)\n    \n    # Reverse the array again\n    nums.reverse()\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # Iterate over the first n-1 elements of the list\n    for i in range(n-1):\n        # Find the maximum element in the remaining elements\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # choose the largest unsorted element\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # swap the largest element with the current element\n        nums[i], nums[largest] = nums[largest], nums[i]\n        # reverse the sorted part of the array\n        if i!= 0:\n            nums[0:i], nums[i:0] = nums[i:0], nums[0:i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the length of the list and a list of swaps to keep track of which numbers were swapped\n    n = len(nums)\n    swaps = [False] * n\n\n    # Start the pancake sort algorithm\n    for i in range(n - 1, 0, -1):\n\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if not swaps[j] and nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # If there was a swap, swap the elements and mark the swap as done\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            swaps[i], swaps[max_idx] = True, True\n\n        # Print the sorted list after each iteration\n        print(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize count to zero\n    count = 0\n\n    # Iterate through the three lists\n    for i in range(len(list1)):\n\n        # Check if the current items in the first list are equal to the corresponding items in the second list\n        if list1[i] == list2[i]:\n\n            # Check if the current items in the second list are equal to the corresponding items in the third list\n            if list2[i] == list3[i]:\n\n                # Increment the count if all three items are the same\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n            if count >= 2:\n                return count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n\n    count = 0  # variable to keep track of number of lists\n    \n    for item in Input:  # loop through each item in the tuple\n        if type(item) == list:  # check if the item is a list\n            count += 1  # increment the count if it is a list\n    \n    return count  # return the count of lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        curr_diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    # Initialize maximum absolute difference to the first element of the array\n    max_diff = abs(arr[0])\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)): \n        # Calculate the absolute difference between current and next element in the array\n        diff = abs(arr[i] - arr[i - 1])\n\n        # Update maximum absolute difference if the current difference is greater\n        if diff > max_diff: \n            max_diff = diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = float('-inf')   # initialize maximum difference as negative infinity\n    \n    for i in range(len(arr)):   # loop through each element of the array\n        for j in range(i+1, len(arr)):   # loop through each element of the array starting from the next element\n            diff = abs(arr[i]-arr[j])   # calculate absolute difference between current and next element\n            if diff > max_diff:   # update maximum difference if found a larger one\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    # Initialize the maximum absolute difference to be 0\n    max_diff = 0\n    \n    # Iterate through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers x and y that satisfy ax + by = n,\n    or returns None if no such solution exists.\n    \"\"\"\n    for x in range(n - 1, -1, -1):\n        if a * x + b * (n - x) == n:\n            return (x, n - x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    \n    x = (-b) // a\n    y = (-a*x) // b\n    \n    if n == x + y*b:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Define the system of equations to be solved\n    system = [\n        [a, b],\n        [1, 1]\n    ]\n\n    # Find the solution using the LinearSystemSolver module\n    from sympy import Matrix, solve\n    solver = solve(system, [a, b])\n\n    # Check if there is a solution\n    if len(solver) == 0:\n        return None\n\n    # Extract the solution\n    x, y = solver[0]\n\n    # Check if the solution satisfies the equation ax + by = n\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y variables with negative infinity\n    x = float('-inf')\n    y = float('-inf')\n    # initialize counter variable for number of solutions found\n    count = 0\n    # loop while counter variable is less than n\n    while count < n:\n        # update x and y values and check if they satisfy ax + by = n\n        if a * x + b * y == n:\n            # increment counter variable\n            count += 1\n            # append x and y values to a tuple and return it\n            return (x, y)\n        # if a * x + b * y is less than n, update x and y values\n        elif a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    # if the loop completes without finding a solution, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the variables x and y\n    x = 0\n    y = 0\n    \n    # Initialize the variables d, d_plus, and d_minus\n    d = a\n    d_plus = 1\n    d_minus = 0\n    \n    # Initialize the variable iteration_count\n    iteration_count = 0\n    \n    # Initialize a variable to keep track of whether a solution was found or not\n    solution_found = False\n    \n    # Loop until we find a solution or reach the maximum number of iterations\n    while not solution_found and iteration_count < 1000:\n        # Increment the iteration count\n        iteration_count += 1\n        \n        # Check if the current value of x is even or odd\n        if d % 2 == 0:\n            # If it is even, then increment x by 1 and divide d by 2\n            x += 1\n            d = int(d / 2)\n        else:\n            # If it is odd, then decrement x by 1 and divide d by 2\n            x -= 1\n            d = int(d / 2)\n        \n        # Check if the current value of x satisfies the given equation\n        if a * x + b * y == n:\n            # If it does, then we have found a solution\n            solution_found = True\n    \n    # If we have found a solution, then return a tuple with x and y\n    if solution_found:\n        return (x, y)\n    # If we have not found a solution, then return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables for x and y\n    x = 0\n    y = 0\n\n    # find the number of iterations required to find a solution\n    iterations = 0\n    while a*x**2 + b*x + n!= 0:\n        x += 1\n        iterations += 1\n\n    # check if there is a solution\n    if iterations == 0:\n        return None\n\n    # find the solution using the formula ax + by = n\n    while a*x**2 + b*x + n!= 0:\n        y = n // (a*x**2 + b*x)\n        x += 1\n\n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = (-n + b**0.5) / a\n        y = (-n - b**0.5) / a\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x,)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a or b is zero\n    if a == 0 or b == 0:\n        return None\n    \n    # initialize variables\n    x, y = 0, 0\n    \n    # iterate through n and check if x and y satisfy ax + by = n\n    while x <= n // a:\n        while y <= n // b:\n            if a * x + b * y == n:\n                return (x, y)\n            y += 1\n        x += 1\n        y = 0\n    \n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through the list1 to find the elements to remove from list2\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set to store the elements in list2\n    set_2 = set(list2)\n    \n    # Loop through each element in list1\n    for i in range(len(list1)):\n        # If the element is present in set_2, remove it from list1\n        if list1[i] in set_2:\n            del list1[i]\n    \n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # iterate over the list1 and check if each element is in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            # remove the element from list1\n            list1.pop(i)\n            # decrement the index\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # create a set to store the elements from the second list\n    set2 = set(list2)\n\n    # iterate over the first list and remove the elements present in the second list using the set2\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            list1.pop(i)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # initialize an empty list to store the unique elements\n    unique_list = []\n    # loop through each element in list1\n    for element in list1:\n        # check if the element is not present in list2\n        if element not in list2:\n            # add the element to the unique_list\n            unique_list.append(element)\n    # return the unique_list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new empty list to store the result\n    result = []\n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is not present in the second list\n        if element not in list2:\n            # If it's not, add it to the result list\n            result.append(element)\n    # Return the result list\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2 * (n // 2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum([n - 2 * i for i in range(0, n // 2)])\n    else:\n        return sum([n - 2 * i for i in range(0, n // 2 + 1)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2 * i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_val = 0\n    while i <= n // 2:\n        sum_val += n - 2 * i\n        i += 1\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(2 * n // 3 + 1, n, 2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += (n - 2*i)\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 360 / l\n        area += s * (tan(angle / 180 * pi) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi/l) ** 2)\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l) * tan(i * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given its length and number of sides.\n\n    Parameters\n    ----------\n    s : float\n        Length of one side of the polygon.\n    l : int\n        Number of sides of the polygon.\n\n    Returns\n    -------\n    float\n        The area of the polygon.\n    \"\"\"\n\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        area += s * tan(angle / 180 * pi)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s * (math.tan(math.pi/l) + 1)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i*2*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/2) * tan((2 * i * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 360/l\n    area = (s**2)*tan(pi/180*a)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the circumference\n    circumference = s * 2\n    \n    # Calculate the area of the polygon\n    area = circumference * l\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Use a set to remove duplicates from the divisors\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    \n    # Check if the sum of the divisors is equal to n\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get the divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # if the length of the list is even, then the sum of the divisors is even\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n using a loop\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_of_divisors += i\n            if n // i!= i:\n                sum_of_divisors += n // i\n\n    # Check if the sum of the divisors of n and n is the same\n    if sum_of_divisors == 2*n:\n        print(f\"{n} has the same sum of divisors as {2*n}.\")\n    else:\n        print(f\"{n} has a different sum of divisors than {2*n}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_count = 0\n    sum_div = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if it is, add i to the count and calculate the sum of the divisors\n            div_count += 1\n            sum_div += i\n\n    # if the count of divisors is the same as the sum of the divisors, return True\n    if div_count == sum_div:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    sum_div = sum(i for i in range(1, n + 1) if n % i == 0)\n\n    # Check if the sum of the divisors of n and n-1 are equal\n    if sum_div == n * (n - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n/i:\n                divisor_sum += n/i\n\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find all the divisors of n \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n//i: \n                divisors.append(n//i)\n    \n    # Sort the divisors and find their sum \n    divisors.sort() \n    divisor_sum = sum(divisors)\n    \n    # Compare the sum of the divisors with the sum of the divisors of n \n    return divisor_sum == n*(n+1)//2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_divisors(num):\n        \"\"\"\n        Calculate the sum of the divisors of a given number.\n        \"\"\"\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    def is_same_sum(num1, num2):\n        \"\"\"\n        Check if the sum of the divisors of two numbers is the same.\n        \"\"\"\n        sum1 = sum_divisors(num1)\n        sum2 = sum_divisors(num2)\n        return sum1 == sum2\n    \n    print(is_same_sum(28, 40))  # True\n    print(is_same_sum(12, 18))  # True\n    print(is_same_sum(30, 42))  # True\n    print(is_same_sum(50, 70))  # True\n    print(is_same_sum(120, 180))  # True\n    print(is_same_sum(28, 56))  # False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors of n and its own value are the same\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_div += i\n            if n // i!= i:\n                sum_div += n // i\n    return sum_div == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n    # initialize dictionary to store count of characters at each position in English alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    # loop through each character in string\n    for char in str1:\n        # add count of character to dictionary at same position in English alphabet\n        char_count[char] += 1\n    # print dictionary containing count of characters at each position in English alphabet\n    print(char_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    # create a dictionary to store the position of each character in the English alphabet\n    position_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    # initialize variables to store the count of each character and the total count\n    count_dict = {}\n    count = 0\n    \n    # loop through the characters in the string\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in position_dict:\n            # if it is, check if the position of the character in the English alphabet matches the position of the character in the string\n            if position_dict[char] == count:\n                # if they do, increment the count of the character\n                count_dict[char] = count_dict.get(char, 0) + 1\n                count += 1\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(alphabet)):\n        for char in str1:\n            if char.lower() == alphabet[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    # create a dictionary to store the character count\n    char_count = {}\n    # iterate through the string\n    for char in str1:\n        # convert the character to lowercase and convert it to string\n        char_lower = char.lower()\n        # check if the character is in the dictionary\n        if char_lower in char_count:\n            # increment the count if it's already in the dictionary\n            char_count[char_lower] += 1\n        else:\n            # otherwise, add the character to the dictionary with a count of 1\n            char_count[char_lower] = 1\n    # initialize the count of repeated characters as 0\n    count_repeats = 0\n    # iterate through the dictionary\n    for char_lower, count in char_count.items():\n        # if the count is greater than 1, increment the count of repeated characters\n        if count > 1:\n            count_repeats += 1\n    # return the total count of repeated characters\n    return count_repeats"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Initialize empty dictionary to store character counts\n    char_counts = {}\n\n    # Iterate over string\n    for i in range(26):\n        # Convert index to character\n        char = chr(ord('a') + i)\n        # Count occurrences of character in string\n        char_counts[char] = str1.count(char)\n\n    # Print character counts\n    for char, count in char_counts.items():\n        print(f\"{char}: {count}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    \n    for i in range(26):\n        if str1[i] == str2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == str(chr(65 + i)).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the position counts\n    position_count = {}\n\n    # Iterate over the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # Convert the current letter to a character\n        char = chr(i)\n\n        # Check if the character occurs at the same position in the input string as in the English alphabet (case insensitive)\n        if str1.count(char) == 1:\n            # If it does, increment the count for this position in the dictionary\n            if char in position_count:\n                position_count[char] += 1\n            else:\n                position_count[char] = 1\n\n    # Return the position counts in a list\n    return list(position_count.values())"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    This function takes in a list of integers A and returns the count of pairs of integers that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                xor_sum = A[i] ^ A[j]\n                if xor_sum % 2 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i]!= A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    This function takes a list A and counts the number of pairs of integers in the list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    This function finds the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return n * 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Initialize the power of 2 to be compared to\n    power = 1\n\n    # Loop through all possible powers of 2\n    while power <= len(binary):\n\n        # If the current power is greater than or equal to the length of the binary representation of n,\n        # then the next power of 2 is the current power\n        if power >= len(binary):\n            return power\n\n        # If the current power is greater than or equal to the length of the binary representation of n,\n        # then the next power of 2 is the current power\n        elif power < len(binary) and binary[power] == '1':\n            return power\n\n        # Increment the power of 2 by 1\n        power += 1\n\n    # If no power of 2 is found, return -1\n    return -1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a flag variable to keep track of whether a power of 2 has been found\n    found = False\n    # Initialize a variable to store the power of 2\n    power = 1\n\n    # Check if n is already a power of 2\n    if n == 1:\n        return n\n    \n    # Loop through all the powers of 2 until a power of 2 is found\n    while not found:\n        # If the power of 2 is less than or equal to n, increment it\n        if power <= n:\n            power *= 2\n            # If a power of 2 is found, set the flag variable to True\n            if power == n:\n                found = True\n        # If the power of 2 is greater than n, exit the loop\n        else:\n            break\n    \n    # If no power of 2 is found, return None\n    if not found:\n        return None\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize power variable\n    power = 1\n\n    # While n is greater than or equal to the power\n    while n >= power:\n        # Increment power\n        power *= 2\n\n    # Return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    # Initialize result to the smallest power of 2 greater than or equal to n\n    result = int(\"1\" + \"0\"*(32-len(binary_str)), 2)\n    # Check if the result is less than or equal to n\n    while result <= n:\n        # Check if the result is a power of 2\n        if result == 2**len(binary_str):\n            break\n        # Check if the result is the smallest power of 2 greater than or equal to n\n        if (n-result) % result == 0:\n            result = n\n        else:\n            result = result * 2\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n //= 2\n    return 2**n if n!= 0 else 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, x):\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_ = 0\n    for i in range(m, n+1):\n        sum_ += list1[i-1]\n    return sum_"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    sum_value = 0\n    \n    # Loop through the list from the first index to the second index\n    for i in range(m, n+1):\n        # Check if the current number is within the range of the list\n        if i >= 0 and i < len(list1):\n            # Add the current number to the sum variable\n            sum_value += list1[i]\n    \n    # Return the sum value\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1):\n        return \"Invalid range\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the input list is valid\n    if not isinstance(list1, list):\n        raise ValueError(\"Input list must be a list\")\n\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        raise ValueError(\"Invalid indices\")\n\n    # Calculate the sum of numbers in the range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through the list and add the numbers within the given range to the sum variable\n    for i in range(m, n+1):\n        if list1[i-1] >= 0:\n            sum += list1[i-1]\n\n    # Return the final sum value\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter using the formula for the area of a triangle\n    semi_perimeter = 5 * a\n\n    # Calculate the area using the formula for the area of a regular pentagon\n    area = (5 ** 0.5) * (semi_perimeter ** 2)\n\n    # Return the perimeter of the pentagon using the formula for the circumference of a circle\n    perimeter = 2 * math.pi * a\n\n    return perimeter, area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a regular pentagon from the length of its sides\n    # perimeter = 5 * sqrt(3) * a\n    perimeter = 5 * math.sqrt(3) * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter (half of the perimeter) using the formula:\n    # 2(a + b + c + d)/sqrt(5)\n    semi_perimeter = (2 * (a + b + c + d)) / math.sqrt(5)\n\n    # Calculate the area using the formula:\n    # sqrt(5)/2 * (semi_perimeter ** 2)\n    area = math.sqrt(5) / 2 * (semi_perimeter ** 2)\n\n    # Calculate the perimeter using the formula:\n    # 5 * semi_perimeter\n    perimeter = 5 * semi_perimeter\n\n    # Return the perimeter and area of the pentagon\n    return perimeter, area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sqrt(3)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the area of the pentagon\n    area = math.sqrt(5) * a * a / 2\n\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1:i+3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    std_count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            std_count += 1\n    return std_count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Initialize the variable to hold the first element's data type\n    first_element_type = type(test_tuple[0])\n\n    # Iterate through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # Check if the element's data type is not equal to the first element's data type\n        if type(element)!= first_element_type:\n            return False\n\n    # If the loop completes without returning False, all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0] # assuming tuple has at least one element\n    \n    # iterating through tuple and checking data type of each element\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Using list comprehension to get a list of all elements in the tuple\n    elements = [type(element) for element in test_tuple]\n    # Using set() function to remove duplicates from the list of types\n    types_set = set(elements)\n    # Checking if there is only one element in the set (which is the data type)\n    if len(types_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the length of tuple is zero\n    if len(test_tuple) == 0:\n        return True\n\n    # get the first element of the tuple\n    first_elem = type(test_tuple[0])\n\n    # check if all the elements in the tuple are of same type as first element\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in test_tuple:\n        type_list.append(type(i))\n\n    if len(set(type_list)) == 1:\n        print(\"All the elements in the tuple have same data type\")\n    else:\n        print(\"Not all the elements in the tuple have same data type\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # Iterate over the rest of the elements in the tuple and check if each element is of the same data type\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n\n    # If all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the length of the tuple is less than or equal to 1\n    if len(test_tuple) <= 1:\n        # If the length is 1, then the only element in the tuple will be the same data type as the other element\n        if len(set(map(type, test_tuple))) == 1:\n            return True\n        else:\n            return False\n    \n    # If the length is greater than 1, then check if all the elements have the same data type\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Use a dictionary to keep track of the count of each element in the array\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    # Count the number of occurrences of the element in the array\n    count_x = count.get(x, 0)\n\n    # Return whether the element is the majority element\n    return count_x > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns the string with the odd-indexed characters removed.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(c) % 256) for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    # Initialize an empty string to store the odd values\n    odd_str = \"\"\n\n    # Loop through each character of the input string\n    for i in range(len(str)):\n        # If the index value is odd, append it to the odd string\n        if i % 2!= 0:\n            odd_str += str[i]\n\n    # Return the odd string\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three parameters a, b, and c and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(i).count('1')!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit_count = 0\n    for i in range(l, r+1):\n        bit_count += bin(n).count('1')\n    return bit_count == r - l + 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if the upper limit is less than or equal to the lower limit\n    if l > r:\n        print(\"Invalid input. Upper limit should be greater than or equal to the lower limit\")\n        return None\n    \n    # Initialize an integer variable to store the count of unset bits\n    unset_bits = 0\n    \n    # Iterate through the bits of the number between the lower and upper limits\n    for i in range(l,r+1):\n        unset_bits = unset_bits ^ n & 1\n        n = n >> 1\n    \n    # Check if all the bits are unset in the given range or not\n    if unset_bits == 0:\n        print(\"All the bits are unset in the given range.\")\n    else:\n        print(\"Some of the bits are unset in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # converting the integer n to binary string\n    binary_string = bin(n)[2:]\n\n    # checking if all the bits are set in the given range\n    for i in range(l-1, r):\n        if binary_string[i] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Loop through all bits from least significant bit to most significant bit\n    for i in range(l, r + 1):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If bit is set, return False as not all bits are set\n            return False\n    # If all bits are unset, return True as all bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= len(bin(i)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if n & (1 << i):\n            # If the bit is set, increment the count\n            count += 1\n            # Check if the count becomes greater than 32\n            if count > 32:\n                # If it becomes greater than 32, return False\n                return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize all the bits to 1\n    all_bits = 0b
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the number of set bits in the number n\n    count = 0\n    \n    # Loop through the range from l to r (inclusive)\n    for i in range(l, r+1):\n        # Check if the bit at index i is set or not\n        if n & (1 << i):\n            # If the bit is set, increment the count variable\n            count += 1\n    \n    # If the count is equal to the number of bits in n (l-r+1), then all the bits are unset in the range\n    return count == (r - l + 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if the given range is valid or not\n    if l > r or r > 31:\n        print(\"Invalid Range\")\n        return\n    \n    # Calculate the length of the range\n    length = r - l + 1\n    \n    # Check if all the bits are set in the given range or not\n    if n & ((1 << length) - 1) == 0:\n        print(\"All bits are set in the given range\")\n    else:\n        print(\"Not all bits are set in the given range\")"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_sort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quick_sort(arr, low, pi - 1)\n            quick_sort(arr, pi + 1, high)\n\n    quick_sort(arr, 0, n - 1)\n    temp = 0\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[temp_index]\n            arr[temp_index] = temp\n        temp_index = i + n\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers to the beginning and end of the array\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # If the current element is negative, swap it with the element at the right pointer\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            \n            # If the right pointer has reached the end of the array, stop iterating\n            if right == n - 1:\n                break\n            \n            # Move the right pointer to the next element\n            right += 1\n        \n        # If the current element is positive, move it to the left pointer\n        else:\n            left += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive and one for negative values\n    pos = 0\n    neg = n\n    \n    # Traverse the array from both pointers\n    for i in range(n, len(arr)):\n        # If the current element is negative, swap it with the next element\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        \n        # If the current element is positive, increment the positive pointer\n        else:\n            pos += 1\n            \n            # If the positive pointer is not equal to the current pointer, swap elements to preserve the relative order\n            if pos!= i:\n                arr[pos], arr[i] = arr[i], arr[pos]\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables\n    positive = 0\n    negative = 0\n    sorted_arr = []\n    \n    # iterate through the array\n    for i in range(n):\n        if arr[i] < 0:\n            negative += 1\n            sorted_arr.append(arr[i])\n        else:\n            positive += 1\n            sorted_arr.append(arr[i])\n    \n    # append the remaining elements to the end of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negative += 1\n            sorted_arr.append(arr[i])\n        else:\n            positive += 1\n            sorted_arr.append(arr[i])\n    \n    # insert the negative elements in the sorted position\n    for i in range(len(sorted_arr)):\n        if i < negative:\n            sorted_arr.insert(i, sorted_arr.pop(0))\n            \n    # insert the positive elements in the sorted position\n    for i in range(len(sorted_arr)):\n        if i < positive:\n            sorted_arr.insert(i, sorted_arr.pop(0))\n            \n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Function to check if a number is negative or not\n    def is_negative(num):\n        return num < 0\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Iterate through the array and place all negative numbers at the beginning of the array\n    negative_count = 0\n    for i in range(n):\n        if is_negative(arr[i]):\n            negative_count += 1\n        else:\n            arr[i], arr[negative_count] = arr[negative_count], arr[i]\n            negative_count += 1\n\n    # Place all positive numbers in their correct position\n    for i in range(n, len(arr)):\n        if is_negative(arr[i]):\n            arr[i], arr[negative_count] = arr[negative_count], arr[i]\n            negative_count += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two new empty lists to store the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n\n    # Loop through the array and append the elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n\n    # Reverse the order of the negative and positive lists\n    neg_list.reverse()\n    pos_list.reverse()\n\n    # Combine the negative and positive lists into a single list\n    combined_list = neg_list + pos_list\n\n    # Return the combined list with the first n elements of the original array\n    return combined_list[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize variables\n    pos_count = 0\n    neg_count = 0\n    total_count = 0\n\n    # Iterate through the array\n    for num in arr:\n        total_count += 1\n\n        # If the number is positive\n        if num > 0:\n            arr[pos_count] = num\n            pos_count += 1\n        else:\n            # If there are less than n negative elements\n            if neg_count < n:\n                arr[neg_count] = num\n                neg_count += 1\n            else:\n                # If there are more than n negative elements\n                # Find the last positive element\n                for i in range(pos_count - 1, -1, -1):\n                    if arr[i] > 0:\n                        pos_count += 1\n                        arr[i], arr[pos_count - 1] = arr[pos_count - 1], arr[i]\n                        break\n                else:\n                    # If there are no more positive elements\n                    # Start over with the first positive element\n                    pos_count = 0\n\n    # If there are more than n negative elements\n    # Pad the array with zeros\n    for i in range(neg_count, n):\n        arr[i] = 0\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create a dictionary to store the counts of negative and positive elements\n    count = {'positive': 0, 'negative': 0}\n    \n    # Traverse the array and update the counts of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            count['negative'] += 1\n        else:\n            count['positive'] += 1\n    \n    # Traverse the array again and move the negative elements to the beginning of the array\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            count['positive'] -= 1\n            if count['positive'] >= 0:\n                arr[i], arr[count['positive']] = arr[count['positive']], arr[i]\n                count['positive'] += 1\n            else:\n                break\n        else:\n            count['negative'] -= 1\n            if count['negative'] >= 0:\n                arr[i], arr[count['negative']] = arr[count['negative']], arr[i]\n                count['negative'] += 1\n            else:\n                break\n        i += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two lists, one for positive and one for negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # Iterate through the array and append elements to the corresponding list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Sort the negative and positive lists\n    neg_arr.sort()\n    pos_arr.sort()\n\n    # Combine the sorted lists and return the result\n    result = neg_arr + pos_arr\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    zero = []\n    for i in arr:\n        if i >= 0:\n            positive.append(i)\n        elif i < 0:\n            negative.append(i)\n        else:\n            zero.append(i)\n    sorted_positive = sorted(positive)\n    sorted_negative = sorted(negative)\n    sorted_zero = sorted(zero)\n    res = sorted_zero + sorted_negative + sorted_positive\n    return res[:n]"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replacing all blank spaces with the given character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if c =='' else c for c in str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    # replace all the blank spaces in the string with the character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    list1.sort(reverse=True)\n    \n    # return the first n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, float('-inf'))\n\n    # Extract the n largest numbers from the list and add them to the min heap\n    for num in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n\n    # Return the n largest numbers from the list\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    max_heap = []\n\n    # Put the smallest n elements in a max heap\n    for i in range(n):\n        if len(heap) == 0 or heapq.heappushpop(heap, list1.pop(0)):\n            max_heap.append(heapq.heappop(heap))\n        else:\n            heapq.heappush(heap, list1.pop(0))\n\n    # Add the remaining elements to the max heap\n    for i in range(len(list1)):\n        if len(heap) == 0 or heapq.heappushpop(heap, list1[i]):\n            max_heap.append(heapq.heappop(heap))\n        else:\n            heapq.heappush(heap, list1[i])\n\n    # Return the max heap as the result\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > max_heapq.heappop(max_heap):\n            max_heapq.heappush(max_heap, list1[i])\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    \n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        elif item > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, item)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Heapify the list to get the largest n elements\n    heapq.heapify(list1)\n    \n    # Extract the largest n elements from the heap and add them to the result list\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(list1))\n    \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_sa = 2 * r * h\n    return lateral_sa"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n    \"\"\"\n\n    # Calculating the lateral surface area using the formula:\n    # Lateral surface area = 2 * pi * r * h\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h  # formula for lateral surface area of a cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h*r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2*3.14*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r ** 2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: the lateral surface area of the cylinder\n    '''\n\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * (3 * r**2 + h**2) * 3.14159"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3  # volume of the cube\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop over each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the result\n        if bit == '1':\n            result += 1 << (len(bin(n)[2:]) - bin(n)[2:].index(bit))\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store even bits\n    even_bits = []\n    # loop through each bit of the number and check if it is even\n    while n > 0:\n        # check if the rightmost bit is even\n        if n % 2 == 0:\n            # if it is, add it to the list of even bits\n            even_bits.append(n % 2)\n        # shift the number one bit to the right\n        n //= 2\n    # convert the list of even bits to an integer and return it\n    return int(''.join(str(bit) for bit in even_bits))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(32): # iterate through each bit of the number\n        if n & (1 << i): # check if the bit is set\n            even_bits |= (1 << i) # set the corresponding bit in the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result |= (1 << (n % 8))\n        n = n >> 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the given number\n    for i in range(8):\n        # Check if the i-th bit is even\n        if n & (1 << i) == 0:\n            # If even, set the i-th bit of the result to 1\n            result |= (1 << i)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        even_bit = n & 1  # get the rightmost bit\n        n = n >> 1  # shift the bits to the left\n        if even_bit == 1:\n            n |= 1  # set the even bit to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0b
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bit set number\n    even_set_number = 0\n\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the even_set_number variable\n        if bit == '1':\n            even_set_number |= (1 << int(bit))\n\n    return even_set_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # initialize an empty string to store the set bits\n    set_bits = ''\n    # loop through each binary digit\n    for digit in binary_str:\n        # if the digit is even, append it to the set_bits string\n        if int(digit) == 0:\n            set_bits += digit\n        else:\n            set_bits += '0'\n    # convert the set_bits string to an integer and return it\n    return int(set_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize result variable as 0\n    result = 0\n\n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]: \n        # If the bit is even, set it to 1\n        if bit == '1': \n            result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the occurrences\n    counts = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the counts dictionary\n        if tup not in counts:\n            # If not, add it with a count of 1\n            counts[tup] = 1\n        else:\n            # If it is, increment its count by 1\n            counts[tup] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # convert the list to a set to eliminate duplicates\n    test_set = set(test_list)\n    # create a dictionary with the unique tuples as keys and their count as values\n    counts = dict(Counter(test_set))\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            counts[tup] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring.strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    # initialize a counter variable\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each character in the string from the current index\n        for j in range(i+1, len(str)+1):\n            # if the substring is not empty, increment the counter\n            if j - i > 0:\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize left and right pointers\n        left = 0\n        right = i\n\n        # Keep moving right until the right pointer is greater than or equal to the length of the string\n        while right < len(str):\n            # Increment the count variable\n            count += 1\n            # Move the right pointer one character to the right\n            right += 1\n            # Move the left pointer one character to the left\n            left += 1\n\n    # Return the count variable\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize variables\n    count = 0\n    # Initialize variables for the range of numbers to check\n    num = 0\n    prev_num = 0\n    # Initialize the sequence of length 1\n    sequence = [1]\n    # Loop through all possible sequences of length n\n    while len(sequence) < n:\n        # Check if the next number is within the range of numbers to check\n        while num <= m - 1:\n            # Check if the number is within the range of numbers to check and greater than or equal to twice the previous number\n            if num >= 2*prev_num:\n                # Add the sequence to the count and update the previous number and sequence\n                count += 1\n                prev_num = num\n                sequence.append(num)\n                # Check if we have found the correct length of sequence\n                if len(sequence) == n:\n                    return count\n                # Check if there is a shorter sequence of length n that can be added to the current sequence\n                for i in range(len(sequence)-1):\n                    if sequence[i] + 1 == sequence[i+1]:\n                        # Update the current sequence with the shorter sequence\n                        sequence = sequence[:i+1]\n                        break\n                # Move the number to the next position in the range to check\n                num += 1\n            # Move the number to the next position in the range to check\n            num += 1\n    # If we have reached this point, we have found all possible sequences of length n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = [2]\n\n    # Generate sequences until we reach the desired length\n    while len(current_sequence) < n:\n        # Check if the current sequence is valid\n        if current_sequence[-1] + 2 <= m and current_sequence[-1] + 2 > current_sequence[-2]:\n            # Append the next element to the sequence\n            current_sequence.append(current_sequence[-1] + 2)\n        else:\n            # Reset the current sequence and start again\n            current_sequence = [2]\n\n        # Increment the total number of sequences\n        total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2, n + 1):\n            if m - 2 * i >= 0:\n                count += get_total_number_of_sequences(m - 2 * i, n - 1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the total number of sequences as 0\n    total_sequences = 0\n    \n    # Initialize the list of sequences as an empty list\n    sequences = []\n    \n    # Loop through all possible elements in the range [m, n-1]\n    for i in range(m, n-1):\n        # Check if the element is greater than or equal to twice the previous element but less than or equal to `m`\n        if i >= 2*sequences[-1] and i <= m:\n            # If the element satisfies the condition, add it to the list of sequences\n            sequences.append(i)\n            # If the length of the current sequence is equal to `n`, increment the total number of sequences by 1\n            if len(sequences) == n:\n                total_sequences += 1\n            # If the length of the current sequence is less than `n`, remove the first element from the sequence and continue checking the next element\n            else:\n                sequences.pop(0)\n                \n    # Return the total number of sequences found\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(1, m + 1):\n        for j in range(i):\n            # Check if each element is between 2 and m\n            if j >= 2 and j <= m and i + j <= n:\n                count += 1\n\n    # Return the total count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # initialize the total number of sequences to 0\n    total_sequences = 0\n    \n    # loop through all possible previous elements\n    for i in range(n):\n        \n        # find the maximum number that can be in the current position\n        max_num = m - (i * 2)\n        \n        # loop through all possible current elements\n        for j in range(2, max_num + 1, 2):\n            \n            # if the current element is less than or equal to twice the previous element, increment the total number of sequences by 1\n            if j <= i:\n                total_sequences += 1\n    \n    # return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    \n    for i in range(n):\n        current_number = 2 * i\n        if current_number <= m:\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(n):\n        total_sequences += m // n + (1 if m % n > 0 else 0)\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2:\n        return 0\n\n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += (m // 2)\n        else:\n            total += (m - 2 * (i - 1)) // (i + 1)\n\n    return total\n\nm = int(input(\"Enter the value of m: \"))\nn = int(input(\"Enter the value of n: \"))\n\nresult = get_total_number_of_sequences(m, n)\nprint(\"The total number of possible sequences of length\", n, \"such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m is:\", result)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    count = 0\n    prev = 0\n\n    # Iterate through all possible sequences of length n\n    for i in range(m//2+1):\n        if i >= 2*prev and i <= m:\n            count += 1\n\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if lists have the same length\n    if len(list1)!= len(list2):\n        return \"Lists must have the same length.\"\n    \n    # replace last element of list1 with elements of list2\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1.extend(list2)\n    elif len(list1) > len(list2):\n        list1 = list1[:-1] + list2\n    else:\n        list1[-len(list2):] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Add the second list to the first list\n    list1 += list2\n    \n    # Truncate the first list to the original length\n    list1 = list1[:length]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the index of the last element in the first list\n    last_index = len(list1) - 1\n    \n    # Replace the last element of the first list with the elements of the second list\n    for element in list2:\n        list1[last_index] = element\n        last_index -= 1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Ensure that the first list is not empty\n    if not list1:\n        raise ValueError(\"The first list cannot be empty\")\n    # Ensure that the second list is not empty\n    elif not list2:\n        raise ValueError(\"The second list cannot be empty\")\n    # Ensure that the second list is the same length as the first list\n    elif len(list1)!= len(list2):\n        raise ValueError(\"The second list must be the same length as the first list\")\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        raise ValueError(\"Second list must be longer than or equal to the first list\")\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        x = int(math.sqrt(2*N))\n        y = 2*x*x - N\n        if y < 0:\n            x += 1\n            y = 2*x*x - N\n        if y >= 0:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    def is_square(n):\n        return n**2 == n\n    \n    def find_square(n):\n        sqrt = math.sqrt(n)\n        if sqrt**2 == n:\n            return sqrt\n        else:\n            return find_square(sqrt+1)\n    \n    square = find_square(N)\n    \n    while not is_square(square):\n        square += 1\n    \n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    \n    # Check if N is a perfect square\n    square = int(math.sqrt(N))\n    if square*square == N:\n        square += 1\n    \n    # Check if the square root of N is even\n    while square % 2 == 0:\n        square += 1\n    \n    # Check if N is even\n    if N % 2 == 0:\n        square += 1\n    \n    # Return the next perfect square\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_square = int(sqrt_N) ** 2 + 1\n    if next_square > N:\n        return None\n    else:\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if is_perfect_square(N):\n            break\n    return N\n\ndef is_perfect_square(N):\n    '''\n    Helper function to check if a number is a perfect square.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    return sqrt_N*sqrt_N == N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n\n    Args:\n        N (int): The number whose next perfect square is desired.\n\n    Returns:\n        int: The next perfect square greater than N.\n    \"\"\"\n    if N % 2 == 1:\n        # if the number is odd, the next perfect square is 2 * (3^floor(sqrt(N)) + 1)\n        root = int(math.sqrt(N))\n        return 2 * (3 ** root + 1)\n    else:\n        # if the number is even, the next perfect square is 2 * 3^floor(sqrt(N/2) + 1)\n        root = int(math.sqrt(N/2))\n        return 2 * 3 ** root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        next_num = N * N + 1\n        if is_perfect_square(next_num):\n            return next_num\n        else:\n            N += 1\n\ndef is_perfect_square(num):\n    \"\"\"\n    Helper function to check if a number is a perfect square.\n    \"\"\"\n    root = math.sqrt(num)\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def is_square(num):\n        return num ** 0.5 == int(num ** 0.5)\n\n    def next_square(num):\n        i = num + 1\n        while not is_square(i):\n            i += 1\n        return i\n\n    # Check if the given number is prime\n    if is_prime(N):\n        # Find the first prime number greater than N\n        i = next_prime(N)\n        # Calculate the next perfect square greater than N\n        while i < N:\n            if is_square(i):\n                return i\n            i = next_square(i)\n        # If the loop finishes without finding a perfect square, return None\n        return None\n    else:\n        # If the given number is not prime, find the closest prime number\n        i = next_prime(N)\n        while i <= N:\n            if is_prime(i):\n                return i\n            i = next_prime(i)\n        # If the loop finishes without finding a prime number, return None\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Define a helper function to check if a number is a perfect square\n    def is_perfect_square(n):\n        return int(math.sqrt(n)) ** 2 == n\n    \n    # Helper function to calculate the next perfect square\n    def next_square(n):\n        return math.ceil(math.sqrt(n)) ** 2\n    \n    # Check if the input number is a perfect square\n    if is_perfect_square(N):\n        # Check if the input number is the smallest perfect square greater than N\n        if next_square(N) <= N:\n            # If the input number is the smallest perfect square greater than N, return the next perfect square\n            return next_square(N)\n        else:\n            # If the input number is greater than the smallest perfect square greater than N, return the largest perfect square less than N\n            return next_square(N-1)\n    else:\n        # If the input number is not a perfect square, return the next perfect square\n        return next_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrtN = int(math.sqrt(N))\n\n    # Initialize left and right endpoints\n    left = 0\n    right = sqrtN\n\n    # Binary search to find the next perfect square greater than N\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid == N:\n            # mid is a perfect square\n            if mid * mid < N:\n                # mid is the next perfect square\n                return mid * mid + 1\n            else:\n                # mid is the largest perfect square\n                return N\n        elif mid * mid < N:\n            # mid is smaller than the perfect square\n            left = mid + 1\n        else:\n            # mid is larger than the perfect square\n            right = mid\n\n    # If the loop completes, there is no next perfect square greater than N\n    return None"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Find the maximum sum ending at the first element\n    max_ending_at_1 = max(arr[0], arr[1])\n\n    # Initialize the maximum sum ending at the second element\n    max_ending_at_2 = max_ending_at_1\n\n    # Initialize the maximum sum ending at the third element\n    max_ending_at_3 = max(max_ending_at_1, arr[2])\n\n    # Loop through the array starting from the third element\n    for i in range(2, n - 1):\n        # Calculate the maximum sum ending at the current element\n        max_ending_at_i = max(arr[i - 1] + arr[i + 1], arr[i], max_ending_at_2)\n\n        # Update the maximum sum ending at the second and third elements\n        max_ending_at_2 = max(max_ending_at_1, max_ending_at_i)\n        max_ending_at_3 = max(max_ending_at_2, max_ending_at_i)\n\n        # Update the maximum sum ending at the third element\n        max_ending_at_3 = max(max_ending_at_3, max_ending_at_i)\n\n        # Update the maximum sum ending at the second element\n        max_ending_at_2 = max(max_ending_at_1, max_ending_at_i)\n\n        # Update the maximum sum ending at the first element\n        max_ending_at_1 = max(max_ending_at_i, max_ending_at_2)\n\n    return max_ending_at_3"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # find the first decreasing subsequence\n    i, j = 0, 1\n    while j < n and arr[j] >= arr[j-1]:\n        j += 1\n    decreasing_sum = arr[j-1]\n    for k in range(j, n):\n        decreasing_sum += arr[k]\n\n    # find the first increasing subsequence\n    i = j = 0\n    while j < n and arr[j] <= arr[j-1]:\n        j += 1\n    increasing_sum = arr[j-1]\n    for k in range(j, n):\n        increasing_sum += arr[k]\n\n    # calculate the maximum subsequence sum\n    max_sum = max(increasing_sum, decreasing_sum)\n\n    # calculate the minimum subsequence sum\n    min_sum = min(increasing_sum, decreasing_sum)\n\n    # calculate the maximum bitonic subsequence sum\n    max_bitonic_sum = max(max_sum, min_sum)\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = arr[0]\n    for i in range(1, n):\n        left[i] = max(left[i-1], arr[i])\n\n    right[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right[i] = max(right[i+1], arr[i])\n\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, left[i] + right[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables for sum of subsequences\n    sum_inc = sum_dec = 0\n    # Initialize variables for maximum subsequence sum\n    max_sum_inc = max_sum_dec = 0\n    \n    for i in range(n):\n        # Update sum of increasing subsequence\n        sum_inc += arr[i]\n        # Update sum of decreasing subsequence\n        sum_dec += arr[n-i-1]\n        \n        # If the sum of the increasing subsequence is greater than the sum of the decreasing subsequence, update the maximum sum\n        if sum_inc > sum_dec:\n            max_sum_inc = max(max_sum_inc, sum_inc)\n            # Update the sum of the decreasing subsequence\n            sum_dec -= arr[i]\n        else:\n            max_sum_dec = max(max_sum_dec, sum_dec)\n            # Update the sum of the increasing subsequence\n            sum_inc -= arr[n-i-1]\n    \n    # Return the maximum subsequence sum\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the max sum and current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is increasing and the previous element is decreasing, add the current element to the current sum\n        if arr[i] < arr[i-1] and arr[i] > arr[i-2]:\n            current_sum += arr[i]\n        # If the current element is decreasing and the previous element is increasing, subtract the current element from the current sum\n        elif arr[i] > arr[i-1] and arr[i] < arr[i-2]:\n            current_sum -= arr[i]\n        # If the current element is not increasing or decreasing, reset the current sum to 0\n        else:\n            current_sum = 0\n\n        # If the current sum is greater than the current maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1: \n        return arr[0]\n    \n    # Check if the first element is increasing or decreasing\n    if arr[0] < arr[1]: \n        increasing = True\n    else: \n        increasing = False\n    \n    # Initialize variables\n    max_sum = arr[0]\n    current_sum = arr[0]\n    last_num = arr[0]\n    \n    # Loop through the array\n    for i in range(1, n): \n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]: \n            increasing = True\n        else: \n            increasing = False\n        \n        # Update the current sum based on the increasing/decreasing condition\n        if increasing: \n            current_sum += arr[i]\n            if current_sum > max_sum: \n                max_sum = current_sum\n        else: \n            current_sum -= arr[i]\n            if current_sum < last_num: \n                current_sum = last_num\n        \n        # Update the last number\n        last_num = arr[i]\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    if len(arr) < 2:\n        return 0\n    \n    max_sum = 0\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        current_sum = arr[i]\n        while j < len(arr):\n            if arr[j] > arr[j - 1]:\n                current_sum += arr[j]\n            else:\n                break\n            j += 1\n        max_sum = max(max_sum, current_sum)\n        i = j\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return None\n\n    # Initialize the max sum to the first element\n    max_sum = arr[0]\n\n    # Initialize the increasing and decreasing variables\n    increasing = True\n    decreasing = False\n\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # Update the increasing and decreasing variables\n        if arr[i] > arr[i - 1]:\n            increasing = True\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            decreasing = True\n        else:\n            increasing = False\n            decreasing = False\n\n        # Calculate the sum of the current subsequence\n        current_sum = (arr[i] if increasing else 0) + (arr[i] if decreasing else 0)\n\n        # Update the max sum if the current subsequence is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Check if the array is bitonic or not\n    is_bitonic = True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            is_bitonic = False\n            break\n    if is_bitonic:\n        # Calculate the maximum sum of the subsequence\n        max_sum = max(arr[0], arr[n-1])\n        for i in range(1, n-1):\n            max_sum = max(max_sum, arr[i-1] + arr[i+1])\n        return max_sum\n    else:\n        # If the array is not bitonic, return -1\n        return -1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n    \n    # initialize variables\n    left_sum = arr[0]\n    right_sum = arr[-1]\n    max_sum_left = 0\n    max_sum_right = 0\n    \n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            # the current number is increasing\n            right_sum = max(right_sum + arr[i], arr[i])\n            max_sum_right = max(max_sum_right, right_sum)\n        else:\n            # the current number is decreasing\n            left_sum = max(left_sum + arr[i], arr[i])\n            max_sum_left = max(max_sum_left, left_sum)\n            \n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        while True:\n            next_guess = (guess + number/guess)/2\n            if abs(next_guess - guess) < 0.00001:\n                return next_guess\n            guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5\n    epsilon = 0.00001\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize variables for current approximation, numerator, and denominator\n    x = number/2\n    x_new = x\n    numerator = x\n    denominator = 1\n    \n    while abs(x_new - x) > 0.00001:\n        # Update the current approximation and its new approximation\n        x = x_new\n        x_new = (numerator/denominator) + (x/denominator)\n        # Update the numerator and denominator\n        numerator = x_new * (2 * denominator * denominator - numerator)\n        denominator = 4 * denominator * denominator + 1\n    \n    # Return the final approximation\n    return x_new"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function takes a number as input and returns its square root using the babylonian method.\n    \"\"\"\n\n    # Initialize variables to keep track of the current guess and the previous guess\n    current_guess = number / 2\n    previous_guess = number\n\n    # Set a maximum number of iterations and a tolerance level for the precision\n    max_iterations = 1000\n    tolerance = 1e-15\n\n    # Iterate until the absolute difference between the current and previous guesses is less than the tolerance\n    for i in range(max_iterations):\n\n        # Calculate the square of the current guess\n        square = current_guess * current_guess\n\n        # Calculate the difference between the current and previous guesses\n        difference = current_guess - square\n\n        # Update the current guess with the difference between the previous and current guesses\n        current_guess = previous_guess - difference / (2 * current_guess)\n\n        # Check if the difference between the current and previous guesses is less than the tolerance\n        if abs(difference) < tolerance:\n            break\n\n        # Update the previous guess with the current guess\n        previous_guess = current_guess\n\n    # Return the current guess as the square root of the input number\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        guess_squared = guess * guess\n        if guess_squared == number:\n            return guess\n        elif guess_squared < number:\n            guess += 1\n        else:\n            guess -= 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        guess_square = guess ** 2\n        if abs(guess_square - number) < 0.00001:\n            return guess\n        if guess_square > number:\n            guess -= (number / guess_square)\n        else:\n            guess += (number / guess_square)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        if guess * guess == number:\n            return guess\n        elif guess * guess < number:\n            guess += number / guess\n        else:\n            guess -= number / guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_0 = number / 2  # Initial guess\n    x_n = 1           # Last guess\n    while abs(x_n - x_0) > 0.0001:  # Keep iterating until the difference between x_n and x_0 is less than 0.0001\n        x_n = x_0 - (number / x_0)  # Update x_n\n        x_0 = x_n\n    return x_n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower = 1\n    upper = number\n    while lower <= upper:\n        mid = (lower + upper) // 2\n        if mid*mid == number:\n            return mid\n        elif mid*mid < number:\n            lower = mid + 1\n        else:\n            upper = mid - 1\n    return None"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Create a 2D table to store the lengths of longest palindromic subsequences\n    # of all prefixes of the string.\n    # The length of the longest palindromic subsequence of prefix\n    # is stored in table[i][j], where i is the index of the current character\n    # in the string and j is the index of the previous character in the string.\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize table[0][0] as 1, since the longest palindromic\n    # subsequence of a single character is always itself.\n    table[0][0] = 1\n\n    # Fill in the table using dynamic programming.\n    # For i in range 1 to n-1, we need to calculate the length of the\n    # longest palindromic subsequence of prefixes of length i,\n    # which are prefixes of prefixes of the string.\n    # We can find the length of the longest palindromic subsequence of\n    # prefixes of length i by comparing the characters at the current index\n    # with the characters at the previous index.\n    # If the characters are the same, we can extend the longest palindromic\n    # subsequence of prefixes of length i-1 with the longest palindromic\n    # subsequence of prefixes of length i-2.\n    # If the characters are different, we can extend the longest palindromic\n    # subsequence of prefixes of length i-1 with the longest palindromic\n    # subsequence of prefixes of length i-2.\n    # In other words, we can either extend the longest palindromic subsequence\n    # of prefixes of length i-1 with the longest palindromic subsequence of\n    # prefixes of length i-2, or we can extend the longest palindromic subsequence\n    # of prefixes of length i-1 with the current character.\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # The length of the longest palindromic subsequence of the whole string\n    # is stored in the bottom-right corner of the table.\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Initialize the base case\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i][j - 1], lps_table[i + 1][j])\n\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    # Initialize a dictionary to store the lengths of longest palindromic subsequences of different lengths\n    dp = {}\n    \n    # Base case: empty string has length 0\n    if len(str) == 0:\n        return 0\n    \n    # Base case: single character string has length 1\n    if len(str) == 1:\n        return 1\n    \n    # Initialize the lengths of longest palindromic subsequences of length 1\n    dp[1] = 1\n    \n    # Loop through all possible lengths of subsequences from 2 to n\n    for i in range(2, len(str)+1):\n        # Check if the substring of length i is a palindrome\n        if str[i-1] == str[i-2]:\n            # If it is, update the dp dictionary with the length of the longest palindromic subsequence of length i\n            dp[i] = dp[i-1] + 2\n        else:\n            # If it's not, check if the substring of length i-1 is a palindrome and expand the longest palindromic subsequence of length i by 1\n            if i-dp[i-1] > 0 and str[i-1] == str[i-dp[i-1]-1]:\n                dp[i] = max(dp[i-1], dp[i-dp[i-1]-1]) + 2\n            else:\n                dp[i] = dp[i-1]\n    \n    # Return the length of the longest palindromic subsequence\n    return dp[len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # initialize variables to store the length of longest palindrome subsequence and the longest palindrome\n    l = 0\n    start = 0\n\n    # loop through the string and check for palindromes\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] == str[i:j][::-1]:\n                # check if current substring is longer than the current longest palindrome\n                if j-i+1 > l:\n                    # update longest palindrome subsequence length and start index\n                    l = j-i+1\n                    start = i\n\n    # return the length of the longest palindrome subsequence\n    return l"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def longest_palindrome_subsequence(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a 2D table to store the lengths of longest palindromic subsequences ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the table with zeros\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n\n    # Initialize two variables to store the length of the longest palindromic subsequence ending at index i\n    # of the given string str\n    max_lps1 = 1\n    max_lps2 = 0\n\n    # Iterate over all the characters of the string str\n    for i in range(n):\n        # If the current character is a palindrome, update the max_lps1 variable with the length of the\n        # longest palindromic subsequence ending at index i\n        if str[i] == str[i][::-1]:\n            max_lps1 = i + 1\n\n        # Update the max_lps2 variable with the length of the longest palindromic subsequence ending at\n        # index i+1 of the given string str\n        if i > 0 and str[i] == str[i-1]:\n            max_lps2 = max(max_lps2, lps(str[:i]) + 2)\n\n    # Return the maximum of max_lps1 and max_lps2\n    return max(max_lps1, max_lps2)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str) \n    palindromic = [False] * n \n\n    # Create the LPS array\n    lps_array = [0] * n \n\n    # Calculate LPS for all prefixes \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            palindromic[i] = True \n            lps_array[i] = lps_array[i-1] + 1\n        else: \n            palindromic[i] = False\n            lps_array[i] = 0\n\n    # Find the length of the longest palindromic subsequence \n    length = 0 \n    start = 0 \n    for i in range(1, n): \n        if palindromic[i]: \n            length = max(length, lps_array[i]) \n            if length > lps_array[i]: \n                start = i - length \n\n    return length "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    dp = [0] * n\n\n    # Build the DP table (LPS of all prefixes of length i)\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 2\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2])\n\n    # Find the length of the longest palindromic subsequence\n    max_len = dp[n - 1]\n    start = 0\n    for i in range(n - 2, -1, -1):\n        if dp[i] == max_len:\n            max_len = dp[i]\n            start = i\n        elif dp[i] > max_len:\n            max_len = dp[i]\n            start = i - max_len + 1\n            break\n\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return None\n    \n    # calculate the harmonic sum using the formula H = (1/n) + (1/n-1) +... + (1/2)\n    harmonic_sum = 1/n\n    for i in range(1, n):\n        harmonic_sum += 1/n-i\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n / (1/2 * (n-1) + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (2 * (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(n-1):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 / (1 / n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the elements of the first array\n    set_nums1 = set(array_nums1)\n    \n    # Create a set to store the elements of the second array\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set_nums1.intersection(set_nums2)\n    \n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of numbers from the first array\n    set_nums1 = set(array_nums1)\n\n    # create a set of numbers from the second array\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the two sets and convert it to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the elements of array_nums1\n    set_nums1 = set(array_nums1)\n    # Create a set to store the elements of array_nums2\n    set_nums2 = set(array_nums2)\n    # Find the intersection of set_nums1 and set_nums2\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the intersection\n    intersection = {}\n    \n    # Iterate through the first array and add each element as a key to the dictionary\n    for num in array_nums1:\n        intersection[num] = True\n    \n    # Iterate through the second array and check if each element exists as a key in the dictionary\n    for num in array_nums2:\n        if num in intersection:\n            intersection[num] = True\n        else:\n            del intersection[num]\n    \n    # Create a new array with the intersection elements\n    intersection_array = []\n    for num in intersection:\n        intersection_array.append(num)\n    \n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the counts of elements in the arrays\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate over the first array and count the occurrences of each element\n    for num in array_nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n\n    # Iterate over the second array and count the occurrences of each element\n    for num in array_nums2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n\n    # Find the common elements by comparing the counts of each element in both arrays\n    intersection = [key for key in dict1 if key in dict2 and dict1[key] > 0 and dict2[key] > 0]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list of int): The first array of integers.\n    array_nums2 (list of int): The second array of integers.\n\n    Returns:\n    list of int: The intersection of the two arrays.\n    \"\"\"\n    # Create sets from the arrays to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the common elements in the two arrays\n    common_elements = list(set(array_nums1) & set(array_nums2))\n    # Return the common elements in the two arrays\n    return common_elements"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Initialize an empty list to store the modified elements\n    modified_list = []\n\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before each element\n        modified_list.append(element)\n        modified_list.append(list[i])\n\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create a new list to hold the modified elements\n    modified_list = []\n    # iterate over the elements in the original list\n    for i in range(len(list)):\n        # add the element to the modified list, but before the current element\n        modified_list.append(element)\n        modified_list.append(list[i])\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        if num.imag == 0:\n            print(f\"{num.real} rad = {num.real} + 0 i\")\n        else:\n            angle = cmath.phase(num)\n            angle_rad = angle * (180 / cmath.pi)\n            print(f\"{num.real} + {num.imag} i = {num.real} + {num.imag} i\")\n            print(f\"({num.real} + {num.imag} i) rad = {num.real} + {num.imag} i\")\n            print(f\"({num.real} + {num.imag} i) deg = {angle_rad} deg\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        polar_num = cmath.polar(complex(real, imag))\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_coord = (magnitude, angle)\n        polar_coords.append(polar_coord)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(num))\n    result = []\n    for num in complex_numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coord = (r, theta)\n        result.append(polar_coord)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # append the polar coordinates to a list\n        polar.append((r, theta))\n    \n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the list of polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert complex numbers to polar coordinates\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_num = f\"{magnitude}+{angle}j\"\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        result.append((modulus, phase))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    This function takes in a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(set(l[i:j])) == n:\n                combinations.append((l[i:j], l[i:j]))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i == n-1:\n                comb.append(tuple(lst[i:j]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j <= n:\n                combos.append(tuple(l[i:j]))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        if all(num % i!= 0 for i in range(2, num)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            count += 1\n            j = i+i\n            while j <= n:\n                if n % j == 0:\n                    count -= 1\n                j += i\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # initialize count variable\n    count = 0\n    \n    # iterate through numbers less than n\n    for i in range(2, n):\n        # check if i is prime\n        if is_prime(i):\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a list to store the prime numbers\n    primes = []\n    \n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # if the number is prime, add it to the list of primes\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n    \n    # return the number of primes in the list\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Initialize the result tuple\n    max_tuple = ()\n    \n    # Compare the elements of the two tuples and add the maximum to the result tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        elif test_tup1[i] < test_tup2[i]:\n            max_tuple += (test_tup2[i],)\n        else:\n            max_tuple += (test_tup1[i],)\n    \n    # Return the result tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup2[0] > test_tup1[0]:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_val = test_tup1[0]\n    max_index = 0\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n            max_index = i\n    max_val2 = test_tup2[0]\n    max_index2 = 0\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n            max_index2 = i\n    max_index3 = 0\n    max_val3 = test_tup1[0]\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] < max_val3:\n            max_index3 = i\n            max_val3 = test_tup1[i]\n    if max_index3 == 0:\n        max_index3 = len(test_tup1) - 1\n    else:\n        max_index3 -= 1\n    return (max_val, max_index, max_val2, max_index2, max_index3)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tuple = (max1, max2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple that has\n    the elements of the two input tuples maximize. The order of elements does\n    not matter.\n    \"\"\"\n    max_tup = ()  # initialize an empty tuple to store the max elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup += (test_tup2[i],)\n        else:\n            continue  # skip elements that are equal\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 >= max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables for max and min values\n    max_val = 0\n    min_val = 100\n    # loop through each tuple and compare each element\n    for tup in (test_tup1, test_tup2):\n        for val in tup:\n            if val > max_val:\n                max_val = val\n            elif val < min_val:\n                min_val = val\n    # return the maximum value from the two tuples\n    return max(max_val, min_val)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # First 2 newman prime numbers are 2 and 3.\n    newman_primes = [2, 3]\n    # Loop through the rest of the primes.\n    for i in range(2, n): \n        # Check if the current number is prime or not.\n        is_prime = True\n        for j in range(2, i): \n            # If the number is not divisible by any number from 2 to j-1, then it's a prime number.\n            if i % j == 0: \n                is_prime = False\n                break\n        # If the current number is prime, add it to the list of newman primes.\n        if is_prime: \n            newman_primes.append(i)\n    # Return the nth newman prime number.\n    return newman_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the first prime number\n    prime_list = [2]\n\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Loop through the first n prime numbers\n    for i in range(3, 1000000, 2):\n        if is_prime(i):\n            prime_list.append(i)\n\n    # Find the nth newman-shanks-williams prime number\n    for prime in prime_list:\n        if prime**2 - 1000000 > n:\n            return prime**2 - 1000000"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    a, b = 2, 2\n    count = 0\n    while count < n:\n        if is_prime(a) and is_prime(b):\n            count += 1\n            if count == n:\n                return a\n            a += 1\n            b += 1\n        elif is_prime(a):\n            b += 1\n            a += 1\n        elif is_prime(b):\n            a += 1\n            b += 1\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    p = 2\n    count = 0\n\n    # Check for newman prime\n    while count < n:\n        is_prime = True\n        # Check if p is a prime number\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        # If p is prime, increment count and move on to next number\n        if is_prime:\n            count += 1\n            p += 1\n\n    # Return the nth newman prime\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i\n    return \"Invalid input\"\n\ndef is_prime(n):\n    \"\"\"\n    Write a function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    i = 1  # starting number\n    prime = 2  # the first prime number\n    \n    # loop through the numbers\n    while i <= n:\n        # check if the number is prime\n        is_prime = True\n        for j in range(2, prime):\n            if prime % j == 0:\n                is_prime = False\n                break\n        # if it is prime, check if it is the nth newman-shanks-williams prime number\n        if is_prime:\n            if i == n:\n                return prime\n            else:\n                i += 1\n        # increment the number\n        prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Start with the first newman prime number\n    prime = 2\n\n    # Loop through the remaining n-1 newman prime numbers\n    for i in range(1, n-1):\n        # Check if the current prime number is a newman prime number\n        is_prime = True\n        # Check if the current prime number is a prime number by looping through the range of integers from 2 to sqrt(prime)\n        for j in range(2, int(prime**0.5)+1):\n            if prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime += 1\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0 # count of prime numbers found\n    prime = 2 # initialize first prime number\n\n    # Iterate through numbers and check for primes\n    while count < n:\n        # Check if number is prime\n        for i in range(2, prime):\n            if prime % i == 0:\n                break\n        else: # if the loop completes without finding a divisor, then prime\n            count += 1\n        prime += 1\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Initialize the prime array to store the prime numbers\n    prime_array = []\n\n    # Initialize the index variable to 2\n    index = 2\n\n    # While the count is less than n, keep iterating\n    while count < n:\n\n        # If the current index is prime, add it to the prime array\n        if is_prime(index):\n            prime_array.append(index)\n\n        # Increment the index variable\n        index += 1\n\n        # Increment the count variable\n        count += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return prime_array[n-1]\n\n\ndef is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    # If the number is less than 2, it's not prime\n    if num < 2:\n        return False\n\n    # If the number is 2 or 3, it's prime\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it's prime\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        if not is_prime(num):\n            return False\n        if num % 3 == 0:\n            return False\n        if num % 5 == 0:\n            return False\n        if num % 7 == 0:\n            return False\n        if num % 11 == 0:\n            return False\n        if num % 13 == 0:\n            return False\n        if num % 17 == 0:\n            return False\n        if num % 19 == 0:\n            return False\n        if num % 23 == 0:\n            return False\n        if num % 29 == 0:\n            return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 2\n\n    return num - 2"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples are not equal. Please provide two tuples with the same length.\")\n        return None\n\n    # Perform element-wise division of the two tuples\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length')\n    # Perform element-wise division and return the result\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must be of equal length!\")\n        return None\n\n    # Perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0:\n                raise ValueError(\"Both input tuples should not contain zero elements.\")\n            else:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths!\")\n        return None\n    else:\n        # perform element-wise division operation\n        result_tup = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have equal length!\")\n    # perform element-wise division\n    result = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # First, we need to check if the length of the given list is greater than or equal to L. If it is, we can return a tuple with the two parts.\n    if len(list1) >= L:\n        # We can use slicing to split the given list into two parts. The first part will have L elements, and the second part will have the rest of the elements.\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)\n    else:\n        # If the length of the given list is less than L, we can raise an error.\n        raise ValueError('The given list is too small to split into two parts.')"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    # split the input list into two parts\n    part1 = lst[:L]\n    part2 = lst[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize the first part of the list\n    first_part = list1[:L]\n    # Initialize the second part of the list\n    second_part = list1[L:]\n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        else:\n            break\n    return (list1[:L], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('L cannot be greater than the length of the list.')\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([list1[i:L] for i in range(0, len(list1), L)], [list1[i:len(list1)] for i in range(L, len(list1), L)])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use the modulo operator to calculate the index of the first element to exclude from the first part\n    first_exclude = L - 1\n    # Create an empty list to store the first part\n    first_part = []\n    # Create an empty list to store the second part\n    second_part = []\n    # Iterate through the given list\n    for i in range(len(list1)):\n        # If the current index is less than the first exclude index, add the element to the first part\n        if i < first_exclude:\n            first_part.append(list1[i])\n        # If the current index is greater than or equal to the first exclude index, add the element to the second part\n        else:\n            second_part.append(list1[i])\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        return None\n    elif L == 0:\n        return (list1[:n//2], list1[n//2:])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age * 7) + 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height in inches to centimeters\n    height_cm = h_age * 2.54\n    # calculate age in dog's years\n    age_years = height_cm / 120\n    \n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = h_age * 7 # 7 is the number of dog years in a human year\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = 1992 # Assume the dog was born in 1992\n\n    age = 2022 - dob\n\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # conversion factor from hours to years\n    years_per_hour = 7\n\n    # calculate age in years\n    age_in_years = h_age * years_per_hour\n\n    # print the result\n    print(\"Your dog is\", age_in_years, \"years old.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_years = h_age * 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    results = []\n    for i in range(0, n, step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        return []\n    if step >= len(S):\n        return [S]\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[len(S)-1:len(S):step]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through each element in the input list\n    for i in range(0, len(S), step):\n        # Create a new list containing only the current element and append it to the result list\n        result.append([S[i]])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l # lateral surface area is 6 * l^2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l # Assuming a right angle surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6  # Using the formula for the lateral surface area of a cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area of the cube\n    lateral_surface = 6 * (l ** 2) + 12 * l + 8\n    \n    # return the lateral surface area of the cube\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * l**2\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current natural number to the sum of squares\n        sum_of_squares += i*i\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):   # iterate over odd natural numbers up to n\n        sum += i**2    # add the square of i to the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count**2\n        count += 2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i*i\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current natural number to the sum\n        sum += i ** 2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    star_num = 1\n    for i in range(1, n+1):\n        if i <= n // 2:\n            print(\"*\", end=\"\")\n        else:\n            print(\" \", end=\"\")\n        if i!= n:\n            print(\" \", end=\"\")\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to store the result\n    result = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # add the number to the result\n        result += i\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # loop through each value of n from 1 to 10\n    for i in range(1, 11):\n        # calculate the number of stars that should be printed\n        num_stars = n // i\n        \n        # print the appropriate number of stars\n        print(\"*\" * num_stars)\n        \n        # check if we should print a newline after each print statement\n        if i % 2 == 0:\n            print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # First, define the number of rows and columns in the triangle\n    rows = n\n    cols = int(n ** 0.5) + 1\n\n    # Next, generate the triangle using nested loops\n    for i in range(rows):\n        for j in range(cols):\n            # If the current position is the center of the triangle, print the star\n            if i == 0 or j == 0 or i == rows - 1 or j == cols - 1:\n                print(\"*\", end=\" \")\n            # Otherwise, print a space\n            else:\n                print(\" \", end=\" \")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * find_star_num(n-1)) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Create a list of all the numbers from 1 to 10\n    nums = list(range(1, 11))\n    # Iterate n times and multiply each number by 2 to get the nth star number\n    for _ in range(n):\n        nums = [num * 2 for num in nums]\n    # Return the last number in the list, which is the nth star number\n    return nums[-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2*2*2*2*2\"\n    else:\n        num = 2 * n - 1\n        for i in range(n - 1):\n            num = num * (2 * n - i - 1) // (i + 1)\n        return str(num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the array of star numbers\n    star_nums = [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616]\n\n    # Check if n is valid\n    if n <= len(star_nums):\n        # Return the nth star number\n        return star_nums[n-1]\n    else:\n        # Raise an exception if n is not valid\n        raise ValueError(\"n must be greater than or equal to 1 and less than or equal to the total number of star numbers\")"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the value of n\n    if n <= 1:\n        return 1\n    else:\n        # Calculate the value of n-1 and n\n        n_minus_one = find_star_num(n - 1)\n        n_plus_one = find_star_num(n)\n        # Return the sum of n_minus_one and n_plus_one\n        return n_minus_one + n_plus_one"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize variables for the stars and the number of stars\n    star_str = '*'\n    num_stars = 1\n\n    # Iterate through the number of stars required\n    for i in range(2, n+1):\n        # Add the current number of stars to the number of stars\n        num_stars += i\n\n        # Check if the current number of stars is even\n        if i % 2 == 0:\n            # If it is, add the star character to the string\n            star_str += '*'\n        else:\n            # If it is not, add a space to the string\n            star_str +=''\n\n    # Return then'th star number as a string\n    return star_str"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_numbers = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_numbers += arr[i]\n    return sum_even_numbers"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n    even_index = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n            even_index.append(i)\n\n    if count_even == 0:\n        return \"There are no even numbers at even positions.\"\n    else:\n        return \"Sum of even numbers at even positions: {}, Even indices: {}\".format(sum_even, even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n            if i % 2 == 0:\n                print(f\"Sum of even numbers at even positions: {sum_even}\")\n                print(f\"Count of even numbers at even positions: {count_even}\")\n                break\n\n    if count_even == 0:\n        print(\"There are no even numbers at even positions.\")"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable to 0\n    sum_even_pow_5 = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of i^5 using the built-in pow() function\n        sum_even_pow_5 += pow(i, 5)\n\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum_even_pow_5"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += i**5\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**(5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate through the first n even numbers\n    for i in range(2, n+1, 2):\n        # add the i^5 to the sum\n        sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # initialize variables for sum and index\n    sum_of_powers = 0\n    index = 0\n    \n    # loop through first n even natural numbers\n    while index < n:\n        \n        # add the even number raised to the fifth power to the sum\n        sum_of_powers += (index+1)**5\n        \n        # increment the index for the next number\n        index += 1\n    \n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to store rear elements\n    rear_elements = []\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # extract the rear element from the tuple and add it to the rear_elements list\n        rear_elements.append(tup[-1])\n    \n    # return the rear_elements list\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different number of elements.\")\n        return\n    \n    # Create a new tuple with the substracted elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # Initialize the result tuple\n    result = ()\n\n    # Loop through the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the indices are valid\n        if i < 0 or i >= len(test_tup1):\n            print(\"Error: The indices must be within the range of the tuple.\")\n            return\n\n        # Get the elements of the first and second tuples with the same index\n        first_elem = test_tup1[i]\n        second_elem = test_tup2[i]\n\n        # Subtract the elements and add them to the result tuple\n        result = result + (first_elem - second_elem,)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    # Loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize a new tuple to hold the result\n    result_tup = []\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element exists in the second tuple\n        if i < len(test_tup2):\n            # If it does, subtract the elements and add the result to the result tuple\n            result_tup.append(test_tup1[i] - test_tup2[i])\n        else:\n            # If it doesn't, just add the element to the result tuple\n            result_tup.append(test_tup1[i])\n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [(a-b) for a,b in zip(test_tup1,test_tup2) if a!=0]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same number of elements.\"\n    else:\n        subtraction_result = []\n        for i in range(len(test_tup1)):\n            subtraction_result.append(test_tup1[i] - test_tup2[i])\n        return subtraction_result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize the result list\n    result = []\n    \n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # get the corresponding element in the second tuple\n        second_elem = test_tup2[i]\n        \n        # subtract the second element from the first element\n        result.append(test_tup1[i] - second_elem)\n    \n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff = [1]\n    sum_even = 0\n    for i in range(2, n+1):\n        coeff.append((coeff[i-1]*i)/math.factorial(i-2))\n        if i%2 == 0:\n            sum_even += coeff[i]\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    numerator = 0\n    denominator = 1\n    even_sum = 0\n    \n    # Calculate even index binomial coefficients\n    for i in range(2, n+1, 2):\n        numerator += math.factorial(i)\n        denominator *= i\n    \n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1, 2):\n        even_sum += numerator // i\n        numerator %= i\n        denominator /= i\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    \n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    \n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n == 0 or n == 1:\n        return 0\n    else:\n        sum_even_index = 0\n\n        for i in range(1, n+1):\n            coeff = (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n            if i % 2 == 0:\n                sum_even_index += coeff\n\n        return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        sum_even += (i * math.factorial(n-i))/(math.factorial(i) * math.factorial(n-i))\n    return sum_even\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    # Initialize sum and count to 0\n    sum_even = 0\n    count = 0\n    \n    # Iterate through values of k from 0 to n\n    for k in range(n+1):\n        # Calculate the binomial coefficient for k\n        coeff = math.comb(n, k)\n        \n        # If the coefficient is even, add it to the sum\n        if k % 2 == 0:\n            sum_even += coeff\n            count += 1\n    \n    # Calculate the average of the sum of even index binomial coefficients\n    avg_sum_even = sum_even / count\n    \n    # Return the average of the sum of even index binomial coefficients\n    return avg_sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs += coeff\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Calculate the even index binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n        \n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h  # Formula for the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/4) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder\n    volume = 3.14159 * (r**2) * h\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i + 1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i + 1]:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if i == 0:\n            continue\n        if elem!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if elem < test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        decagonal = 1\n        for i in range(1, n):\n            decagonal += i * (i * 2 - 1)\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_sum = 0\n    for i in range(1, n+1):\n        decagonal_sum += i * (2*i-1)\n    return decagonal_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += i*i*2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    count = 1\n\n    while count <= n:\n        decagonal_num = (num * (num + 1)) // 2\n        if decagonal_num == n:\n            return decagonal_num\n        elif decagonal_num > n:\n            return \"The nth decagonal number is greater than or equal to n.\"\n        num += 1\n        count += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num += (i * (2*i - 1))\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    def decagonal_formula(n):\n        \"\"\"\n        Calculate the nth decagonal number using the decagonal formula.\n        \"\"\"\n        return (1/2) * (n * (n+1) * (2 * n + 1))\n    \n    if n <= 0:\n        return None\n    else:\n        return decagonal_formula(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"The input number must be positive.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return (n*n + n - 2)**2 + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0: \n        return 0\n    else: \n        return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n - 1) // 2"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    \n    # Loop through the list and check if the element exists\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    \n    # If the element is not found, return False and -1 as the index position\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (found, i)\n    return (found, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all elements in the list are unique, else it returns False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list of items and returns True if all the elements in the list are unique, otherwise, it returns False.\n    \"\"\"\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store the elements of the list\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return None\n    result = [x-y for x,y in zip(nums1,nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists have different lengths.\")\n        return\n    \n    # subtract each element of the two lists\n    result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with the difference between the two lists.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return None\n    \n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    \n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # initialize an empty dictionary to store the frequency of each digit in n\n    freq = {}\n\n    # loop through each digit in n\n    for digit in str(n):\n        # if the digit already exists in the dictionary, increment its value by 1\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit doesn't exist in the dictionary, add it with a value of 1\n        else:\n            freq[digit] = 1\n\n    # loop through each key in the frequency dictionary\n    for key in freq:\n        # if the value of the key is greater than or equal to the key itself, return False, indicating the frequency of each digit in n is not less than or equal to the digit itself\n        if freq[key] >= int(key):\n            return False\n\n    # if the loop completes without returning False, return True, indicating the frequency of each digit in n is less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    freq = []\n    \n    # Convert the number to a list of digits\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    \n    # Calculate the frequency of each digit in the list\n    for i in range(len(digits)):\n        freq.append(digits.count(i))\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            print(\"False\")\n            return\n    \n    # If all conditions are satisfied, print True\n    print(\"True\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10 # initialize a count array of size 10 to store the frequency of each digit in the integer\n    \n    # calculate the frequency of each digit in the integer\n    for i in str(n):\n        count[int(i)] += 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n    \n    # if all the digits are less than or equal to the digits themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    count = [0] * 10\n    \n    for i in str(n):\n        count[int(i)] += 1\n    \n    for i in range(10):\n        if count[i] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already present in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with frequency 1\n        else:\n            freq[digit] = 1\n    # Iterate through each digit in the dictionary\n    for digit in freq:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    # If no digit in the dictionary has a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = list(map(int, str(n)))  # convert the integer to a list of digits\n    freq = {}  # create an empty dictionary to store frequency of each digit\n\n    # loop through each digit in the list\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1  # increment the count of the digit\n        else:\n            freq[digit] = 1  # initialize the count of the digit to 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize the dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # loop through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    # loop through the dictionary and check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > freq[digit]:\n            return False\n    # if all the digits have the same frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    freq = {}\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of digits\n    frequency = {}\n    \n    # Iterate over each digit in the integer\n    for digit in str(n):\n        # If the digit is not in the dictionary, initialize its frequency to 1\n        if digit not in frequency:\n            frequency[digit] = 1\n        # Otherwise, increment its frequency by 1\n        else:\n            frequency[digit] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    \n    # If all digits have their frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # loop through each digit in the number\n    for digit in str(n):\n        # count the frequency of the digit in the number\n        freq = 0\n        for i in str(n):\n            if i == digit:\n                freq += 1\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq > digit:\n            return False\n    # if the loop completes without returning False, the number is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return False\n\n    if len(list) == 1:\n        return list[0] == element\n\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all the elements in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_equal = True\n    for i in range(len(list)):\n        if list[i]!= element:\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if the list is empty\n    if len(list) == 0:\n        return True\n    # check if the first element in the list is equal to the given element\n    elif list[0] == element:\n        # check if all remaining elements in the list are also equal to the given element\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Regular expression pattern to match 'a' followed by two or three 'b' characters\n    pattern = r'a(?:b{2,3})'\n\n    # Use the re.search() method to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # Check if the pattern was found and return the result\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = re.compile(r'a(?=b{2,3})')\n    matches = pattern.findall(text)\n    \n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=a)([bB]){2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"Found a match!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b(?:(?:[ab]{2,3}){0,1})')\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a[^b]*b(?:\\1{2})*'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a)(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the total sum of the given array\n    total_sum = sum(a)\n    # Get the sum of the first k elements of the modified array\n    modified_sum = sum(a[:k])\n    # Initialize the maximum sum of the modified array\n    max_sum = modified_sum\n    # Initialize the current sum of the modified array\n    current_sum = modified_sum\n\n    # Check if the sum of the first k elements can be greater than or equal to the total sum\n    if current_sum >= total_sum:\n        return max_sum\n\n    # Iterate over the remaining elements of the given array\n    for i in range(k, n):\n        # Update the current sum by removing the first element and adding the next element\n        current_sum -= a[i-k]\n        current_sum += a[i]\n        # Update the modified sum by repeating the current sum k times\n        modified_sum = sum(current_sum*k)\n        # Update the maximum sum of the modified array if necessary\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sub-array sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the input array and calculate the maximum sum of a contiguous sub-array\n    for i in range(k):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        else:\n            curr_sum -= a[n-1-i]\n\n    # Return the maximum sum of a contiguous sub-array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array that is k times larger than the original array\n    modified_array = [0] * (k * n)\n    \n    # Initialize the new array with the original array\n    for i in range(n):\n        modified_array[i] = a[i]\n    \n    # Find the maximum subarray sum in the modified array\n    max_sum = max_subarray(modified_array, n)\n    \n    # Return the maximum subarray sum\n    return max_sum\n\n\ndef max_subarray(arr, n):\n    '''\n    Function to find the maximum subarray sum in the given array.\n    '''\n    \n    # Initialize the maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    max_start = 0\n    \n    # Iterate through the array and calculate the maximum subarray sum\n    for i in range(n):\n        for j in range(i + 1, n):\n            current_sum = arr[i] + arr[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = i\n                \n    # Return the maximum subarray sum and its starting index\n    return max_sum, max_start"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 1:\n        return max(a)\n    \n    if n % k!= 0:\n        return -1\n    \n    mod_a = a * k\n    \n    max_sum = 0\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += mod_a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the first k elements in the array\n    sum_k = sum(a[:k])\n    # initialize variables to store the maximum sum of the array and the index of the maximum sum\n    max_sum = sum_k\n    max_index = 0\n    # loop through the remaining elements of the array\n    for i in range(k, n):\n        # calculate the sum of the next k elements in the array\n        sum_next_k = sum(a[i+k-1:])\n        # add the next k elements to the current sum\n        sum_k += a[i+k-1]\n        # update the maximum sum and its index if necessary\n        if sum_k > max_sum:\n            max_sum = sum_k\n            max_index = i\n    # return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum and the maximum contiguous subarray\n    max_sum = float('-inf')\n    max_subarray = [0] * k\n\n    # Iterate over the given array\n    for i in range(n):\n        # If the current element is greater than or equal to k times of the minimum element, add it to the maximum sum\n        if a[i] >= k * a[0]:\n            max_sum = max(max_sum, a[i] + max_sum)\n\n        # Update the maximum contiguous subarray\n        for j in range(k):\n            if j == 0 or a[i] >= j * a[0]:\n                max_subarray[j] = max(max_subarray[j], a[i])\n            else:\n                max_subarray[j] = max_subarray[j-1]\n\n        # Update the maximum sum if the current element is greater than or equal to the maximum element in the subarray\n        if a[i] >= max(max_subarray):\n            max_sum = max(max_sum, max_subarray[0] + max_subarray[-1] + a[i])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize variables to store the maximum sum and the repeated subarray \n    max_sum = float('-inf')\n    repeated_sum = 0\n    \n    # Iterate through the array and for each element, update the repeated sum \n    for i in range(n): \n        repeated_sum += a[i]\n        \n        # Check if the repeated sum is greater than the current maximum sum \n        if repeated_sum > max_sum: \n            max_sum = repeated_sum\n        \n        # Check if the repeated sum is greater than the previous maximum sum \n        if repeated_sum > k * a[i]: \n            max_sum = repeated_sum\n            repeated_sum = 0\n    \n    # Return the maximum sum \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Find the sum of the original array\n    original_sum = sum(a)\n\n    # Find the sum of the modified array\n    modified_sum = original_sum * k\n\n    # Initialize the maximum sum and the starting and ending indices of the modified array\n    max_sum = original_sum\n    start_index = 0\n    end_index = 0\n\n    # Iterate over the modified array\n    for i in range(n):\n        # Add the value of the current element to the modified sum\n        modified_sum += a[i]\n\n        # If the modified sum becomes greater than the original sum, update the maximum sum and the starting and ending indices\n        if modified_sum > original_sum:\n            max_sum = modified_sum\n            start_index = i - k + 1\n            end_index = i\n\n        # If the modified sum becomes equal to the original sum and the current element is a repeated element, update the maximum sum and the starting and ending indices\n        elif modified_sum == original_sum and a[i] in a[:i+1]:\n            max_sum = original_sum\n            start_index = i - k + 1\n            end_index = i\n\n    # Return the maximum sum and the starting and ending indices of the modified array\n    return max_sum, start_index, end_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the total sum of the original array\n    total_sum = sum(a)\n\n    # Calculate the sum of the modified array\n    modified_sum = total_sum * k\n\n    # Initialize the largest sum as the total sum\n    max_sum = total_sum\n\n    # Iterate through the array and calculate the sum of the contiguous subarray\n    for i in range(n):\n        for j in range(k):\n            # Calculate the current subarray sum\n            subarray_sum = (a[i] + a[i+j]) * j\n\n            # Update the largest sum if the current subarray sum is greater than the previous largest sum\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n\n    # Return the largest sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize max sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # repeat the array k times and calculate the sum of the current array\n    for i in range(k):\n        curr_sum += a\n\n    # if the current sum is greater than the maximum sum, update the max sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    # calculate the sum of the first k elements of the original array and subtract it from the current sum\n    curr_sum -= sum(a[:k])\n\n    # if the current sum is greater than the maximum sum, update the max sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    # repeat the previous steps for the remaining elements of the original array\n    for i in range(k, n):\n        # add the next element of the original array to the current sum\n        curr_sum += a[i]\n\n        # if the current sum is greater than the maximum sum, update the max sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # calculate the sum of the first k elements of the original array and subtract it from the current sum\n        curr_sum -= sum(a[:k])\n\n    # return the max sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # initialize sum and count variables to 0\n    sum_of_squares = 0\n    count = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current even number to the sum_of_squares\n        sum_of_squares += i*i\n        # increment the count variable\n        count += 1\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    total = 0\n    \n    # iterate over first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the current even number\n        square = i * i\n        \n        # add the square to the total\n        total += square\n    \n    # return the total\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 2\n        count += 1\n\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of i to sum\n        sum += i**2\n\n    # Return sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0  # Initialize the sum of squares variable\n\n    for i in range(2, n+1, 2):  # Iterate over first n even natural numbers starting from 2\n        sum_of_squares += i*i  # Calculate the square of each even natural number and add it to the sum\n\n    return sum_of_squares  # Return the sum of squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # iterate through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # square i and add to sum\n        sum += i*i\n        \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            length = len(list1[i])\n    return length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = []\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list):\n            max_length_list = [len(sublist)]\n        elif len(sublist) == max(max_length_list):\n            max_length_list.append(len(sublist))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result = [sublist]\n        elif len(sublist) == max_len:\n            result.append(sublist)\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum length list\n    max_list = []\n\n    # iterate over each list in the input list\n    for i in range(len(list1)):\n        # initialize a variable to store the current length of the current list\n        length = len(list1[i])\n        # check if the length is greater than the length of the current maximum length list\n        if length > len(max_list):\n            # if it is, replace the current maximum length list with the current list\n            max_list = [list1[i]]\n        # otherwise, check if the current list is a subset of the current maximum length list\n        elif all(x in max_list for x in list1[i]):\n            # if it is, add the current list to the current maximum length list\n            max_list.append(list1[i])\n\n    # return the maximum length list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    # loop through each sublist in the list\n    for sublist in list1:\n        # find the length of the sublist\n        length = len(sublist)\n        # update max_length if length is greater than current max_length\n        if length > max_length:\n            max_length = length\n    # return the list of maximum length\n    return [sublist for sublist in list1 if len(sublist) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length_list[-1] or max_length_list == []:\n            max_length_list.append(len(list1[i]))\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_no_of_ways_helper(start, end, post_colors, color_count):\n        if start == end:\n            return 1\n        \n        if post_colors[start] == post_colors[end]:\n            return 0\n        \n        if post_colors[start] not in color_count:\n            color_count[post_colors[start]] = 0\n        \n        if color_count[post_colors[start]] > 0:\n            color_count[post_colors[start]] -= 1\n            return count_no_of_ways_helper(start + 1, end, post_colors, color_count) + count_no_of_ways_helper(start + 2, end, post_colors, color_count)\n        else:\n            color_count[post_colors[start]] = k - 1\n            return count_no_of_ways_helper(start + 1, end, post_colors, color_count) + count_no_of_ways_helper(start + 2, end, post_colors, color_count)\n\n    post_colors = [0] * n\n    color_count = {}\n\n    return count_no_of_ways_helper(0, n - 1, post_colors, color_count)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    def backtrack(left, right, color_count, used_colors):\n        if left > right:\n            return 1\n\n        if left == right:\n            if color_count <= k:\n                return 1\n            else:\n                return 0\n\n        count = 0\n        for i in range(left, right+1):\n            if i not in used_colors:\n                used_colors.add(i)\n                count += backtrack(left, i-1, color_count+1, used_colors)\n                used_colors.remove(i)\n\n        return count\n\n    return backtrack(0, n-1, 0, set())"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create a list of all possible colors\n    colors = [i for i in range(1, k+1)]\n\n    # create a list to store the count of ways for each color combination\n    count = [0] * (2**n)\n\n    # base case: if there are no colors left, there is only one way to paint the fence\n    count[0] = 1\n\n    # iterate over all possible color combinations\n    for color in colors:\n        # skip if this color combination has already been considered\n        if count[0] == 0:\n            break\n        # mark all the colors except the one we are considering as used\n        for i in range(1, n+1):\n            count[2**i-1] += count[i-1] * count[2**(i-1)-1] * (k-color+1)\n        # mark the one we are considering as unused and add the count of remaining colors for this color combination\n        count[2**n-1] += count[n-1] * (k-color+1)\n\n    # return the count of ways\n    return count[2**n-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function takes two arguments n and k, which represent the number of posts and colors respectively.\n    It then returns the number of ways to paint the fence such that at most 2 adjacent posts have the same color.\n\n    The function uses dynamic programming to find the number of ways to paint the fence. We first create a 2D array dp of size (n+1)x(k+1) and initialize all values to 0.\n\n    dp[i][j] represents the number of ways to paint the fence with i posts and j colors.\n\n    We can solve this problem in O(nk) time complexity, where n and k are the number of posts and colors respectively.\n\n    For each possible i in [0, n], we iterate over all possible j in [0, k]. If we have j colors left and we have i posts, we can paint the i-th post with any color from 0 to j-1. Therefore, we update dp[i][j] to dp[i-1][j] + dp[i][j-1].\n\n    After iterating over all possible i and j, we return the final value in dp[n][k].\n\n    \"\"\"\n\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = dp[i][j-1]\n            elif j == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(n-1):\n        if i % k == 0 or i % (k+1) == 0:\n            count += 1\n    return count\n\nprint(count_no_of_ways(5,3)) # Output: 3"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [0] * (n+1)\n    ways[0] = 1\n    for i in range(1, n+1):\n        ways[i] = sum(ways[j] for j in range(k) if i-j >= 0)\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list to store the possible colors for each post\n    colors = [0] * n\n    \n    # Initialize the number of ways to 1\n    ways = 1\n    \n    # Loop over all possible colors for the first post\n    for i in range(k):\n        # Increment the number of ways to account for this color\n        ways *= (i+1)\n        \n        # Mark the i-th color as used in the list of colors\n        colors[0] = i+1\n        \n        # If we have filled the list of colors, increment the number of ways\n        if i+1 == k:\n            ways *= i+1\n    \n    # Initialize the number of ways to 1\n    ways = 1\n    \n    # Loop over all possible colors for the remaining posts\n    for i in range(1, n):\n        # If there are at most 2 adjacent posts with the same color, increment the number of ways\n        if colors[i-1] == colors[i-2]:\n            ways *= 2\n        \n        # Mark the i-th color as used in the list of colors\n        colors[i] = colors[i-1]\n        \n        # If we have filled the list of colors, increment the number of ways\n        if colors[i] == k:\n            ways *= i+1\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store the number of ways of painting the fence\n    ways = [0]*(n+1)\n    ways[0] = 1 # base case\n    \n    # Iterate over the indices from 1 to n\n    for i in range(1, n+1):\n        # Iterate over the indices from 1 to i\n        for j in range(1, i+1):\n            # If the current color is not same as the previous color, increment the number of ways\n            if j <= k:\n                ways[i] += ways[j-1]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways to paint the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the table\n    for i in range(1, n + 1):\n        ways[i][1] = ways[i - 1][1] + ways[i - 1][2]\n\n    for i in range(1, k + 1):\n        ways[1][i] = ways[1][i - 1] + ways[2][i - 1]\n\n    # Fill in the remaining rows and columns of the table\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i][j - 1] - ways[i - 1][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # base case\n    if n == 0:\n        return 1\n    \n    # initialize variables\n    dp = [0] * (n + 1)\n    \n    # set first row and first two columns to 1\n    dp[1] = 1\n    dp[2] = 1\n    \n    # fill in rest of the rows\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the last element of the array\n    return dp[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    if m == 0:  \n        print(\"Error: Division by zero!\")  \n    else:  \n        quotient = n // m  \n        print(\"The quotient of\", n, \"and\", m, \"is\", quotient)  "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate quotient using integer division\n    q = n // m\n\n    # return quotient\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    if n%m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # integer division\n    remainder = n % m  # modulo\n    if remainder == 0:\n        return quotient\n    else:\n        return quotient + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    cos_angle = math.sqrt((w**2 + h**2) / (w * h))\n    other_side = s * cos_angle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes in two parameters, w and h, which represent the lengths of two sides of a right angled triangle.\n    It then calculates the third side of the triangle using Heron's formula.\n\n    Heron's formula for the area of a right triangle is:\n    A = sqrt(s*(s-a)*(s-b)*(s-c))\n\n    where s is the semi-perimeter of the triangle, which is given by:\n    s = (a + b + c)/2\n\n    Using this formula, we can find the semi-perimeter by:\n    s = (w + h) / 2\n\n    Finally, we can use Heron's formula again to find the third side of the triangle:\n    s = sqrt(s*(s-a)*(s-b)*(s-c))\n    c = (w + h) / 2\n    s = c*(w+h)/2\n    s = sqrt(s*(s-w)*(s-h)*(s-w+h))\n\n    So, we can find the third side of a right angled triangle using Heron's formula:\n    Third Side = sqrt(s*(s-w)*(s-h)*(s-w+h))\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s*(s-w)*(s-h)*(s-w+h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the width and height of a right angled triangle as input\n    and returns the third side of the triangle.\n    '''\n    s = (w * h) ** 0.5\n    return math.sqrt(s ** 2 - (w ** 2 / 2))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    semi_perimeter = (w + h)/2\n\n    # Calculate the hypotenuse of the triangle using the law of cosines\n    c = math.sqrt(w*w + h*h)\n\n    # Calculate the angle opposite the hypotenuse\n    theta = math.acos((w/c)/(h/c))\n\n    # Calculate the third side of the triangle using the law of sines\n    side_3 = math.sin(theta)\n\n    return side_3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Use the Pythagorean theorem to find the square root of the semi-perimeter\n    sqrt_s = math.sqrt(s)\n    \n    # Calculate the third side of the right angled triangle\n    third_side = sqrt_s * math.sin(math.degrees(60))\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    area = math.sqrt(s**2 - w**2 - h**2)\n    third_side = 2 * w * area\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # using the formula for a right triangle\n    third_side = math.sqrt(w**2 + h**2 - ((w**2+h**2)/(4*math.tan(math.pi/3))))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side\n    third_side = math.sqrt((w ** 2) + (h ** 2))\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if type(val) == int:\n            if val > max_val:\n                max_val = val\n        elif type(val) == float:\n            if val > max_val:\n                max_val = val\n        elif type(val) == str:\n            if len(val) > len(max_val):\n                max_val = val\n        elif type(val) == list:\n            max_val = max_val(val)\n        else:\n            print(\"Invalid value found in the list\")\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Find the maximum value in the list\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if type(i)!= type(max_val):\n            max_val = i\n        elif i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = None\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list and returns the maximum value in the list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input must be a list.')\n    else:\n        max_value = float('-inf')\n        for val in listval:\n            if isinstance(val, int) or isinstance(val, float):\n                if val > max_value:\n                    max_value = val\n            elif isinstance(val, str):\n                if len(val) > len(str(max_value)):\n                    max_value = val\n            else:\n                raise TypeError('Invalid type in list.')\n        return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        print(\"Input should be a list!\")\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], (int, float, complex)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        elif isinstance(listval[i], str):\n            if max_val < listval[i]:\n                max_val = listval[i]\n        elif isinstance(listval[i], list):\n            max_val = max(max_val, max_val(listval[i]))\n        else:\n            print(\"Invalid type in the list!\")\n            return None\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Find the maximum value in the list\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    elif not listval:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    max_val = None\n    for i in listval:\n        if i is None:\n            max_val = None\n            break\n        elif max_val is None:\n            max_val = i\n        elif i > max_val:\n            max_val = i\n    \n    if max_val is None:\n        raise ValueError(\"All values in the list are None.\")\n    else:\n        return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div.append(i)\n    return sum(div)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    \n    while divisor * divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n\n    n = len(arr)  # get the length of the array\n    inv_count = 0  # initialize the inversion count variable to 0\n\n    # sort the array in ascending order using merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n\n            merge_sort(left)\n            merge_sort(right)\n\n            i = j = k = 0\n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    arr[k] = left[i]\n                    i += 1\n                else:\n                    arr[k] = right[j]\n                    j += 1\n                    inv_count += len(left) - i\n                k += 1\n\n            while i < len(left):\n                arr[k] = left[i]\n                i += 1\n                k += 1\n\n            while j < len(right):\n                arr[k] = right[j]\n                j += 1\n                k += 1\n\n    merge_sort(arr)\n\n    # count the inversions using two pointers approach\n    i, j = 0, n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += j - i\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # Sort the array \n    arr.sort() \n    # Count inversions \n    inv_count = 0 \n    for i in range(1, n): \n        inv_count += (i - 1) * i / 2 \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Count inversions using bitonic sort\n    for i in range(1, n):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            inv_count += j\n            j = max(i//2, 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # Create a function that takes two indices as input and returns the sum of the elements in the array \n    # between the two indices (inclusive) \n    def merge_sort(arr, low, high): \n  \n        # If the array has only one element or is already sorted, return the array \n        if low == high: \n            return arr \n  \n        # Find the middle index of the array \n        mid = (low + high) // 2 \n  \n        # Divide the array into two halves \n        left_arr = merge_sort(arr, low, mid) \n        right_arr = merge_sort(arr, mid + 1, high) \n  \n        # Merge the two sorted halves \n        i = j = k = 0\n        inv_count = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                inv_count += len(left_arr) - i\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n  \n        # Copy the remaining elements of the left and right halves \n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n  \n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n  \n        return arr, inv_count\n\n    # Call the merge_sort function to sort the array and count inversions \n    sorted_arr, inv_count = merge_sort(arr, 0, n - 1) \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n            elif arr[j] > arr[i]:\n                inv_count += j-i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_arr = arr[:mid]\n            right_arr = arr[mid:]\n\n            merge_sort(left_arr)\n            merge_sort(right_arr)\n\n            i = j = k = 0\n\n            while i < len(left_arr) and j < len(right_arr):\n                if left_arr[i] <= right_arr[j]:\n                    arr[k] = left_arr[i]\n                    i += 1\n                else:\n                    arr[k] = right_arr[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_arr):\n                arr[k] = left_arr[i]\n                i += 1\n                k += 1\n\n            while j < len(right_arr):\n                arr[k] = right_arr[j]\n                j += 1\n                k += 1\n\n    arr = list(arr)\n    merge_sort(arr)\n\n    inv_count = 0\n    i = 1\n    j = 0\n    while i < len(arr):\n        if arr[i] > arr[j]:\n            inv_count += (len(arr) - i) // 2\n            i += 1\n        else:\n            j += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    \n    # Count inversions\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j] and arr[j] < arr[i-j]:\n                inv_count += (i-j)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    else:\n        mid = len(arr) // 2\n        left_inv = get_Inv_Count(arr[:mid])\n        right_inv = get_Inv_Count(arr[mid:])\n        inv_count = merge_sort(arr, mid, len(arr))\n        return left_inv + right_inv + inv_count\n\n\ndef merge_sort(arr, left, right):\n    \"\"\"\n    Write a Python function to merge sort an array.\n    \"\"\"\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(arr, left, mid)\n        merge_sort(arr, mid + 1, right)\n        merge(arr, left, mid, right)\n    return 0\n\n\ndef merge(arr, left, mid, right):\n    \"\"\"\n    Write a Python function to merge two sorted arrays.\n    \"\"\"\n    inv_count = 0\n    i = left\n    j = mid + 1\n    k = left\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n    list1 (list): A nested list to be flattened.\n\n    Returns:\n    list: A flattened version of the input list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    \n    # Loop through each element in the input list\n    for element in list1:\n        # If the element is a list, recursively flatten it and append to the flattened list\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n        # If the element is not a list, simply append it to the flattened list\n        else:\n            flattened_list.append(element)\n            \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for year, data in stdata.items():\n        max_agg = max(max_agg, sum(val[0] * val[1] for val in data))\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    max_sum = 0\n    for item in stdata:\n        max_aggregate_dict[item[0]] += item[1]\n        max_sum = max(max_sum, max(max_aggregate_dict.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    stdata (list): a list of tuples representing the stock prices\n\n    Returns:\n    float: the maximum aggregate\n    '''\n    # create a dictionary to store the aggregate of stocks for each day\n    agg_dict = defaultdict(int)\n    \n    # iterate through the list of tuples and update the aggregate for each day\n    for date, price in stdata:\n        agg_dict[date] += price\n    \n    # calculate the maximum aggregate for each day\n    max_aggs = [max(value) for key, value in agg_dict.items()]\n    \n    # return the maximum aggregate for each day\n    return max(max_aggs)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_items = defaultdict(int)\n    for item, price in stdata:\n        max_items[item] += price\n        if max_items[item] > max_sum:\n            max_sum = max_items[item]\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = defaultdict(int)\n    for sid, sid_data in stdata:\n        max_val[sid] = max(max_val[sid], sum(sid_data))\n    return max(max_val.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each date.\n    max_aggr = defaultdict(int)\n    # Loop through each tuple in the list.\n    for date, value in stdata:\n        # Update the max_aggr value for the current date.\n        max_aggr[date] = max(max_aggr[date], value)\n    # Return the maximum aggregate value.\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Define a defaultdict to store the maximum aggregate for each item\n    max_aggs = defaultdict(float)\n    \n    # Iterate through the list of tuples and calculate the maximum aggregate\n    for item in stdata:\n        max_aggs[item[0]] = max(max_aggs[item[0]], item[1])\n        \n    # Find the maximum aggregate and return it\n    max_agg = max(max_aggs.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        # update the maximum aggregate for each unique state\n        max_dict[item[1]] = max(max_dict[item[1]], item[0])\n    # calculate the maximum aggregate for all states\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max_agg defaultdict\n    for item in stdata:\n        if item[1] > max_agg[item[0]]:\n            max_agg[item[0]] = item[1]\n\n    # Return the maximum aggregate\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        for j in range(1, 2**n):\n            if sum(int(digit) for digit in str(i)) == sum(int(digit) for digit in str(j)):\n                count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = i\n        for j in range(i):\n            temp = temp ^ (j + 1)\n        if i == 0 or i == (2**n - 1):\n            count += 1\n        elif i % 2 == 0:\n            temp = temp >> 1\n            if temp == i >> 1:\n                count += 1\n        else:\n            temp = temp << 1\n            if temp == i << 1:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        first_half = i // 2\n        last_half = i % 2\n        if sum(first_half) == sum(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        binary = format(i, '0' + str(n) + 'b')\n        if binary[n-1:n] == binary[:n-1][::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        if sum(seq[:n]) == sum(seq[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        first_half = bin(i)[2:].zfill(n)\n        second_half = bin(i)[-n:].zfill(n)\n        if int(first_half) + int(second_half) == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2 ** n):\n        bits = '{0:0{}b}'.format(i, 2 * n)\n        seq = int(bits[:n], 2) + int(bits[n:], 2)\n        if seq == 2 ** n:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n*2)\n        if sum(binary[:n]) == sum(binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n, 2 ** (n + 1)):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i - 2 ** (n - 1))[2:].zfill(n)\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n\n    # iterate over all possible binary sequences of length 2n\n    for i in range(2**n, 2**n + 2**n):\n\n        # extract the first n bits\n        a = bin(i)[2:].zfill(n)\n\n        # extract the last n bits\n        b = bin(i)[-n:].zfill(n)\n\n        # if the sum of first n bits is same as sum of last n bits, increment the count\n        if int(a, 2) == int(b, 2):\n            count += 1\n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        max_depth = 0\n        for key, value in d.items():\n            if type(value) == dict:\n                depth = 1 + dict_depth(value)\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth = max(max_depth, 0)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth = max(depth, dict_depth(item))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Base case: dictionary has no children\n    if len(d) == 0:\n        return 0\n    # Recursive case: depth of the children is one plus the depth of the parent\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Check if the given index is valid or not\n    if index >= len(arr) or index < 0:\n        print(\"Invalid index\")\n        return\n\n    # Initialize the current index to the given index\n    curr_index = index\n\n    # Iterate for the number of rotations and find the element at the current index\n    for i in range(rotations):\n        # Calculate the index of the next element in the given array after rotating\n        next_index = (curr_index + ranges[i]) % len(arr)\n\n        # Check if the next element is the element at the current index\n        if arr[next_index] == curr_index:\n            # If yes, return the next element as the result\n            return next_index\n\n        # Update the current index to the next element\n        curr_index = next_index\n\n    # If the loop is terminated without finding the element, return the element at the current index\n    return curr_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of integers\n    ranges (list): List of 2-tuples representing range of integers to be rotated.\n    rotations (int): Number of rotations to be applied.\n    index (int): Index of the element to be found after rotations.\n\n    Returns:\n    int: Element at the given index after rotations.\n    '''\n\n    # Initialize a variable to store the result\n    result = None\n\n    # Loop through all the possible rotations\n    for i in range(rotations) :\n\n        # Rotate the list of ranges\n        temp = ranges[:]\n        for j in range(len(ranges)) :\n            temp[j] = (temp[j][0] + index + i) % (len(ranges[j][0]) - 1) + (temp[j][1] + index + i) % (len(ranges[j][1]) - 1)\n\n        # Find the element in the rotated list\n        for j in range(len(ranges)) :\n            if arr[temp[j][0]:temp[j][1]+1] == ranges[j][0] :\n                result = ranges[j][0][index]\n                break\n            elif arr[temp[j][0]:temp[j][1]+1] == ranges[j][1] :\n                result = ranges[j][1][index]\n                break\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes three arguments:\n    arr: A list of integers.\n    ranges: A list of pairs representing the start and end indices of the subarray to be searched.\n    rotations: The number of rotations required to find the element at the given index.\n    index: The index at which we want to find the element after rotations.\n\n    The function first finds the subarray in the input array that contains the given index.\n    Then, it rotates the subarray by rotations and returns the element at the index specified.\n    '''\n\n    # Finding the subarray containing the given index\n    start = 0\n    end = len(arr) - 1\n    while arr[start] <= arr[index] and start < end:\n        start += 1\n    while arr[end] >= arr[index] and start < end:\n        end -= 1\n    subarray = arr[start:end+1]\n\n    # Rotating the subarray and returning the element at the given index\n    rotated_subarray = subarray[::-1]\n    for _ in range(rotations):\n        rotated_subarray = [subarray.pop(0)] + rotated_subarray + [subarray.pop()]\n    return rotated_subarray[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Get the current element at the given index\n    current_element = arr[index]\n\n    # Iterate through the array and check if the current element is in any of the ranges\n    for i in range(len(ranges)):\n        if current_element in ranges[i]:\n            # If it is, then find the index of the next element in that range\n            next_index = ranges[i].index(current_element) + rotations[i]\n\n            # If the index is greater than or equal to the length of the array, it means we have looped around and found the next element\n            if next_index >= len(arr):\n                return current_element\n            # If the index is less than the length of the array, return the element at that index\n            else:\n                return arr[next_index]\n\n    # If we haven't found the next element, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(rotations):\n        # Perform a rotation\n        arr.append(arr.pop(0))\n    # Find the element at the given index after rotations\n    for i in range(index):\n        arr.append(arr.pop(0))\n    return arr[-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations, and index as input.\n    The array is a list of integers representing the elements in the array.\n    The ranges is a list of integers representing the range of elements that can be in the array.\n    The rotations is the number of rotations to be applied to the array.\n    The index is the index for which the element needs to be found after rotating the array.\n\n    The function returns the element that is at the given index after rotating the array.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    ranges = [1, 2, 3, 4, 5]\n    rotations = 0\n    index = 2\n\n    Output:\n    3\n    \"\"\"\n    # calculate the initial value of the element at the index\n    element = arr[index]\n\n    # rotate the array and update the element variable to the new element\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(1, len(arr)):\n            arr[j-1] = arr[j]\n        arr[len(arr)-1] = temp\n        element = arr[index]\n\n    # search for the element in the rotated array\n    for i in range(len(arr)):\n        if element in ranges and i!= index:\n            return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): list of integers\n    ranges (list): list of integers\n    rotations (int): number of rotations required\n    index (int): index at which element needs to be found\n\n    Returns:\n    int: element at the given index after number of rotations\n    '''\n    if rotations == 0:\n        return arr[index]\n\n    # get the required rotation\n    rotation = rotations % len(arr)\n\n    # calculate the final index after rotation\n    final_index = (index - rotation + len(arr)) % len(arr)\n\n    # find the element at final index\n    final_element = arr[final_index]\n\n    # check if final element is in range\n    if final_element >= ranges[0] and final_element < ranges[1]:\n        # if yes, find element in original array\n        for i in range(index - rotation, -1, -1):\n            if arr[i] == final_element:\n                return arr[i]\n\n    # if element is not in range, find it in original array\n    for i in range(index, -1, -1):\n        if arr[i] == final_element:\n            return arr[i]\n\n    # if element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of rotations, and an index, and returns the element at the given index after rotations.\n    \"\"\"\n    # Define a helper function to find the element at a given index after rotations\n    def find_after_rotations(arr, ranges, rotations, index):\n        \"\"\"\n        This function finds the element at a given index after rotations.\n        \"\"\"\n        # Define variables to keep track of the current index and the range of rotations applied\n        current_index = index\n        current_rotations = rotations\n        # Define a helper function to find the element at a given index after rotations\n        def find_element_after_rotations(arr, ranges, rotations, current_index, current_rotations):\n            \"\"\"\n            This helper function finds the element at a given index after rotations.\n            \"\"\"\n            # Check if the current index is out of bounds\n            if current_index < 0 or current_index >= len(arr):\n                return None\n            # Check if the element at the current index is already in the list of elements\n            if arr[current_index] in ranges:\n                return arr[current_index]\n            # Check if the element at the current index has already been rotated\n            if current_rotations == 0:\n                return arr[current_index]\n            # Remove the element at the current index from the list of elements\n            del ranges[arr[current_index]]\n            # Find the index of the element that will be at the current index after the rotation\n            new_index = arr.index(arr[current_index], current_index)\n            # Rotate the list of rotations by one\n            current_rotations -= 1\n            # Return the element at the new index after rotations\n            return find_element_after_rotations(arr, ranges, rotations, new_index, current_rotations)\n        # Return the element at the current index after rotations\n        return find_element_after_rotations(arr, ranges, rotations, current_index, current_rotations)\n    \n    # Return the element at the given index after rotations\n    return find_after_rotations(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in the array, the ranges and rotations of the array and the index of the element\n    to find. It then returns the element at the given index after number of rotations.\n\n    Args:\n        arr (list): The array to find the element in.\n        ranges (list): The list of ranges for each element in the array.\n        rotations (list): The list of rotations for each element in the array.\n        index (int): The index of the element to find.\n\n    Returns:\n        The element at the given index after number of rotations.\n    \"\"\"\n    # Find the element at the given index and check if it is within range\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Find the rotations and element to find\n    rotations_to_find = 0\n    element_to_find = arr[index]\n\n    # Check for rotations to find the element\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            rotations_to_find = rotations[i]\n            element_to_find = arr[index - ranges[i][0]]\n            break\n\n    # Perform the rotations to find the element\n    for _ in range(rotations_to_find):\n        if element_to_find == arr[0]:\n            element_to_find = arr[-1]\n        else:\n            element_to_find = arr[0]\n\n    return element_to_find"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    remaining_rotations = ranges.pop(0)\n    rotated_elements = arr[rotations[0]:rotations[1]]\n    \n    for i in range(remaining_rotations):\n        rotated_elements = rotate(rotated_elements)\n    \n    return rotated_elements[index % len(rotated_elements)]\n\ndef rotate(arr):\n    return arr[1:] + arr[0]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*') # match words starting with 'p'\n    matches = re.findall(pattern, words) # find all matches\n    return matches[0:2] # return the first two matches\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b[Pp]\\w+'\n    matches = re.findall(pattern,''.join(words))\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Use regular expressions to find words starting with 'p'\n    pattern = re.compile('^[Pp].*')\n    matches = re.findall(pattern, words)\n\n    # Check if there are at least two matches\n    if len(matches) < 2:\n        return None\n\n    # Return the two matches\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p[a-z]+')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+$'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Create a regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p\\w*')\n    \n    # Find all words starting with letter 'p'\n    matches = re.findall(pattern, words)\n    \n    # Return two words starting with letter 'p'\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p.*'\n    # find all words starting with letter 'p' in the list of words\n    matches = re.findall(pattern, words)\n    # return the first two words starting with letter 'p'\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)-1):\n        if words[i][0].lower() == 'p':\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_seq = []\n    start = 0\n\n    for i in range(index, n):\n        if i == k:\n            break\n        elif i == index:\n            curr_sum += a[i]\n            curr_seq.append(i)\n            start = i\n            continue\n        if a[i] > a[start]:\n            curr_sum += a[i] - a[start]\n            curr_seq.append(i)\n        else:\n            curr_sum += a[i]\n            curr_seq.append(i)\n            start = i\n\n    for i in range(index - 1, start - 1, -1):\n        if a[i] > a[start - 1]:\n            curr_sum += a[i] - a[start - 1]\n            curr_seq.insert(0, i)\n        else:\n            curr_sum += a[i]\n            curr_seq.insert(0, i)\n            start = i\n\n    for i in range(len(curr_seq)):\n        max_sum = max(max_sum, curr_seq[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n\n    if index == 0 or k == 0:\n        return a[0]\n\n    prev_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n    max_sum = max(prev_sum, a[index] + prev_sum)\n\n    if k == 1:\n        return max_sum\n\n    if a[k - 1] < a[index]:\n        return max_sum + max_sum_increasing_subseq(a, n, index - 1, k - 1)\n    else:\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    # Initialize the sum of the subsequence to zero\n    max_sum = 0\n    \n    # Initialize the maximum sum of the subsequence to the current element\n    max_prefix_sum = a[index]\n    \n    # Initialize the current prefix sum to the current element\n    prefix_sum = a[index]\n    \n    # Traverse the array from index to k\n    for i in range(index, k):\n        # Update the prefix sum by subtracting the element at the current index and adding the element at the i-th index\n        prefix_sum = max(prefix_sum + a[i] - a[index], 0)\n        \n        # Update the maximum prefix sum by taking the maximum of the current prefix sum and the sum of the subsequence from the i-th index to k-1\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n        \n        # Update the maximum sum of the subsequence by taking the maximum of the current maximum sum of the subsequence and the sum of the subsequence from the i-th index to k-1\n        max_sum = max(max_sum, max_prefix_sum)\n    \n    # Return the maximum sum of the subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == 0:\n        return 0\n    \n    # Initialize the maximum sum of increasing subsequence\n    max_sum = max(a[0], a[index])\n    \n    # Traverse through the array from index+1 to n-1\n    for i in range(index+1, n):\n        # Check if the current element is greater than or equal to k\n        if a[i] >= k:\n            # Calculate the maximum sum of increasing subsequence\n            temp_max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n            \n            # Update the maximum sum of increasing subsequence\n            max_sum = temp_max_sum\n            \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                   max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n    a (list): List of integers.\n    n (int): Length of the list.\n    index (int): Index at which we want to find the maximum sum of increasing subsequence.\n    k (int): Index of the kth element which is after index.\n\n    Returns:\n    int: Maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Create a table to store the maximum sum of increasing subsequence for all indices of length i\n    table = [[0 for j in range(index+1)] for i in range(n+1)]\n    # Initialize the first element in the table as 0\n    table[0][0] = 0\n    # Iterate through all indices of length i from 1 to n\n    for i in range(1, n+1):\n        # Iterate through all indices of length j from 0 to index\n        for j in range(1, index+1):\n            # Check if a[j] is the kth element which is after index and if it is less than or equal to a[i-1]\n            if a[j] <= a[i-1] and (j == index or a[j] < a[j+1]):\n                # Add the maximum sum of increasing subsequence from prefix until j and also including a[k] to the table\n                table[i][j] = table[i-1][j-1] + a[k]\n    # Return the maximum sum of increasing subsequence from prefix until index\n    return table[n][index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array from 0 to n-1\n    for i in range(1, n+1):\n        # If the element is greater than or equal to k, then we include it in the current subsequence\n        if a[i-1] >= k:\n            current_sum += a[i-1]\n        # If the element is less than k, then we cannot include it in the current subsequence, so we can ignore it\n        else:\n            continue\n        \n        # If we have included all k elements, then update the maximum sum and reset the current sum to 0\n        if i == index:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n        \n        # If we have included a smaller k element, then we need to update the current subsequence\n        elif i > index:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    \n    if index == 0:\n        return a[0]\n    \n    dp = [0] * (k + 1)\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    \n    for i in range(2, k + 1):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    \n    return dp[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum as 0 and the maximum sum of increasing subsequence as 0\n    max_sum = 0\n    max_sum_of_increasing_subseq = 0\n\n    # Initialize a list to store the sum of increasing subsequence for each index\n    sum_of_increasing_subseq = [0] * n\n\n    # Iterate from 0 to i-1\n    for i in range(index):\n        # Calculate the sum of increasing subsequence from prefix until i\n        sum_of_increasing_subseq[i] = max(sum_of_increasing_subseq[i], a[i] + sum_of_increasing_subseq[i - 1])\n\n    # Iterate from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than or equal to k, update the maximum sum\n        if a[i] >= k:\n            # Calculate the sum of increasing subsequence from prefix until i and including k\n            sum_of_increasing_subseq[i] = max(sum_of_increasing_subseq[i], a[i] + sum_of_increasing_subseq[i - 1])\n\n        # Update the maximum sum of increasing subsequence if the current sum is greater\n        max_sum_of_increasing_subseq = max(max_sum_of_increasing_subseq, sum_of_increasing_subseq[i])\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum_of_increasing_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes a list of n integers a and the index i for which the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i, is required. The function returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    '''\n    max_sum = float('-inf')\n    max_sum_ending_here = 0\n    prefix_sum = 0\n\n    for i in range(index, n):\n        prefix_sum += a[i]\n        max_sum_ending_here = max(max_sum_ending_here + a[i], prefix_sum)\n        if i == k:\n            max_sum = max(max_sum, max_sum_ending_here)\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            colon[i][j] =''\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        new_tuplex[i] = new_tuplex[i][:m] + (n,) + new_tuplex[i][m:]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex + (new_tuplex[0],)\n    for i in range(n):\n        new_tuplex = new_tuplex + (new_tuplex[-1],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # create a deep copy of the tuple\n    col = deepcopy(tuplex)\n\n    # iterate over each element of the tuple\n    for i in range(m):\n        for j in range(n):\n            # set the value of the element to None\n            col[i][j] = None\n    \n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    tup = deepcopy(tuplex)\n    for i in range(m):\n        tup = (tup[i], tup[i+1], tup[i+2], tup[i+3])\n    return tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    else:\n        return (tuplex[m-1],) + colon_tuplex(tuplex,m-1,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        # Make sure m is greater than n\n        m, n = n, m\n    \n    # Copy the tuple to avoid modifying it\n    tup = deepcopy(tuplex)\n    \n    # Create a list of indices to select\n    indices = list(range(m)) + list(range(m,n))\n    \n    # Get a slice of the tuple with the selected indices\n    colon = tup[indices]\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    if len(tuplex) == 1:\n        col = [col]\n    elif len(tuplex) == 2:\n        col = [col[0], col[1]]\n    else:\n        col = [col[i] for i in range(n-1)] + [tuplex[m]] + [col[-1]]\n        for i in range(m-1,0,-1):\n            col[i] = col[i-1]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        A tuple of length m.\n    m : int\n        The number of rows in the tuple.\n    n : int\n        The number of columns in the tuple.\n\n    Returns:\n    --------\n    colon : tuple\n        A tuple of length n, where the i-th element is the j-th element of tuplex.\n    '''\n\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[i][j])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): The tuple from which the colon is to be calculated.\n    m (int): The number of rows in the colon.\n    n (int): The number of columns in the colon.\n\n    Returns:\n    tuple: The colon of the tuple.\n\n    \"\"\"\n\n    # Check if the tuple is a list of tuples\n    if isinstance(tuplex, list):\n        # If it is, create a new list of tuples to store the colon\n        colon = []\n        # Iterate over each row in the colon\n        for i in range(m):\n            # Create a new tuple to store the columns of the current row\n            row = ()\n            # Iterate over each column in the current row\n            for j in range(n):\n                # Get the index of the current column\n                col_index = i*n + j\n                # If the column is within the bounds of the tuple, add it to the row tuple\n                if 0 <= col_index < len(tuplex[0]):\n                    row += (tuplex[0][col_index],)\n            # Add the current row tuple to the colon list\n            colon.append(row)\n        return colon\n\n    # Check if the tuple is a tuple of lists\n    if isinstance(tuplex, tuple):\n        # If it is, create a new list to store the colon\n        colon = []\n        # Iterate over each row in the colon\n        for i in range(m):\n            # Create a new list to store the columns of the current row\n            row = []\n            # Iterate over each column in the current row\n            for j in range(n):\n                # Get the index of the current column\n                col_index = i*n + j\n                # If the column is within the bounds of the tuple, add it to the row list\n                if 0 <= col_index < len(tuplex):\n                    row.append(tuplex[col_index])\n            # Add the current row list to the colon list\n            colon.append(row)\n        return colon\n\n    # If the tuple is not a list or tuple, raise an error\n    raise ValueError(\"The input must be a list of tuples or a tuple of lists\")"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[1] * nums2[1])\n    else:\n        return max(large_product(nums1, nums2[1:], N-1), large_product(nums1[1:], nums2, N-1), nums1[0] * nums2[0] * nums1[1] * nums2[1])"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create two lists to store the products of each factor\n    factor_product1 = []\n    factor_product2 = []\n\n    # Iterate through the lists and find the largest products for each factor\n    for i in range(1, N + 1):\n        product1 = 1\n        product2 = 1\n        for num in nums1:\n            product1 *= num\n        for num in nums2:\n            product2 *= num\n        factor_product1.append(product1)\n        factor_product2.append(product2)\n\n    # Sort the products in descending order\n    factor_product1.sort(reverse=True)\n    factor_product2.sort(reverse=True)\n\n    # Return the largest products\n    return factor_product1[0], factor_product2[0]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize the largest products to negative infinity\n    largest_products = [float('-inf')] * N\n\n    # iterate over the numbers in the first list\n    for num1 in nums1:\n        # calculate the product of the current number and the second list\n        product1 = num1 * nums2[0]\n        # iterate over the numbers in the second list\n        for num2 in nums2:\n            # calculate the product of the current number, the current number in the first list, and the second list\n            product2 = num1 * num2 * nums2[0]\n            # check if the current product is greater than the current largest product\n            if product2 > largest_products[0]:\n                # if it is, update the largest products with the current ones\n                for i in range(N-1):\n                    largest_products[i] = largest_products[i+1]\n                largest_products[-1] = product2\n            elif product2 > largest_products[1]:\n                # if it isn't, check if it's the largest product seen so far\n                largest_products[1] = product2\n\n    # return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the largest products found\n    largest_products = []\n    \n    # Loop through the specified number of times\n    for i in range(N):\n        # Find the largest product of any two numbers in the first list\n        first_max = max(nums1)\n        # Find the largest product of any two numbers in the second list\n        second_max = max(nums2)\n        # Find the product of the two largest numbers in the first list\n        first_product = first_max * second_max\n        # Find the product of the two largest numbers in the second list\n        second_product = first_max * first_max\n        \n        # Add the largest product found to the list of largest products found\n        largest_products.append(max(first_product, second_product))\n        \n        # Remove the two largest numbers from the lists\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    largest_product = []\n\n    # iterate through lists and find the largest product\n    for i in range(N):\n        product = 1\n        # iterate through factors of nums1\n        for j in range(len(nums1)):\n            if i == j:\n                # skip if the factor is the same as the current factor\n                continue\n            product *= max(nums1[j], nums2[j])\n        # update max_product if the current product is larger\n        if product > max_product:\n            max_product = product\n            # add the current product to the list of largest products\n            largest_product = [product]\n        elif product == max_product:\n            # add the current product to the list of largest products if it's equal to the previous maximum\n            largest_product.append(product)\n\n    # return the list of largest products\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Ensure that both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Sort both lists in descending order of the largest product\n    sorted_nums1 = sorted(nums1, reverse=True)\n    sorted_nums2 = sorted(nums2, reverse=True)\n\n    # Initialize the maximum product and the index of the maximum product in the sorted lists\n    max_product = sorted_nums1[0] * sorted_nums2[0]\n    index_max_product = 0\n\n    # Iterate over the remaining indices of the sorted lists\n    for i in range(1, len(sorted_nums1)):\n        # Calculate the product of the current factor in the first list with all remaining factors in the second list\n        product1 = sorted_nums1[i] * sorted_nums2[0]\n\n        # Calculate the product of the current factor in the second list with all remaining factors in the first list\n        product2 = sorted_nums2[i] * sorted_nums1[0]\n\n        # Calculate the product of the two products\n        product = product1 * product2\n\n        # If the product is greater than the maximum product, update the maximum product and its index\n        if product > max_product:\n            max_product = product\n            index_max_product = i\n\n    # Return the maximum product and its index\n    return max_product, index_max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return None\n    products = []\n    for i in range(N):\n        product = 1\n        for j in range(i, N):\n            product *= max(nums1[j], nums2[j])\n        products.append(product)\n    return max(products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables to store largest products\n    max_product1 = max_product2 = 0\n    \n    # iterate through each combination of two numbers\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # find the product of the two numbers\n            product = nums1[i] * nums2[j]\n            \n            # update the maximum product\n            if product > max_product1:\n                max_product2 = max_product1\n                max_product1 = product\n            elif product > max_product2:\n                max_product2 = product\n                \n    # return the specified number of largest products\n    return max_product1, max_product2\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = 0\n    for i in range(N):\n        current_product = nums1[i] * nums2[i]\n        if current_product > largest_product:\n            largest_product = current_product\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables\n    largest_product = 0\n    largest_product_nums1 = 0\n    largest_product_nums2 = 0\n    \n    # Loop through each number of products to find\n    for i in range(1, N+1):\n        # Calculate the product of the first N numbers in nums1 and the first N numbers in nums2\n        product = 1\n        for j in range(N):\n            product *= max(nums1[j], nums2[j])\n        \n        # If this is the largest product found so far, update variables\n        if product > largest_product:\n            largest_product = product\n            largest_product_nums1 = nums1[:N]\n            largest_product_nums2 = nums2[:N]\n    \n    return largest_product_nums1, largest_product_nums2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n\n    # Convert string to list of characters\n    lst = list(str1)\n\n    # Convert list to tuple\n    tup = tuple(lst)\n\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty list to store the tuple of characters\n    char_list = []\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the list\n        char_list.append(char)\n    # Convert the list to a tuple\n    char_tuple = tuple(char_list)\n    # Return the tuple\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n % 2 == 0:\n        n = n // 2\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            count += 1\n            n |= (1 << i)\n            if count == 1:\n                return n\n            else:\n                return set_left_most_unset_bit(n)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Set all bits to 1\n    n = n | (n - 1)\n\n    # Find the first unset bit\n    unset_bit_position = 0\n    while (n & (1 << unset_bit_position)) == 0:\n        unset_bit_position += 1\n\n    # Set the unset bit to 0\n    n &= ~(1 << unset_bit_position)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while (n & 1) == 0: # check if the least significant bit is 0\n        n >>= 1 # shift the binary representation to the right by 1 bit\n    n |= 1 # set the least significant bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the leftmost unset bit in a binary number.\n    \n    Args:\n    n (int): A binary number.\n    \n    Returns:\n    int: The modified binary number with the leftmost unset bit set to 1.\n    \"\"\"\n    # Use the binary representation of n to get the length of n\n    bit_length = len(bin(n)[2:])\n    \n    # Create a binary number with all bits set to 0 except for the leftmost unset bit\n    mask = (1 << bit_length) - 1\n    left_most_unset_bit_mask = (1 << bit_length - 1)\n    modified_n = (n & ~mask) | left_most_unset_bit_mask\n    \n    return modified_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while not n & 1:  # Check if the number has only one bit set\n        n >>= 1  # Shift the number to the right by one bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in an integer.\n    '''\n    mask = 1\n    while n & mask == 0:\n        mask <<= 1\n    \n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost unset bit to 0\n    unset_bit = 0\n    \n    # loop through all bits from the rightmost to the leftmost\n    for i in range(31, -1, -1):\n        # check if the i-th bit is set\n        if (n & (1 << i))!= 0:\n            # if it is, then unset the leftmost unset bit and break out of the loop\n            unset_bit = i\n            break\n    \n    # shift the bits to the left to unset the unset_bit bit\n    n = n << unset_bit\n    \n    # return the shifted value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the result variable\n    result = 0\n    \n    # loop through the bits in reverse order\n    for bit in bin(n)[::-1]:\n        # check if the current bit is '0'\n        if bit == '0':\n            # set the current bit to 1 and exit the loop\n            result |= 1 << (len(bin(n)) - bin(n)[::-1].index(bit))\n            break\n    \n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in the binary representation of an integer n.\n    \"\"\"\n    # convert the integer to a binary string\n    binary_str = bin(n)[2:]  # strip the \"0b\" prefix\n    \n    # iterate over the bits of the binary string\n    for i in range(len(binary_str)):\n        # if the bit is set, unset it and break\n        if binary_str[i] == \"1\":\n            binary_str = binary_str[:i] + \"0\" + binary_str[i+1:]\n            break\n            \n    # convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs, and returns the volume of the cone.\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula to find the volume of a cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*r**2*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n\n    # calculate the volume using formula for volume of a sphere\n    vol = (1/3) * math.pi * r**2 * h\n\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate volume of cone using formula V = 1/3 * pi * r^2 * h\n    V = 1/3 * math.pi * (r**2) * h\n    \n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        while n > 1:\n            n = n // 2\n            return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Define a function to check if a number is power of 2 or not\n    def isPowerOf2(num):\n        return (num & (num - 1)) == 0\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n and isPowerOf2(highest_power_of_2):\n        highest_power_of_2 <<= 1\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1: \n        if n & (n-1) == 0: \n            return n\n        n = n >> 1\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n: An integer, the number for which we want to find the highest power of 2.\n\n    Returns:\n        An integer, the highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    # Initialize the maximum power of 2 found so far\n    max_power_of_2 = 0\n\n    # Loop through all powers of 2 up to the square root of n\n    for power_of_2 in range(1, int(n ** 0.5) + 1):\n\n        # If n is a power of 2, we have found the maximum power of 2\n        if n == 2 ** power_of_2:\n            max_power_of_2 = power_of_2\n            break\n\n        # If n is not a power of 2, we check if it's greater than the maximum power of 2 found so far\n        elif n > 2 ** power_of_2:\n            max_power_of_2 = power_of_2\n\n    # Return the maximum power of 2 found so far\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize variables\n    highest = 1\n    power = 1\n    \n    # iterate until n is less than or equal to the current power\n    while n > highest: \n        highest = highest * 2\n        power += 1\n    \n    # return the highest power of 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 as 0\n    highest_power = 0\n    \n    # Loop through all the numbers less than or equal to n\n    for i in range(1, n+1): \n        # Check if the current number is a power of 2\n        if i & (i-1) == 0: \n            # If it is, update the highest power of 2\n            highest_power = i\n    \n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n        \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    # start with a power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function calculates and returns then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = 2\n        current_lucas = 1\n        for i in range(2, n+1):\n            next_lucas = prev_lucas + current_lucas\n            prev_lucas = current_lucas\n            current_lucas = next_lucas\n        return current_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2*find_lucas(n-1) - find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(elem, string) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the result\n    result = {}\n\n    # Iterate over all lists and add their elements to the result dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = (l1[i], l2[j], l3[k])\n                value = (l1[i], l2[j], l3[k])\n                result[key] = value\n\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary\n    result = {}\n    # loop through all lists\n    for i in range(len(l1)):\n        # loop through all elements in each list\n        for j in range(len(l1[i])):\n            # add key-value pair to result dictionary\n            result[l1[i][j]] = l2[i][j]\n    # loop through all lists\n    for i in range(len(l3)):\n        # loop through all elements in each list\n        for j in range(len(l3[i])):\n            # add key-value pair to result dictionary\n            result[l3[i][j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        key = str(l1[i])\n        value = {str(l2[i]): str(l3[i])}\n        nested_dict[key] = value\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary\n    result = {}\n    \n    # iterate over the lists\n    for i in range(len(l1)):\n        # add first list's items as key to the result dictionary\n        result[l1[i]] = l2[i]\n        \n        # add second list's items as value to the first key in the result dictionary\n        result[l1[i]][l3[i]] = l3[i+1]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i, key in enumerate(l1):\n        for j, value in enumerate(l2[i]):\n            data[key] = data.get(key, {})\n            data[key][l3[i][j]] = value\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initializing an empty dictionary to store the data\n    data = {}\n\n    # Iterating over the first list and adding each element as a key in the data dictionary\n    for i, item in enumerate(l1):\n        data[item] = l2[i]\n\n    # Iterating over the second list and adding each element as a key in the data dictionary\n    for item in l3:\n        # Splitting the key and value of the dictionary\n        key, value = item.split('=')\n        data[key] = value\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define the nested dictionary\n    nested_dict = {\n        'list1': l1,\n        'list2': l2,\n        'list3': l3\n    }\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the final dictionary\n    final_dict = {}\n    \n    # loop through the lists and add each element as a key in the dictionary\n    for i in range(len(l1)):\n        final_dict[str(i+1)] = {'name': l1[i], 'age': l2[i], 'city': l3[i]}\n    \n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the data\n    data = {}\n    \n    # loop through each list\n    for i in range(len(l1)):\n        # loop through each element in the list\n        for j in range(len(l1[i])):\n            # create a new key with the values from the current element in the list\n            key = (l1[i][j], l2[i][j], l3[i][j])\n            \n            # if the key already exists in the data dictionary, add the value to the existing list\n            if key in data:\n                data[key].append(l1[i][j])\n            # otherwise, add the key and value to the data dictionary as a list\n            else:\n                data[key] = [l1[i][j]]\n    \n    # return the data dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize empty nested dictionary\n    nested_dict = {}\n    \n    # Loop through each list and add it's elements as keys in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        \n    # Loop through each list and add it's elements as keys in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l3[i]\n        \n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n\n    f = [1] * (n+1)\n    f[1] = 1\n    for i in range(2, n+1):\n        f[i] = max(f[i//2] + f[i//3] + f[i//4] + f[i//5] + i, i)\n\n    return f[n]"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    elif n == 2 or n == 3 or n == 4 or n == 5:\n        return (n * (n-1)) // 2\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Initialize the first two terms of the series\n    f1, f2 = 1, 2\n    \n    # Iterate through the series until the desired number of terms is reached\n    for i in range(3, n+1):\n        # Calculate the next term of the series using the given equation\n        f3 = max(f1, f2) + f1\n        \n        # Update the values of f1 and f2 for the next iteration\n        f1 = f2\n        f2 = f3\n        \n    # Return the maximum value of f1\n    return f1"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    This function calculates the maximum sum using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    # base case\n    if n == 2:\n        return 3\n\n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"Maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    # Recursive formula to calculate the sum of the first n numbers\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n\n    # Calculate the sum of the first n numbers\n    sum_of_n = f(n)\n    return sum_of_n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return 11\n    elif n == 3:\n        return 33\n    elif n == 4:\n        return 80\n    elif n == 5:\n        return 196\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    if n == 2:\n        return 10\n    \n    if n == 3:\n        return 30\n    \n    if n == 4:\n        return 105\n    \n    if n == 5:\n        return 210\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return input_list[max_length - 1]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = item\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Find the length of the first element of the list\n    length_of_first_element = len(input_list[0])\n    # Initialize a variable to hold the index of the maximum length element\n    index_of_max_length = 0\n\n    # Iterate through the list and update the index_of_max_length if a longer list is found\n    for i in range(1, len(input_list)):\n        length_of_current_element = len(input_list[i])\n        if length_of_current_element > length_of_first_element:\n            length_of_first_element = length_of_current_element\n            index_of_max_length = i\n\n    # Create a new list with the maximum length element(s)\n    output_list = [input_list[index_of_max_length]]\n\n    # Iterate through the remaining elements of the list and add them to the output list\n    for i in range(index_of_max_length + 1, len(input_list)):\n        output_list.append(input_list[i])\n\n    # Return the output list\n    return output_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_length = 0\n\n    # Iterate over the input list and update the maximum length if needed\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n\n    # Return the list with maximum length\n    return input_list[input_list.index(input_list[max_length])]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the elements of the tuple\n    unique_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    # Loop through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # Loop through the string again and find the first non-repeated character\n    for char in str1:\n        # If the character is not in the dictionary, it's the first non-repeated character\n        if char not in char_count:\n            return char\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to keep track of the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate through the dictionary, keeping track of the first non-repeating character\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeated character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    count = {}\n    for char in str1:\n        if char in count:\n            del count[char]\n        else:\n            count[char] = True\n    for char in count:\n        return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    str1_set = set(str1)\n    # Convert the set back to a list and find the first non-repeating character\n    first_non_repeating_char = ''.join(list(str1_set))\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of characters in the string\n    count_dict = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in count_dict:\n            count_dict[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[char] = 1\n    \n    # Initialize the first non-repeating character\n    first_non_repeating_char = ''\n    \n    # Iterate through the dictionary to find the first non-repeating character\n    for char in str1:\n        if count_dict[char] == 1:\n            first_non_repeating_char = char\n    \n    # Return the first non-repeating character\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # iterate through each character in the dictionary and find the first non-repeating character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # if no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeating character in a given string.\n\n    Args:\n    str1 (str): A string.\n\n    Returns:\n    int: The index of the first non-repeating character, or -1 if there is no such character.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string.\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Find the first non-repeating character by iterating over the string and checking the frequency of each character.\n    for i in range(len(str1)):\n        if freq[str1[i]] == 1:\n            return i\n\n    # If no such character was found, return -1.\n    return -1"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if string matches regex pattern\n    if re.match(regex, string):\n        # Get the first character and the last character of the string\n        char1 = string[0]\n        char2 = string[-1]\n        # Compare the first and last characters of the string\n        if char1 == char2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers)%2 == 0:\n        mid = len(numbers)//2\n        return (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Determine the length of the sorted list\n    length = len(sorted_numbers)\n    \n    # Determine the middle index\n    mid_index = length // 2\n    \n    # Determine if the length of the sorted list is odd or even\n    if length % 2 == 0:\n        # If the length is even, return the average of the two middle numbers\n        median = (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2\n    else:\n        # If the length is odd, return the middle number\n        median = sorted_numbers[mid_index]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median based on the number of elements\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list to hold the numbers\n    numbers = [a, b, c]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Determine the length of the list\n    length = len(numbers)\n\n    # Find the median\n    if length % 2 == 0:\n        # Find the average of the two middle numbers\n        average = (numbers[length//2-1] + numbers[length//2]) / 2\n        # Return the average\n        return average\n    else:\n        # Return the middle number\n        return numbers[length//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2 - 1]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the middle index\n    middle_index = len(sorted_nums) // 2\n\n    # Check if the length of the sorted list is odd or even\n    if len(sorted_nums) % 2 == 0:\n        # If the length is even, return the average of the middle two numbers\n        return (sorted_nums[middle_index - 1] + sorted_nums[middle_index]) / 2\n    else:\n        # If the length is odd, return the middle number\n        return sorted_nums[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the number of elements in the list\n    n = len(numbers)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (numbers[n//2] + numbers[n//2-1])/2\n    else:\n        median = numbers[n//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    middle_index = len(sorted_list) // 2\n\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        return sorted_list[middle_index]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to string and then split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits in the list\n        total_digits = sum(digits)\n        # print the sum of digits for each number\n        print(f\"Sum of digits for {num}: {total_digits}\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize an empty list to store the sum of digits\n    digit_sum = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into its digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Compute the sum of digits and append it to the digit_sum list\n        digit_sum.append(sum(digits))\n    \n    # Return the digit_sum list\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tup += (1,)\n        else:\n            result_tup += (0,)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Loop through the tuples and perform the bitwise xor operation on each element\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0, 0)\n    # loop through the tuples and perform bitwise xor\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n\n    # Perform the bitwise xor operation on the corresponding elements in the input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length!\")\n        return\n    \n    # initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n    \n    # perform the bitwise xor operation on each pair of elements in the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # zip together the tuples to get pairs of elements\n    zipped_tup = zip(test_tup1, test_tup2)\n\n    # loop through the pairs and perform the bitwise xor operation\n    result_tup = [(a ^ b) for (a, b) in zipped_tup]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # create a set of tuples from the list\n    unique_tuples = set(tuple(x) for x in test_list)\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of unique tuples in the given list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_set = set()\n    for item in test_list:\n        unique_set.add(item)\n    # Return the number of unique tuples\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        for j in test_list:\n            if i!=j:\n                freq_dict[(i,j)] = freq_dict.get((i,j),0)+1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate over the list and add unique tuples to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Add each tuple to the set\n        unique_tuples.add(tup)\n\n    # Return the length of the set, which represents the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n\n    # Loop through the first tuple and add the corresponding element of the second tuple to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup = []\n        for j in range(len(test_tup1[i])):\n            tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Find the minimum number of tuples to be added\n    min_tuples = min(len(test_tup1), len(test_tup2))\n\n    # Initialize a new empty tuple to store the sum\n    result_tup = ()\n\n    # Loop through the minimum number of tuples\n    for i in range(min_tuples):\n        # Get the i-th element from both tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n\n        # If both elements are tuples, recursively call the function on them\n        if isinstance(tup1_elem, tuple) and isinstance(tup2_elem, tuple):\n            result_tup += add_nested_tuples(tup1_elem, tup2_elem)\n        else:\n            # If one of the elements is a tuple, append the other element to the result tuple\n            if isinstance(tup1_elem, tuple):\n                result_tup += (tup1_elem[1],)\n            elif isinstance(tup2_elem, tuple):\n                result_tup += (tup2_elem[1],)\n            # If both elements are not tuples, add them together\n            else:\n                result_tup += (tup1_elem[1] + tup2_elem[1],)\n\n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not (isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)):\n        return \"Both input tuples must be tuples\"\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have same length\"\n\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result = add_nested_tuples(test_tup1[i], test_tup2[i])\n            if isinstance(result, tuple):\n                return tuple([t1 + t2 for t1, t2 in zip(test_tup1[i], test_tup2[i])])\n        else:\n            result = test_tup1[i] + test_tup2[i]\n            if isinstance(result, tuple):\n                return tuple([result])\n\n    return tuple([result])"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples are not of equal length.\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            elif type(test_tup1[i]) == tuple and type(test_tup2[i])!= tuple:\n                result.append(add_nested_tuples(test_tup1[i], (test_tup2[i],)))\n            elif type(test_tup1[i])!= tuple and type(test_tup2[i]) == tuple:\n                result.append(add_nested_tuples((test_tup1[i],), test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    \n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n            \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with elements of the first tuple\n    result_tup = tuple(test_tup1)\n\n    # loop through the second tuple and add its elements to the result tuple\n    for i in range(len(test_tup2)):\n        result_tup = (result_tup[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty tuple\n    result_tup = ()\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current index is present in the second tuple\n        if i < len(test_tup2):\n            # if it is, add the corresponding element from both tuples and append it to the result tuple\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Get the length of the first tuple\n    len1 = len(test_tup1)\n\n    # Get the length of the second tuple\n    len2 = len(test_tup2)\n\n    # Check if the first tuple has the same length as the second tuple\n    if len1!= len2:\n        return \"Both tuples must have the same length\"\n\n    # Initialize an empty result list\n    result = []\n\n    # Iterate through the tuples using a for loop\n    for i in range(len1):\n        # Append the sum of the corresponding elements of the tuples to the result list\n        result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in {tuple1}\") \n    else: \n        print(f\"{tuplex} does not exist in {tuple1}\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two arguments, tuplex and tuple1. \n    The function checks if there exists an element in tuple1 that is equal to tuplex.\n    If an element exists in tuple1, the function returns True.\n    Otherwise, it returns False.\n    '''\n    for item in tuple1: \n        if item == tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for element in tuple1: \n        if element in tuplex: \n            return True\n    \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists within the tuple.\")\n    else:\n        print(f\"{tuplex} does not exist within the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for x in tuplex:\n        if x in tuple1:\n            print(\"The element\", x, \"exists in the tuple\")\n            return True\n        else:\n            pass\n    print(\"The element\", x, \"does not exist in the tuple\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"is present in tuple1\")\n    else:\n        print(tuplex, \"is not present in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the number is even.\")\n    else:\n        print(\"The parity of the number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if its parity is odd, else False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if x is even or not\n    if x % 2 == 0: \n        return \"The number is even.\" \n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    result = 0\n    for digit in digits:\n        result *= 10\n        result += int(digit)\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    num = list(str(n))\n    max_num = int(''.join(sorted(num, reverse=True)))\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Reverse the string\n    num_str_rev = num_str[::-1]\n    # Find the first character of the reversed string that has a 1 in its position\n    first_nonzero_char = None\n    for i, char in enumerate(num_str_rev):\n        if char == '1':\n            first_nonzero_char = i\n            break\n    # If no nonzero character was found, reverse the reversed string\n    if first_nonzero_char is None:\n        return int(num_str_rev[::-1])\n    # Reverse the characters before the first nonzero character and the characters after the first nonzero character\n    new_str = ''.join(reversed(num_str_rev[:first_nonzero_char] + num_str_rev[first_nonzero_char+1:]))\n    # Convert the reversed string back to an integer\n    return int(new_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    result = 0\n    power = 1\n    for digit in digits:\n        result += digit * power\n        power *= 10\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Convert the string to a list of digits\n    num_list = list(num_str)\n\n    # Find the largest digit\n    largest_digit = max(num_list)\n\n    # Find the index of the largest digit\n    largest_index = num_list.index(largest_digit)\n\n    # Reverse the digits to create a larger number\n    reverse_num_list = num_list[largest_index:] + num_list[:largest_index]\n    reverse_num_str = ''.join(reverse_num_list)\n\n    # Convert the reversed string to an integer\n    reverse_num = int(reverse_num_str)\n\n    # Add one to the original number to get the next bigger number\n    next_bigger_num = reverse_num + 1\n\n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_digits = []\n    i = 0\n    while i < len(digits):\n        if digits[i] < digits[i+1]:\n            new_digits.append(digits[i])\n            new_digits.append(digits[i+1])\n            del digits[i]\n            del digits[i]\n        else:\n            i += 1\n    if digits[0] == '0':\n        new_digits = ['0'] + new_digits\n    else:\n        new_digits = [digits[0]] + new_digits + ['0']\n    new_n = int(''.join(new_digits))\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Define the digits of the number in a list\n    digits = [int(digit) for digit in str(n)]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Count the number of non-zero digits\n    non_zero_count = sum(1 for digit in digits if digit!= 0)\n\n    # Create the new number by rearranging the digits\n    new_number = 0\n    for digit in digits:\n        new_number = new_number * 10 + digit\n        if digit == 0:\n            new_number += 1\n\n    # If there are more zero digits than non-zero digits, add one to the new number\n    if non_zero_count > 0 and digits.count(0) > non_zero_count:\n        new_number += 1\n\n    # Return the new number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize a variable to store the rearranged digits of the given number\n    rearranged_digits = []\n\n    # Extract the digits of the given number as a list\n    digits = [int(d) for d in str(n)]\n\n    # Sort the list in descending order\n    digits.sort(reverse=True)\n\n    # Iterate over the digits of the given number and append them to the rearranged_digits list\n    for d in digits:\n        rearranged_digits.append(d)\n\n    # Convert the rearranged_digits list back to an integer\n    next_bigger = int(''.join(map(str, rearranged_digits)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize a list to store the digits of n\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the largest digit in the list\n    largest = max(digits)\n    \n    # Iterate through the digits of n and swap them with the largest digit\n    for i in range(len(digits)):\n        if digits[i] == largest:\n            digits[i], digits[largest-1] = digits[largest-1], digits[i]\n            break\n    \n    # Convert the list of digits back into a number and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    pairs = []\n    min_heap = []\n\n    for num in nums1:\n        heapq.heappush(heap, -num)\n\n    for num in nums2:\n        if heap[0] - num < 0:\n            break\n        else:\n            pair = (-heap[0] - num, -heap[0], num)\n            pairs.append(pair)\n            heapq.heappushpop(min_heap, -heapq.heappop(heap))\n\n    pairs = sorted(pairs, key=lambda x: (-x[0], -x[1]))\n\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap with size k\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # Loop through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current elements and store it in the heap\n            current_sum = nums1[i] + nums2[j]\n            heapq.heappush(min_heap, current_sum)\n\n            # If the heap size becomes greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Return the k smallest elements from the heap\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a list of tuples containing (difference, (num1, num2))\n    pairs = [(abs(x - y), (x, y)) for x in nums1 for y in nums2]\n\n    # Sort the list of pairs by the absolute difference\n    pairs.sort()\n\n    # Initialize a min-heap of size k\n    min_heap = []\n\n    # Iterate through the sorted pairs\n    for difference, pair in pairs:\n        # If the size of the min-heap is less than k, add the pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, pair)\n        # If the size of the min-heap is greater than or equal to k, compare the pair with the smallest element in the heap\n        else:\n            current_min = heapq.heappop(min_heap)\n            if difference < current_min[0]:\n                heapq.heappush(min_heap, pair)\n\n    # Extract the k smallest pairs and return them as a list of tuples\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]+nums2[j], (i,j)))\n            else:\n                if nums1[i]+nums2[j] > heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i]+nums2[j], (i,j)))\n    \n    res = []\n    while heap:\n        res.append(heap[0][1])\n        heapq.heappop(heap)\n    \n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a list of tuples containing the first and second element from each array\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    \n    # Sort the pairs based on the sum of the elements in each tuple\n    pairs.sort(key=lambda x: sum(x))\n    \n    # Return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k to store the pairs with the smallest elements\n    min_heap = []\n    \n    # iterate through the first array and for each element, create a tuple containing the element and its index in the second array\n    for i in range(len(nums1)):\n        pair = (nums1[i], i)\n        heapq.heappush(min_heap, pair)\n        \n        # if the size of the heap exceeds k, remove the largest element and replace it with the next smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # iterate through the second array and for each element, create a tuple containing the element and its index in the first array\n    for j in range(len(nums2)):\n        pair = (nums2[j], j)\n        heapq.heappush(min_heap, pair)\n        \n        # if the size of the heap exceeds k, remove the largest element and replace it with the next smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # create an empty list to store the k smallest pairs\n    result = []\n    \n    # iterate through the min heap and add the smallest pairs to the result list\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        result.append((pair[0], nums2[pair[1]]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n\n    i = 0\n    j = 0\n    while len(pairs) < k:\n        if heapq.heappop(nums1) < heapq.heappop(nums2):\n            pairs.append((heapq.heappop(nums1), heapq.heappop(nums2)))\n            i += 1\n        else:\n            pairs.append((heapq.heappop(nums2), heapq.heappop(nums1)))\n            j += 1\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store pairs\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # Create a tuple of (sum, (num1, num2))\n            pair = (num1 + num2, (num1, num2))\n            # Add the tuple to the min heap\n            heapq.heappush(pairs, pair)\n            # If the heap size exceeds k, remove the smallest pair\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    # Sort the pairs based on the sum of the elements in ascending order\n    pairs.sort()\n    return [pair[1] for pair in pairs]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    \n    heap1 = []\n    heap2 = []\n    \n    for num in nums1:\n        heapq.heappush(heap1, -num)\n    \n    for num in nums2:\n        if heap1 and heap1[0] <= -num:\n            heappushpair(heap1, -num, -heapq.heappop(heap2))\n        else:\n            heappush(heap2, num)\n            \n    return [-heapq.heappop(heap2) for i in range(k)]\n\ndef heappush(heap, item):\n    heapq.heappush(heap, (-item, heapq.heappushpop(heap, (-item, item))))\n\ndef heappushpair(heap1, item1, item2):\n    heapq.heappush(heap1, (-item1, item2))\n    "
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    result = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if nums1[i] + nums2[j] > heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort()\n\n    # Initialize the minimum product and the minimum product index\n    min_product = list1[0][0] * list1[0][1]\n    min_product_index = 0\n\n    # Loop through the list of tuples and calculate the product of each pair\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_product_index = i, j\n\n    # Return the minimum product and the indices of the minimum product pair\n    return min_product, min_product_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair of tuples\n            product = list1[i][0] * list1[j][1]\n\n            # If the current product is less than the minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    tuple1 = 0\n    tuple2 = 0\n\n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            # Calculate the product of the tuples and compare it with the current minimum product\n            product = list1[i][j] * list1[i][j+1]\n            if product < min_product:\n                min_product = product\n                tuple1 = i\n                tuple2 = j\n\n    # Return the minimum product and the indices of the two tuples that produced it\n    return min_product, tuple1, tuple2"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of pairs of tuples.\n\n    Args:\n        list1 (list of tuples): A list of tuples.\n\n    Returns:\n        float: The minimum product of pairs of tuples.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize two variables to store the minimum product of pairs of tuples and the first element of the minimum tuple\n    min_product = list1[0][1]\n    first_elem = list1[0][0]\n\n    # Iterate through the list of tuples starting from the second element of the first tuple and check if the first element\n    # of the current tuple is equal to the second element of the previous tuple, if it is, multiply the product of the previous\n    # minimum product by the second element of the current tuple and update the minimum product and first element accordingly\n    for i in range(1, len(list1)):\n        if list1[i][0] == list1[i-1][0]:\n            min_product = min(min_product * list1[i][1], list1[i][1])\n            first_elem = list1[i][0]\n        else:\n            break\n\n    # Return the minimum product of pairs of tuples\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    n = len(list1)\n    min_product = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                result = [(list1[i][0], list1[j][1])]\n            elif product == min_product:\n                result.append((list1[i][0], list1[j][1]))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_pair = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0]*list1[j][1]\n            if pair_product < min_product:\n                min_product = pair_product\n                min_pair = (list1[i], list1[j])\n    return min_pair"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to a large number\n    min_val
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None # initialize the minimum value as None\n    for i in listval:\n        if min_val is None or i < min_val: # check if the current value is smaller than the current minimum value\n            min_val = i # update the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the minimum value in the list\n    min_val = float('inf')\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    if len(listval) == 0:\n        return \"Error: The list is empty.\"\n\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n\n    return minval"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove leading and trailing underscores\n    word = word.strip('_')\n    # split the word into individual words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # join the camel case words back into a string\n    camel_case_word = ''.join(camel_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('(.)([A-Z][a-z]+)')\n    return pattern.sub(r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first letter of each word to uppercase\n    words = [word[0].upper() + word[1:].lower() for word in words]\n\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(.?)(?=[A-Z])'\n    return re.sub(pattern, lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all words to lowercase\n    word = word.lower()\n    # split the string into words\n    words = word.split('_')\n    # capitalize the first letter of each word except the first one\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # join the words back into a single string with capitalization as specified\n    camel_word = ''.join(words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # remove underscores and capitalize the first letter\n    word = re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)\n    # convert the string to camel case\n    camel_case = ''.join(word.title())\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list of integers.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if n == i+1:\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except IndexError:\n        print(\"Index out of range\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # Get the nth element of the list\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        # If the index is out of range, return None\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in a second sequence or not.\n\n    Parameters:\n    list1: A sequence of values.\n    list2: A second sequence of values.\n\n    Returns:\n    True if any value in list1 exists in list2, False otherwise.\n    '''\n    if list1 == [] and list2 == []:\n        return False\n\n    if list1 == [] or list2 == []:\n        return True\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # iterate through each element in the first list\n    for element in list1:\n        # check if the element exists in the second list\n        if element in list2:\n            # if the element exists, return True\n            return True\n    # if no element exists in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence is also in the second sequence,\n    otherwise it returns False.\n\n    Args:\n    list1 (list): A sequence of values.\n    list2 (list): Another sequence of values.\n\n    Returns:\n    bool: True if any value in the first sequence is also in the second sequence, otherwise False.\n    \"\"\"\n\n    # check if the two lists are of equal length\n    if len(list1)!= len(list2):\n        return False\n\n    # loop through each element in the first list and check if it exists in the second list\n    for item in list1:\n        if item in list2:\n            return True\n\n    # if no value in the first list is in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i, \"is overlapping in list1 and list2\")\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of values in list1\n    set1 = set(list1)\n    # create a set of values in list2\n    set2 = set(list2)\n    # check if any value in set1 exists in set2\n    for value in set1:\n        if value in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # loop through each element in list1\n    for element in list1:\n        # check if the element exists in list2\n        if element in list2:\n            # if it does, return True immediately\n            return True\n    # if no elements in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in both sequences.\")\n        else:\n            print(i, \"does not exist in both sequences.\")\n    return\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 6, 8, 10]\n    overlapping(list1, list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # create a dictionary to store the products of elements in the array\n    product_dict = {}\n    \n    # loop through the array and calculate the products of elements\n    for num in arr:\n        if num in product_dict:\n            product_dict[num] += 1\n        else:\n            product_dict[num] = 1\n    \n    # find the pair with the highest product\n    max_product = -1\n    max_pair = None\n    \n    for num in product_dict:\n        product = num * product_dict[num]\n        if product > max_product:\n            max_product = product\n            max_pair = (num, product_dict[num])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_product = float('inf')\n    min_pair = (float('inf'), float('inf'))\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product == max_product:\n                max_pair = (min(max_pair[0], arr[i]), max(max_pair[1], arr[j]))\n            \n            if product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n            elif product == min_product:\n                min_pair = (min(min_pair[0], arr[i]), max(min_pair[1], arr[j]))\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf') \n    max_pair = (0,0)\n\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0] * arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n    \n    for i in range(2, len(arr)):\n        temp1 = max1\n        temp2 = max2\n        max1 = max(max1 * arr[i], max2 * arr[i])\n        max2 = min(temp1 * arr[i], temp2 * arr[i])\n        \n        temp3 = min1\n        temp4 = min2\n        min1 = min(min1 * arr[i], min2 * arr[i])\n        min2 = max(temp3 * arr[i], temp4 * arr[i])\n    \n    if max1 > max2:\n        return (max1, arr[arr.index(max1)])\n    else:\n        return (max2, arr[arr.index(max2)])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    if len(arr) % 2 == 0:\n        return arr[len(arr)//2-1] * arr[len(arr)//2]\n    else:\n        return arr[len(arr)//2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i] * max2\n            \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, max2*min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize max_product and index1 and index2 with negative infinity\n    max_product = -float('inf')\n    index1 = -1\n    index2 = -1\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # find the product of the current element with the maximum product seen so far\n        product = arr[i] * arr[i]\n        \n        # update max_product and index1 and index2 if the current product is greater than max_product\n        if product > max_product:\n            max_product = product\n            index1 = i\n            index2 = i\n        elif product > 0 and arr[i] > 0:\n            # update index2 if the current element is greater than the maximum product seen so far and the\n            # current element is positive\n            index2 = i\n            \n        # update the product of the current element with the minimum product seen so far\n        min_product = arr[i] * arr[i]\n        \n        # update min_product if the current element is greater than the minimum product seen so far\n        if min_product < arr[i]:\n            min_product = arr[i]\n            \n        # update the product of the current element with the maximum product seen so far\n        arr[i] = max_product\n        \n        # update the product of the current element with the minimum product seen so far\n        arr[i] *= min_product\n        \n    # return the indices of the maximum product pair\n    return index1, index2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = [arr[i], arr[j]]\n            elif current_product == max_product:\n                max_pair.append(arr[i])\n                max_pair.append(arr[j])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first = []\n    for i in Input:\n        if i[0] not in first:\n            first.append(i[0])\n    return first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if tup[0] in common_elements:\n            continue\n        else:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_elements = []\n    for item in Input:\n        common_first_elements.append(item[0])\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in Input:\n        if len(common_element) == 0:\n            common_element.append(i[0])\n        elif common_element[0] == i[0]:\n            common_element.append(i[0])\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Initialize a dictionary to store the first element of each tuple\n    first_dict = {}\n    \n    # Iterate over the list of tuples\n    for tup in Input: \n        # Get the first element of the current tuple\n        first = tup[0]\n        \n        # Check if the first element is already in the dictionary\n        if first in first_dict: \n            # Increment the count of the first element in the dictionary\n            first_dict[first] += 1\n        else: \n            # Add the first element to the dictionary with a count of 1\n            first_dict[first] = 1\n    \n    # Initialize an empty list to store the common first elements\n    common_list = []\n    \n    # Iterate over the keys in the first dictionary (the first elements)\n    for key in first_dict: \n        # Check if the count of the current key in the dictionary is greater than 1\n        if first_dict[key] > 1: \n            # Add the current key to the common list\n            common_list.append(key)\n    \n    # Return the common list of first elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #creating a set of first elements from the input list of tuples\n    first_set = set([t[0] for t in Input])\n    #creating an empty list to store common first elements\n    common_first = []\n    #iterating over the first set\n    for f in first_set:\n        #checking if each tuple in the input list of tuples has the same first element as f\n        if all([t[0] == f for t in Input]):\n            #adding the first element to the common_first list if all tuples have the same first element\n            common_first.append(f)\n    #returning the common first elements\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for tuple in Input:\n        if tuple[0] not in common:\n            common.append(tuple[0])\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    # Create a dictionary to store the count of each element\n    counts = {}\n    \n    # Iterate over the input list and count the occurrences of each element\n    for tup in Input:\n        if tup[0] in counts:\n            counts[tup[0]] += 1\n        else:\n            counts[tup[0]] = 1\n    \n    # Create a list of tuples containing only the element and its count\n    result = [(elem, counts[elem]) for elem in counts]\n    \n    # Sort the list by descending count and return the first tuple\n    return sorted(result, key=lambda x: x[1], reverse=True)[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # loop through the list of tuples\n    for tup in Input: \n        # get the first element of the tuple\n        elem = tup[0]\n        # check if the element is already in the dictionary\n        if elem in count_dict: \n            # increment the count of the element in the dictionary\n            count_dict[elem] += 1\n        else: \n            # if the element is not in the dictionary, add it with a count of 1\n            count_dict[elem] = 1\n    # create an empty list to store the common first elements\n    common_elems = []\n    # loop through the dictionary and find the common first elements\n    for elem, count in count_dict.items(): \n        # if the count is greater than 1, the element is a common first element\n        if count > 1: \n            # add the element to the common_elems list\n            common_elems.append(elem)\n    # return the list of common first elements\n    return common_elems"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for i, tup in enumerate(Input):\n        if not common_first_element:\n            common_first_element = tup[0]\n            continue\n        if tup[0] == common_first_element:\n            continue\n        else:\n            break\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0]) \n    max_elem = lst[0] \n    for i in lst[1:]: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize the variable to store the maximum length\n    max_len = 0\n    # Initialize the variable to store the maximum element\n    max_elem = None\n    # Iterate over each element in the list\n    for i in lst:\n        # If the length of the current element is greater than the maximum length, update the variables\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize variables\n    max_length = 0\n    max_elem = None\n    \n    # loop through the list\n    for elem in lst:\n        # check if the length of the element is greater than the current maximum length\n        if len(elem) > max_length:\n            # if yes, update the maximum length and element\n            max_length = len(elem)\n            max_elem = elem\n    \n    # return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total_sum = total * len(list1)\n    print(f\"The total sum of the rounded numbers is: ${total_sum}\")"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # initialize a variable to store the total sum\n    total_sum = 0\n\n    # loop through the list\n    for num in list1:\n        # round the number and add it to the total sum\n        total_sum += round(num)\n\n    # multiply the total sum by the length of the list and print it\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Rounds every number in the list and returns the sum multiplied by the length of the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round all numbers in the list\n    list2 = [round(x) for x in list1]\n    \n    # Calculate the total sum\n    total_sum = sum(list2)\n    \n    # Print the result\n    print(total_sum * len(list2))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, n+1, 2)]\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing sum variable\n    sum_cubes = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the number\n        cube = i ** 3\n        # add the cube to the sum\n        sum_cubes += cube\n    \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes of even natural numbers\n    sum_of_cubes = 0\n    # Iterate over the first n even natural numbers\n    for i in range(n):\n        # Calculate the cube of the even natural number i\n        cube = i ** 3\n        # Add the cube to the sum_of_cubes variable\n        sum_of_cubes += cube\n    # Return the sum_of_cubes variable\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    for i in range(1, n+1, 2):\n        cube_sum = i*i*i + i*i*i + i*i*i + i*i*i\n        print(cube_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): A tuple of elements to concatenate.\n    delimiter (str): The delimiter to use between elements. Defaults to''.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tuple = []\n    for element in test_tup:\n        new_tuple.append(str(element) + delimiter)\n    return tuple(new_tuple)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = ''\n    for element in test_tup:\n        result += delimiter + str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    This function concatenates each element of a tuple by the given delimiter.\n    \n    Args:\n        test_tup: The tuple whose elements needs to be concatenated.\n        delimiter: The delimiter used to concatenate the elements.\n                     Default value is space.\n    \n    Returns:\n        A string containing the concatenated elements of the given tuple.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup: tuple - the tuple that needs to be concatenated.\n    delimiter: str - the delimiter that needs to be used to concatenate the elements of the tuple.\n\n    Returns:\n    str - the concatenated string of the elements of the tuple separated by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i])\n        if i < len(test_tup)-1:\n            concatenated_string += delimiter\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer as input and returns the average of the cubes of the first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate cube of i\n        cube = i ** 3\n        # add cube to sum\n        sum += cube\n        # increment count\n        count += 1\n\n    # calculate average of cubes\n    average = sum / count\n\n    # return average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1,n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of first\",n,\"natural numbers is\",average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes / n\n    print(f\"The average of cubes of first {n} natural numbers is: {average_of_cubes}\")"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**3) + find_Average_Of_Cube(n-1)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_cubes = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    avg_cube = sum_cubes / n\n\n    return avg_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes / n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initializing sum of cubes and sum of squares\n    sum_of_cubes = 0\n    sum_of_squares = 0\n\n    # Looping through first n natural numbers\n    for i in range(1, n+1):\n\n        # Calculating cube of current natural number\n        current_cube = i ** 3\n\n        # Adding cube of current natural number to sum of cubes\n        sum_of_cubes += current_cube\n\n        # Calculating square of current natural number\n        current_square = i ** 2\n\n        # Adding square of current natural number to sum of squares\n        sum_of_squares += current_square\n\n    # Calculating average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    # Returning the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[::-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for string in test_tuple:\n        rear_index_list.append(string[-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, val in enumerate(test_tuple):\n        if isinstance(val, str):\n            rear_indices.append(len(val)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(string[-1] for string in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear = string[-1]\n        rear_list.append(rear)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(i-1) # taking the index of the last element, which is the rear index\n    result = []\n    for index in reversed(range(len(test_tuple))):\n        result.append(test_tuple[index])\n    return result"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element as input and returns the count of sublists \n    containing the given element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n        nums (list): List of integers.\n\n    Returns:\n        list: List of odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace yyyy with ddmmyyyy\n    dt = re.sub(r'(\\d{4})', r'\\1\\2\\3', dt)\n    # Replace mm with mmdd\n    dt = re.sub(r'(\\d{2})', r'\\3\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    return day + '-' + month + '-' + year"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\"\n    match = re.search(regex, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(date_format, dt)\n    if match:\n        day = match.group(3)\n        month = match.group(2)\n        year = match.group(1)\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.search() to find the match object of the date format\n    match = re.search(pattern, dt)\n    # Check if match object is found\n    if match:\n        # Use datetime module to convert the date to the new format\n        from datetime import datetime\n        new_dt = datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')\n        # Return the new date in the required format\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Regex pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the date format in the input string\n    match = re.match(pattern, dt)\n    # Extract the date components\n    year, month, day = match.groups()\n    # Reverse the month and day components\n    new_date = day + '-' + month + '-' + year\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the hyphens with spaces in the date string\n    dt = re.sub('-','', dt)\n    # Split the date string into year, month, and day components\n    year, month, day = map(int, dt.split())\n    # Convert the day, month, and year components to dd-mm-yyyy format\n    return '{:02d}-{:02d}-{:4d}'.format(day, month, year)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Use a regular expression to extract the year, month and day components from the date string\n    year_match = re.search(r'(\\d{4})', dt)\n    month_match = re.search(r'(\\d{2})', dt)\n    day_match = re.search(r'(\\d{2})', dt)\n\n    if year_match and month_match and day_match:\n        year = year_match.group()\n        month = month_match.group()\n        day = day_match.group()\n\n        # Convert the year and month to their respective digits and concatenate them with dashes\n        yyyy_to_dd_mm_yyyy = int(year) // 100\n        mm_to_dd_mm_yyyy = int(month)\n        dd_mm_yyyy = str(day).zfill(2) + '-' + str(mm_to_dd_mm_yyyy).zfill(2) + '-' + str(yyyy_to_dd_mm_yyyy).zfill(2)\n\n        return dd_mm_yyyy\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Do insertion sort for gaps of 10\n    for gap in range(n//10):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    # Calculate the length of the array\n    n = len(my_list)\n\n    # Set the gap to the array length divided by 2\n    gap = n // 2\n\n    # Perform insertion sort on the array\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        # Decrease the gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Calculate the largest power of 2 smaller than n\n    largest_power_of_2 = 2\n    while largest_power_of_2 < n:\n        largest_power_of_2 *= 2\n        \n    # Sort the array by using the largest power of 2\n    for gap in range(largest_power_of_2//2, 0, -1):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    # Insertion sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    result = []\n    # Check the length of both tuples to make sure they have the same number of elements\n    if len(test_tup1) == len(test_tup2):\n        # Loop through both tuples simultaneously\n        for i in range(len(test_tup1)):\n            # Extract the elements from the two tuples\n            tup1_element = test_tup1[i]\n            tup2_element = test_tup2[i]\n            # Extract the elementwise and tuple from the two elements\n            and_tuple = (tup1_element & tup2_element,)\n            # Append the and tuple to the result list\n            result.append(and_tuple)\n        # Return the result list\n        return result\n    else:\n        # If the two tuples have different lengths, raise a ValueError\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_list = []\n    # iterate through the two tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n    # return the list of elementwise and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize empty list to store the result tuples\n    result_list = []\n    \n    # iterate through each element in each tuple and check if they are both True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            # if both are True, append a tuple containing the element and True to the result list\n            result_list.append((test_tup1[i], True))\n        else:\n            # if either is False, append a tuple containing the element and False to the result list\n            result_list.append((test_tup1[i], False))\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the elementwise\n    and tuples of the two tuples.\n    \"\"\"\n    # Extract the elementwise and tuples from the two tuples\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their elementwise and tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n        return result\n    else:\n        print(\"The two tuples have different lengths.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is real\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"The directrix of the parabola is imaginary.\")\n    else:\n        root = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is: {}\".format(root))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n    else:\n        directrix = (-b + discriminant**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the two vertical lines that pass through the point (a, b)\n    x1 = (-b + (-b**2 - 4*a*c) ** 0.5) / (2*a)\n    x2 = (-b - (-b**2 - 4*a*c) ** 0.5) / (2*a)\n    \n    # Find the two intersections of the parabola with the two vertical lines\n    y1 = a*x1**2 + b*x1 + c\n    y2 = a*x2**2 + b*x2 + c\n    \n    # Find the slope of the parabola through the two intersections\n    slope = (y2 - y1) / (x2 - x1)\n    \n    # Return the directrix as the point where the slope is positive\n    return x1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1, \"and\", x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is:\", x)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is negative, there is no real solution\n    if discriminant < 0:\n        return \"The parabola has no real solution.\"\n\n    # If the discriminant is positive, there is one real solution\n    elif discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is {:.2f}.\".format(root1) + \" and {:.2f}.\".format(root2)\n\n    # If the discriminant is zero, there are two real solutions\n    else:\n        root = -b/(2*a)\n        return \"The directrix of the parabola is {:.2f}.\".format(root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    directrix = (-b + determinant**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc_eq = b**2 - 4*a*c\n    if disc_eq < 0:\n        return \"The parabola has no real roots.\"\n    elif disc_eq == 0:\n        return \"The directrix is equal to: x = {:.2f}\".format(-b/2/a)\n    else:\n        x1 = (-b + disc_eq**0.5)/(2*a)\n        x2 = (-b - disc_eq**0.5)/(2*a)\n        return \"The directrix of the parabola is: x1 = {:.2f} and x2 = {:.2f}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant))/(2*a)\n        root2 = (-b - math.sqrt(discriminant))/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    else:\n        return \"No real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n        # Find the minimum value among the roots\n        min_root = min(root1, root2)\n\n        # Return the minimum value as the directrix\n        return min_root\n\n    elif discriminant == 0:\n        # There is only one root\n        root = -b / (2*a)\n        return root\n\n    else:\n        # There are no real roots\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element,\n    and False otherwise.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns true if the two lists have at least one common element, false otherwise.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for element in list2:\n        if element in list1:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from list1 to check if all elements are present in list2\n    set1 = set(list1)\n    # Iterate through list2 and check if any element is present in set1\n    for item in list2:\n        if item in set1:\n            return True\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in list1\n    set1 = set(list1)\n    # create a set of elements in list2\n    set2 = set(list2)\n    # check if any element in set1 is also in set2\n    for element in set1:\n        if element in set2:\n            return True\n    # if no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of all elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there is at least one common element\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for elem in list1:\n        if elem in list2 and elem not in common:\n            common.append(elem)\n    for elem in list2:\n        if elem in list1 and elem not in common:\n            common.append(elem)\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the lists are of equal length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Iterate over each element in the lists and compare them\n    for elem in list1:\n        if elem in list2 and elem not in result:\n            result.append(elem)\n    \n    # If we have found a common element, return True\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = set(list1).intersection(set(list2))\n    return bool(common_elements)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium given its base1, base2, and height.\n    \"\"\"\n\n    # Calculate the length of the trapezium using the formula\n    # L = (b1 + b2) / 2 * h\n    L = (base1 + base2) / 2 * height\n\n    # Sort the lengths of the two halves\n    L1 = sorted([base1, base2])\n    L2 = sorted([L - base1 - base2])\n\n    # Calculate the median of the two halves\n    median1 = L1[len(L1) // 2]\n    median2 = L2[len(L2) // 2]\n\n    # Return the median of the two halves\n    return (median1 + median2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the length of the base of the trapezium\n    total_length = base1 + base2\n    \n    # calculate the length of the side of the trapezium that is equal to the height\n    base_half_height = height / 2\n    side_length = base_half_height\n    \n    # calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height)\n    \n    # calculate the length of the longest side of the trapezium\n    longest_side = max(total_length, side_length)\n    \n    # calculate the length of the shortest side of the trapezium\n    shortest_side = min(total_length, side_length)\n    \n    # calculate the length of the third side of the trapezium\n    third_side = longest_side - shortest_side\n    \n    # calculate the perimeter of the trapezium\n    trapezium_perimeter = 2 * (shortest_side + third_side)\n    \n    # calculate the length of the median of the trapezium\n    median_length = 0.5 * (shortest_side + third_side)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    if area > height:\n        return 'Trapezium cannot be formed.'\n    else:\n        base_median = max(base1, base2)\n        half_height = height / 2\n        return 'The length of the trapezium base is:', base_median, 'and the length of the trapezium is:', 2 * half_height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the lengths of the two sides and the base\n    side1 = base1\n    side2 = base2\n    base = (side1 + side2) / 2\n    # Calculate the area of the trapezium\n    area = height * (base / 2)\n    # Calculate the lengths of the three sides\n    side3 = (area - base) / 2\n    side4 = (area + base) / 2\n    # Find the length of the longer side\n    longest_side = side1 if side1 > side2 else side2\n    # Calculate the length of the shorter side\n    shorter_side = longest_side - (longest_side - side1) - (longest_side - side2)\n    # Calculate the length of the middle side\n    middle_side = (shorter_side - longest_side) / 2\n    # Calculate the length of the trapezium\n    trapezium_length = longest_side + middle_side + shorter_side\n    # Return the median length of the trapezium\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the three sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n    side3 = 0.5 * height\n\n    # Calculate the sum of the lengths of the three sides\n    total_length = side1 + side2 + side3\n\n    # Calculate the median length\n    median_length = total_length / 3\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the area of the half-trapezium\n    area_half = 0.5 * (base1 + base2) * 0.5 * height\n\n    # Calculate the median area\n    median_area = area_half + area - area_half\n\n    # Calculate the area of the other half-trapezium\n    area_other_half = 0.5 * (base1 + base2) * 0.5 * (height - 0.5 * height)\n\n    # Calculate the median area\n    median_area_other_half = area_other_half + area - area_other_half\n\n    # Find the difference between the two medians\n    median_difference = abs(median_area - median_area_other_half)\n\n    # Calculate the median of the trapezium\n    median_trapezium = 0.5 * perimeter * (1 - (abs(median_area - median_area_other_half) / max(area_half, area_other_half)))\n\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n    \n    # Calculate the height of the trapezium\n    height_of_trapezium = height\n    \n    # Calculate the length of the base of the trapezium\n    base_of_trapezium = 0.5 * (base1 + base2)\n    \n    # Calculate the length of the top of the trapezium\n    top_of_trapezium = 0.5 * (height - base2)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom_of_trapezium = 0.5 * (height - base1)\n    \n    # Calculate the length of the central trapezium\n    central_trapezium = height_of_trapezium - top_of_trapezium - bottom_of_trapezium\n    \n    # Calculate the length of the trapezium to the left of the central trapezium\n    left_trapezium = 0.5 * (central_trapezium - height_of_trapezium)\n    \n    # Calculate the length of the trapezium to the right of the central trapezium\n    right_trapezium = 0.5 * (central_trapezium - height_of_trapezium)\n    \n    # Calculate the length of the central section of the trapezium\n    central_section = base_of_trapezium - height_of_trapezium\n    \n    # Calculate the area of the central section of the trapezium\n    area_of_central_section = central_section * height\n    \n    # Calculate the length of the central section of the trapezium\n    length_of_central_section = 0.5 * (central_section + left_trapezium + right_trapezium)\n    \n    # Calculate the area of the trapezium excluding the central section\n    area_of_trapezium = area - area_of_central_section\n    \n    # Calculate the area of the central section of the trapezium\n    area_of_central_section = area_of_central_section\n    \n    # Calculate the percentage of the area of the central section\n    percentage_of_central_section = (area_of_central_section / area) * 100\n    \n    # Calculate the area of the trapezium in square units\n    area_of_trapezium_in_square_units = area_of_trapezium * 100\n    \n    # Calculate the area of the central section of the trapezium in square units\n    area_of_central_section_in_square_units = area_of_central_section * 100\n    \n    # Calculate the area of the trapezium excluding the central section in square units\n    area_of_trapezium_excluding_central_section_in_square_units = area_of_trapezium - area_of_central_section\n    \n    # Calculate the length of the central section of the trapezium in square units\n    length_of_central_section_in_square_units = length_of_central_section * 100\n    \n    # Calculate the percentage of the area of the central section in square units\n    percentage_of_area_of_central_section_in_square_units = (area_of_central_section_in_square_units / area_of_trapezium_in_square_units) * 100\n    \n    # Calculate the area of the trapezium excluding the central section in square units in square units\n    area_of_trapezium_excluding_central_section_in_square_units_in_square_units = area_of_trapezium_excluding_central_section_in_square_units * 100\n    \n    # Calculate the length of the central section of the trapezium in square units in square units\n    length_of_central_section_in_square_units_in_square_units = length_of_central_section_in_square_units * 100\n    \n    # Calculate the area of the central section of the trapezium as a function of the length of the central section\n    area_of_central_section_as_a_function_of_length_of_central_section = (area_of_central"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    length1 = base1 * math.sqrt(2)\n    \n    # Calculate the length of the other base of the trapezium\n    length2 = 0.5 * (base1 + base2)\n    \n    # Calculate the length of the shorter base (base1 or base2)\n    length = min(length1, length2)\n    \n    # Calculate the area of the shorter base\n    area1 = area / length1\n    area2 = area / length2\n    \n    # Calculate the area of the other base\n    area_shorter = min(area1, area2)\n    \n    # Calculate the median length of the trapezium\n    median_length = (length1 * area1 + length2 * area2) / (area_shorter + area_shorter)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium using the semi-perimeter formula\n    area_semi = semi_perimeter ** 2\n    \n    # Calculate the length of the trapezium using the area formula\n    length = area / area_semi\n    \n    # Calculate the median length of the trapezium\n    median = length / 2\n    \n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(\"Yes\")\n            return\n    print(\"No\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{element} is greater than {number}.\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i, end=\" \")\n    return arr"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    if result:\n        print(f\"Found the pattern: {result.group()}\")\n    else:\n        print(\"Pattern not found in the text.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    if n >= 10:\n        return n % 10\n    else:\n        return n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all odd characters from a string.\n\n    :param str1: the string to remove odd characters from\n    :return: the string with odd characters removed\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(str1)\n\n    # Iterate over the characters in the list\n    for i in range(len(chars)):\n        # If the current character is odd, remove it\n        if chars[i] % 2!= 0:\n            chars.pop(i)\n            i -= 1\n\n    # Convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create a new string to store the even characters\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str1:\n        # If the character is even, add it to the new string\n        if char % 2 == 0:\n            new_str += char\n    # Return the new string with even characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += str(int(char))\n        elif char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the result\n    result = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is odd\n        if ord(char) % 2!= 0:\n            # if it is odd, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # convert string to list of characters\n    str_list = list(str1)\n    # loop through each character in list\n    for i in range(len(str_list)):\n        # check if character is odd\n        if int(str_list[i]) % 2!= 0:\n            # remove character from list\n            str_list.pop(i)\n    # convert list back to string and return\n    return ''.join(str_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for element in test_list:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    # count the number of bidirectional tuple pairs in the list\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    counts = {}\n    for item in test_list:\n        for pair in item:\n            pair = tuple(pair)  # convert to a tuple for comparison\n            if pair[0] < pair[1]:\n                pair = pair[::-1]  # reverse the order of the pair if necessary\n            if pair in counts:\n                counts[pair] += 1\n            else:\n                counts[pair] = 1\n    return counts"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][j]!= test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i, j) in test_list or (j, i) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through the list and compare each pair of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Check if the tuples are equal\n            if test_list[i] == test_list[j]:\n                # If they are equal, increment the count\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for i in range(len(L)):\n        single *= L[i]\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize variables\n    total = 0\n    \n    # Iterate over the list\n    for num in L:\n        # Check if the number is multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the total\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty string\n    s = ''\n    # loop through each integer in the list\n    for x in L:\n        # append the integer to the string\n        s += str(x)\n    # return the integer as an integer\n    return int(s)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if all(isinstance(x, int) for x in L):\n        return sum(x for x in L if isinstance(x, int))\n    else:\n        return None"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through the list of integers\n    for num in L:\n        # check if the current number is a multiple of 3\n        if num % 3 == 0:\n            # add the current number to the result variable\n            result += num\n    \n    # return the result variable\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regex pattern to match adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n\n    # Find all adverbs in the sentence using regex\n    adverbs = re.findall(pattern, text)\n\n    # Find the positions of the adverbs\n    position = []\n    for i, adv in enumerate(adverbs):\n        position.append(text.find(adv))\n\n    return adverbs, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expressions to match adverbs\n    p_adv = re.compile(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b\\w+(ed|ing|s|edly|ingly|ly|fully|lessly|less|fullys|fully)\\b'\n    # Find all occurrences of the pattern in the given text\n    matches = re.findall(adverb_pattern, text)\n    # Initialize a dictionary to store the positions of adverbs\n    adverb_positions = {}\n    # Iterate through the matches and update the adverb_positions dictionary\n    for i, match in enumerate(matches):\n        adverb_positions[match] = i + 1\n    # Sort the adverb_positions dictionary based on the values\n    sorted_adverb_positions = dict(sorted(adverb_positions.items(), key=lambda item: item[1]))\n    # Return the first adverb and its position in the sorted dictionary\n    return sorted_adverb_positions[list(sorted_adverb_positions.keys())[0]], sorted_adverb_positions[list(sorted_adverb_positions.keys())[0]]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence using regular expressions\n    pattern = r'\\b(?:(?:st|nd|rd|th)\\s+)?\\b(?:big|small|tall|short|long|far|near|close|across|up|down|over|under|behind|ahead|behind|between|before|after|inside|outside|within|through|behind|ahead|behind|between|before|after|inside|outside|within|through|around|above|below|inside|outside|on|under|over|under|over|above|below|inside|outside|into|through|around|around|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in a given sentence and returns their positions.\n    '''\n    adverbs = re.findall(r'\\b\\w*[a-z]*adverb\\w*[a-z]*\\b', text)\n    for i, adverb in enumerate(adverbs):\n        print(f'Adverb: {adverb}, Position: {i+1}')\n    return i+1"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define a regular expression to match adverbs\n    adverb_pattern = r'\\b(?:(?:a|an|the)d?|this|that|these|those)\\b'\n    \n    # Use the regular expression to search for adverbs in the text\n    matches = re.finditer(adverb_pattern, text)\n    \n    # Create a list to store the adverbs and their positions in the sentence\n    adverbs = []\n    \n    # Loop through each match and add the adverb and its position to the list\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((adverb, position))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern for matching adverbs\n    pattern = r'\\b(\\w+)(\\w*)\\b'\n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches to extract the first adverb and its position\n    for match in matches:\n        adverb = match[0]\n        position = match[1] if len(match) > 1 else None\n        # Print the adverb and its position if it was found\n        if adverb:\n            print(f\"'{adverb}' found at position {position}\")\n        else:\n            print(f\"No adverbs found in the sentence.\")\n    # Return None to indicate success\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to find adverbs\n    pattern = r'\\b(great|good|nice|please|well|awfully|amazing|terrific|incredible|fantastic|unbelievable|amazing|elegant|astonishing|powerful|incredible|excellent|extraordinary|fantastic|awesome|great|amazing|amazed|delightful|delighted|excited|exciting|fancy|fantastic|fascinating|fascinatingly|glorious|gloriously|gorgeous|gorgeously|great|hilarious|holy|humbled|humbly|jaw-dropping|jolly|jolly|jollygood|joyful|joyous|joyously|jubilant|jubilantly|jumbo|juicy|lucky|magical|magical|magnificent|magnificently|masterpiece|masterpieces|miraculous|miraculously|monumental|monumentally|mysterious|mysteriously|neat|nice|noteworthy|outstanding|phenomenal|phenomenally|radical|radically|revolutionary|revolutionarily|romantic|romantically|sad|scary|screaming|screamingly|sexy|shocking|shockingly|smart|smashing|spectacular|spectacularly|splendid|splendidly|stunning|stupendous|stupendously|sunshine|superb|superbly|superpowers|superstitious|superstitiously|sweet|sweethearted|tender|thrilling|thrillingly|tremendous|tremendously|unbelievable|unbelievably|unbeatable|unbeatablely|unmatched|utterly|wonderful|wondrous|wondrously|woebegone|wonderful|wonderful|world-class|world-famous|wow|wowing|wowingly|yummy|youthful|youthfully)\\b'\n\n    # Use re.findall to find all the adverbs in the given sentence\n    adverbs = re.findall(pattern, text)\n\n    # Sort the adverbs based on their position in the sentence\n    adverbs.sort(key=lambda x: text.find(x))\n\n    # Print the adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs, 1):\n        print(f'{i}. {adverb}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_adverb_position(text):\n    # Define the regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(?:before|after|during|at|since|until|beforehand|behind|during|for|against|in|at|in|under|underneath|against|around|through|across|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind|behind"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\b[A-Za-z]+\\b'\n    # Search the text for the pattern\n    adverbs = re.findall(pattern, text)\n    # If there are any adverbs, return a list of tuples containing their positions and adverbs\n    if len(adverbs) > 0:\n        return [(i, adv) for i, adv in enumerate(adverbs, 1)]\n    # Otherwise, return an empty list\n    else:\n        return []"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * math.pi\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 # calculate the surface area using the formula 6l\u00b2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l + l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list to make it easier to iterate over it\n    nums_list = list(nums)\n    count = 0\n    for num in nums_list:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')  # initialize an array to store positive numbers\n    neg_nums = array('i')  # initialize an array to store negative numbers\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    positive_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n            \n    if positive_count == 0:\n        print(\"No positive numbers found in the array.\")\n    else:\n        positive_ratio = positive_sum / positive_count\n        print(f\"The ration of positive numbers in the array is {positive_ratio:.2f}\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    return pos_count / (pos_count + neg_count + zero_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')\n    negative_arr = array('i')\n    zero_arr = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positive_arr.append(1)\n        elif num == 0:\n            zero_arr.append(1)\n        else:\n            negative_arr.append(1)\n            \n    positive_count = float(len(positive_arr)) / len(nums)\n    negative_count = float(len(negative_arr)) / len(nums)\n    zero_count = float(len(zero_arr)) / len(nums)\n    \n    return (positive_count, negative_count, zero_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = 0\n    total_numbers = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_numbers += 1\n            \n    return positive_numbers / total_numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    print(\"Positive numbers: \", positive_count/len(arr))\n    print(\"Negative numbers: \", negative_count/len(arr))\n    print(\"Zero numbers: \", zero_count/len(arr))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of size 1 to store the count of positive numbers\n    pos_count = array('i', [0])\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # increment the count of positive numbers\n            pos_count.itemset(0, pos_count.item(0) + 1)\n    # return the ratio of positive numbers to all the numbers in the array\n    return pos_count.item(0) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') #initialize largest as negative infinity\n    for num in list1: #iterate through the list of numbers\n        if num < 0 and num > largest: #check if the number is negative and larger than largest\n            largest = num #update largest to the new largest number\n    return largest #return the largest negative number in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers and returns the largest negative number.\n    \"\"\"\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    largest = -1   # initialize largest variable to -1\n    \n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num  # update largest if a negative number is found\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize variables to store the largest and second largest negative numbers \n    largest = -float('inf')\n    second_largest = -float('inf')\n    \n    # Iterate through the list and update the largest and second largest negative numbers \n    for num in list1: \n        if num < 0 and num > largest: \n            second_largest = largest \n            largest = num \n        elif num < 0 and num > second_largest: \n            second_largest = num\n    \n    # Return the largest negative number \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = float('-inf')  # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i < j:\n                test_list[i][j] = None"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(test_list[i][:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input. \n    It returns a new list with the trimmed tuples.\n\n    Example:\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K = 2\n\n    Output:\n    [(2, 3), (5, 6), (8, 9)]\n    '''\n\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # create a new list to store the trimmed tuples\n    trimmed_list = []\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # trim the tuple by k elements\n        trimmed_tup = tup[:K]\n        # append the trimmed tuple to the new list\n        trimmed_list.append(trimmed_tup)\n    # return the new list of trimmed tuples\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if len(tup) <= K:\n            result.append(tup)\n        else:\n            result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            trimmed_list.append(test_list[i][:K])\n        else:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1])[:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have same length\"\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    # iterate over the indices in the first tuple\n    for i in range(len(test_tup1)):\n        # calculate the product of the current element with the corresponding element in the second tuple\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples must have the same length')\n\n    # Initialize a new tuple with the same length as the input tuples\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Counter object to count the occurrence of each element in the list\n    counter = Counter(lst) \n    # Dictionary to store the counts of each element in the list\n    result = {} \n    # Iterate over the keys of the counter object \n    for key in counter: \n        # Calculate the count of the element in the list \n        count = counter[key] \n        # If the element is already present in the result dictionary, \n        # then increment its count by the current count \n        if key in result: \n            result[key] += count \n        # Otherwise, add the element to the result dictionary with its count as 1\n        else: \n            result[key] = count \n    # Replace the original tuple with the modified tuple containing the counts of each element in the list\n    tup = tuple(result.keys()) + tup\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = {}\n    for item in lst:\n        if item in count:\n            count_dict[item] = count[item]\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    for i in lst:\n        count_lst.append(count_dict[i])\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary of counts of each element in the list in the tuple.\n    '''\n    counts = Counter(tup)\n    count_dict = {}\n    for key, value in counts.items():\n        if key in lst:\n            count_dict[key] = value\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = {}\n    for element in tup:\n        result[element] = counter[element]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return {k: count_dict[k] for k in lst if k in count_dict}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a list to remove duplicates\n    lst = list(tup)\n    # create a dictionary to store the counts of each element in the list\n    count = Counter(lst)\n    # return the dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    return cnt[lst]"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - tup: A tuple containing the elements of the list you want to count.\n    - lst: A list containing the elements that you want to count in the tuple.\n    This function returns a dictionary that contains the count of each element in the tuple and the list in which it appeared.\n    '''\n\n    counter = Counter(tup)\n\n    count_dict = {}\n\n    for k, v in counter.items():\n        count_dict[k] = [i for i in lst if i == k]\n\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for num in nums:\n        # cube the element and append it to a new list\n        cubes.append(num**3)\n    # return the new list of cubes\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i * (i - 1) * (i - 2) * (i - 3) * (i - 4)\n    return s\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of Perrin numbers from 1 to\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 7, 12, 20, 31, 47, 69, 98, 145, 210, 293, 395, 517, 662, 832, 1030, 1258, 1519, 1817, 2154, 2535, 2963, 3442, 3976, 4569, 5226, 5951, 6750, 7630, 8600, 9673, 10854, 12150, 13577, 15142, 16854, 18723, 20758, 22971, 25372, 27973, 30787, 33830, 37110, 40636, 44429, 48501, 52867, 57545, 62551, 67904, 73623, 79721, 86219, 93140, 100507, 108344, 116677, 125534, 134944, 144938, 155549, 166812, 178763, 191440, 204882, 219132, 234239, 250255, 267235, 285240, 304334, 324584, 346064, 368842, 393001, 418626, 445810, 474641, 505224, 537665, 572071, 608551, 647218, 688188, 731578, 777507, 826096, 877468, 931749, 989067, 1049552, 1113338, 1180563, 1251361, 1325872, 1404239, 1486608, 1573128, 1663949, 1759225, 1859107, 1963751, 2073324, 2188003, 2308067, 2433707, 2565116, 2702501, 2846072, 2996048, 3152653, 3316114, 3486663, 3664544, 3850002, 4043297, 4244704, 4454504, 4673002, 4900504, 5137420, 5384074, 5640801, 5908039, 6186238, 6475849, 6777335, 7091260, 74181"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n\n    # Initialize sum variable\n    sum_perrin = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate sum of Perrin numbers\n        sum_perrin += i*i*i\n\n    # Return sum of Perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # create a list of perrin numbers\n    perrin = [1, 10, 20, 31, 45, 60, 77, 95]\n    # initialize sum variable\n    sum = 0\n    # loop through the list and add each number to the sum\n    for num in perrin:\n        sum += num\n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [5, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin = 0\n    for num in perrin_numbers:\n        sum_perrin += num\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin_numbers = 0\n    for num in perrin_numbers:\n        if num > n:\n            break\n        sum_perrin_numbers += num\n    return sum_perrin_numbers"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create an empty list to store extracted strings\n    extracted_strings = []\n    # Loop through the list of strings\n    for i in range(len(l)):\n        # Check if the length of the current string is less than the specified size\n        if len(l[i]) < l[i]:\n            # If yes, append the current string to the list of extracted strings\n            extracted_strings.append(l[i])\n    # Return the list of extracted strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    return [s[:l] for s in l if len(s) >= l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str) // l):\n        extracted_strings.append(''.join(str[i*l:(i+1)*l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of the specified size.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer representing the size of each string to extract.\n    It extracts the specified size of strings from the list and returns a new list containing them.\n    '''\n    # Create an empty list to hold the extracted strings\n    extracted_list = []\n    \n    # Iterate over the list of strings\n    for string in str_list:\n        # Check if the length of the current string is equal to the specified size\n        if len(string) == size:\n            # If it is, add it to the extracted list\n            extracted_list.append(string)\n            \n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a size as input and returns a new list with the specified size of strings.\n    \"\"\"\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and the size of the strings to be extracted as arguments.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), l):\n        extracted_strings.append(' '.join(str_list[i:i+l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n            if len(result) == len(l):\n                break\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # return the cleaned string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    # replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    # Remove all leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(' +','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Using regular expression to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a number.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through all numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1):\n\n        # Check if the number is even\n        if n % i == 0:\n\n            # If the number is even, add it to the sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of the even factors of the number.\n    '''\n\n    # Initializing sum variable to zero\n    even_sum = 0\n\n    # Using a loop to iterate through the even factors of the number\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        # If the number is divisible by the even factor, add it to the sum variable\n        if n % i == 0:\n            even_sum += i\n\n    # Returning the sum of even factors of the number\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Find all even factors of the given number.\n    evenFactors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0 and n//i % 2 == 0]\n    \n    # Find the sum of the even factors.\n    sumOfFactors = sum(evenFactors)\n    \n    # Return the sum of the even factors.\n    return sumOfFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # Function to check if a number is even or not\n    def isEven(num):\n        return num % 2 == 0\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Loop through each number from 2 to n-1 (inclusive)\n    for i in range(2, n+1):\n        # If the number is even, add it to the sum\n        if isEven(i):\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    # variable to store the sum of even factors\n    sum = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1): \n        # check if the current number is even\n        if i % 2 == 0: \n            # if it is even, add it to the sum\n            sum += i\n    \n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i!= 2:\n            count += 1\n            total += i\n    \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize the sum variable to 0 \n    sum = 0 \n    # loop through the numbers from 2 to the square root of n \n    for i in range(2, int(math.sqrt(n))+1):\n        # check if the number is evenly divisible by i \n        if n%i == 0 and i%2 == 0:\n            # add i to the sum variable \n            sum += i \n    # return the sum of even factors \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                sum += i\n            else:\n                sum += i + n//i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match_obj = re.search(pattern, text, re.IGNORECASE)\n    if match_obj:\n        print(f\"The word 'z' was found in the text: {match_obj.group()}\")\n    else:\n        print(\"The word 'z' was not found in the text.\")\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*[zZ]\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n    return pattern.search(text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]{2,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0 and monthnum2 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # check if the given month number is within the range of 1 to 12\n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Invalid month number. Please enter a month number between 1 and 12.\")\n        return\n    \n    # check if the given month number contains 31 days\n    if monthnum2 % 2 == 0:\n        print(monthnum2, \"contains 30 days.\")\n    else:\n        print(monthnum2, \"contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    # check if the given month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    # check if the given month number has 30 days in leap year\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    # check if the given month number has 31 days in non-leap year\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 > 12 or monthnum2 < 1:\n        return \"Invalid month number\"\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if monthnum2 in days_in_month:\n        return \"Valid month number with 31 days\"\n    else:\n        return \"Invalid month number with 31 days\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_stringlist.append(reversed_string)\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        new_list.append(reversed_string)\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize a variable to store the minimum length\n    min_len = float('inf')\n\n    # loop through the list and find the sublist with minimum length\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # return the sublist with minimum length\n    return min_len"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf') # initialize min_len to positive infinity\n    min_sublist = [] # initialize min_sublist to an empty list\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j] # create sublist from indices i to j (inclusive)\n            if len(sublist) < min_len: # check if sublist is smaller than min_len\n                min_len = len(sublist) # update min_len if sublist is smaller\n                min_sublist = sublist # update min_sublist if sublist is smaller\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize an empty list to store the minimum sublist\n\n    # loop through the list and check if the length of the sublist is less than the current minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and width of a rectangle as input and returns the area of the rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<!\\w)([A-Z])(?!\\w)')\n    return pattern.sub(r'\\1', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regular expressions\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase substrings using regex\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z][a-z]*[A-Z]'\n    # Use re.sub() to remove the matched substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # convert the string to lowercase to make the search case-insensitive\n    str1 = str1.lower()\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][A-Z]+[A-Z]\\b')\n    # find all the uppercase substrings in the string and replace them with empty strings\n    matches = pattern.findall(str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings.\n\n    :param string: The input string from which to remove uppercase substrings.\n    :type string: str\n    :return: The input string with all uppercase substrings removed.\n    :rtype: str\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n\n    # Find all uppercase substrings in the input string\n    matches = pattern.findall(string)\n\n    # Replace all uppercase substrings with spaces\n    for match in matches:\n        string = string.replace(match,'')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into individual words\n    words = str1.lower().split()\n    # Iterate over the words and check if any are uppercase\n    for i, word in enumerate(words):\n        # If the current word is uppercase, remove it from the list of words\n        if word.isupper():\n            del words[i]\n    # Join the words back together into a string and return it\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        result.append(first_element)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            sub_lst = Extract(i)\n            result.append(sub_lst[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    # Use list comprehension to create a new list with first element removed\n    new_lst = [item[1:] for sublist in lst for item in sublist]\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(Extract(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each character in the string\n    for char in str:\n        # check if the character is upper case\n        if char.isupper():\n            # increment the count variable\n            count += 1\n\n    # return the count of upper case characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n    # loop through all possible indices of the list\n    for i in range(len(list1)):\n        # initialize an empty list to store the current combination\n        current_combination = []\n        # loop through all possible indices from the current index\n        for j in range(i, len(list1)):\n            # add the current element to the current combination\n            current_combination.append(list1[j])\n        # add the current combination to the list of combinations\n        combinations.append(current_combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)  # Sort the list\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = list1[i:j]  # Create the combination\n            result.append(combination)  # Add the combination to the result list\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n    lst (list): The list of elements to find combinations of.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n    \"\"\"\n    # Initialize an empty list to store the combinations\n    comb = []\n\n    # Define a function to generate all possible combinations of the list\n    def generate_combinations(lst, start, comb):\n        \"\"\"\n        Generate all possible combinations of a given list.\n\n        Args:\n        lst (list): The list of elements to find combinations of.\n        start (int): The starting index of the current combination.\n        comb (list): A list to store the current combination.\n        \"\"\"\n        # If there are no more elements to add to the combination, add it to the list of combinations\n        if start == len(lst):\n            comb.append(lst)\n            return\n\n        # Generate all possible combinations of the list starting from the next index\n        generate_combinations(lst, start + 1, comb)\n\n        # Add the current element to the combination and generate all combinations from the next index\n        generate_combinations(lst, start + 1, comb)\n\n    # Call the function to generate all possible combinations of the list\n    generate_combinations(lst, 0, comb)\n\n    # Return the list of combinations\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Initialize an empty list to store the combinations\n    combinations = []\n    # Loop through all possible combinations of length n\n    for i in range(1, length + 1):\n        # Loop through all possible indices of length n\n        for j in range(length - i + 1):\n            # Append the current combination to the list of combinations\n            combinations.append(list1[j:j+i])\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    if not lst:\n        return []\n    result = []\n    for i in range(1, len(lst) + 1):\n        for subset in combinations_list(lst[1:]):\n            result.append([lst[0]] + subset)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n    \n    # loop through all possible starting points\n    for i in range(len(list1)+1):\n        # loop through all possible lengths of the combinations\n        for j in range(i, len(list1)+1):\n            # if the length of the combination is less than or equal to the length of the list, add it to the list of combinations\n            if j <= len(list1):\n                combinations.append(list1[i:j])\n    \n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    for i in range(1, list_length+1):\n        for j in range(list_length-i+1):\n            print(list1[j:j+i], end=' ')\n        print()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all combinations of a list, e.g., [1, 2, 3] -> [[1, 2, 3], [1, 2], [1, 3], [2, 3], [1], [2], [3]]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    from itertools import combinations\n    all_combinations = list(combinations(list1, r=len(list1)))\n    return all_combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray of the array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(max_ending_here, 0)\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for num in arr[1:]:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here *= arr[1]\n    min_ending_here *= arr[1]\n    for i in range(2, len(arr)):\n        max_ending_here = max(max_ending_here, 0, arr[i])\n        min_ending_here = min(min_ending_here, 0, arr[i])\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    negative_product = 1\n    \n    for num in arr:\n        current_product *= num\n        if num < 0:\n            negative_product *= -num\n        max_product = max(max_product, current_product)\n        current_product = max(negative_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # checking if all values in the dictionary are same\n    if all(dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    \n    first_value = list(dict.values())[0]\n    \n    for value in dict.values():\n        if value!= first_value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the first value of the dictionary\n    first_value = next(iter(dict.values()))\n    # Loop through each value of the dictionary and check if they are the same as the first value\n    for value in dict.values():\n        if value!= first_value:\n            # If any value is not the same, return False\n            return False\n    # If all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    if len(values) == 1:\n        return True\n    for i in range(len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[list(dict.keys())[0]]\n    for key in dict:\n        if dict[key]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    # Check if all values in the dictionary are equal\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        for key, value in dict.items():\n            if len(dict) == 1 or value!= dict[next(iter(dict))]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if the dictionary has only one element\n    if len(dict) == 1:\n        return True\n    \n    # get the first key in the dictionary\n    first_key = next(iter(dict))\n    \n    # loop through the rest of the keys in the dictionary\n    for key in dict:\n        # check if the value is different from the first value\n        if dict[key]!= dict[first_key]:\n            return False\n    \n    # if all values are the same, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n\n    Parameters:\n    dict1 (dict): A dictionary to be processed.\n\n    Returns:\n    dict: A new dictionary with empty items dropped.\n\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Use list comprehension to iterate over key-value pairs\n    key_value_pairs = [(k, v) for k, v in dict1.items() if v!= '']\n    \n    # Create a new dictionary with key-value pairs without empty items\n    new_dict = {}\n    for key, value in key_value_pairs:\n        new_dict[key] = value\n    \n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes in a dictionary and returns a new dictionary with all empty values removed.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Initialize the maximum product found so far\n    max_product = arr[0]\n    prev_max = arr[0]\n\n    # Initialize the current subsequence\n    curr_subseq = [arr[0]]\n\n    for i in range(1, n):\n        # If the current element is smaller than the previous element, add it to the current subsequence\n        if arr[i] < curr_subseq[0]:\n            curr_subseq.append(arr[i])\n        # If the current element is not smaller than the previous element, remove the previous element from the current subsequence\n        elif arr[i] > curr_subseq[-1]:\n            curr_subseq = curr_subseq[:-1]\n            curr_subseq.append(arr[i])\n\n        # Update the maximum product if the current subsequence is of greater length\n        curr_product = 1\n        for j in range(len(curr_subseq)):\n            curr_product *= curr_subseq[j]\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # Update the maximum product if the current subsequence is not the entire array\n        if len(curr_subseq) > 1 and len(curr_subseq) < n:\n            next_max = max(curr_subseq[-1], curr_subseq[-2])\n            if next_max > max_product:\n                max_product = next_max\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n    max_product_so_far = float('-inf')\n    max_product_ending_here = float('-inf')\n\n    for i in range(1, n):\n        dp[i] = max(arr[i] * dp[i - 1], arr[i] * max_product_ending_here)\n        max_product_ending_here = max(dp[i], max_product_ending_here)\n\n    return max_product_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    subsequence = []\n\n    for num in arr:\n        if num <= 0:\n            max_product = max(max_product, current_product)\n            current_product = 1\n            subsequence = []\n        else:\n            current_product = max(current_product * num, num)\n            subsequence.append(num)\n\n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables to store the maximum product and its subsequence\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    # Loop through the array to find the maximum product ending at each position\n    for i in range(1, n):\n        # Update max_product_ending_here with the current element and the maximum of the two\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n\n        # Update max_product_so_far with the maximum of the two products\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    def is_increasing(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] >= arr[i + 1]:\n                return False\n        return True\n\n    def max_product_increasing_subsequence(arr, start, end):\n        if start == end:\n            return 0\n        if is_increasing(arr[start:end + 1]):\n            return arr[start] * max_product_increasing_subsequence(arr, start + 1, end)\n        else:\n            return max_product_increasing_subsequence(arr, start + 1, end)\n\n    return max_product_increasing_subsequence(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n\n    for num in arr:\n        if num > max_ending_here:\n            max_ending_here = num\n        elif num < min_ending_here:\n            min_ending_here = num\n        else:\n            max_ending_here = max(max_ending_here, num)\n            min_ending_here = min(min_ending_here, num)\n\n        max_product = max(max_product, max_ending_here * min_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if i > 0:\n            current_product *= arr[i-1]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_left = max_right = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(n):\n        max_left = max(max_left, arr[i])\n        max_right = max(max_right, arr[i])\n        if i > 0:\n            max_product = max(max_product, max_left * max_right)\n        max_left = max(max_left, -arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1]*n\n    \n    # Calculate the maximum product for subarrays of length 1, 2,..., n-1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i], dp[i-1])\n        else:\n            dp[i] = max(dp[i], dp[i-1])\n            \n    # Calculate the maximum product for increasing subsequences of length n\n    max_product = max(dp[0], dp[1])\n    for i in range(2, n):\n        max_product = max(max_product, dp[i] * arr[i])\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for i in range(n):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_prod = max(max_prod, max_so_far)\n\n    return max_prod"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the tuple to a list and reverse it\n    lst = list(test_tup)\n    lst.reverse()\n    # Initialize a variable to store the sum of the neighboring elements\n    sum = 0\n    # Loop through the list and add the pairwise sums\n    for i in range(len(lst)):\n        if i == 0:\n            sum = lst[0] + lst[1]\n        elif i == len(lst) - 1:\n            sum = lst[i] + lst[i-1]\n        else:\n            sum = lst[i] + lst[i+1]\n        # Add the sum to the list of pairwise sums\n        lst.append(sum)\n    # Convert the list back to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    sum = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        sum += test_tup[i] + test_tup[i-1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the input tuple has at least two elements\n    if len(test_tup) < 2:\n        raise ValueError('The given tuple has less than 2 elements.')\n    # initialize a variable to store the sum of the neighboring elements\n    sum_neighboring = 0\n    # loop through the tuple and add the current element to the sum of the neighboring elements\n    for i in range(len(test_tup) - 1):\n        sum_neighboring += test_tup[i]\n    # return the sum of the neighboring elements\n    return sum_neighboring"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        test_tup: A tuple of integers.\n\n    Returns:\n        A tuple of integers representing the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the result tuple with the first element of the input tuple\n    result = (test_tup[0],)\n\n    # Loop over the remaining elements of the input tuple\n    for i in range(1, len(test_tup)):\n        # Add the current element and the previous element to the result tuple\n        result = (result[0] + test_tup[i],) + result\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    n = len(test_tup)\n    for i in range(1, n):\n        result.append(test_tup[i] + test_tup[i-1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to hold the sum of the first and last elements and the sum of the second and second-to-last elements\n    left_sum = test_tup[0]\n    right_sum = test_tup[-1]\n    # loop through the tuple and add the neighboring elements to the sum\n    for i in range(1, len(test_tup)-1):\n        left_sum += test_tup[i-1]\n        right_sum += test_tup[i+1]\n    # return the final sum of the neighboring elements\n    return left_sum + right_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a list to store the pairwise additions\n    result = []\n    \n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Add the current element and its neighbor to the result list\n        result.append(test_tup[i] + test_tup[i+1])\n    \n    # Return the list of pairwise additions\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The given tuple should have at least two elements to perform pairwise addition.\"\n    else:\n        for i in range(len(test_tup)-1):\n            test_tup[i] += test_tup[i+1]\n        return test_tup"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n\n    Args:\n        arr (list): a list of integers to multiply\n        n (int): a positive integer to use as the modulo value\n\n    Returns:\n        int: the product of the array multiplication modulo n\n\n    \"\"\"\n\n    # initialize the result variable\n    result = 1\n\n    # multiply each element of the array by the result modulo n\n    for i in arr:\n        result = (result * i) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments:\n    - arr: A list of integers representing the array.\n    - n: An integer representing the modulus.\n\n    The function calculates the product of all the elements in the array\n    and returns the result modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the remainder of the array multiplication modulo n.\n    '''\n\n    # Initialize a variable to store the product of the array multiplied by n\n    product = 1\n\n    # Iterate through the array and multiply each element by n\n    for num in arr:\n        product *= num\n\n    # Return the remainder of the product divided by n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n\n    # Iterate through the array and multiply each element with the result variable\n    for element in arr:\n        result = (result * element) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of numbers and a number n as inputs and returns the product of the array\n    multiplication modulo n. If the product of the array elements is greater than n, we subtract n from it to ensure\n    that it is less than or equal to n.\n\n    :param arr: list of numbers\n    :param n: a positive integer\n    :return: the product of the array multiplication modulo n\n    \"\"\"\n\n    product = 1\n\n    for num in arr:\n        product = (product * num) % n\n        if product > n:\n            product -= n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    # Find the product of the array\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Find the modulo of the product\n    modulo = product % n\n    \n    # Return the modulo\n    return modulo"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers,\n    and False otherwise.\n    '''\n    # check if the list is empty or contains only one element\n    if len(l) < 2:\n        return False\n    \n    # initialize variables for the first and second elements of the list\n    first = l[0]\n    second = l[1]\n    \n    # iterate over the remaining elements of the list\n    for i in range(2, len(l)):\n        # if the current element is equal to the next element, it is not a consecutive number\n        if l[i] == second + 1:\n            return False\n        \n        # if the current element is equal to the previous element, it is not a consecutive number\n        if l[i] == first - 1:\n            return False\n        \n        # if the current element is less than the previous element, it is a consecutive number\n        if l[i] < first:\n            first = l[i]\n        # if the current element is greater than the next element, it is a consecutive number\n        if l[i] > second:\n            second = l[i]\n    \n    # if all elements of the list have been checked, it is not a consecutive number\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all elements in the list are consecutive integers, and False otherwise.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            print(\"The given list contains consecutive numbers.\") \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    # iterate over the list\n    for i in range(len(l)-1): \n        # if the next number is not 1 greater than the current number, then the list does not contain consecutive numbers\n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            print(False)\n            return\n    print(True)\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    \n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the common elements\n    common_elements = set()\n\n    # loop through both lists and compare each element\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new tuple list that contains the common elements of both lists.\n    It does this by iterating over both lists simultaneously and keeping only the common elements in a new list.\n    \"\"\"\n    common_elements = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2 and item1 not in common_elements:\n                common_elements.append(item1)\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    return tuple(item for sublist in (test_list1, test_list2) for item in sublist if item in test_list1 and item in test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            if tuple(test_list1[i]) not in result_list:\n                result_list.append(tuple(test_list1[i]))\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Sort the lists to make the comparison easier\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate over the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n\n        # If the elements are equal, append it to the intersection list\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n\n        # If the first list element is smaller, increment the first index\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n\n        # If the second list element is smaller, increment the second index\n        else:\n            j += 1\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = []\n\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            common_elements.append(test_list1[i])\n\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the given tuple lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets using the set intersection method\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a tuple list\n    intersection_list = list(intersection)\n\n    # Sort the tuple list in ascending order based on the tuple elements\n    intersection_list.sort()\n\n    # Return the sorted tuple list as the result\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a set of elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets using the intersection() method\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the current character is equal to the target character\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of character 'ch' with character 'newch' in string'str1'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three arguments: a string, a character to be replaced, and the replacement character.\n    It replaces the character in the string with the replacement character and returns the modified string.\n    '''\n    # Create a new string with the replacement character\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Parameters:\n    str1: str\n        The string in which to replace the character.\n    ch: str\n        The character to be replaced.\n    newch: str\n        The character to replace all occurrences of ch in str1.\n\n    Returns:\n    str\n        The modified string with all occurrences of ch replaced with newch.\n    \"\"\"\n\n    # Create a new string with all occurrences of ch replaced with newch\n    new_str = str1.replace(ch, newch)\n\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if char == ch:\n            str2 += newch\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n\n    # Extract the keys from the sorted Counter object\n    sorted_keys = [key for key, value in sorted_counter]\n\n    # Sort the keys in ascending order\n    sorted_keys.sort()\n\n    # Create a new dictionary with the sorted keys and their corresponding values\n    sorted_dict = {}\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a list of tuples containing the key-value pairs\n    key_value_list = [(k, v) for k, v in dict1.items()]\n    \n    # sort the list by value\n    key_value_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary from the sorted list\n    sorted_dict = dict(key_value_list)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object to sort by value\n    counter = Counter(dict1)\n\n    # Convert the Counter object back to a dictionary and sort by value\n    sorted_dict = dict(counter.most_common())\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to list of tuples\n    lst = list(dict1.items())\n    # sort list by value (second element of tuple)\n    lst.sort(key=lambda x: x[1])\n    # create new dictionary from sorted list\n    sorted_dict = dict(lst)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    # sort the dictionary keys by value in ascending order\n    sorted_dict = {k: v for k, v in sorted_counter}\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the frequency of each value in the dictionary\n    freq_dict = Counter(dict1.values())\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(freq_dict.items(), key=lambda x: x[1], reverse=True))\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n\n    # Create a Counter object to count the values of the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the sorted dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # initialize variables for largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # iterate over the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to keep track of the largest and smallest numbers\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Iterate through the array\n    for num in nums:\n        # If the current number is greater than the largest number, update the largest number\n        if num > largest:\n            largest = num\n\n        # If the current number is less than the smallest number, update the smallest number\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest numbers\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # initialize variables to store the sum of the largest and smallest values\n    largest = 0\n    smallest = 0\n    \n    # loop through the sorted array\n    for num in nums:\n        # update the largest and smallest values\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return None\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest values\n    sum_largest = sum_smallest = 0\n    for num in nums:\n        sum_largest += num\n        sum_smallest += num\n    return sum_largest - sum_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return \"The array is empty.\"\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest value\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[-1] + nums[-2]\n    \n    # Return the sum\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and returns the same string with all lowercase substrings removed.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    \n    # Use the search() method to find all lowercase substrings in the string\n    matches = pattern.findall(string)\n    \n    # Use the replace() method to remove all lowercase substrings from the string\n    string = re.sub(r'[a-z]+', '', string)\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b')\n    return re.sub(lowercase_pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.findall(r'[a-z]+', str1) # find all lowercase substrings in the string\n    lowercase = [word for word in lowercase if word.isupper()] # filter out uppercase substrings\n    return''.join(lowercase) # join the filtered substrings with spaces"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]\\w*\\b'\n\n    # use the re.sub() method to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Remove all lowercase substrings using regular expression\n    pattern = r'(?i)[a-z]+'\n    str2 = re.sub(pattern, '', str1)\n\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]{2,}\\b')\n\n    # use the pattern to find all lowercase substrings\n    matches = pattern.findall(string)\n\n    # remove the lowercase substrings from the original string\n    string = re.sub(pattern, '', string)\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use regular expressions to find all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, string)\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the updated string\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the first digit of that number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to a number\n    first_num = int(first_char)\n    # return the first number\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is a number\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    # Convert the input to a string\n    num_str = str(n)\n    # Find the first digit in the string\n    first_digit = int(num_str[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # First check if the number is not empty\n    if not n:\n        return None\n    # Split the number into a string of digits\n    digits = list(str(n))\n    # Return the first digit of the string\n    return digits[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Remove any non-numeric characters from the input number\n    num = ''.join(filter(str.isdigit, str(n)))\n    # If the number has no digits, return 0\n    if not num:\n        return 0\n    # If the number has only one digit, return it as an integer\n    elif len(num) == 1:\n        return int(num)\n    # Otherwise, return the first digit of the number as an integer\n    else:\n        return int(num[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    str_n = str(n)\n    # return the first character of the string\n    return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to string\n    num_str = str(n)\n\n    # Find the first digit of the number\n    first_digit = num_str[0]\n\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    # Loop through each number in the input list\n    for num in list:\n        # If the number is odd, append it to the odd list\n        if num % 2!= 0:\n            odd_list.append(num)\n    # Return the odd list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    result = []\n    for num in list: \n        if num % 2!= 0: \n            result.append(num) \n    return result "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odds = []\n    for num in lst:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n\n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_cubes - sum_natural\n\n    # print the difference\n    print(\"The difference between the sum of cubes and the sum of natural numbers is:\", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Find the difference between the two sums\n    diff = abs(sum_cubes - sum_numbers)\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # compute the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # compute the sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    # return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    \n    # calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    # Return the difference between the two sums\n    return cube_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i*i*i for i in range(1, n+1)])\n    \n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # find the difference between the two sums\n    diff = sum_cubes - sum_natural\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_cubes = 0\n    sum_nums = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_nums += i\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cubes(n):\n        '''\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        '''\n        return n*(n**2 + n)\n\n    def sum_natural_numbers(n):\n        '''\n        Write a python function to calculate the sum of the first n natural numbers.\n        '''\n        return n*(n+1)/2\n\n    return abs(sum_cubes(n) - sum_natural_numbers(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    diff = sum_cubes - sum_natural\n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A and an integer N as input and returns the number of pairs whose xor value is odd.\n\n    Args:\n        A (list): The array A.\n        N (int): The size of the array A.\n\n    Returns:\n        int: The number of pairs whose xor value is odd.\n    \"\"\"\n\n    # Initializing a variable to store the number of pairs\n    count = 0\n\n    # Looping through all pairs of elements from A\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR operation to get the xor value of the pair\n            xor_val = A[i] ^ A[j]\n\n            # Checking if the xor value is odd\n            if xor_val % 2!= 0:\n                # Incrementing the count variable\n                count += 1\n\n    # Returning the count of pairs whose xor value is odd\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    xor_value = 0\n    count = 0\n    for i in range(N):\n        xor_value ^= A[i]\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = xor_value ^ (A[i] ^ A[j])\n            if xor_diff % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_char = ''\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char)-32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # iterate over each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert to uppercase\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    \n    digit_sum = 0\n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert input numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # compare length of strings\n    if len(n1_str)!= len(n2_str):\n        print(\"Error: the two input numbers must have the same length\")\n        return\n\n    # initialize sum to zero\n    sum_diff = 0\n\n    # loop through each character in the strings\n    for i in range(len(n1_str)):\n        # calculate per-digit difference\n        digit_diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n\n        # add difference to sum\n        sum_diff += digit_diff\n\n    # return sum\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    # Initialize the sum of differences to 0\n    diff_sum = 0\n    # Loop through each digit in the two strings\n    for i in range(len(str1)):\n        # Convert each digit to an integer\n        num1 = int(str1[i])\n        num2 = int(str2[i])\n        # Find the difference between the two digits\n        diff = num1 - num2\n        # Add the difference to the sum\n        diff_sum += diff**2\n    # Return the sum of differences squared\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum\n    sum = 0\n\n    # Loop through the characters in the strings\n    for i in range(len(str1)):\n        # Subtract the corresponding digits\n        diff = int(str1[i]) - int(str2[i])\n        # Add the absolute difference to the sum\n        sum += abs(diff)\n\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # calculate the per-digit difference between the two integers\n    digit_diffs = []\n    for i in range(len(num1_digits)):\n        digit_diff = num1_digits[i] - num2_digits[i]\n        digit_diffs.append(digit_diff)\n\n    # calculate the sum of the per-digit differences\n    digit_diff_sum = sum(digit_diffs)\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    \n    # Convert the difference into a string and split it into a list of digits\n    diff_str = str(diff)\n    diff_list = [int(digit) for digit in diff_str]\n    \n    # Calculate the sum of the per-digit differences\n    total_diff = sum(abs(diff_list[i] - diff_list[j]) for i in range(len(diff_list)) for j in range(i+1, len(diff_list)))\n    \n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert both numbers to strings so we can manipulate them easily\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through each digit in each number\n    for i in range(len(n1_str)):\n        # Calculate the difference between the corresponding digits\n        diff = int(n1_str[i]) - int(n2_str[i])\n\n        # Add the difference to the sum\n        sum += diff ** 2\n\n    # Return the sum of the squared differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        d1 = n1 // 10**i\n        d2 = n2 // 10**i\n        sum_diff += abs(d1 - d2)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to strings and split them into individual digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Initialize variables to store sum and difference for each digit\n    sum_diff = 0\n    diff_diff = 0\n    \n    # Loop through each digit of both integers and calculate the sum and difference for each digit\n    for i in range(max(len(digits1), len(digits2))):\n        # Calculate sum for this digit\n        if i < len(digits1):\n            digit_sum = digits1[i] + digits2[i]\n        else:\n            digit_sum = digits2[i]\n        \n        # Calculate difference for this digit\n        if i < len(digits1):\n            digit_diff = abs(digits1[i] - digits2[i])\n        else:\n            digit_diff = abs(digits2[i])\n        \n        # Add sum and difference for this digit to total sum and difference\n        sum_diff += digit_sum\n        diff_diff += digit_diff\n    \n    # Return the sum of the difference squares\n    return sum_diff * diff_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    while n1 > 0 or n2 > 0:\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n        distance += abs(digit1 - digit2)\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')  # initialize max_sum with negative infinity\n    current_sum = 0  # initialize current_sum with 0\n    \n    for i in range(size):\n        current_sum += arr[i]  # add current element to current_sum\n        \n        # check if current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_sum = max(max_sub_array_sum(a, size-1), a[size-1])\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Use set() to find the unique elements of the combined tuple\n    unique_elements = set(combined_tup)\n    \n    # Sort the unique elements in sorted order\n    sorted_unique_elements = sorted(unique_elements)\n    \n    # Print the sorted unique elements\n    print(sorted_unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1).union(set(test_tup2)))\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Sort the combined tuple in ascending order\n    combined_tup.sort()\n    \n    # Print the sorted combined tuple\n    print(combined_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples using set operations\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Return the sorted list of union elements\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of two tuples is a tuple containing all the unique elements of both tuples.\n    union = tuple(set(test_tup1 + test_tup2))\n\n    # Sort the union in ascending order.\n    union_sorted = sorted(union)\n\n    # Output the sorted union.\n    print(union_sorted)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(union_set)\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # base case for empty list\n    if len(lst) == 0:\n        return 0\n\n    # base case for single element list\n    elif len(lst) == 1:\n        return 1\n\n    # recursive case for longer sublists\n    else:\n        # find length of longest sublist in left subtree\n        left_len = Find_Max_Length(lst[:len(lst)//2])\n\n        # find length of longest sublist in right subtree\n        right_len = Find_Max_Length(lst[len(lst)//2:])\n\n        # find length of longest sublist in current subtree\n        curr_len = 0\n        for i in range(len(lst)//2):\n            curr_len = max(curr_len, Find_Max_Length(lst[i:i+len(lst)//2]))\n\n        # return maximum length among current subtree, left subtree, and right subtree\n        return max(curr_len, left_len, right_len)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    length = 0\n\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j == len(lst) - 1:\n                length += 1\n            else:\n                length += 1\n            if length > max_length:\n                max_length = length\n                start = i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n\n    maxLength = 0\n    maxLength_prev = 0\n\n    for i in range(len(lst)):\n        if i == 0:\n            maxLength = 1\n            maxLength_prev = 1\n\n        else:\n            maxLength = maxLength_prev + 1\n\n        if maxLength > maxLength_prev:\n            maxLength_prev = maxLength\n\n    return maxLength_prev"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list of integers as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    length = 0\n\n    for num in lst:\n        if len(lst) - length == 0:\n            length = 0\n        elif num == lst[length]:\n            length += 1\n        else:\n            length = 0\n\n        if length > max_length:\n            max_length = length\n\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(i+1,len(lst)):\n            if lst[j] == []:\n                continue\n            max_length = max(max_length, len(lst[i])+len(lst[j]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize max_length to the first element of lst\n    max_length = len(lst[0])\n    \n    # Loop through the remaining elements of lst\n    for sublist in lst[1:]:\n        # Calculate the length of the longest sublist in this iteration\n        length = max(len(sublist), max_length)\n        # Update max_length if necessary\n        if length > max_length:\n            max_length = length\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize the maximum length to zero\n    max_length = 0\n    \n    # loop through each sublist in the list\n    for sublist in lst:\n        # check if the length of this sublist is greater than the current maximum\n        if len(sublist) > max_length:\n            # update the maximum length to be this length\n            max_length = len(sublist)\n            \n    # return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_len = 0\n    for i in range(len(lst)):\n        temp_len = 1\n        for j in range(i+1, len(lst)):\n            temp_len += 1\n            if lst[i] == lst[j]:\n                temp_len += Find_Max_Length(lst[i:])\n        if temp_len > longest_len:\n            longest_len = temp_len\n    return longest_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the longest sublist.\n    \"\"\"\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j-i+1 > max_length:\n                max_length = j-i+1\n\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip() for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() method to extract all the matches of the pattern from the text\n    matches = re.findall(pattern, text)\n    # Iterate over the matches and remove the quotation marks from the extracted values\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\W)\\b\\d+\\b|(?<=\\W)\\b\\d*\\.\\d+|\\b\\d+[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The value of pi is approximately 3.14. The value of e is approximately 2.71828.\"\nvalues = extract_values(text)\nprint(values)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n\n    Args:\n    text: A string containing text with values between quotation marks.\n\n    Returns:\n    A list of strings, each representing a value between quotation marks.\n    '''\n\n    # Create a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to find all the values between quotation marks in the string\n    values = re.findall(pattern, text)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n    text (str): The string from which to extract values.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(?:\\\\.|[^\"])*\"', re.DOTALL)\n    return pattern.findall(text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = pattern.findall(text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): The string to search for values in.\n\n    Returns:\n    list: A list of extracted values.\n    '''\n\n    # Find all pairs of quotation marks that are not inside a pair of escaped quotes\n    pairs = re.findall(r'(?<!\\\\)\"(?:(?:\\\\.|[^\"])*?)\"', text)\n\n    # Extract the values from each pair of quotes\n    values = []\n    for pair in pairs:\n        values.append(pair.strip('\"'))\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # convert the string to a list of characters\n    chars = list(word)\n    \n    # print the characters\n    print(chars)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    # Split the string into individual characters\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string and add it to the sum\n    for digit in n_str:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through each digit in n\n    while n > 0:\n        # get the last digit of n\n        digit = n % 10\n        \n        # add the digit to the sum\n        sum += digit\n        \n        # remove the last digit from n\n        n = n // 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    s = str(n)\n    # initialize a variable to store the sum of digits\n    sum = 0\n    # loop through each digit in the string and add it to the sum\n    for digit in s:\n        sum += int(digit)\n    # return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the given integer to a string and then to a list of digits\n    digits = list(str(n))\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each digit in the list and add it to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(map(int, str(n)))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to 0\n    sum_value = 0\n    # Iterate over each digit in the list and add it to the sum\n    for digit in digits:\n        sum_value += digit\n    # Return the sum\n    return sum_value"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order, otherwise False.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the list has only one element\n    if len(list1) == 1:\n        return True\n\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True if list1[0] <= list1[0] else False\n    elif list1[1] <= list1[0]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order or False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    - length (int): the number of dictionaries to create in the list\n\n    Returns:\n    - list of dictionaries of length N\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list\n    with duplicate numbers removed.\n    \"\"\"\n    # Create a set to store the unique numbers\n    unique_nums = set()\n    # Loop through each sublist in the input list\n    for sublist in nums:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # If the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert lists to sets to remove duplicates\n    nums = set(nums)\n    # convert sets back to lists\n    return list(nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store the unique numbers\n    unique_nums = set()\n\n    # Iterate over each list in the nums argument\n    for num_list in nums:\n        # Iterate over each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already in there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers and returns a new list that contains only the two unique numbers.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        elif len(unique_nums) < 2:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                continue\n            else:\n                unique_list.append(nums[i])\n                break\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store the unique elements of the lists\n    unique_nums = set()\n    # loop through each list in the input list\n    for lst in nums:\n        # loop through each element in the list\n        for num in lst:\n            # add the element to the set only if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create a set to store unique numbers\n    unique_set = set()\n\n    # Loop through each list and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_set.add(num)\n\n    # Create a new list to store the unique numbers\n    unique_list = []\n\n    # Loop through the set and add each unique number to the new list\n    for num in unique_set:\n        unique_list.append(num)\n\n    # Return the new list of unique numbers\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set(nums)\n    result = []\n    for num in nums:\n        if num not in unique_nums:\n            result.append(num)\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data)) # Remove duplicates from the list using the set() function and convert it to a list\n    product = 1 # Initialize the product variable to 1\n    for num in unique_numbers: # Loop through each number in the unique list\n        product *= num # Multiply the current number by the product variable\n    return product # Return the product of all unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return 1 if len(unique_numbers) == 1 else product(unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # remove duplicates from list\n    return reduce(lambda x, y: x * y, unique_numbers) # calculate product of unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # Convert the list to a set to remove duplicates, then back to a list.\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Remove duplicates from the list using the `unique()` method\n    unique_numbers = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    unique_numbers_product = 1\n    \n    for num in unique_numbers:\n        unique_numbers_product *= num\n        \n    return unique_numbers_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else reduce(lambda x, y: x*y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # remove duplicates from the list\n    unique_list = list(set(list_data))\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # A = 2*\u03c0*r*h\n    A = 2*3.14*r*h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2 * 3.14 * r * h # formula for surface area of a cylinder\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 + 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = math.pi * r**2 * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = math.pi * r**2 + 2 * math.pi * r * h + math.pi * h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and\n    returns the surface area of the cylinder.\n    \"\"\"\n    area = 2 * r * h + 2 * r * r  # Formula for the surface area of a cylinder\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n    \"\"\"\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        return A == B\n    else:\n        for i in range(len(B)-len(A)+1):\n            if A == B[i:i+len(A)]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if both lists are empty\n    if not A and not B: \n        return True\n\n    # Check if the first element of B is in A\n    if A[0] == B[0]: \n        return is_Sub_Array(A[1:], B)\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        A = B\n    i = 0\n    for j in range(len(A)):\n        if A[j] == B[i]:\n            i += 1\n        if i == len(B):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    return i == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = max(j, i)\n            i = 0\n    return j == len(B)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    # Initializing the variable to store the last digit in factorial \n    last_digit = 0 \n    # Looping through all the numbers from 1 to n and calculating the factorial \n    for i in range(1, n+1): \n        last_digit += (i * last_digit) \n    # Returning the last digit in factorial \n    return last_digit % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n and returns its factorial with the last digit.\n\n    :param n: positive integer\n    :return: factorial of n with the last digit\n    \"\"\"\n\n    # Initialize the factorial variable with 1\n    factorial = 1\n\n    # Loop through the digits of n\n    for digit in str(n):\n        # Convert the digit to an integer and multiply it by the current factorial\n        factorial *= int(digit)\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # converting the number to string format\n    n_str = str(n)\n    # finding the length of the string\n    n_len = len(n_str)\n    # converting the length of the string to integer\n    n_len_int = int(n_len)\n    # finding the last digit of the factorial\n    last_digit_factorial = int(n_str[-1])\n    # printing the last digit of the factorial\n    print(\"The last digit in the factorial of\", n, \"is\", last_digit_factorial)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 0\n    while n > 0:\n        result = n % 10\n        n //= 10\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(length):\n        factorial *= int(str_n[i])\n    # find the last digit of the factorial\n    last_digit = int(str_n[length-1])\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string to find the last digit\n    n_str = str(n)\n    last_digit = n_str[-1]\n    # Calculate the factorial of the number without the last digit\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Calculate the last digit of the factorial\n    last_factorial_digit = int(factorial/n)\n    return last_factorial_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number into a string\n    num_str = str(n)\n\n    # Convert the string into a list of integers\n    num_list = list(map(int, num_str))\n\n    # Reverse the list to get the factorial of the number\n    factorial = 1\n    for i in range(len(num_list)-1, -1, -1):\n        factorial *= num_list[i]\n\n    # Convert the factorial back into a string\n    factorial_str = str(factorial)\n\n    # Convert the string into a list of integers\n    factorial_list = list(map(int, factorial_str))\n\n    # Find the last digit in the factorial\n    last_digit = factorial_list[-1]\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize variable to store the factorial\n    factorial = 1\n    \n    # calculate factorial\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # extract last digit from factorial\n    last_digit = factorial % 10\n    \n    # return last digit\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to hold the final result\n    result = []\n    # loop over each element of each input list\n    for i in range(len(list1)):\n        # append the current element of the first list to the result list\n        result.append(list1[i])\n        # append the current element of the second list to the result list\n        result.append(list2[i])\n        # append the current element of the third list to the result list\n        result.append(list3[i])\n    # return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of the same length and returns a single flat list with the elements of all the lists interleaved.\n    \"\"\"\n    # concatenate the three lists into a single list\n    interleaved_list = list1 + list2 + list3\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index = 0\n    \n    # Loop through the first list\n    for item in list1:\n        result.append(item)\n        index += 1\n        \n        # If we have reached the end of list1, loop through list2 and append items until we reach the end of list3\n        if index == len(list1):\n            while index < len(list2):\n                result.append(list2[index])\n                index += 1\n            \n            # Loop through list3 and append items until we reach the end of list1\n            while index < len(list1):\n                result.append(list3[index])\n                index += 1\n                \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate through the first list\n    for item in list1:\n        # add the item to the interleaved list\n        interleaved_list.append(item)\n    # iterate through the second list\n    for item in list2:\n        # add the item to the interleaved list\n        interleaved_list.append(item)\n    # iterate through the third list\n    for item in list3:\n        # add the item to the interleaved list\n        interleaved_list.append(item)\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    # check that all input lists have the same length\n    assert len(list1) == len(list2) == len(list3), \"All input lists must have the same length\"\n\n    # initialize an empty list to hold the result\n    result = []\n\n    # iterate over the input lists and append their corresponding elements\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single list that is the \n    concatenation of the three input lists.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the input lists are of the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Traverse through the input lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, append it to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Define an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate over the elements in the first tuple\n    for elem in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem not in test_tup2:\n            # If not, add it to the list of dissimilar elements\n            dissimilar_list.append(elem)\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = set(test_tup1) - set(test_tup2) - common_elements\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a set of unique elements in test_tup1\n    set1 = set(test_tup1)\n    # Create a set of unique elements in test_tup2\n    set2 = set(test_tup2)\n    # Find the elements that are in set1 but not in set2\n    dissimilar_elements = set1.difference(set2)\n    # Return the list of dissimilar elements\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    # find the elements that are present in test_tup1 but not in test_tup2\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_set.add(item)\n    # find the elements that are present in test_tup2 but not in test_tup1\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_set.add(item)\n    # return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup += (test_tup1[i],)\n    return dissimilar_tup"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of unique elements in both tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n\n    # Find the dissimilar elements by subtracting the common elements from both tuples\n    dissimilar_elements = set(test_tup1) - common_elements.union(set(test_tup2)) - set([None])\n\n    # Convert the set of dissimilar elements to a list and return it\n    return list(dissimilar_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, tuple):\n                    even_list.extend(even_fnc(j))\n                else:\n                    even_list.append(j)\n        elif isinstance(i, tuple):\n            even_list.extend(even_fnc(i))\n        else:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def flatten_tuple(t):\n        '''\n        Helper function to flatten the tuple.\n        '''\n        return [item for sublist in t for item in sublist]\n\n    def get_even(t):\n        '''\n        Helper function to get even elements from the flattened tuple.\n        '''\n        return [even_fnc(item) for item in flatten_tuple(t)]\n\n    return get_even(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            filtered_list.append(i)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even or odd\n    def is_even(x):\n        return x % 2 == 0\n    \n    # Use the filter() function to iterate through the elements of the tuple and only keep the even elements\n    even_elements = list(filter(is_even, test_tuple))\n    \n    # Use the map() function to apply the even_fnc function to each even element and create a new tuple with the results\n    new_tuple = tuple(map(even_fnc, even_elements))\n    \n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_list.extend(even_ele(elem, even_fnc))\n        else:\n            new_list.append(even_fnc(elem))\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num):\n        return num % 2 == 0\n    \n    result = []\n    for sub_tuple in test_tuple:\n        if isinstance(sub_tuple, tuple):\n            sub_tuple = even_fnc(sub_tuple)\n        if is_even(sub_tuple):\n            result.append(sub_tuple)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return tuple(filter(lambda x: isinstance(x, even_fnc), result))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through each element in the tuple\n    for i in range(len(test_tuple)):\n        # check if the element is even\n        if even_fnc(test_tuple[i]):\n            # if it is, add it to a new list\n            even_list.append(test_tuple[i])\n        # if the element is odd, add it to a new list\n        else:\n            odd_list.append(test_tuple[i])\n    # return the new list of even elements\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the base and height of the pyramid \n    base = b\n    height = s\n\n    # calculate the area of each side of the pyramid \n    area_base = base * base \n    area_height = height * height \n\n    # calculate the surface area of the pyramid \n    surface_area = 2 * area_base + 2 * area_height + 6 * height * base \n\n    return surface_area "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with given base and height.\n    \"\"\"\n    # Calculate the area of the base\n    area_base = base * base\n    # Calculate the area of the pyramid by adding the areas of each face\n    area_pyramid = 2 * base * height + 2 * base * height * height + base * height * height * height\n    # Calculate the surface area of the pyramid\n    surface_area = (area_base + area_pyramid) / 2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2*b*s + 2*s*s + 2*b*s\n    print(\"Surface Area:\",surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b*s)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s + b * s + s * s + s * s\n    surface_area = 2 * area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two parameters: b for the base edge of the square pyramid and s for the height. \n    It returns the surface area of the square pyramid as a float value.\n    '''\n    return 2 * b * s + 2 * b + 2 * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * (b * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (s * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    #calculate the area of the base using the formula for the area of a rectangle\n    area_base = b*b\n\n    #calculate the area of the pyramid using the formula for the area of a triangle\n    area_pyramid = 0.5*b*s\n\n    #calculate the total surface area by adding the area of the base and the area of the pyramid\n    surface_area = area_base + area_pyramid\n\n    #return the total surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculating the surface area of the pyramid \n    area = b * s + b * b + s * s + 2 * b * s - 4 * b * b * s \n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == []:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using dynamic programming approach.\n    '''\n\n    # Calculate the first n terms of the Catalan series using dynamic programming\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        catalan_series = [1] * (n + 1)\n        catalan_series[0] = 1\n        catalan_series[1] = 1\n        for i in range(2, n + 1):\n            catalan_series[i] = catalan_series[i - 1] + catalan_series[i - 2]\n        return catalan_series[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Computes the nth Catalan number.\n    \"\"\"\n    # base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n\n    # compute Catalan numbers recursively\n    catalan = 0\n    for k in range(1, n + 1):\n        num = (2 * k) ** (2 * n - 2 * k) / (factorial(n) * factorial(k))\n        catalan += num\n\n    return catalan\n\n\ndef factorial(n):\n    \"\"\"\n    Computes the factorial of n.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Initialize the first two Catalan numbers as 1\n    catalan_0 = 1\n    catalan_1 = 1\n    \n    # Calculate the remaining Catalan numbers using recursion\n    for i in range(2, n+1):\n        catalan_i = (4*catalan_i*(catalan_i-1)) // (i)\n        catalan_0 += catalan_i\n        catalan_1 += catalan_i\n    \n    return catalan_0"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number using the formula:\n\n    C(n, k) = binomial(2n, n)/(1 - a^k)\n\n    where n is the number of choices and k is the number of selected choices.\n    '''\n    a = 1/2\n    return binomial(2*n, n)/(1 - a**n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n - 1) / (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        # Recursive case\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Initialize variables\n    n = num\n    catalan_num = 1\n\n    # Compute catalan_num\n    for i in range(1, n+1):\n        catalan_num = (4*i*(n-i) + (n+1)*(i**2))/2**i\n\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def binomial(n, k):\n        return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n    catalan_numbers = [1]\n    for i in range(1, num + 1):\n        catalan_numbers.append(0)\n        for j in range(i):\n            catalan_numbers[-1] += binomial(i, j) * binomial(j, i - j)\n        catalan_numbers[-1] *= 2\n    return catalan_numbers[-1] / 2"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with ly\n    matches = re.findall(r'\\b\\w*[aeiouy]\\w*[aeiouy][lL]\\b', text)\n    # Initialize an empty dictionary to store the positions of each adverb\n    adverb_positions = {}\n    # Iterate through each match and store its position and length in the dictionary\n    for match in matches:\n        start = text.find(match[0])\n        end = start + len(match[0])\n        adverb_positions[match] = (start, end)\n    # Sort the dictionary by position\n    sorted_positions = dict(sorted(adverb_positions.items(), key=lambda x: x[1][0]))\n    # Return the first adverb and its position\n    return sorted_positions.keys()[0], sorted_positions[sorted_positions.keys()[0]][0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(\\w+ly)\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((text.find(adv), text.index(adv)))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Find all instances of the word \"ly\" in the text\n    ly_matches = re.findall(r'\\bly\\b', text)\n\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n\n    # Loop through each match and add its position to the positions list\n    for match in ly_matches:\n        positions.append(text.find(match))\n\n    # Return the list of positions of the matches\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match the adverb ending with 'ly'\n    pattern = r'\\b[aeiou][a-z]*ly\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches to find the first adverb ending with 'ly' and its position\n    for i, match in enumerate(matches):\n        # Check if the position is before the position of the next match\n        if i!= 0 and matches[i-1][1] > match[1]:\n            # Return the match if it is the first adverb ending with 'ly' and its position is before the next match\n            return match\n    \n    # If no match is found, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]\\w*[ly]\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions and lengths\n    adverb_positions = []\n\n    # Iterate over all matches and extract their positions and lengths\n    for match in matches:\n        start = text.find(match[0])\n        end = start + len(match[0])\n        length = end - start\n        adverb_positions.append((start, length))\n\n    # Sort the adverb positions by their starting positions\n    adverb_positions.sort(key=lambda x: x[0])\n\n    # Return the adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    # Iterate through the matches and append their positions to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define regular expression pattern for adverb ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # search for all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # create a dictionary to store positions of adverbs ending with ly\n    positions = {}\n\n    # loop through all matches and store their positions in the dictionary\n    for match in matches:\n        positions[match] = text.find(match)\n\n    # return the dictionary of positions of adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return [(match.start(), match.end()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b([a-z])y\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Build a heap of n items with their prices\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        item = heapq.heappop(heap)[1]\n        result.append(item)\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n and returns the n most expensive items.\n    The function uses a min heap to keep track of the n most expensive items.\n    \"\"\"\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to keep track of the n most expensive items\n    max_heap = []\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        elif item > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, item)\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): List of items to consider\n    n (int): Number of most expensive items to find\n\n    Returns:\n    list: List of the n most expensive items from the input dataset\n    '''\n\n    # create a min heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # extract the n most expensive items from the heap and return them\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, items[i])\n\n    # Extract the n most expensive items from the heap and add them to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset\n    for item in items:\n        # If the min-heap is full (i.e. n items have been added),\n        # pop the smallest item from the heap and add the current item\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n        # Otherwise, just add the item to the heap\n        else:\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # if heap size is greater than n, remove the smallest element\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n largest items in the heap\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError('n is greater than the length of the list')\n    elif n == 0:\n        raise ValueError('n is 0, which means we don\\'t need to split the list')\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new list to store the split elements\n    new_list = []\n    \n    # Loop through the list and add each element to the new list\n    for i in range(len(l)):\n        new_list.append(l[i])\n    \n    # Add the first n-1 elements of the original list to the new list\n    for i in range(n-1):\n        new_list.append(l[0])\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    l_split = l[:n]\n    # Append the first part of the list to the end\n    l_split.extend(l[n:])\n    return l_split"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty\n    if len(l) == 0:\n        return []\n    \n    # find the nth element\n    i = 0\n    for j in l:\n        i += 1\n        if i == n:\n            break\n    \n    # add the first part of the list to the end\n    return l[i:] + l[:i]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The length of the list is less than the specified element.\")\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr1 = []\n    for i in range(n):\n        arr1.append(l[i])\n    arr2 = l[n:]\n    arr = arr1 + arr2\n    return arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return None\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    if n > len(l):\n        return [l]\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid:]\n    return left + split_Arr(right, n-mid)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = [0] * (n+1)\n    arr[0] = l[0]\n    for i in range(1, n+1):\n        arr[i] = l[i-1]\n    arr[n] = l[n-1]\n    return arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if type(l)!= list:\n        print(\"Input must be a list.\")\n        return None\n    \n    if n < 0 or n >= len(l):\n        print(\"Invalid index.\")\n        return None\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return second_part + first_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"List should have at least 2 elements\")\n        return\n\n    min_num = nums[0]\n    max_num = nums[0]\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 1:\n        print(\"List is empty.\")\n        return\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"List should have at least 2 elements\")\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        print(\"Difference between largest and smallest value is:\", diff)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    min_val = nums[0]\n    max_val = nums[0]\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Return the difference between largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Convert the input numbers to floats\n    a, b = float(a), float(b)\n    \n    # Calculate the difference between the input numbers\n    difference = b - a\n    \n    # Check if the difference is negative\n    if difference < 0:\n        # Swap the values of a and b if the difference is negative\n        a, b = b, a\n        \n        # Calculate the difference between the input numbers\n        difference = b - a\n    \n    # Iterate through the difference between the input numbers and\n    # find perfect squares\n    perfect_squares = []\n    for i in range(int(math.sqrt(difference))+1):\n        # Calculate the square of the current perfect square\n        square = math.sqrt(a + i*i)\n        \n        # Check if the square is within the range of the input numbers\n        if square <= b:\n            # Add the square to the list of perfect squares\n            perfect_squares.append(square)\n    \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a is greater than b\n    if a > b:\n        a, b = b, a\n    \n    # iterate through all numbers between a and b\n    for num in range(a, b+1):\n        # check if the square of num is equal to num\n        if num*num == num:\n            # if so, return the square of num\n            return num*num\n    \n    # if no perfect square is found, return None\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all perfect squares between them.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i**2)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Check if a and b are valid input\n    if not isinstance(a, int) or not isinstance(b, int):\n        print(\"Invalid input. Both numbers should be integers.\")\n        return None\n    \n    # Find the range of numbers to check\n    start_number = 1\n    end_number = a if a < b else b\n    \n    # Iterate over the range of numbers to check for perfect squares\n    for num in range(start_number, end_number):\n        # Calculate the square root of the number\n        square = num**0.5\n        \n        # Check if the square is an integer\n        if square.is_integer():\n            # Check if the square is between a and b\n            if start_number <= square <= end_number:\n                print(f\"{num} is a perfect square between {start_number} and {end_number}\")\n                return None\n    \n    # If no perfect squares were found, print a message\n    print(\"No perfect squares found.\")\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integer arguments, `a` and `b`, and returns a list of all perfect squares between `a` and `b`.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)+1:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # iterate through the range of numbers between a and b\n    for i in range(a, b+1):\n\n        # check if the number is a perfect square\n        if i**2 == a or i**2 == b:\n            perfect_squares_list.append(i)\n\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5**2 == i:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i**2:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = []\n    # Loop over the range of numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = num * num\n        if square == num and square == int(square):\n            # If it is, add it to the result list\n            result.append(num)\n    # Return the result list\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    x (float): The radius of the point in polar coordinates.\n    y (float): The angle of the point in polar coordinates.\n\n    Returns:\n    tuple: The corresponding rectangular coordinates.\n\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(y/x)\n    return r*cmath.exp(theta*1j)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle (in radians) from the x-axis to the point.\n\n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle of the polar coordinate measured in radians.\n\n    Returns:\n    tuple: The tuple (x, y) of the rectangular coordinate.\n    \"\"\"\n\n    # Convert the angle from radians to degrees\n    theta_deg = cmath.phase(theta) * 180 / cmath.pi\n\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes in the radius and angle of a point in polar coordinates and returns the corresponding point in rectangular coordinates.\n    '''\n\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if list has at least two elements\n    if len(newList) < 2: \n        return newList\n    \n    # initialize first and last indices\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    \n    # interchange the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # check if list is empty\n    if not newList:\n        return newList\n\n    # swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # If the length of the list is less than 2, return the list unchanged.\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last elements.\n    first_last = newList[0], newList[-1]\n    newList = first_last + newList[:-1]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \n    Args:\n        n (int): The number of terms in the binomial series.\n        k (int): The number of terms in the binomial series that we want to calculate the sum of.\n    \n    Returns:\n        float: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    \n    # Check if n is greater than k\n    if n > k:\n        raise ValueError(\"The value of n should be less than or equal to the value of k.\")\n    \n    # Calculate the binomial coefficient using the formula C(n,k) = n! / (k! * (n-k)!)\n    C = 1\n    for i in range(k,n+1):\n        C *= i\n    for i in range(1,k+1):\n        C /= i\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return C"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeffs = [1] * (k+1)\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if j <= i:\n                coeffs[j] += coeffs[j-1]\n            else:\n                coeffs[j] -= coeffs[j-i]\n    return sum(coeffs)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0\n    else: \n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, which represents the number of terms and the number of terms we want to calculate.\n    It then returns the sum of the product of consecutive binomial co-efficients.\n\n    Here are the formulas to calculate the binomial coefficient:\n\n    n! / (k! * (n-k)!)\n\n    The sum of the product of consecutive binomial co-efficients is equal to:\n\n    C = k * (n - k) * C(n - 1, k - 1)\n\n    We can use the above formula to calculate the binomial coefficients recursively as follows:\n\n    C(n, k) = C(n - 1, k) + k * C(n - 1, k - 1)\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return k * binomial_Coeff(n - 1, k) + binomial_Coeff(n - 1, k - 1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    for i in range(1,k+1):\n        sum_of_products += n*(n-i)/(i*(i-1))\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the product to 1\n    prod = 1\n    # Loop through the number of k's\n    for i in range(k):\n        # Calculate the binomial coefficient\n        num = n-i\n        den = i+1\n        coeff = num//den\n        # Multiply the product by the binomial coefficient\n        prod *= coeff\n        # Add the sum to the product\n        sum += prod\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n\n    Parameters\n    ----------\n    n : int\n        The number of terms in the binomial coefficient.\n    k : int\n        The number of terms to include in the sum.\n\n    Returns\n    -------\n    int\n        The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    :param n: int - The number of terms in the series.\n    :param k: int - The number of consecutive terms to be included in the series.\n\n    :return: int - The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Initialize a variable to hold the product of consecutive binomial coefficients\n    product = 1\n\n    # Calculate the first binomial coefficient\n    b = math.factorial(n) // math.factorial(k) // math.factorial(n - k)\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1, k + 1):\n        product *= (n - i + 1) // i\n        product *= b\n        b //= (i + 1)\n\n    # Add the product of consecutive binomial coefficients to the sum\n    sum += product\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initializing the sum of binomial co-efficients\n    sum_binomial = 0\n\n    # iterating for the number of terms\n    for i in range(k + 1):\n        # calculating the binomial co-efficient\n        binomial = (n + 1) * (n - i + 1) // (i + 1)\n        # adding the binomial co-efficient to the sum\n        sum_binomial += binomial\n\n    return sum_binomial"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n    # Remove any leading zeros from the octets\n    ip = re.sub(r'^(0+)/', '', ip)\n    # Remove any leading zeros from the complete IP address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\.0+)+', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'\\b([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)\\b'\n    result = re.search(pattern, ip)\n    if result:\n        groups = result.groups()\n        new_ip = '.'.join([str(x) for x in groups[1:]])\n        return new_ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'^(\\d+\\.\\d+\\.)(\\d+)$', r'\\1\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove any leading zeroes from the ip address\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n    - ip (str): The IP address to be cleaned.\n\n    Returns:\n    - str: The cleaned IP address.\n    \"\"\"\n    # Remove leading zeros from each octet\n    return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    match = re.match(ip_pattern, ip)\n\n    if match:\n        ip_no_zero = ip.replace('0', '')\n        return ip_no_zero\n    else:\n        print(\"Invalid IP address format\")\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?=\\d)', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    # Check if the list is not empty\n    if not list1:\n        return None\n    \n    # Initialize even and odd variables\n    even_found = False\n    odd_found = False\n    \n    # Iterate over the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_found = True\n        elif num % 2 == 1:\n            odd_found = True\n            \n    # Check if both even and odd numbers were found\n    if even_found and odd_found:\n        # Find the difference between the even and odd numbers\n        diff = abs(list1[0] - list1[1])\n        return diff\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Define the even and odd numbers\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    # Find the difference of the even and odd numbers\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 == 1), None)\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # find the first even number\n    even_found = False\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_found = True\n            break\n    \n    # find the first odd number\n    odd_found = False\n    for i in range(len(list1)):\n        if list1[i] % 2 == 1:\n            odd_found = True\n            break\n    \n    if even_found and odd_found:\n        # return the difference of the first even and first odd numbers\n        return abs(list1[0] - list1[1])\n    else:\n        return \"No even or odd numbers found.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    diff = abs(even_count - odd_count)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = 0\n    odd_first = 0\n    \n    if len(list1) < 2:\n        return \"List should have at least two elements\"\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_first += num\n        else:\n            odd_first += num\n    \n    return abs(even_first - odd_first)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number\n    even_index = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n    \n    # Find the first odd number\n    odd_index = 0\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n    \n    # Check if even and odd numbers are found\n    if even_index == 0 or odd_index == 0:\n        return \"No even or odd numbers found in the list\"\n    \n    # Calculate the difference\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to decimal numbers\n    decimal1 = int(str1, 2)\n    decimal2 = int(str2, 2)\n\n    # Initialize variables to keep track of the swaps required\n    swaps = 0\n    i = j = k = 0\n\n    # Swap digits as long as there are no more swaps left\n    while i < len(str1) and j < len(str2):\n        if decimal1[i] > decimal2[j]:\n            decimal1, decimal2 = decimal2, decimal1\n            swaps += 1\n            i, j = j, i\n            k = 1\n        elif decimal1[i] < decimal2[j]:\n            i += 1\n        else:\n            j += 1\n            k = 0\n\n    # Add the remaining digits of decimal2 to decimal1\n    decimal1 += int(str2, 2)\n\n    # Convert decimal numbers back to binary strings and return the result\n    binary1 = bin(decimal1)[2:].zfill(len(str1))\n    binary2 = bin(decimal2)[2:].zfill(len(str2))\n\n    if binary1 == binary2:\n        return swaps\n    else:\n        return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # count the number of set bits in each binary string\n    count1 = count2 = 0\n    for i in range(len(str1)):\n        if str1[i] == '1':\n            count1 += 1\n        if str2[i] == '1':\n            count2 += 1\n    \n    # find the minimum number of swaps required to convert one binary string to another\n    if count1 == count2:\n        return 0\n    elif count1 > count2:\n        return 2*(count1 - count2)\n    else:\n        return 2*(count2 - count1)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2): \n    # converting both strings into binary numbers \n    num1 = int(bin(int(str1,2))[2:],2) \n    num2 = int(bin(int(str2,2))[2:],2) \n  \n    # XOR operation of two binary numbers \n    xor_num = num1 ^ num2 \n  \n    # Calculating number of set bits in the XOR result \n    count = bin(xor_num).count('1') \n  \n    # Counting minimum number of swaps required \n    min_swap = (count + 1) // 2 \n  \n    # Returning the minimum number of swaps required \n    return min_swap "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n    count = 0\n    n = len(str1)\n\n    # iterate over all possible substrings of length n\n    for i in range(n):\n        for j in range(i+1,n+1):\n            # check if the two substrings are equal\n            if str1[i:j] == str2[i:j]:\n                # calculate the number of swaps required\n                swap = 0\n                for k in range(n):\n                    if str1[k]!= str2[k]:\n                        swap += 1\n                # update the count of minimum swaps\n                count = min(count,swap)\n                # if the count is zero, return the count\n                if count == 0:\n                    return count\n    # if the count is still not zero, return it\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    # Convert strings to binary numbers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Iterate through all possible swaps between the two binary numbers\n    for i in range(len(str1)):\n        # Check if the i-th bit of num1 is 0 and the i-th bit of num2 is 1\n        if (num1 & (1 << i)) == 0 and (num2 & (1 << i)) == 1:\n            # If so, swap the i-th bit of num1 with the i-th bit of num2\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            # Increment the minimum number of swaps found so far\n            min_swaps = min(min_swaps, i)\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the bits of the binary strings\n    for i in range(len(str1)):\n        # If the bits are not equal, increment the result\n        if num1 & (1 << i)!= num2 & (1 << i):\n            result += 1\n\n        # XOR the bits of the binary strings\n        num1 = num1 ^ (1 << i)\n        num2 = num2 ^ (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to lists of 0 and 1\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n    n = len(num1)\n\n    # Initialize the swaps variable\n    swaps = 0\n\n    # Loop through all pairs of adjacent digits in both numbers\n    for i in range(n):\n        if num1[i]!= num2[i]:\n            # If the digits are not equal, swap the digits\n            num1[i], num2[i] = num2[i], num1[i]\n            # Increment the swaps count\n            swaps += 1\n\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # converting the strings to binary representation\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    # initializing two empty lists to store the digits of each binary number\n    arr1 = []\n    arr2 = []\n    # checking the length of each binary number and appending the digits to the corresponding list\n    for i in range(len(bin1)):\n        arr1.append(bin1[i])\n    for i in range(len(bin2)):\n        arr2.append(bin2[i])\n    # initializing a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n    # iterating through each digit of the binary number\n    for i in range(len(arr1)):\n        # checking if the two digits are the same\n        if arr1[i]!= arr2[i]:\n            # calculating the number of swaps required to swap the two digits\n            diff = int(arr1[i]) - int(arr2[i])\n            swaps = diff * (diff // 2) + (diff % 2)\n            # updating the minimum number of swaps if the current number of swaps is less\n            min_swaps = min(min_swaps, swaps)\n    # returning the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1)\n    # Create a list of length n+1, where each element is the maximum possible value of str2\n    max_list = [0] * (n+1)\n    # Iterate through each character in str1\n    for i in range(n) : \n        # If the current character is 0, then add 1 to the maximum value of str2\n        if str1[i] == '0' : \n            max_list[i+1] = max_list[i] + 1\n        # If the current character is 1, then subtract 1 from the maximum value of str2\n        else : \n            max_list[i+1] = max_list[i] - 1\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = n+1\n    # Iterate through each character in str2\n    for i in range(n) : \n        # If the current character is 0, then add 1 to the minimum number of swaps\n        if str2[i] == '0' : \n            min_swaps = min(min_swaps,max_list[i+1])\n        # If the current character is 1, then subtract 1 from the minimum number of swaps\n        else : \n            min_swaps = min(min_swaps,max_list[i])\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings as input, and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Initialize a variable to store the count of swaps required\n    swaps = 0\n    # Initialize two variables to store the lengths of the two binary numbers\n    len1, len2 = len(str1), len(str2)\n    # Initialize a variable to store the number of digits in the first binary number\n    num_digits = 0\n    # Initialize a variable to store the number of digits in the second binary number\n    num_digits2 = 0\n    # Iterate through each character in the first binary number\n    for i in str1:\n        # If the character is a digit, increment the number of digits in the first binary number\n        if i.isdigit():\n            num_digits += 1\n    # Iterate through each character in the second binary number\n    for i in str2:\n        # If the character is a digit, increment the number of digits in the second binary number\n        if i.isdigit():\n            num_digits2 += 1\n    # If the number of digits in the first binary number is less than the number of digits in the second binary number, swap the first and second binary numbers\n    if num_digits < num_digits2:\n        temp = str1\n        str1 = str2\n        str2 = temp\n        swaps += (num_digits2 - num_digits)\n    # If the number of digits in the second binary number is less than the number of digits in the first binary number, swap the first and second binary numbers\n    elif num_digits2 < num_digits:\n        temp = str1\n        str1 = str2\n        str2 = temp\n        swaps += (num_digits - num_digits2)\n    # Iterate through each character in the first binary number\n    for i in range(len1):\n        # If the characters in the two binary numbers are different, swap the characters and increment the count of swaps\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n    # Return the count of swaps required\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size of the tuples in bytes.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Size in bytes of the tuple: \")\n    for i in tuple_list:\n        sys.stdout.write(str(sys.getsizeof(i)) + \" \")\n    print()"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for tuple_element in tuple_list:\n        total_size += sys.getsizeof(tuple_element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes using sys.getsizeof() function\n    size = sys.getsizeof(tuple_list)\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        tuple_item = tuple_list[i]\n        if isinstance(tuple_item, str):\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n        elif isinstance(tuple_item, bytes):\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n        elif isinstance(tuple_item, int):\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n        elif isinstance(tuple_item, float):\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n        elif isinstance(tuple_item, complex):\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n        else:\n            total_size += sys.getsizeof(tuple_item) + sys.getsizeof(type(tuple_item))\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        for item in tup:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    i, j = 0, 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            else:\n                k -= 2\n            i += 1\n            j += 1\n\n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    i = j = 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    if k == 1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a value k and returns the kth smallest element from both arrays.\n    \"\"\"\n    i = j = 0\n    kth_elem = float('inf')\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if arr1[i] < kth_elem:\n                kth_elem = arr1[i]\n                k -= 1\n            i += 1\n        else:\n            if arr2[j] < kth_elem:\n                kth_elem = arr2[j]\n                k -= 1\n            j += 1\n            \n    return kth_elem"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                k -= 1\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                i += 1\n            else:\n                j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three parameters:\n    - arr1: a list of integers\n    - arr2: a list of integers\n    - k: an integer representing the position of the element we want to find\n    \n    This function returns the kth element from arr1, arr2, sorted.\n    '''\n    # Find the minimum of the two arrays\n    min_arr = [arr1[0], arr2[0]]\n    for i in range(1, min(len(arr1), len(arr2))):\n        if arr1[i] < min_arr[0]:\n            min_arr[0] = arr1[i]\n        elif arr2[i] < min_arr[1]:\n            min_arr[1] = arr2[i]\n    \n    # Find the index of the minimum element in the minimum array\n    min_arr_index = arr1.index(min_arr[0]) if min_arr[0] in arr1 else arr2.index(min_arr[0])\n    \n    # Find the kth element in the minimum array\n    if k <= len(min_arr[0]):\n        return min_arr[0]\n    else:\n        return find_kth(arr1[min_arr_index:], arr2[min_arr_index:], k - len(min_arr[0]))"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    :param arr1: first sorted array\n    :param arr2: second sorted array\n    :param k: value of k\n    :return: the kth element from the two sorted arrays\n    \"\"\"\n\n    i = j = 0  # initialize pointers for arr1 and arr2\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n\n    if k == 1:\n        if i < n1:\n            return arr1[i]\n        else:\n            return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    count = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n\n    # Initialize the variable to keep track of the index of the next element to return\n    next_index = 0\n\n    # Loop through the merged array and return the kth element\n    for i in range(len(merged_arr)):\n        if i == next_index:\n            return merged_arr[i]\n        if i == k - 1:\n            next_index += 1"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the sum of the squares of the digits in the number\n    num_str = str(number)\n    sum_of_squares = 0\n    for digit in num_str:\n        digit = int(digit)\n        square = digit ** 2\n        sum_of_squares += square\n    \n    # Compare the sum of squares with the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize a variable to store the sum of the power of each digit\n    power_sum = 0\n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer and raise it to the power of the number of digits in the number\n        digit_int = int(digit) ** len(number_str)\n        # Add the power of the digit to the power_sum variable\n        power_sum += digit_int\n    # Check if the power_sum equals the original number\n    if power_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, otherwise False.\n    \"\"\"\n    num_str = str(n)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    num_len = len(number_str)\n    sum_of_squares = 0\n    \n    for i in range(num_len):\n        digit = number_str[i]\n        digit_power = 0\n        \n        for j in range(num_len):\n            if j!= i:\n                digit_power += int(digit)**j\n        \n        sum_of_squares += digit_power\n        \n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    n_str = str(n)\n    n_len = len(n_str)\n    sum_of_cubes = 0\n    power = 1\n\n    for i in range(n_len):\n        power = power * int(n_str[i])\n\n    sum_of_cubes = sum_of_cubes + power\n\n    if n == sum_of_cubes:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number, length):\n    \"\"\"Return True if the given number is an Armstrong number, False otherwise.\"\"\"\n    total = 0\n    base = number\n    while number > 0:\n        digit = number % 10\n        total += digit ** length\n        number //= 10\n    return total == base\n\ndef armstrong_number(number):\n    \"\"\"Return True if the given number is an Armstrong number, False otherwise.\"\"\"\n    if not isinstance(number, int) or number < 0:\n        return False\n    return is_armstrong(number, len(str(number)))"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        temp_num = number\n        sum_of_squares = 0\n        while temp_num > 0:\n            digit = temp_num % 10\n            sum_of_squares += digit ** 3\n            temp_num //= 10\n        return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    n = int(n)\n    total = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a number is Armstrong or not.\n    \"\"\"\n    n = str(n)\n    sum_of_squares = 0\n    for i in range(len(n)):\n        square = int(n[i]) ** len(n)\n        sum_of_squares += square\n    if sum_of_squares == int(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the power of each digit of the number\n    sum_power = 0\n    \n    # Loop through each digit of the number and add the power of each digit to the sum\n    for digit in num_str:\n        digit = int(digit)\n        sum_power += digit ** len(num_str)\n    \n    # Compare the sum of the power of each digit with the original number\n    if sum_power == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Find the sum of first n natural numbers\n    sum = sum([i for i in range(1, number + 1)])\n    \n    # Find the average of first n natural numbers\n    average = sum / number\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    print(f\"The sum of the first {number} natural numbers is {sum}\")\n    print(f\"The average of the first {number} natural numbers is {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the value of n: \"))\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"The sum of first {} natural numbers is: {}\".format(n, sum))\n    print(\"The average of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char not in char_list:\n            char_list.append(char)\n        else:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If the string has no repeated character, it returns None.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate over the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    # initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, update its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n            \n    # initialize an empty string to store the first repeated character\n    first_char = ''\n    \n    # iterate through each character in the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] == 1:\n            first_char = char\n            break\n            \n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    \n    # iterate over the characters in the set and check if we find a character that appears more than once\n    for char in unique_chars:\n        count = str1.count(char)\n        if count > 1:\n            return char\n    \n    # if we've reached this point, there was no repeated character\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Loop through the string and count the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    '''\n    char_count = {}  # create an empty dictionary to store character counts\n    \n    for char in str1:\n        if char in char_count:  # if the character already exists in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else:\n            char_count[char] = 1  # if the character does not exist in the dictionary, add it with a count of 1\n    \n    for char, count in char_count.items():\n        if count > 1:  # if the count of the character is greater than 1, it is a repeated character\n            return char  # return the character\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through each character in the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] == 2:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit)**i == i**i for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(n):\n        if is_lucid(i):\n            lucid.append(i)\n    return lucid\n\ndef is_lucid(num):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    if num == 1:\n        return True\n    elif num % 2 == 0 and is_lucid(num // 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if i in lucid_numbers:\n            continue\n        for j in range(2, i//2+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_nums = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            j = 0\n            while j < i:\n                if i - j <= n:\n                    lucid_nums.append(i - j)\n                j += 1\n        i += 1\n\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check whether a given integer is lucid or not.\n    A number is lucid if the sum of its digits is equal to the number itself.\n    '''\n    digits_sum = 0\n    while num > 0:\n        digits_sum += num % 10\n        num //= 10\n    return digits_sum == num"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize a list to store the lucid numbers\n    ludic_numbers = []\n\n    # Loop through the integers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a lucid number by squaring it\n        j = i*i\n        # Check if j is greater than n\n        if j > n:\n            # If it is, add i to the list of lucid numbers\n            ludic_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    if n < 10:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    i = 1\n    while True:\n        if i >= n:\n            break\n        elif i == 1:\n            lucids.append(i)\n        elif i % 2 == 0:\n            lucids.append(i)\n            i += 2\n        else:\n            lucids.append(i)\n            i += 1\n    return lucids"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back together\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back together\n    reversed_s = \" \".join(reversed_words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces and store in a list\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words together with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number to check if it's prime: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the given number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # Check if the given number is divisible by any number other than 2 and itself\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(10))   # Output: False\nprint(prime_num(17))   # Output: True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern = re.compile(pattern)\n    \n    # Find all non-overlapping matches\n    matches = pattern.findall(text)\n    \n    # Check if there are any matches\n    if not matches:\n        return None\n    \n    # Return the first match and its start and end indices\n    match = matches[0]\n    start = text.find(match)\n    end = start + len(match)\n    return match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    for i, literal in enumerate(literals):\n        start = text.find(literal)\n        end = start + len(literal)\n        print(\"Literal: {}, Start index: {}, End index: {}\".format(literal, start, end))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return match.group(), start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regular expression pattern as input.\n    It uses the re module to search for the pattern in the string.\n    If a match is found, it returns the match, its start index, and its end index.\n    If no match is found, it returns None, None, None.\n    '''\n    matches = re.finditer(pattern, text)\n    \n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    \n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    This function will find the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*bell_Number(n//2)\n    else:\n        return 2*bell_Number(n//2) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return (1/2) * (n**2) * (2*n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(n):\n        a = a * i\n        b = b * (i + 1)\n        c = c * (n - i)\n    return c"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize a variable to store the result \n    result = 0\n    # Initialize a variable to store the current number \n    current_num = 1\n    # Check if the input value of n is less than or equal to 0 \n    if n <= 0: \n        return result\n    # Check if the input value of n is 1 \n    elif n == 1: \n        return current_num\n    # Check if the input value of n is greater than 1 \n    else: \n        # Initialize a variable to store the previous number \n        prev_num = 1\n        # Loop through the range of n \n        for i in range(2, n+1): \n            # Multiply the previous number by 2 \n            prev_num *= 2\n            # Add the result of previous number and current number \n            result += prev_num\n            # Update the current number to the previous number \n            current_num = prev_num\n        # Return the result \n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first two bell numbers\n    bell1 = 1\n    bell2 = 1\n\n    # Calculate the nth bell number\n    for i in range(3, n+1):\n        bell = bell1 + bell2\n        bell1 = bell2\n        bell2 = bell\n\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # initialize bell numbers to 0\n    bell = [0] * (n + 1)\n    # initialize sum of bell numbers to 0\n    sum_bell = 0\n    # set the first two bell numbers\n    bell[0] = 1\n    bell[1] = 1\n    # iterate through each bell number up to n\n    for i in range(2, n + 1):\n        # add the previous bell number to the current bell number\n        bell[i] = bell[i-1] + bell[i-2]\n        # add the current bell number to the sum of bell numbers\n        sum_bell += bell[i]\n    # print the nth bell number and the sum of bell numbers\n    print(f\"The {n}th bell number is {bell[n]} and the sum of the {n} bell numbers is {sum_bell}.\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1)) + bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2*bell_Number(n-1) - bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    L -= 1 # since we are removing the k'th element, we need to decrement L by 1\n    for i in range(len(list2)-1, L, -1): # from the end of the list to the k'th element, backwards\n        list2.pop(i)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k >= len(list1):\n        return list1\n    \n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Create a new list to store the elements of the original list\n    new_list = []\n\n    # Iterate through the original list\n    for i in range(len(list1)):\n\n        # If the current index is not equal to the k'th index, add the current element to the new list\n        if i!= L-1:\n            new_list.append(list1[i])\n\n    # Return the new list with the k'th element removed\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    while k < len(list1)-1:\n        list1[k] = list1[k+1]\n        k += 1\n    return list1[:-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    new_list = list1.copy()\n    for i in range(n):\n        if i!= k:\n            new_list[i] = list1[i+1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if the list is empty\n    if not list1:\n        return list1\n    \n    # initialize the index of the element to remove\n    k = L - 1\n    \n    # iterate through the list and remove the k'th element\n    for i in range(len(list1)):\n        if i == k:\n            del list1[i]\n        else:\n            list1[i] = list1[i+1]\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return \"Invalid Input: L should be less than or equal to the length of the list.\"\n    elif L == 0:\n        return []\n    elif L == 1:\n        return list1[1:]\n    else:\n        new_list = []\n        for i in range(0, len(list1)-L):\n            new_list.append(list1[i])\n        return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the length of the first list (number of rows)\n    num_rows = len(test_list)\n    # Initialize a variable to store the max value of then'th column\n    max_val = 0\n    # Loop through each row of the matrix and compare the value of then'th column to the current max value\n    for i in range(num_rows):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_value to the smallest possible integer\n    max_value = -2147483648\n\n    # loop through the matrix\n    for row in test_list:\n        # find the nth column\n        nth_column = [row[i] for i in range(len(row)) if i % N == 0]\n\n        # find the maximum value in the nth column\n        nth_column_max = max(nth_column)\n\n        # update max_value if the nth column's maximum is greater\n        if nth_column_max > max_value:\n            max_value = nth_column_max\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, test_list[i][N-1])\n        elif test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    col_max = []\n    \n    for i in range(n):\n        col_max.append(max(test_list[i][j] for j in range(m)))\n    \n    return col_max[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1], test_list[i][N-2])\n        for j in range(len(test_list[0])-1):\n            if test_list[i][j] > max_val:\n                max_val = test_list[i][j]\n        test_list[i][N-1] = max_val\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = max(test_list[i][N-1])\n        elif max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == N-1:\n            print(max(test_list[i]))\n        else:\n            pass"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i][N-1]))\n    return max_col"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        first_list = lst[i][0]\n        second_list = lst[i][1]\n        merged_list.append([first_list, second_list])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            cum_sum = test_list[0][1]\n        else:\n            cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum as 0\n    cumulative_sum = 0\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple contains only integers\n        if all(isinstance(x, int) for x in tup):\n            # Loop through the tuple to calculate the cumulative sum\n            for val in tup:\n                cumulative_sum += val\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through the tuple list\n    for tup in test_list:\n        # Extract the value from the tuple\n        val = tup[0]\n        # Add the value to the cumulative sum\n        cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in nums:\n        total = sum(i)\n        avg.append(total/len(i))\n    return avg"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns the average value for each tuple as a list.\n    '''\n    average_values = []\n    for num_tuple in nums:\n        num_list = list(num_tuple)\n        average = sum(num_list) / len(num_list)\n        average_values.append(average)\n    return average_values"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        if len(tup) == 1:\n            avg_list.append(tup[0])\n        else:\n            avg_list.append(sum(tup) / len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values for each tuple\n    averages = []\n    # loop through each tuple in the input tuple\n    for t in nums:\n        # loop through each element in the tuple\n        total = 0\n        count = 0\n        for i in t:\n            # add each element to the running total and count\n            total += i\n            count += 1\n        # calculate the average and append it to the list of averages\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum += i\n        avg = sum / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for t in nums:\n        total += sum(t)\n        count += 1\n    if count == 0:\n        return []\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples do not have the same length.\")\n        return\n    \n    # perform element-wise modulo on the two tuples\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples are not the same length\")\n        return\n\n    # Loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform element wise modulo\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    \n    # Perform element-wise modulo\n    modulo_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps: The number of steps to reach (d, 0) from origin.\n    d: The distance to reach (d, 0) from origin.\n\n    Returns:\n    The number of jumps required to reach (d, 0) from origin.\n    \"\"\"\n    # Initialize the number of jumps required\n    jumps = 0\n    # Initialize the remaining distance\n    remaining_distance = steps\n    # Initialize the remaining steps\n    remaining_steps = steps\n\n    # Loop until remaining distance is zero\n    while remaining_distance > 0:\n        # Calculate the next step\n        next_step = min(remaining_distance, remaining_steps)\n        # Update the remaining distance and remaining steps\n        remaining_distance -= next_step\n        remaining_steps -= next_step\n        # Increment the number of jumps\n        jumps += 1\n\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes in the length of the steps and the distance d as input. It then calculates the minimum number of jumps required to reach the point (d, 0) from the origin.\n\n    Steps: A list of integers representing the number of steps to reach the point (d, 0).\n    d: An integer representing the distance from the origin to reach the point (d, 0).\n\n    Returns: An integer representing the minimum number of jumps required to reach the point (d, 0) from the origin.\n    '''\n\n    # Initialize variables for the current and previous steps.\n    curr_step = 0\n    prev_step = 0\n\n    # Iterate through the list of steps.\n    for i in range(1, len(steps)):\n        # Calculate the number of jumps required to reach the current step.\n        jumps = steps[i] - prev_step\n\n        # If the current step is greater than the distance, calculate the number of jumps required to reach the point (d, 0).\n        if steps[i] > d:\n            jumps = int(d / steps[i]) + 1\n\n        # Update the variables for the current and previous steps.\n        curr_step = steps[i]\n        prev_step = steps[i-1]\n\n        # Return the minimum number of jumps required.\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= d:\n        return 0\n    else:\n        n = steps - d\n        return min_Jumps(n, d) + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # Check if the given point is within the range of (0, 0)\n    if d < 0 or d > steps:\n        return -1\n\n    # Create a table to store the minimum number of jumps required to reach each point\n    table = [[float('inf') for j in range(steps + 1)] for i in range(steps + 1)]\n\n    # Initialize the table with 0\n    for i in range(steps + 1):\n        table[0][i] = 0\n\n    # Fill the table\n    for i in range(1, steps + 1):\n        for j in range(1, steps + 1):\n            # Calculate the minimum number of jumps required to reach the point (i, j)\n            min_jumps = min(table[i - 1][k] + 1 for k in range(1, steps + 1) if j - k >= d)\n\n            # Update the table with the calculated minimum number of jumps\n            table[i][j] = min_jumps\n\n    return table[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    while i < len(steps) - 1:\n        if steps[i] == d:\n            jumps += 1\n            i += d\n        else:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    jumps = 0\n    i = 0\n    j = d\n    count = 0\n\n    # Check if the point is already at (0, d)\n    while (i, j)!= (0, 0):\n        # Count the number of jumps required to reach (0, 0)\n        if (i, j) == (0, d):\n            count += 1\n        # Move to the next position\n        i += 1\n        j -= 1\n        jumps += 1\n\n    # Return the number of jumps required to reach (0, 0)\n    return jumps + count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps == 1:\n        return 1\n    \n    count = 1\n    temp = steps - 1\n    \n    while temp >= d:\n        count += 1\n        temp -= d\n        \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # define a function to check if a point can be reached with the given length\n    def can_reach_point(x, y, length):\n        # check if the point can be reached from (0, 0) with the given length\n        if x == 0 and y == 0:\n            return True\n        # check if the point can be reached from (x, y) with the given length\n        if y == d and x < steps:\n            return True\n        # check if the point can be reached from (x+1, y-1) with the given length\n        if x+1 < steps and abs(x-y) == abs(steps-y):\n            return True\n        return False\n    \n    # initialize variables\n    min_jumps = float('inf')\n    x = 0\n    y = 0\n    length = 0\n    \n    # check if the starting point can be reached with the given length\n    while x < steps and y >= 0 and length <= steps:\n        if can_reach_point(x, y, length):\n            # update the minimum number of jumps\n            if length < min_jumps:\n                min_jumps = length\n            # move the point to the next step\n            x += 1\n            y -= 1\n            length += 1\n        else:\n            # move the point to the next step\n            x += 1\n            y -= 1\n            length += 1\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # initialize variables\n    n = len(steps)\n    jumps = 0\n    current_pos = 0\n    last_pos = 0\n    prev_pos = 0\n    \n    # loop through steps and check for jumps\n    for i in range(n):\n        \n        # check if we need to jump\n        if steps[i]!= 0:\n            \n            # check if we have reached the destination point\n            if steps[i] == d:\n                return jumps + 1\n            \n            # check if the distance from the current position to the destination is greater than the current distance to the destination\n            if steps[i] > abs(d - current_pos):\n                jumps += 1\n            \n            # update current position and previous position\n            current_pos += steps[i]\n            prev_pos = current_pos\n            \n    # check if we reached the destination point\n    if current_pos == d:\n        return jumps + 1\n    \n    # if we have not reached the destination point, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    count = 0\n    i = 0\n    start = 0\n    \n    # Loop till we reach the end of the list\n    while i < len(steps):\n        # If we have reached the end point, increment the count and move to the next index\n        if steps[i] == d:\n            count += 1\n            start = i\n            i += 1\n        # If we have not reached the end point, move to the next index\n        else:\n            i += 1\n    \n    # Return the count of jumps required\n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"The divisor cannot be zero.\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the elements of the lists\n    for i in range(len(nums1)):\n        # compute the elementwise division of the corresponding elements\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have equal lengths\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists are the same\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # create an empty list to store the result\n    result = []\n\n    # loop through the two lists\n    for i in range(len(nums1)):\n        # perform the division and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    # Divide each element of the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('Cannot divide by zero')\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing variables\n    nums_found = False\n    numbers = ''\n    string = test_str\n    \n    # looping through the string\n    for char in string:\n        # if the character is a number, add it to the numbers variable\n        if char.isdigit():\n            numbers += char\n            nums_found = True\n        # if the character is not a number and there are numbers found, move them to the end of the string\n        elif nums_found:\n            if char.isalpha() or char.isspace():\n                numbers += char\n            else:\n                string = string[:string.index(char)] + numbers + string[string.index(char):]\n                break\n        else:\n            numbers += char\n    \n    # if no numbers were found in the string, return the original string\n    if not nums_found:\n        return test_str\n    \n    # return the final string\n    return string"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    nums.reverse()\n    for i in range(len(nums)):\n        test_str = test_str.replace(nums[i], '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_found = False\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n            result += char\n        else:\n            if num_found:\n                result = result[:-1] + char\n                num_found = False\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize an empty list to store the numbers\n    nums = []\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the list\n            nums.append(char)\n        # Check if the character is a non-number\n        else:\n            # If the current character is not a number, move all the numbers to the end of the string\n            for i in range(len(nums)):\n                # Move the current number to the end of the string\n                test_str = test_str[:i] + nums[i] + test_str[i+1:]\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    for num in numbers:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables to store numbers and non-numbers\n    nums = []\n    other_chars = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the list of numbers\n        if char.isdigit():\n            nums.append(char)\n        # Otherwise, add it to the list of other characters\n        else:\n            other_chars.append(char)\n    \n    # Concatenate the numbers and other characters lists to get the final string\n    final_str = ''.join(nums + other_chars)\n    \n    # Return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(test_str)\n\n    # Initialize the index to keep track of the first digit\n    i = 0\n\n    # Iterate over the list of characters\n    while i < len(lst):\n        # If the current character is a digit, move it to the end of the list\n        if lst[i].isdigit():\n            lst.pop(i)\n            lst.insert(0, lst.pop(i))\n        else:\n            # Increment the index to move to the next character\n            i += 1\n\n    # Convert the list of characters back to a string\n    result = ''.join(lst)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    # list to store all numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            num_list.append(char)\n\n    # join the numbers in the list into a string\n    new_str = ''.join(num_list)\n\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of characters and store them in a list\n    char_list = list(test_str)\n    # initialize two variables to keep track of the start and end of the number range\n    start = 0\n    end = -1\n    # loop through each character in the list\n    for i in range(len(char_list)):\n        # if the current character is a number, update the start and end indices\n        if char_list[i].isdigit():\n            start = i\n            end = -1\n        # if the current character is not a number, update the end index\n        elif char_list[i]!='':\n            end = i\n    # check if there are any numbers in the string\n    if start == 0 and end == -1:\n        return test_str\n    # move the numbers to the end of the string\n    for i in range(start, end, -1):\n        char_list[i], char_list[end] = char_list[end], char_list[i]\n    # join the characters in the list into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    largest = 0\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            largest += 1\n        else:\n            largest = 0\n        if largest > largest:\n            largest = largest\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_length = 0\n    start = 0\n    end = 0\n    visited = {}\n    \n    while end < len(a):\n        if a[end] % 2 == 0:\n            if a[end] in visited:\n                start = visited[a[end]] + 1\n            else:\n                start = end + 1\n            visited[a[end]] = end\n            current_length = end - start + 1\n            if current_length > max_length:\n                max_length = current_length\n        end += 1\n    \n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    subset_size = 0\n    current_subset = [a[0]]\n\n    # Loop through the sorted list\n    for i in range(1, len(a)):\n\n        # Check if the current element is divisible by the current element of the previous subset\n        if a[i] % current_subset[-1] == 0:\n\n            # If it is divisible, add it to the current subset and increase the size of the subset\n            current_subset.append(a[i])\n            subset_size += 1\n\n        # If the current element is not divisible by the current element of the previous subset,\n        # check if it can be added to the next subset\n        elif len(current_subset) > 1 and a[i] % current_subset[-2] == 0:\n\n            # If it can be added, do it and decrease the size of the current subset\n            current_subset.pop()\n            subset_size -= 1\n\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # Initialize an array to store the size of subsets\n    subset_sizes = [1] * n\n    # Initialize two pointers: left and right\n    left = 0\n    right = 0\n    # Iterate through the list\n    while right < n:\n        # If the element at the right pointer is divisible by the current subset size, then update the subset size\n        if a[right] % subset_sizes[left] == 0:\n            subset_sizes[left] += 1\n            # If the subset size is larger than the current largest subset size, update the largest subset size\n            if subset_sizes[left] > subset_sizes[right]:\n                subset_sizes[right] = subset_sizes[left]\n            # Move the left pointer to the right until the element at the right pointer is not divisible by the subset size\n            left += 1\n        else:\n            # Move the right pointer to the right\n            right += 1\n    # Return the largest subset size\n    return subset_sizes[right]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for storing the current subset and its size\n    curr_subset = []\n    curr_size = 0\n\n    # Iterate through the list\n    for num in a:\n        # If the current number is even, add it to the current subset and increment its size\n        if num % 2 == 0:\n            curr_subset.append(num)\n            curr_size += 1\n        # If the current number is odd, add it to the current subset and decrement its size\n        else:\n            curr_subset.append(num)\n            curr_size -= 1\n\n        # Check if the current subset is divisible by 2\n        if curr_size % 2 == 0:\n            # If it is, return the current subset size\n            return curr_size\n\n    # If the loop completes without finding a divisible subset, return 0\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a set of all possible pairs\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.add((a[i], a[j]))\n    \n    # Find the maximum size of subset\n    max_size = 0\n    for pair in pairs:\n        if all(pair[0] % divisor == 0 for divisor in pair):\n            if len(pair) > max_size:\n                max_size = len(pair)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a list of pairs, where each pair is a tuple of two elements from the input list\n    pairs = [(a[i], a[j]) for i in range(len(a)) for j in range(i+1, len(a))]\n    # Sort the list of pairs in ascending order by the first element of each pair\n    pairs.sort(key=lambda x: x[0])\n    # Initialize variables to keep track of the largest subset size and the largest subset itself\n    largest_subset_size = 0\n    largest_subset = []\n    # Loop through the sorted list of pairs\n    for pair in pairs:\n        # Calculate the size of the current subset\n        subset_size = max(pair[0], pair[1]) - min(pair[0], pair[1])\n        # Update the largest subset size and subset if the current subset is larger\n        if subset_size > largest_subset_size:\n            largest_subset_size = subset_size\n            largest_subset = [pair[0], pair[1]]\n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    max_size = 1\n    start = 0\n    \n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            start = i\n            max_size += 1\n        else:\n            start = 0\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset_size = 1\n    current_subset_size = 1\n    current_subset = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n            current_subset_size += 1\n            if current_subset_size > max_subset_size:\n                max_subset_size = current_subset_size\n        else:\n            if current_subset_size > max_subset_size:\n                max_subset_size = current_subset_size\n            current_subset = [a[i]]\n            current_subset_size = 1\n    if current_subset_size > max_subset_size:\n        max_subset_size = current_subset_size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n    # initialize the result\n    result = 0\n    # loop through each number in the list\n    for i in range(len(a)):\n        # calculate the size of the largest subset that satisfies every pair being divisible\n        size = i + 1\n        # check if the current size is larger than the current result\n        if size > result:\n            result = size\n    # return the result\n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize the result\n    result = []\n\n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the sum of the two arrays\n    total_sum = sum(arr1) + sum(arr2)\n\n    # Calculate the difference between the total sum and the sum of the two sorted arrays\n    total_diff = total_sum - (sum(arr1) + sum(arr2))\n\n    # Calculate the mid indices of the two sorted arrays\n    mid1 = n // 2\n    mid2 = (n + 1) // 2\n\n    # Check if the total difference is even or odd\n    if total_diff % 2 == 0:\n        # If even, the median is the average of the two middle elements\n        result.append((arr1[mid1 - 1] + arr1[mid1]) / 2)\n        result.append((arr2[mid2 - 1] + arr2[mid2]) / 2)\n    else:\n        # If odd, the median is the middle element\n        result.append((arr1[mid1 - 1] + arr1[mid1]) / 2)\n\n    # Return the result\n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        # if n is even, return the average of the middle two elements\n        return (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4.0\n    else:\n        # if n is odd, return the middle element\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same length.\")\n    mid1 = n // 2\n    mid2 = (n + 1) // 2\n    if arr1[mid1] < arr2[mid2]:\n        return get_median(arr1[mid1:], arr2, n)\n    else:\n        return get_median(arr1, arr2[mid2:], n)\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists and return the median\n    merge_sort(arr1)\n    merge_sort(arr2)\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if len(arr1) % 2 == 0:\n        return (arr1[i-1] + arr1[i]) / 2\n    else:\n        return arr1[i]\n\ndef merge_sort(arr):\n    '''\n    Merge sort algorithm for sorting a list in ascending order.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    '''\n    Merge two sorted lists in ascending order.\n    '''\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of size n and finds their median.\n    \"\"\"\n    # Find the minimum value of the two lists\n    min_val = min(arr1[0], arr2[0])\n\n    # Find the index of the minimum value in the first list\n    min_index = arr1.index(min_val)\n\n    # Find the value at that index in the first list\n    min_val_in_list1 = arr1[min_index]\n\n    # Find the value at that index in the second list\n    min_val_in_list2 = arr2[min_index]\n\n    # Check if the minimum value is present only in one of the lists\n    if min_val_in_list1 == min_val and min_val_in_list2 == min_val:\n        # If it is, find the median by returning the value at that index\n        return min_val_in_list1\n\n    # If the minimum value is present in both lists, find the median by\n    # returning the average of the values at those indices\n    elif min_val_in_list1 == min_val or min_val_in_list2 == min_val:\n        # If it is, find the median by returning the average of the values at those indices\n        median = (min_val_in_list1 + min_val_in_list2) / 2\n        return median\n\n    # If the minimum value is present only in the second list, find the median by\n    # returning the value at that index\n    else:\n        # If it is, find the median by returning the value at that index\n        return min_val_in_list2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted arrays\n    arr = sorted(arr1 + arr2)\n\n    # Calculate the median index\n    mid = n // 2\n\n    if n % 2 == 0:\n        # If the median index is even, return the average of the two middle elements\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        # If the median index is odd, return the middle element\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have same size\")\n\n    if n > len(arr1):\n        raise ValueError(\"n must be less than or equal to the length of the first list\")\n\n    mid_index = n // 2\n\n    if n % 2 == 0:\n        # Find the median of two middle elements\n        median1 = arr1[mid_index - 1]\n        median2 = arr2[mid_index - 1]\n        median = (median1 + median2) / 2\n    else:\n        # Find the median of the middle element\n        median1 = arr1[mid_index]\n        median2 = arr2[mid_index]\n        median = median1\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # concatenate the two arrays\n    arr = arr1 + arr2\n\n    # sort the array\n    arr.sort()\n\n    # calculate the median\n    if n % 2 == 1:\n        median = arr[n//2]\n    else:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # Calculate the median\n    if n % 2 == 0:\n        # If n is even, return the average of the middle two elements\n        median = (sorted_arr[n//2-1] + sorted_arr[n//2]) / 2\n    else:\n        # If n is odd, return the middle element\n        median = sorted_arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1) > n:\n        arr1 = arr1[:n]\n    elif len(arr1) < n:\n        arr1 += [0] * (n - len(arr1))\n    if len(arr2) > n:\n        arr2 = arr2[:n]\n    elif len(arr2) < n:\n        arr2 += [0] * (n - len(arr2))\n\n    arr1.sort()\n    arr2.sort()\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if len(arr1) % 2 == 1:\n        median = arr1[mid1]\n    else:\n        median = (arr1[mid1] + arr1[mid1 - 1]) / 2\n\n    if len(arr2) % 2 == 1:\n        median2 = arr2[mid2]\n    else:\n        median2 = (arr2[mid2] + arr2[mid2 - 1]) / 2\n\n    return median, median2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        return \"Invalid input. Please provide a string.\""
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # store the length of the list\n    length = len(newList)\n    # check if the list has less than 2 elements\n    if length < 2:\n        return \"Error: List must have at least 2 elements.\"\n    # swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) >= 2:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        return newList\n    else:\n        return \"List must have at least two elements.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # getting the length of the list\n    length = len(newList)\n    # swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # printing the modified list\n    print(\"Modified List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # if the list has only one element, return the list\n    if length == 1:\n        return newList\n    # swap the first and last element in the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # return the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Calculate the semi-perimeter of the semicircle\n    semicircle_perimeter = 2 * r\n    \n    # Calculate the area of a triangle with sides of length sqrt(3) * r\n    area = math.sqrt(3) * r ** 2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = math.pi * r ** 2\n    \n    return max_area - area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # Calculate the area of the largest triangle with semi-perimeter of sqrt(2r)\n    area = (1 - (1/3)) * (d ** 3)\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # function to calculate the sine of a given angle\n    def sin(angle):\n        return round(math.sin(angle), 6)\n\n    # function to calculate the cosine of a given angle\n    def cos(angle):\n        return round(math.cos(angle), 6)\n\n    # function to calculate the area of a triangle with given base and height\n    def triangle_area(base, height):\n        return 0.5 * base * height\n\n    # function to calculate the area of a triangle with given base and height and an angle of 90 degrees\n    def triangle_area_90(base, height):\n        return triangle_area(base, height)\n\n    # function to calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def largest_inscribed_triangle(radius):\n        area = 0.0\n        angle = 0.0\n        while angle <= 360:\n            # find the area of the triangle with given base and height and angle\n            triangle_area_angle = triangle_area(radius * cos(angle), radius * sin(angle))\n            # update the area if the area is greater than the current max\n            if triangle_area_angle > area:\n                area = triangle_area_angle\n            # move to the next angle\n            angle += 1.0\n        return area\n\n    return largest_inscribed_triangle(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Base cases:\n    if r == 0:\n        return 0\n    elif r == 1:\n        return 1/3\n    else:\n        # Calculate the area of a right triangle with the given radius\n        a = 2 * r\n        # Calculate the area of a triangle with sides of length sqrt(3)/2 and opposite side a\n        b = (2/3) * r\n        # Calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n        c = a**2 + b**2 - r**2\n        return (c**0.5) * ((2/3) * r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of a triangle using Heron's formula\n    s = (3*r**2)/((1+2*r)**2)\n    \n    # The area of the largest triangle that can be inscribed in the semicircle is the product of the given radius and its area\n    area = r*s\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    \n    # Formula to find the area of a triangle given the semi-perimeter\n    area = 0.5 * r * (r ** 2)\n    \n    # Calculate the maximum possible area of a triangle that can be inscribed in a semicircle with radius r\n    max_area = 0.5 * r ** 2\n    \n    return area, max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r**2) / (4 * math.tan(math.pi/3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 3 * r * r  # semiperimeter of the largest triangle\n    a = (s ** 0.5) * (s ** 0.5)  # semiperimeter of the inscribed triangle\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Use the Heron's formula to find the semi-perimeter of the triangle\n    semi_perimeter = (3 * r**2) / math.sqrt(3)\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - r) * (semi_perimeter - 2 * r))\n\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 3 * math.pi * r ** 2\n    A = math.sqrt(s) / 2\n    return A"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): a sorted list of natural numbers.\n        start (int, optional): start index of the search range (default 0).\n        end (int, optional): end index of the search range (default None, which means the last element).\n\n    Returns:\n        int: the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n\n        if array[i] > i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If no end value is provided, assume the length of the array is the end value\n    if end is None:\n        end = len(array)\n\n    # Initialize the missing number to be the start value\n    missing_number = start\n\n    # Iterate through the array and compare each value with the missing number\n    for num in array:\n        if num < missing_number:\n            missing_number = num + 1\n\n    # Return the missing number\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array - A sorted list of natural numbers.\n    start - An optional integer representing the starting index for the search. Defaults to 0.\n    end - An optional integer representing the ending index for the search. Defaults to the last index of the array.\n\n    Returns:\n    An integer representing the smallest missing number in the array.\n\n    '''\n\n    if end is None:\n        end = len(array)-1\n\n    while start<=end:\n\n        mid = (start+end)//2\n\n        if array[mid] == mid:\n            start = mid+1\n        else:\n            end = mid-1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a list of natural numbers and returns the smallest missing number from the list.\n\n    Args:\n        array (list): A list of natural numbers.\n        start (int): An optional parameter to specify the starting index of the range to search for the missing number.\n        end (int): An optional parameter to specify the ending index of the range to search for the missing number.\n\n    Returns:\n        int: The smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: list of natural numbers\n    :param start: starting index of the range to search in the array, defaults to 0\n    :param end: ending index of the range to search in the array, defaults to None\n    :return: the smallest missing number\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n\n        if i!= array[i] and abs(i - array[i])!= 1:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and finds the smallest missing number.\n    :param array: The sorted list of natural numbers.\n    :param start: The starting index of the sub-array.\n    :param end: The ending index of the sub-array.\n    :return: The smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is sorted or not\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        return \"Error: Array is not sorted!\"\n\n    # Find the smallest missing number\n    if end is None:\n        end = max(array)\n    missing_number = max(end + 1, 1)\n    while missing_number in array:\n        missing_number += 1\n\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in an array of natural numbers and returns the smallest missing number.\n\n    Parameters:\n    - array (list of int): An array of natural numbers.\n    - start (int): The starting index of the array. Default is 0.\n    - end (int): The ending index of the array. If None, defaults to the last index of the array.\n\n    Returns:\n    - int: The smallest missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Sort the array in ascending order\n    array.sort()\n\n    # Find the first missing number\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    # If there is no missing number, return the length of the array + 1\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    \n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing only the even numbers in the original list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # extract the coordinates of the element\n    x, y = ele\n\n    # add the four adjacent coordinates to the sublist\n    sub.extend([(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)])\n\n    # return the sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                sub.append((i, j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    return sub + [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # If sub is not specified, create an empty list\n    if sub is None:\n        sub = []\n\n    # Check if the element is a tuple or a list\n    if isinstance(ele, tuple):\n        # Extract the coordinates of the tuple\n        x, y = ele\n\n        # Check if the coordinates are within the range of the map\n        if 0 <= x < 4 and 0 <= y < 4:\n            # Add the current coordinate to the sub list\n            sub.append((x, y))\n\n            # Check if the current coordinate is a wall\n            if map[x][y] == 1:\n                # Check if there are any adjacent coordinates\n                if x - 1 >= 0 and map[x - 1][y] == 0:\n                    sub.append((x - 1, y))\n                if x + 1 < 4 and map[x + 1][y] == 0:\n                    sub.append((x + 1, y))\n                if y - 1 >= 0 and map[x][y - 1] == 0:\n                    sub.append((x, y - 1))\n                if y + 1 < 4 and map[x][y + 1] == 0:\n                    sub.append((x, y + 1))\n\n            # Recursively call the function for adjacent coordinates\n            for s in adjac((x, y), sub):\n                yield s\n        else:\n            # Skip the current coordinate and its adjacent coordinates\n            for s in adjac(ele, sub):\n                yield s\n\n    elif isinstance(ele, list):\n        # Recursively call the function for each element in the list\n        for e in ele:\n            for s in adjac(e):\n                yield s\n\n    else:\n        # Skip non-tuple and non-list elements\n        pass"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    :param ele: a coordinate tuple (x, y)\n    :param sub: a list of tuples representing the subsets of adjacent coordinates to be extracted (default: [])\n    :return: a list of tuples representing the subsets of adjacent coordinates of the given coordinate tuple\n    \"\"\"\n    x, y = ele\n    sub = sub or [(x, y)]\n    adjacents = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for coord in adjacents:\n        if coord not in sub:\n            sub.append(coord)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for x, y in sub:\n        if x+1 < len(ele) and y+1 < len(ele[x+1]):\n            adj.append((x+1, y+1))\n        if x-1 >= 0 and y+1 < len(ele[x-1]):\n            adj.append((x-1, y+1))\n        if x-1 >= 0 and y-1 >= 0:\n            adj.append((x-1, y-1))\n        if x+1 < len(ele) and y-1 >= 0:\n            adj.append((x+1, y-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    for i in range(4):\n        x, y = ele\n        if i == 0:\n            new_x = x\n            new_y = y - 1\n        elif i == 1:\n            new_x = x + 1\n            new_y = y - 1\n        elif i == 2:\n            new_x = x + 1\n            new_y = y\n        elif i == 3:\n            new_x = x + 1\n            new_y = y + 1\n        sub.append((new_x, new_y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = []\n    for i in range(max(0,x-1), min(10,x+1)+1):\n        for j in range(max(0,y-1), min(10,y+1)+1):\n            if (i,j)!= ele:\n                adj.append((i,j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj_coords = []\n    for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n        nx, ny = x + dx, y + dy\n        if (nx, ny) not in sub:\n            sub.append((nx, ny))\n            adj_coords.append((nx, ny))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(3):\n        for j in range(3):\n            if i!= ele[0] and j!= ele[1]:\n                adj.append((i,j))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    text = text.lower()\n    # Split the string into words\n    words = text.split()\n    # Iterate through the words and replace spaces with underscores\n    for i in range(len(words)):\n        words[i] = words[i].replace(\" \", \"_\")\n    # Join the words with underscores and convert the result back to string\n    result = \"\".join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # iterate through the string and replace spaces with underscores\n    text = text.replace(' ', '_')\n    # iterate through the string and replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Split the string into words\n    words = text.split()\n    # Replace spaces with underscores\n    words = [word.replace(' ', '_') for word in words]\n    # Join the words with underscores\n    result =''.join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces all the whitespaces in the given string with underscores and vice versa.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list.pop(count)\n        count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new list to store the non-zero elements of the original list\n    non_zero_list = []\n    # Loop through each element of the original list\n    for num in num_list:\n        # If the element is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Append the zero elements to the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(num_list[i])\n    # Copy the non_zero_list back into the original list\n    for i in range(len(non_zero_list)):\n        num_list[i] = non_zero_list[i]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list.pop(i)\n        else:\n            break\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Traverse the list from left to right\n    for i in range(len(num_list)):\n        # If the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[len(num_list) - 1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list) - 1]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Using two pointers to swap the zeroes with the non-zeroes\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # Traverse the list from the end to the beginning\n    for i in range(len(num_list)-1, -1, -1):\n        # If the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for j in range(len(zero_index)-1, -1, -1):\n        num_list.insert(zero_index[j]+1, zero_list[j])\n        del zero_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # use two pointers to traverse the list\n    # one from the beginning and one from the end\n    # if the current element is not zero, swap them\n    # continue swapping until the zero is in its correct position\n    i = 0\n    j = len(num_list) - 1\n    while i < j:\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers `arr` and its length `n` as input.\n    It returns the sum of the xor of all pairs of integers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of integers in the list.\n    \"\"\"\n    sum_of_pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_pair = arr[i] ^ arr[j]\n            sum_of_pairs += xor_pair\n    return sum_of_pairs"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n numbers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    # XOR function to find xor of two numbers\n    def xor(a, b):\n        return a ^ b\n\n    # XOR of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= xor(arr[i], arr[j])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize variables\n    xor_sum = 0\n    count = 0\n\n    # Loop through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the current pair of numbers and add to sum\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n            # Increment the count\n            count = count + 1\n\n    # Return the sum of xor of all pairs\n    return xor_sum, count"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of two numbers gives the sum of their bits.\n    def xor(a,b):\n        return a^b\n\n    # XOR of the first two numbers gives the last number.\n    # XOR of the last two numbers gives the first number.\n    # Repeat this until the sum of all the numbers is zero.\n    while n!=0:\n        n = xor(arr[0],arr[n-1])\n        arr.pop(0)\n        n = xor(arr[0],arr[n-1])\n        arr.pop(0)\n\n    # Now the sum of all the numbers is zero.\n    # The last number is the XOR of the first two numbers.\n    # So the sum of all the pairs of numbers is XOR of the first two numbers.\n    return xor(arr[0],arr[1])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    heap = hq.nlargest(len(iterable), iterable)\n    # Convert the max heap to a list\n    sorted_list = [heapq.heappop(heap) for _ in range(len(heap))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Convert the list into a min heap\n    heap = hq.nsmallest(len(iterable), iterable)\n\n    # Convert the min heap into a sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable into a list\n    lst = list(iterable)\n    n = len(lst)\n\n    # Build a max heap\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(lst, i, n)\n\n    # Extract elements from the heap and place them in the sorted list\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        hq.heapify(lst, 0, i)\n\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n    # build a max heap from the list\n    hq.heapify(arr)\n    # extract items from the heap\n    result = []\n    while arr:\n        # extract the maximum item from the heap\n        item = hq.heappop(arr)\n        # add it to the result list\n        result.append(item)\n    # return the result list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the given list to a max heap\n    heap = [heapq.heappushpop(None, x) for x in iterable]\n\n    # Convert the max heap back to a sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list to allow heapifying\n    lst = list(iterable)\n    # Use heapify to create a heap from the list\n    hq.heapify(lst)\n    # Iterate over the list and extract the maximum element at each step\n    for _ in range(len(lst)):\n        # Extract the maximum element from the heap\n        max_value = hq.heappop(lst)\n        # Insert the extracted element into the heap again (for the next max_value)\n        hq.heappush(lst, max_value)\n    # Convert the sorted list back to an iterable\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a max heap from the given list\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    # Extract the maximum element from the heap and add it to the sorted list\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    This function takes an iterable as input and returns the sorted list.\n    \"\"\"\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given iterable using heap sort algorithm.\n    \"\"\"\n    # Convert the iterable to a list so that we can use heapq library\n    lst = list(iterable)\n\n    # Build a max heap from the list\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, i, len(lst))\n\n    # Extract the maximum element from the heap and add it to the sorted list\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, 0, i)\n\n    return lst\n\n\ndef heapify(lst, i, n):\n    \"\"\"\n    Recursively heapify the subtree rooted at index i\n    \"\"\"\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and lst[left] > lst[largest]:\n        largest = left\n\n    if right < n and lst[right] > lst[largest]:\n        largest = right\n\n    if largest!= i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, largest, n)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort.\n    '''\n\n    # Convert the list to a max-heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and append it to the result list\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return True, \"Profitable sale\"\n    elif sale_amount == actual_cost:\n        return True, \"Exact profit\"\n    else:\n        return False, \"No profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount >= actual_cost:\n        return \"No profit\"\n    elif sale_amount >= actual_cost + 1:\n        return \"Partial profit\"\n    else:\n        return \"No loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"The sale amount is not profitable\")\n        return False\n    elif sale_amount >= actual_cost + sale_amount:\n        print(\"The sale amount is not lossless\")\n        return False\n    else:\n        print(\"The sale amount is profitable and lossless\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function takes two arguments - actual_cost and sale_amount.\n    It checks whether the sale amount has no profit and no loss.\n    \n    If the sale amount is greater than or equal to the actual cost, then it has no profit.\n    If the sale amount is greater than the actual cost, and the actual cost is less than or equal to the sale amount, then it has no profit.\n    \n    If the sale amount is less than the actual cost, then it has no loss.\n    If the sale amount is less than or equal to the actual cost, and the actual cost is greater than the sale amount, then it has no loss.\n    \n    If the sale amount is equal to the actual cost, then it has no profit and no loss.\n    '''\n    \n    # Check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost:\n        return True\n    # Check if the sale amount is greater than the actual cost and the actual cost is less than or equal to the sale amount\n    elif sale_amount > actual_cost and actual_cost <= sale_amount:\n        return True\n    # Check if the sale amount is less than the actual cost\n    elif sale_amount < actual_cost:\n        return True\n    # Check if the sale amount is less than or equal to the actual cost and the actual cost is greater than the sale amount\n    elif sale_amount <= actual_cost and actual_cost > sale_amount:\n        return True\n    # Check if the sale amount is equal to the actual cost\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments, actual_cost and sale_amount, and returns True if the given amount has no profit and no loss, False otherwise.\n\n    The function checks if the actual cost is greater than or equal to the sale amount. If yes, the function returns True, indicating that there is no profit and no loss.\n\n    If the actual cost is less than the sale amount, the function checks if the sale amount is greater than or equal to the actual cost. If yes, the function returns True, indicating that there is no loss but there is a profit.\n\n    If the actual cost is less than the actual cost but the sale amount is greater than the actual cost, the function returns False, indicating that there is a loss and no profit.\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return True\n    elif sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount >= actual_cost: \n        # profit\n        return False\n    elif sale_amount > 0:\n        # loss\n        return False\n    else:\n        # loss and profit\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount: \n        print(\"No profit and no loss\") \n        return True \n    else: \n        print(\"Profit or loss\") \n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 2.5 # constant value for temperature conversion from celsius to fahrenheit\n    f = 9/5 * c + 32 # formula for converting temperature from celsius to fahrenheit\n    u = v * math.sin(math.radians(t-f)) / 6 # formula for wind chill index calculation\n    return int(u + 0.5) # rounding to the nearest integer"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -273.15:\n        print(\"Error: Temperature must be a positive number in Celsius.\")\n        return None\n    elif v <= 0:\n        print(\"Error: Wind velocity must be greater than zero.\")\n        return None\n    else:\n        c = 26.85\n        m = 1.15\n        e = 6.112\n        f = math.sqrt(e * 1.8 - 459.67) / (e * 1.8)\n        fs = f * math.pow(math.sin(math.radians(t)), 2)\n        fc = f * math.cos(math.radians(t))\n        psi = v * c / (2 * (m * fs + fc * (3 + 0.6 * math.pow(fs, 2))))\n        if psi > 100:\n            psi = 100\n        return round(psi)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n        v (float): The wind velocity in km/h.\n        t (float): The temperature in celsius.\n        \n    Returns:\n        float: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert temperature to Kelvin\n    T = t + 273.15\n    \n    # Calculate wind chill index\n    c = 2.5 * math.log(T/10) + 32\n    \n    # Calculate wind chill temperature\n    if v >= 12:\n        wc = 13.12 + 0.6215*v + 11.37*math.exp(-0.16*v) - 0.3965*math.exp(-0.0013*v)\n    elif 6 <= v <= 11:\n        wc = 7.87 + 0.34*v + 5.67*math.exp(-0.07*v) - 0.14*math.exp(-0.00016*v)\n    else:\n        wc = 6.11 + 0.14*v + 3.5*math.exp(-0.07*v) - 0.059*math.exp(-0.00022*v)\n    \n    # Round wind chill index to the nearest integer\n    return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # Calculate the temperature difference between the current and previous temperatures\n    delta_t = abs(t_f - prev_t_f)\n\n    # Calculate the wind chill index using the formula (68.1*log(rh)) + 32\n    wci = round((68.1 * math.log(rh / 100)) + 32)\n\n    # Update the previous temperature\n    prev_t_f = t_f\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934  # convert km/h to mph\n    c = (23.7 + 0.6215 * t - 11.37 * math.log(wind_speed) + 0.3965 * t * math.log(wind_speed)) / (2.5 + 0.14 * math.log(wind_speed) + 0.014 * t + 0.0022 * t * math.log(wind_speed))\n    return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert celsius to fahrenheit\n    fahrenheit = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wci = ((13.12 + (0.6215 * v)) / (2.5 + (0.4275 * v))) * (fahrenheit - 32)\n    \n    # Round the wind chill index to the nearest integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    t = (t * 9/5) + 32\n\n    # calculate wind chill index\n    chill_index = (0.62197 * v ** 0.16) + ((t - 273.15) * 1.8) - 459.67\n\n    # round wind chill index to the nearest integer\n    chill_index = round(chill_index)\n\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0:\n        raise ValueError(\"Temperature must be a positive value.\")\n    elif v <= 0:\n        raise ValueError(\"Wind velocity must be a positive value.\")\n    else:\n        # convert temperature to Fahrenheit\n        t = (t * 1.8) + 32\n        \n        # calculate wind chill index\n        if v <= 10:\n            wc = 0\n        elif v <= 20:\n            wc = 13.12 + (0.6215*v) + (13.37*t) - (11.34*t**2) + (0.3965*t**3)\n        elif v <= 30:\n            wc = 35.74 + (0.4275*v) + (21.26*t) - (20.27*t**2) + (0.3491*t**3)\n        elif v <= 40:\n            wc = 58.59 + (0.2873*v) + (28.65*t) - (31.62*t**2) + (0.2775*t**3)\n        elif v <= 50:\n            wc = 78.07 + (0.1802*v) + (34.49*t) - (38.81*t**2) + (0.2224*t**3)\n        elif v <= 60:\n            wc = 91.7 + (0.1195*v) + (38.2*t) - (43.26*t**2) + (0.1745*t**3)\n        elif v <= 70:\n            wc = 100 + (0.0762*v) + (40.88*t) - (46.87*t**2) + (0.1438*t**3)\n        elif v <= 80:\n            wc = 103.4 + (0.0468*v) + (42.63*t) - (49.37*t**2) + (0.1212*t**3)\n        elif v <= 90:\n            wc = 102.9 + (0.0323*v) + (43.96*t) - (52.28*t**2) + (0.1053*t**3)\n        elif v <= 100:\n            wc = 100 + (0.0225*v) + (44.79*t) - (55.75*t**2) + (0.0919*t**3)\n        \n        # convert wind chill index to Fahrenheit and round to the nearest integer\n        wc = round(wc - 32)\n        \n        # return wind chill index\n        return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill temperature\n    if v <= 5:\n        w_c = 13.12 + (0.6215 * t_f) - (11.37 * math.log(v)) + (0.3965 * v**2)\n    elif 5 < v <= 10:\n        w_c = 11.37 + (0.3965 * t_f) - (0.567 * math.log(v)) + (0.0128 * v**2)\n    elif 10 < v <= 15:\n        w_c = 9.56 + (0.2373 * t_f) - (0.3568 * math.log(v)) + (0.0075 * v**2)\n    elif 15 < v <= 20:\n        w_c = 7.8 + (0.0862 * t_f) - (0.114 * math.log(v)) + (0.0013 * v**2)\n    elif 20 < v <= 25:\n        w_c = 6.1 + (0.0167 * t_f) - (0.0156 * math.log(v))\n    elif 25 < v <= 30:\n        w_c = 4.4 + (0.0018 * t_f)\n    else:\n        w_c = 2.8 + (0.0001 * t_f)\n    \n    # Calculate the wind chill index\n    w_ci = w_c - 273.15\n    \n    # Round wind chill index to the next integer\n    w_ci = math.ceil(w_ci)\n    \n    return w_ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert the temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the speed of sound\n    c = 1.4 * math.exp((17.625 * k) / (k + 243.04))\n\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v + 10.14 * (v ** 0.16) - 0.2373 * (v ** 0.16) ** 2\n\n    # Calculate the wind chill temperature\n    wct = wci - 459.67 * math.log(c)\n\n    # Round the wind chill temperature to the nearest integer\n    wct = round(wct)\n\n    return wct"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name.isalpha():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a variable to store the sum of lengths of the names that do not start with a lowercase letter\n    sum_of_names = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if not name[0].islower():\n            # Add the length of the name to the sum\n            sum_of_names += len(name)\n\n    # Return the sum of lengths of the names that do not start with a lowercase letter\n    return sum_of_names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    # Initialize the sum of names lengths to zero\n    total_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # Add the length of the name to the total length\n        total_length += len(name)\n    # Return the total length of names after removing lowercase-starting names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the list of names\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if it is, do not add the length of the name to the sum\n            continue\n        # if the first letter is not lowercase, add the length of the name to the sum\n        sum += len(name)\n    # return the sum of the lengths of the names that do not start with a lowercase letter\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            count += len(name)\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        name_length_sum += len(name)\n    return name_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize a variable to store the sum of lengths\n    total_length = 0\n    \n    # Iterate through each name in the sample names list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if name[0].isupper():\n            total_length += len(name)\n    \n    # Return the sum of all the lengths of the names that are not lowercase\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(([^()]+)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis\n    pattern = re.compile('\\([^)]*\\)')\n    # Replace the matched pattern with an empty string\n    items = pattern.sub('', items)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)' # regular expression pattern to match any parenthesis in the string\n    items = re.sub(pattern, '', items) # remove any matches using the regular expression pattern\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 0\n    j = 1\n    while i <= n:\n        if i == 0 or i == n:\n            nonagonal = 1\n        else:\n            nonagonal = j - i\n            if nonagonal % 2 == 0:\n                nonagonal += 1\n        print(nonagonal)\n        i += 1\n        j += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += (i**2 - i) * (2*i - 1)\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nonagonal_number(n):\n    return (n/2) * (n+1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    k = 0\n    nonagonal = 0\n\n    while i <= n:\n        nonagonal += (i * j)\n        k += 2\n        i += 1\n        j += 1\n\n    return nonagonal\n\nn = int(input(\"Enter a number: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"th nonagonal number is\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n + 1) // 2\n    return nonagonal\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Use the formula to find the nonagonal number\n    nonagonal_number = 2*n**2 - 1\n    \n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the count to 1\n    count = 1\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the current count is odd, add it to the sum\n        if count % 2 == 1:\n            sum += i\n        # Increment the count by 1\n        count += 1\n    # Return the sum of the nonagonal numbers\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    while a <= n:\n        if a**2!= b**2:\n            print(a)\n        a += 1\n        b += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # first two nonagonal numbers are 1 and 3\n    nonagonal1 = 1\n    nonagonal2 = 3\n\n    # loop through the remaining nonagonal numbers\n    for i in range(2, n):\n        # add the previous two nonagonal numbers to get the nth nonagonal number\n        nonagonal = nonagonal1 + nonagonal2\n        nonagonal1 = nonagonal2\n        nonagonal2 = nonagonal\n\n    # return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ][^zZ]*\\w*\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regex pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    # Find all non-overlapping occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Check if any matches were found\n    if matches:\n        # Iterate through matches and print out any that contain 'z'\n        for match in matches:\n            if 'z' in match.group():\n                print(match.group())\n    else:\n        print('No matches found.')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+(?=\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters and split into list\n    text_list = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate through list and check if 'z' is not at start or end\n    for word in text_list:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b' # match 'z' at the start and end of a word (except at the middle)\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word and check if it contains 'z' at the start and end\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            print(f\"The word '{word}' contains 'z' at the start and end.\")\n        elif word[0] == 'z':\n            print(f\"The word '{word}' starts with 'z'.\")\n        elif word[-1] == 'z':\n            print(f\"The word '{word}' ends with 'z'.\")\n        else:\n            print(f\"The word '{word}' doesn't contain 'z'.\")"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\b)z(?=\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through each word\n    for i in range(len(words)):\n        # Check if the word starts with 'z'\n        if words[i][0] == 'z':\n            # Check if the word is not the first or last word in the list\n            if i!= 0 and i!= len(words) - 1:\n                # Check if the word does not contain 'z'\n                if 'z' not in words[i]:\n                    # If all checks pass, print the word\n                    print(words[i])"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n // 2):\n        # swapping the elements at the current indices\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        # swapping the elements at the current indices\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # length of the array\n    n = len(input)\n    # if k is greater than n, swap all elements\n    if k > n:\n        k = n\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Split the input array into two parts\n    left = input[:k-1]\n    right = input[k-1:]\n\n    # Reverse the left part of the array\n    left = left[::-1]\n\n    # Merge the left part and right part of the array\n    output = left + right\n\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left = 0\n    right = k - 1\n\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n\n    for i in range(k-1, n-1, -1):\n        input[i], input[n-1] = input[n-1], input[i]\n        n -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto index k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # take the length of the array \n    n = len(input) \n    # take the value of the kth position \n    kth = input[k-1] \n    # start from kth position and move to the end of the array \n    for i in range(k-1, n-1): \n        # swap the element at i and the element at its next position \n        input[i], input[i+1] = input[i+1], input[i] \n    # replace the kth position with the last element in the array \n    input[k-1] = kth \n    # return the reversed array \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    # reverse the entire array\n    input[:] = input[:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n): \n        input[i], input[i-k] = input[i-k], input[i] "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    new_list = list(test_dict.items())\n    \n    # Add the list of tuples to the tuple\n    new_tup = test_tup + new_list\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict, **test_tup}\n    return new_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary by merging the two dictionaries\n    new_dict = {**test_dict, **test_tup}\n    # Return the new dictionary as a tuple\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Merge the two dictionaries into one dictionary\n    merged_dict = {**test_dict, **test_tup}\n    # Convert the merged dictionary into a tuple\n    merged_tup = tuple(merged_dict.values())\n    return merged_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup = tuple(test_tup)  # convert the tuple to a list so that we can add the dictionary\n    for key, value in test_dict.items():  # iterate over the dictionary items and add them to the tuple\n        test_tup += (key, value)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the key-value pairs from the input dictionary and the tuple\n    new_dict = {**test_dict, **test_tup}\n    # Convert the new dictionary to a tuple\n    new_tuple = tuple(new_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    test_tup = tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == n-1 and j == n-1: # base case: bottom right cell\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif j < n-1: # can move right\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif i < n-1: # can move down\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    path = [0] * n  # start with the first cell\n    current_avg = sum(cost[0])\n    visited_cells = 0\n    \n    # Define a function to move right or down\n    def move(x, y):\n        nonlocal visited_cells\n        if x < n - 1:\n            path[x] += 1\n            current_avg += cost[x+1][y]\n            visited_cells += 1\n            move(x+1, y)\n        if x > 0 and y < n - 1:\n            path[x] -= 1\n            current_avg -= cost[x-1][y]\n            visited_cells -= 1\n            move(x-1, y+1)\n    \n    # Start at top-left and move right or down\n    move(0, 0)\n    \n    # Find the maximum average\n    for i in range(1, n*n):\n        move(i % n, i // n)\n        if current_avg > max_avg:\n            max_avg = current_avg\n            max_path = path[:]\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i==N-1 and j==N-1:\n                continue\n            if i>0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[:i,:j]))\n            if j>0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[:,:j]))\n    return max_avg/((N*N-1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the maximum possible path length\n    N = len(cost)\n    max_path_length = (N*N + N)/2\n    \n    # Initialize variables to store the maximum average and the maximum path length\n    max_avg = 0\n    max_path = 0\n    \n    # Initialize a boolean variable to check if the current path is valid or not\n    is_valid = True\n    \n    # Loop through all possible paths of length up to the maximum possible path length\n    for path_length in range(1, max_path_length + 1):\n        \n        # Initialize variables to store the total cost and the number of visited cells\n        total_cost = 0\n        num_visited = 0\n        \n        # Initialize a boolean variable to check if we have already visited the top-left cell\n        is_visited_top_left = False\n        \n        # Loop through all possible paths of length up to the current path length\n        for i in range(N):\n            for j in range(N):\n                \n                # If the current cell is the bottom-right cell\n                if i == N - 1 and j == N - 1:\n                    # Update the total cost and the number of visited cells\n                    total_cost += cost[i][j]\n                    num_visited += 1\n                    \n                # If the current cell is not the bottom-right cell\n                elif i < N - 1 and j < N - 1:\n                    # Check if we have already visited the top-left cell\n                    if not is_visited_top_left:\n                        # Update the total cost and the number of visited cells\n                        total_cost += cost[i][j]\n                        num_visited += 1\n                        \n                        # Mark that we have visited the top-left cell\n                        is_visited_top_left = True\n                        \n                    # If we have not visited the bottom-right cell yet\n                    else:\n                        # Update the total cost and the number of visited cells\n                        total_cost += cost[i][j]\n                        num_visited += 1\n                        \n                        # Check if the current path is valid or not\n                        if (i == N - 1 and j == N - 2) or (i == N - 2 and j == N - 1):\n                            # If the current path is valid, update the maximum average and the maximum path length\n                            if num_visited == path_length:\n                                if total_cost / num_visited > max_avg:\n                                    max_avg = total_cost / num_visited\n                                    max_path = path_length\n                            # If the current path is not valid, skip the path\n                            else:\n                                is_valid = False\n                                break\n                        \n                        # If the current path is valid, update the maximum average and the maximum path length\n                        else:\n                            if num_visited == path_length:\n                                if total_cost / num_visited > max_avg:\n                                    max_avg = total_cost / num_visited\n                                    max_path = path_length\n                            # If the current path is not valid, skip the path\n                            else:\n                                is_valid = False\n                                break\n                        \n        # If the current path is not valid, break out of the loop\n        if not is_valid:\n            break\n    \n    # Return the maximum average and maximum path length\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        if i == 0:\n            continue\n        dp[i][1] = max(dp[i-1][1], cost[i][1])\n    for j in range(1, N):\n        dp[0][j] = max(dp[0][j-1], cost[0][j])\n        if j == 1:\n            continue\n        dp[1][j] = max(dp[1][j-1], cost[1][j])\n    for i in range(2, N):\n        for j in range(2, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg // (N-2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Creating a dictionary to store the cost of every cell\n    cost_dict = {}\n    # Initializing the cost of the top-left cell\n    cost_dict[(0,0)] = cost[0][0]\n    # Initializing the maximum average to be zero\n    max_avg = 0\n    \n    # Looping through all the cells of the matrix\n    for i in range(1,N):\n        for j in range(1,N):\n            # Checking if the current cell is a valid cell\n            if cost[i][j] == -1:\n                continue\n            \n            # Calculating the cost of the next cell in the same row\n            if j < N-1:\n                cost_dict[(i,j)] = cost[i][j] + min(cost_dict[(i,j+1)], cost_dict[(i-1,j)])\n            # Calculating the cost of the next cell in the same column\n            if i < N-1:\n                cost_dict[(i,j)] = cost[i][j] + min(cost_dict[(i+1,j)], cost_dict[(i,j-1)])\n            # Updating the maximum average if necessary\n            if i == N-1 and j == N-1:\n                max_avg = max(cost_dict[(i,j)], max_avg)\n    \n    # Returning the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n\n    def helper(i, j):\n        if i == N - 1 and j == N - 1:\n            path_cost = sum(cost[i][j])\n            return path_cost\n        if i == N - 1:\n            return helper(i, j + 1)\n        if j == N - 1:\n            return helper(i + 1, j)\n\n        down_avg = max(dp[i + 1][j], helper(i + 1, j))\n        right_avg = max(dp[i][j + 1], helper(i, j + 1))\n\n        dp[i][j] = cost[i][j] + down_avg + right_avg\n        return dp[i][j]\n\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, helper(i, j))\n\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                avg = dp[i][j]\n                if avg > max_avg:\n                    max_avg = avg\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]  # dynamic programming table\n    max_avg = 0\n    \n    # Fill the dp table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n                \n    # Find the maximum average\n    for i in range(N):\n        for j in range(N):\n            avg = dp[i][j] / (i+1 + j+1)\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    # Initialize variables\n    dp = [[0]*N for _ in range(N)]\n    # Fill dp table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]+cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]+cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    # Find maximum average\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            avg = dp[i][j] / (i+j+1)\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height >= h and weight >= w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # loop through the students dictionary\n    for name, info in students.items():\n        # extract the height and weight of each student\n        height, weight = info\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the list of filtered students\n            filtered_students.append(name)\n    # return the filtered students dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a dictionary to store the counts of values\n    count_dict = {}\n    # iterate through both lists\n    for i in range(len(nums1)):\n        # check if the value is already in the dictionary\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    # iterate through the second list and count the number of same values in the first list\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            count += 1\n            count_dict[nums2[i]] -= 1\n    # return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]), nums1[i] not in nums2[i:]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_pairs = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], num) for num in nums2):\n            same_pairs.append(i)\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    # Convert the base and power to strings\n    base_str = str(base)\n    power_str = str(power)\n\n    # Initialize the sum of digits to zero\n    sum_of_digits = 0\n\n    # Iterate through the base and power strings from left to right\n    for i in range(len(base_str)):\n        digit = int(base_str[i])\n        power_digit = int(power_str[i])\n\n        # Calculate the sum of digits based on the current digit and power digit\n        sum_of_digits += digit ** power_digit\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base is an integer, power is a non-negative integer\n    # return the sum of all digits of the base to the specified power\n    if base == 0:\n        return 0\n    else:\n        return base % 10 + power_base_sum(base // 10, power - 1)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        base //= 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    # convert the base to a string\n    base_str = str(base)\n    \n    # initialize the sum to 0\n    total = 0\n    \n    # iterate through the digits of the base string and calculate the sum to the power\n    for digit in base_str:\n        total += int(digit) ** power\n        \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of the digits of the base to the power\n    total = sum([int(digit) ** power for digit in str(base)])\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Loop through each digit in the string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum\n        sum_digits += digit_int ** power\n    # Return the sum\n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=\")(.+?)(?=\")')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regex to match between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    # remove empty strings from the list\n    matches = [match for match in matches if match]\n    # join the list into a single string with space as separator\n    output = \" \".join(matches)\n    return output"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Extract values between quotation marks using regex\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    # Remove spaces and convert to list\n    quotation_list = [i.strip() for i in matches]\n    # Return the list of quotation values\n    return quotation_list"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to find all the occurrences of quotation marks\n    quotation_pattern = r'\"([^\"]*)\"'\n    matches = re.findall(quotation_pattern, text1)\n\n    # Return the list of extracted quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"I am the first text with a \"quote\". Another text has more words 'inside a quote'.\"\nprint(extract_quotation(text1)) # Output: ['quote', 'inside a quote']"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regex to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a tuple with each element multiplied by the next element in the tuple.\n    \"\"\"\n    # initialize an empty list to store the resulting tuple\n    result = []\n\n    # loop through the tuple and multiply each element by the next element\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * test_tup[i+1])\n\n    # return the resulting tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = (test_tup[0] * test_tup[1],)\n    for i in range(2, N):\n        result += (result[-1] * test_tup[i],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # initialize an empty list to hold the result\n    result = []\n    # loop over the tuple, starting from index 1 (the first element)\n    for i in range(1, len(test_tup), 2):\n        # calculate the product of the current element and the next element\n        product = test_tup[i] * test_tup[i+1]\n        # append the product to the result list\n        result.append(product)\n    # return the result list\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0], test_tup[1])\n    for i in range(2, N+1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Define a function to multiply two numbers\n    def multiply(a, b):\n        return a * b\n    \n    # Initialize the length of the output tuple\n    N = len(test_tup) - 1\n    \n    # Initialize an empty output tuple\n    output_tup = ()\n    \n    # Loop through the input tuple and multiply each pair of numbers\n    for i in range(N):\n        output_tup += (multiply(test_tup[i], test_tup[i+1]),)\n        \n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = [0] * N\n    for i in range(N-1):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    result_tup[N-1] = test_tup[N-1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4], test_tup[0] * test_tup[5], test_tup[0] * test_tup[6], test_tup[0] * test_tup[7], test_tup[0] * test_tup[8], test_tup[0] * test_tup[9], test_tup[0] * test_tup[10])\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the sum of the two lists\n    result = []\n    # loop through each element of the first list\n    for i in range(len(lst1)):\n        # add the element at index i of the first list and the element at index i of the second list\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initializing an empty list to store the sum of the two input lists\n    result = []\n    # iterating over both input lists\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # returning the resultant list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(accumulate(nums, lambda x, y: x == y and not nums.index(x) + 1 == nums.index(y)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the list by the sum of adjacent numbers\n    grouped_nums = groupby(enumerate(nums), lambda x: sum(range(x[0] + 1, x[1])))\n\n    # Extract the unique groups\n    unique_groups = set([tuple(g) for _, g in grouped_nums])\n\n    # Convert the set to a list\n    unique_list = list(unique_groups)\n\n    # Remove the duplicates from the list\n    unique_list = list(set(unique_list))\n\n    # Remove the last element from the list if it is a consecutive duplicate\n    if unique_list and unique_list[-1][-1] == len(nums) - 1:\n        unique_list.pop()\n\n    return unique_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key == nums[0]:\n            result.append(group[0])\n        elif key == nums[-1]:\n            result.append(group[-1])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # create a dictionary to store the counts of each number in the list\n    counts = {}\n\n    # iterate over the list and update the counts dictionary\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n\n    # filter out the consecutive duplicates using the groupby function\n    result = list(groupby(sorted(counts.keys()), lambda x: counts[x]))\n\n    # return the list of unique numbers\n    return [num[0] for num in result if num[1] == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Remove duplicates using itertools.groupby\n    nums = list(set(nums))\n\n    # Group consecutive duplicates by their index\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1])\n\n    # Filter out the grouped consecutive duplicates and return the result\n    return [group[1] for group in grouped_nums if not group[0]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(set(nums))):\n        result.append(int(key))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group the list into consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] - x[1])\n\n    # Use a list comprehension to remove the consecutive duplicates\n    unique_nums = list(set([num for num, group in grouped_nums]))\n\n    # Convert the list of unique consecutive duplicates to a list\n    consecutive_duplicates = [num for num in unique_nums if len(list(group)) > 1]\n\n    return consecutive_duplicates"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*r**2*h/3\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*r*h)/4\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Use the formula for the lateral surface area of a cylinder\n    lateral_surface_area = math.pi * r**2 * h\n    \n    # Return the lateral surface area of the cone\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*r*h)/4\n    return math.pi*(r**2 + h**2)*s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*(r**2+h**2)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2+h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone.\n    \n    Inputs:\n    r - radius of the cone\n    h - height of the cone\n    \n    Output:\n    lateral surface area of the cone\n    '''\n    s = (3 * math.pi * r**2) / 4\n    area = math.pi * (r**2) * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+',':',text) # replace all spaces with a colon\n    text = re.sub(r'[^\\w\\s]+',' ',text) # replace all non-word characters (spaces, commas, dots) with a space\n    text = re.sub(r'\\s+',' ',text) # remove any multiple spaces\n    text = re.sub(r'^\\s+','',text) # remove any leading spaces\n    text = re.sub(r'\\s+$','',text) # remove any trailing spaces\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for matching special characters\n    pattern = r'[,.\\s]'\n    \n    # Replace all occurrences of special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = re.sub(r'\\s+',':',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[^\\w\\s]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Define the regular expression pattern to replace spaces, commas, or dots with a colon\n    pattern = re.compile(r'[^\\w\\s]')\n\n    # Use the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # define a regular expression to match any of the special characters\n    special_chars = re.compile(r'[\\s.,]')\n    # replace all occurrences of special characters with a colon\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes a string as input and replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^a-zA-Z0-9_]+', ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        while i > 0 and A[i-1] == x:\n            i -= 1\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1  # Not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Loop while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        middle = (left + right) // 2\n        \n        # If the middle element is equal to the target value, check if it's the first occurrence\n        if A[middle] == x and (first_occurrence_index == -1 or A[first_occurrence_index] < A[middle]):\n            first_occurrence_index = middle\n        # If the middle element is less than the target value, search in the right half of the array\n        elif A[middle] < x:\n            left = middle + 1\n        # If the middle element is greater than the target value, search in the left half of the array\n        else:\n            right = middle - 1\n    \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of integers.\n    x (int): An integer to search for in the sorted list A.\n\n    Returns:\n    int: The index of the first occurrence of x in A or -1 if x is not found in A.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) - 1 and A[i] <= x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array of integers.\n        x (int): The number to be searched for in the array.\n\n    Returns:\n        int: The index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            # If x is found at the middle element, check if it's the first occurrence.\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # If x is found at mid, then it is the first occurrence of x\n            return mid\n        elif A[mid] < x:\n            # If x is greater than A[mid], then the first occurrence of x lies in A[mid+1:right]\n            left = mid + 1\n        else:\n            # If x is less than A[mid], then the first occurrence of x lies in A[:mid]\n            right = mid - 1\n    return -1  # If x is not found in the array\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n\n    If x is not found in A, the function returns -1.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # If x is not in A, return -1\n    if x not in A:\n        return -1\n\n    # Binary search for the first occurrence of x\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # If the mid element is x, check the next element to the left to see if it's also x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            # If the mid element is not x, move the right pointer to the mid index\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            # If the mid element is greater than x, move the left pointer to the mid index + 1\n            left = mid + 1\n        else:\n            # If the mid element is less than x, move the right pointer to the mid index - 1\n            right = mid - 1\n\n    # If the while loop finishes without finding x, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 0\n    for i in range(1,n+1):\n        dp[i] = dp[i-1] + arr[i-1]*(dp[i-2]+arr[i-2])\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Calculate products of all sublists\n    products = []\n    for i in range(n):\n        products.append(1)\n        for j in range(i, n):\n            products.append(products[i] * arr[j])\n\n    # Initialize prefix sum array\n    prefix_sum = [0] * (n + 1)\n\n    # Calculate prefix sum array\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + products[i - 1]\n\n    # Calculate sum of products of all sublists\n    total_sum = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if j - i + 1 >= 2:\n                total_sum += products[prefix_sum[j] - prefix_sum[i - 1]]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] * arr[1]\n    \n    max_subarray_sum = float('-inf')\n    current_subarray_sum = 0\n    current_subarray_product = 1\n    \n    for i in range(n):\n        current_subarray_sum += arr[i]\n        current_subarray_product *= arr[i]\n        \n        if current_subarray_sum > max_subarray_sum:\n            max_subarray_sum = current_subarray_sum\n            if current_subarray_sum == 0:\n                return 0\n            elif current_subarray_sum == arr[n-1]:\n                return arr[n-1]\n            else:\n                return current_subarray_product\n    \n    return max_subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize a list to store the sum of products of all possible sublists of arr\n    sublist_prod_sum = []\n\n    # Initialize a variable to store the sum of products of a sublist\n    sublist_prod = 1\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Add the current element to the sublist product\n        sublist_prod *= arr[i]\n\n        # If the current sublist product is greater than or equal to 1, it means the current sublist has at least one duplicate element.\n        # In such a case, we add the product of this sublist to the sum of products of all possible sublists.\n        if sublist_prod >= 1:\n            # Add the product of the current sublist to the sum of products of all possible sublists\n            sublist_prod_sum.append(sublist_prod)\n\n            # Initialize the current sublist product to 1\n            sublist_prod = 1\n\n        # If the current sublist product is less than 1, it means the current sublist does not have any duplicate elements.\n        # In such a case, we add the product of this sublist to the sum of products of all possible sublists.\n        else:\n            sublist_prod_sum.append(sublist_prod)\n            sublist_prod = 1\n\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        if i > 0:\n            product //= arr[i-1]\n        result += product\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a new list to store the sum of products for each subarray\n    subarray_sum = [0] * (n+1)\n\n    # Initialize the first element of the sum array\n    subarray_sum[0] = 1\n    # Calculate the sum of products of the entire array\n    sum_of_products = 1\n    for i in range(n):\n        sum_of_products *= arr[i]\n    subarray_sum[1] = sum_of_products\n\n    # Fill the rest of the sum array by using dynamic programming\n    for i in range(2, n+1):\n        for j in range(i):\n            # Calculate the sum of products for the current subarray\n            subarray_sum[i] += subarray_sum[j] * subarray_sum[i-j-1]\n\n    return subarray_sum[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [0]*(n+1)\n    for i in range(1,n+1):\n        prefix_product[i] = prefix_product[i-1] + arr[i-1]\n    product_sum = prefix_product[n]\n    max_sum = prefix_product[n]\n    for i in range(n-1,0,-1):\n        product_sum -= prefix_product[i+1]\n        product_sum *= arr[i]\n        if product_sum > max_sum:\n            max_sum = product_sum\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    subarray_product = 1\n    subarray_sum = 0\n    subarray_length = 0\n\n    for i in range(n):\n        product *= arr[i]\n        subarray_product *= product\n        subarray_sum += arr[i]\n\n        if i >= subarray_length:\n            subarray_length = i + 1\n\n    result = 0\n    for i in range(subarray_length):\n        result += subarray_product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    prod_sum = [0]*n\n    prod_sum[0] = arr[0]\n\n    for i in range(1, n):\n        prod_sum[i] = arr[i] * prod_sum[i-1]\n\n    for i in range(n):\n        for j in range(i, n):\n            sub_array = arr[i:j+1]\n            prod = 1\n            for k in range(len(sub_array)):\n                prod *= sub_array[k]\n            ans += prod * prod_sum[j]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = arr[i]*arr[j]\n            for k in range(i, j):\n                dp[i][j] += dp[i][k]*dp[k+1][j]\n    return dp[0][n-1]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n\n    The function takes an integer `n` as input and returns the integer with its middle bits toggled.\n    The middle bits are the bits between the first and the last bit, inclusive.\n\n    For example:\n\n    n = 15\n    output: 11\n    \n    n = 9\n    output: 13\n    \"\"\"\n\n    # Initialize variables to store the first and last bits of n\n    first_bit = (n >> 1) & 1\n    last_bit = n & 1\n\n    # Toggle the middle bits by XORing the first and last bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n\n    # Combine the first and last bits with the middle bits\n    return (first_bit << 1) | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the first and last bits\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    # Toggle the middle bits\n    middle_bits = (n ^ (first_bit ^ last_bit))\n    # Combine the first and last bits with the middle bits\n    return (middle_bits << 31) | first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the binary representation of the input number\n    binary = bin(n)[2:]\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the bits of the binary representation\n    for i in range(len(binary) - 2):\n        # If the bit is 0, set the result bit to 1\n        if binary[i] == '0':\n            result |= 1 << (len(binary) - i - 1)\n        # If the bit is 1, set the result bit to 0\n        else:\n            result &= ~(1 << (len(binary) - i - 1))\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Find the first and last bit positions\n    first_bit = n.bit_length() - 1\n    last_bit = 0\n    for i in range(first_bit):\n        if n & (1 << i):\n            first_bit = i\n            break\n    for i in range(last_bit, n.bit_length() - 1):\n        if n & (1 << i):\n            last_bit = i\n            break\n    \n    # Toggle the middle bits\n    mid_bits = n ^ (1 << first_bit) ^ (1 << last_bit)\n    \n    # Combine the original number with the middle bits\n    return n | mid_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit_mask = 0x5555555555555555\n    last_bit_mask = 0xAAAAAAAAAAAAAAA5\n    first_bit_position = 0\n    last_bit_position = 0\n    while first_bit_position < 64:\n        if first_bit_position % 2 == 0:\n            n &= ~first_bit_mask\n            n |= (n ^ first_bit_mask) & first_bit_mask\n            first_bit_mask >>= 1\n            first_bit_position += 1\n        else:\n            last_bit_mask >>= 1\n            last_bit_position += 1\n    while last_bit_position < 64:\n        if last_bit_position % 2 == 0:\n            n &= ~last_bit_mask\n            n |= (n ^ last_bit_mask) & last_bit_mask\n            last_bit_mask >>= 1\n            last_bit_position += 1\n        else:\n            first_bit_mask >>= 1\n            first_bit_position += 1\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Get the first and last bits\n    first_bit = binary_n[0]\n    last_bit = binary_n[-1]\n    # Toggle the first and last bits\n    toggled_bits = first_bit + last_bit\n    # Remove the first and last bits from the binary representation of the number\n    binary_n = binary_n[1:-1]\n    # Create a new binary number by toggling the middle bits\n    new_binary_n = ''\n    for i in range(len(binary_n)):\n        if i == 0 or i == len(binary_n)-1:\n            new_binary_n += toggled_bits\n        elif i == len(binary_n)//2:\n            new_binary_n += '0'\n        else:\n            new_binary_n += '1'\n    # Convert the new binary number to decimal and return it\n    return int(new_binary_n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # find the middle position of the number\n    mid = (n & 0b111111111111111111111111111111111111111111111111111111111111111) >> 1\n\n    # extract the first and the last bit of the number\n    first_bit = (n & 0b10000000000000000000000000000000000000000000000000000000000) >> 63\n    last_bit = (n & 0b01000000000000000000000000000000000000000000000000000000000000) >> 62\n\n    # set the first and the last bit of the number\n    n = (n & 0b00111111111111111111111111111111111111111111111111111111111111) << 63 | (n & 0b000000000000000000000000000000000000000000000000000000000000000) << 62\n\n    # set the middle position of the number\n    n = (n & 0b000000000000000000000000000000000000000000000000000000000000000) << mid | (n & 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit of the given number\n    for i in range(32):\n        # Check if the current bit is not the first or last bit\n        if i not in [0, 31]:\n            # Check if the current bit is 0\n            if n & (1 << i) == 0:\n                # Set the result bit to 1\n                result |= 1 << i\n            else:\n                # Set the result bit to 0\n                result &= ~(1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Extract the last two bits\n    last_two = n & 0b11\n    # Get the last two bits shifted to the left by one bit\n    shifted_last_two = last_two << 1\n    # Get the shifted last two bits shifted to the right by one bit\n    shifted_last_two_shifted_right = shifted_last_two >> 1\n    # Combine the shifted last two bits with the last two bits of the number\n    combined_bits = shifted_last_two | n & 0b11110000\n    # Combine the combined bits with the first two bits of the number\n    final_bits = shifted_last_two_shifted_right | combined_bits\n    # Return the final bits\n    return final_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # Set the middle bit to 1\n        n = n | 1\n    else:\n        # Set the middle bit to 0\n        n = n & 0xfffffffe\n\n    # Check if the first bit is 1 or 0\n    if n & 1 == 0:\n        # Set the first bit to 1\n        n = n | 1\n    else:\n        # Set the first bit to 0\n        n = n & 0xfffffffd\n\n    # Check if the last bit is 1 or 0\n    if n & (1 << (n.bit_length() - 1)) == 0:\n        # Set the last bit to 1\n        n = n | (1 << (n.bit_length() - 1))\n    else:\n        # Set the last bit to 0\n        n = n & 0xfffffffb\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # initialize the left and right pointers\n    left, right = 0, len(a) - 1\n\n    # search the left subarray\n    while left <= right:\n        mid = (left + right) // 2\n\n        # if the value is found in the left subarray\n        if a[mid] == x:\n            # return the left insertion point\n            return mid\n\n        # if the value is smaller than the midpoint\n        elif x < a[mid]:\n            # set the right pointer to the midpoint minus one\n            right = mid - 1\n\n        # if the value is larger than the midpoint\n        else:\n            # set the left pointer to the midpoint plus one\n            left = mid + 1\n\n    # if the value is not found in the array\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find the index of x in the sorted list a\n    index = bisect.bisect_left(a, x)\n\n    # if x is already present in the list, return the index of its leftmost occurrence\n    if a[index] == x:\n        return index\n\n    # if x is smaller than the leftmost element in the list, return 0\n    elif x < a[0]:\n        return 0\n\n    # if x is larger than the rightmost element in the list, return the index of the last element plus one\n    elif x > a[-1]:\n        return index + 1\n\n    # otherwise, return the index of the leftmost occurrence of x\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    def gcd(a, b):\n        return gcd(b, a % b) if b else a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def is_valid(x):\n        return x >= 10**n - 1 and x <= 10**n\n\n    def triangular(x):\n        return x * (x + 1) // 2\n\n    def min_triangular(n):\n        if n == 1:\n            return 1\n\n        a = 10**n - 1\n        b = triangular(a)\n        c = a\n        while c <= b:\n            d = c + a\n            if is_valid(d):\n                b = d\n            c = c + b\n\n        return b\n\n    def smallest_triangular(n):\n        a = 10**n - 1\n        b = triangular(a)\n        c = a\n        index = -1\n        while c <= b:\n            d = c + a\n            if is_valid(d) and d < b:\n                b = d\n                index = d - a\n            c = c + b\n\n        return index\n\n    return min_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Helper function to find the nth triangular number\n    def triangular_number(n):\n        return n * (n + 1) / 2\n\n    # Initialize variables\n    smallest_triangular_number = math.pow(10, n - 1)\n    index = 1\n\n    # Check if smallest triangular number has already been found\n    while smallest_triangular_number <= 10 ** n - 1:\n        index += 1\n        smallest_triangular_number = triangular_number(index)\n\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the index variable to 0 and a variable to store the first triangular number with n digits\n    index = 0\n    triangular_number = 10**(n-1)\n\n    # Loop through all triangular numbers with n digits starting from the first triangular number with n digits\n    while triangular_number < 10**n:\n        index += 1\n        triangular_number = triangular_number + 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True\n\n    def nth_triangular_number(n): \n        if n == 1: \n            return 1 \n        else: \n            return n * (2 * n - 1) + 1\n\n    def get_digits(n): \n        digits = [] \n        while n > 0: \n            digits.append(n % 10) \n            n //= 10 \n        return digits\n\n    def is_perfect_square(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True\n\n    def is_congruent(x, y): \n        return abs(x - y) == 1\n\n    def is_triangular_digit(digit, index): \n        if digit == 0: \n            return True \n        elif digit > 0: \n            if is_congruent(digit, nth_triangular_number(index)): \n                return True \n            else: \n                return False \n        else: \n            if is_congruent(abs(digit), nth_triangular_number(index) - 1): \n                return True \n            else: \n                return False \n\n    def is_valid_digit(digit, index, digits): \n        if is_prime(abs(digit)): \n            if digit > 0: \n                if is_congruent(digit, nth_triangular_number(index) - index): \n                    return True \n                else: \n                    return False \n            else: \n                if is_congruent(abs(digit), nth_triangular_number(index) - 2 * index - 1): \n                    return True \n                else: \n                    return False \n        else: \n            if digit > 0: \n                if is_congruent(digit, nth_triangular_number(index) - index): \n                    return True \n                else: \n                    return False \n            else: \n                if is_congruent(abs(digit), nth_triangular_number(index) - 2 * index - 1): \n                    return True \n                else: \n                    return False \n\n    def find_index(): \n        for i in range(1, 1000000): \n            digits = get_digits(i) \n            n = len(digits) \n            if is_perfect_square(i): \n                return i \n            if n < n: \n                for j in range(n): \n                    if not is_triangular_digit(digits[j], i): \n                        return i \n            else: \n                for j in range(n): \n                    if not is_valid_digit(digits[j], i, digits): \n                        return i \n\n    index = find_index() \n    return index \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    a = 0\n    b = 1\n    count = 0\n    \n    # Iterate until a triangular number with n digits is found\n    while count < 2 ** n:\n        a = b\n        b += 1\n        count += 1\n        \n        # Check if a triangular number is found with n digits\n        if math.floor(math.log10(a) + 1) == n:\n            return count - 1\n    \n    # If no triangular number with n digits is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n):\n    # Initialize the variables\n    index = 1\n    prev_number = 1\n    current_number = 0\n\n    # Calculate the smallest triangular number with n digits\n    while current_number < 10**n:\n        current_number = index * (index - 1) // 2\n        index += 1\n\n    # Calculate the index of the smallest triangular number\n    while current_number > 10**(n + 1):\n        prev_number = current_number\n        current_number = (current_number - 1) // 10\n\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the sum of n digits number\n    sum_of_digits = sum(int(digit) ** (n - 1) for digit in str(n))\n    # divide the sum of n digits by n to get the index of smallest triangular number with n digits\n    return math.ceil(sum_of_digits / n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits, using the following formula:\n    T(n) = 10^(n-1) * 10^n\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += math.pow(10, n-i-1) * math.pow(10, i)\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [] \n    for i in range(n): \n        triangular_numbers.append(math.comb(5*i+1, i)) \n    return triangular_numbers.index(min(triangular_numbers)) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Index(n-1) + 1\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        print(\"Invalid tuple. Length of tuple should be even.\")\n        return\n    else:\n        test_dict = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(0, len(test_tup), 2):\n        dictionary[test_tup[i]] = test_tup[i+1]\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    d = {}\n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_tup)):\n        # Check if the index is even, indicating that we need to add a new key-value pair\n        if i % 2 == 0:\n            # Extract the key and value from the adjacent elements\n            key = test_tup[i]\n            value = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup)-1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate over the tuple using a loop\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    my_dict = {}\n    # iterate over the given tuple using range\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the created dictionary\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(len(test_tup)-1):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 0:\n        # create an empty dictionary\n        my_dict = {}\n        \n        # iterate through the tuple\n        for i in range(0, len(test_tup)-1, 2):\n            # get the key and value\n            key = test_tup[i]\n            value = test_tup[i+1]\n            \n            # add the key-value pair to the dictionary\n            my_dict[key] = value\n        \n        # return the dictionary\n        return my_dict\n    else:\n        print(\"The tuple should have an even number of elements\")\n        return None"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a dictionary using adjacent pairs as keys and values\n    new_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return new_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for i in range(len(s)):\n        if count[s[i]]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0]!= s[1]:\n        return False\n    return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        print(\"All characters are same\")\n    else:\n        print(\"Not all characters are same\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        return False\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check the length of the string\n    if len(s) == 0:\n        return True\n    # check if all the characters are same\n    elif len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to lowercase\n    s = s.lower()\n    # check if all characters are same or not\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters in a string are the same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif s == s[0]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3 * side**2) / 2\n    \n    # Calculate the area of the tetrahedron\n    area = math.sqrt(semi_perimeter)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron given its side length.\n    \"\"\"\n    area = (1/6) * side * (side + math.sqrt(3)*side)**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = 0.5 * side ** 2\n    height = 0.5 * side ** 2\n    volume = (1.0 / 6) * side ** 3\n\n    area = math.sqrt(base * height * volume)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)\n    area = (1/6) * math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4/3) * math.pow(side, 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side**2\n    area = math.sqrt(s*(1-s))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side ** 2\n    area = (4/3 * math.pi * s) ** 0.5\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function will rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if the list is empty\n    if len(list) == 0:\n        return list\n    \n    # Find the length of the list\n    n = len(list)\n    \n    # Calculate the number of rotations to be done\n    rotations = n - m\n    \n    # If the number of rotations is negative, make it positive\n    if rotations < 0:\n        rotations = abs(rotations)\n    \n    # Create a new list to store the rotated elements\n    rotated_list = []\n    \n    # Loop through the original list and append the rotated elements to the new list\n    for i in range(rotations):\n        rotated_list.append(list[i])\n        rotated_list.append(list[i + m])\n    \n    # Loop through the remaining elements of the list and append them to the new list\n    for i in range(n - rotations, n):\n        rotated_list.append(list[i])\n    \n    # Return the new list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # get the length of the list\n    n = len(list)\n\n    # if the number of items to be rotated is greater than the length of the list\n    if m > n:\n        # print an error message and return the original list\n        print(\"Number of items to be rotated is greater than the length of the list\")\n        return list\n    \n    # get the last m items of the list\n    last_m_items = list[-m:]\n\n    # remove the last m items from the list\n    list = list[:-m]\n\n    # add the last m items to the beginning of the list\n    list.extend(last_m_items)\n\n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # check if the list is empty or not\n    if len(list) == 0:\n        return list\n    \n    # calculate the new length of the list\n    new_len = len(list) + m\n    \n    # create a new list with the required length\n    new_list = [0] * new_len\n    \n    # copy the first m items from the old list to the new list\n    for i in range(m):\n        new_list[i] = list[i]\n    \n    # copy the remaining items from the old list to the new list\n    for i in range(m, len(list)):\n        new_list[i+m] = list[i]\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a list by n items to the right.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[-m:], list[:-m] = list[:-m], list[-m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a given list by the specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    n = len(lst)\n    # Find the new length of the list after rotation\n    new_n = n - m\n    # Initialize an empty list to store the rotated elements\n    result = []\n    # Iterate through the list and add m elements to the result list\n    for i in range(m):\n        result.append(lst[i])\n    # Iterate through the list from index m to the end and add them to the result list\n    for i in range(m, n):\n        result.append(lst[i])\n    # Return the new rotated list\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if list is empty\n    if not list:\n        return []\n    \n    # Check if m is greater than the length of list\n    if m > len(list):\n        return list\n    \n    # Create a new list for rotated items\n    rotated_list = []\n    \n    # Move items from list to new list\n    for i in range(len(list)-m):\n        rotated_list.append(list[i])\n        rotated_list.append(list[i+m])\n        \n    # Move items from end of list to new list\n    for i in range(len(list)-m, len(list)):\n        rotated_list.append(list[i])\n        \n    # Return the new list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if there is any none value in the tuple, else False.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_exists = False\n    for item in test_tup:\n        if item is None:\n            none_exists = True\n            break\n    return none_exists"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for i in test_tup:\n        if i is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return sorted([num for num in range(startnum, endnum+1) if all(int(d) % num == 0 for d in str(num))])"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) % 2!= 0:\n                return False\n        return True\n    \n    result = filter(is_divisible_by_digits, range(startnum, endnum+1))\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digit_counts = []\n    for num in range(startnum, endnum+1):\n        # Calculate the digit counts\n        digit_count = sum(1 for digit in str(num) if int(digit)!= 0)\n        digit_counts.append(digit_count)\n\n    # Use a lambda function to check if every number in the range is divisible by every digit count\n    return lambda num: all(digit_count in str(num) for digit_count in digit_counts)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        def digit_count(num):\n            count = 0\n            while num > 0:\n                count += num % 10\n                num //= 10\n            return count\n        \n        digits = str(num)\n        if len(digits) < digit_count(num):\n            return False\n        return all(num % int(digit) == 0 for digit in digits)\n    \n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_list = [int(digit) for digit in str(startnum)]\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        if num % digits_list == 0:\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate area of sector\n    area = math.pi * r * r * a\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = r * a * math.sin(math.radians(a))/360\n\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)\n        area = area * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    # Calculate the circumference of the sector\n    circumference = 2 * math.pi * r\n    \n    # Check if the angle is within the range of 0 to 360 degrees\n    if a > 360 or a < 0:\n        return None\n    else:\n        # Calculate the area of the sector using the formula A = (1/2)r^2sin(theta)\n        area = circumference * (r ** 2) * math.sin(math.radians(a)) / 2\n        \n        # Return the calculated area\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = r * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        # calculate area of the sector\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = \"\"\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n, m, p = len(X), len(Y), len(Z)  # lengths of X, Y, and Z\n\n    # create a 2D array to store lengths of LCS of X[0..n-1] with Y[0..m-1] and Z[0..p-1]\n    L = [[0] * (p + 1) for i in range(n + 1)]\n\n    # Fill L[][] in bottom up manner\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j][k - 1])\n\n    # print the LCS of X, Y and Z\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    print(X[i - 1], end=\" \")\n\n    return L[n][m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences as input and returns the longest common subsequence (LCS) for the three sequences.\n    \"\"\"\n    \n    # Finding lengths of all three sequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Creating a table to store length of LCS for all possible subsequences\n    L = [[0] * (p + 1) for i in range(m + 1)]\n    \n    # Populating the table\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    \n    # Backtracking to find the LCS\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # Reversing the list to get the actual LCS\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[[0]*(m+1) for j in range(n+1)] for i in range(2)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i%2][j][k] = p[(i-1)%2][j][k] + 1\n            else:\n                p[i%2][j][k] = max(p[(i-1)%2][j][k], p[(i)%2][j-1][k])\n\n    lcs = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[(i-1)%2][j][k] > p[(i)%2][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    def longest_common_subsequence(x, y, z):\n        # Step 1: If either of the string is empty, then its LCS is also empty\n        if len(x) == 0 or len(y) == 0:\n            return []\n\n        # Step 2: If the last character of x is same as the first character of y or the last character of y is same as the first character of x, then there is a common subsequence\n        if x[-1] == y[0] or x[0] == y[-1]:\n            return [x[-1]] + longest_common_subsequence(x[:-1], y, z)\n        elif x[0] == z[0] or x[-1] == z[-1] or y[0] == z[0] or y[-1] == z[-1]:\n            return [x[0]] + longest_common_subsequence(x, y[:-1], z)\n        else:\n            # Step 3: Otherwise, there is no common subsequence\n            return []\n\n    # Step 4: Find the maximum length of the three sequences\n    max_length = max(len(X), len(Y), len(Z))\n\n    # Step 5: Initialize the LCS matrix with zeros\n    LCS = [[0] * max_length for _ in range(max_length)]\n\n    # Step 6: Fill in the LCS matrix using dynamic programming approach\n    for i in range(max_length):\n        for j in range(max_length):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1] or Y[j-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    # Step 7: Find the longest common subsequence using the LCS matrix\n    lcs = []\n    i = max_length - 1\n    j = max_length - 1\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] or X[i-1] == Z[j-1] or Y[j-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the lcs to get the correct order of characters\n    lcs = lcs[::-1]\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function will find the longest common subsequence for the given three string sequence. \n    The LCS is defined as the longest subsequence that is common to all three sequences. \n    The function is based on the LCS algorithm explained in the following link: \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Creating a table to store lengths of LCS of subsequences of X, Y and Z\n    L = [[0] * (o+1) for i in range(m+1)]\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # Starting from the bottom right corner and tracing back to top left corner\n    i = m\n    j = n\n    k = o\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    i, j = n, m\n    lcs = []\n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a function to calculate the longest common subsequence (LCS) of two strings.\n    def lcs(X, Y): \n        m = len(X) \n        n = len(Y) \n\n        # Create a 2D array to store lengths of LCS of subproblems.\n        L = [[0] * (n+1) for _ in range(m+1)] \n\n        # Fill L[][] in bottom up manner. Note that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1].\n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n        # Return length of LCS of X[0..m-1] and Y[0..n-1].\n        return L[m][n]\n\n    # Initialize variables to store length of LCS of three strings.\n    L = 0\n\n    # Calculate length of LCS of X[0..m-1] and Y[0..n-1].\n    L = lcs(X, Y)\n\n    # Initialize variables to store indices of characters in LCS of three strings.\n    i, j = m, n\n\n    # Initialize a list to store characters of LCS of three strings.\n    lcs_str = []\n\n    # Fill the list lcs_str in reverse order using indices i and j.\n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs_str.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif L[i-1] > L[j]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Convert the list lcs_str to string and return it.\n    return ''.join(reversed(lcs_str))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    # create a 3D table to store the length of LCS for all possible substrings of X, Y and Z\n    len_table = [[[0] * (len(Z) + 1) for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n    \n    # fill the table using dynamic programming approach\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    len_table[i][j][k] = len_table[i - 1][j - 1][k - 1] + 1\n                elif len_table[i - 1][j][k] > len_table[i][j - 1][k]:\n                    len_table[i][j][k] = len_table[i - 1][j][k]\n                else:\n                    len_table[i][j][k] = len_table[i][j - 1][k]\n    \n    # backtrack to find the LCS\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif len_table[i - 1][j][k] > len_table[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize 2D array to store lengths of LCS of substrings\n    lcs_matrix = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n\n    # Fill the first row and first column of the array\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs_matrix[i][j] = lcs_matrix[i - 1][j - 1] + 1\n            else:\n                lcs_matrix[i][j] = max(lcs_matrix[i - 1][j], lcs_matrix[i][j - 1])\n\n    # Return the length of the LCS of the last row and the last column of the array\n    return lcs_matrix[len(X)][len(Z)]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regex to match words starting with capital letters\n    word_pattern = r'\\b[A-Z][a-z]*\\b'\n    # Split the string into words\n    words = re.findall(word_pattern, str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    capitalized_words = []\n    for word in words:\n        capitalized_word =''.join([word[0].upper(), word[1:].lower()])\n        capitalized_words.append(capitalized_word)\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    \n    # Loop through each word and check if it starts with capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it starts with capital letter, add a space after it\n            words[i] ='' + words[i]\n    \n    # Join the words back together and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|\\!)\\b','', string)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all words that start with a capital letter\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    capitalized_words =''.join([word.capitalize() for word in words])\n\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match capital letters\n    pattern = re.compile('([A-Z][a-z]+)')\n    \n    # split the string into words\n    words = pattern.findall(str1)\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # iterate over the words and capitalize the first letter\n    for i, word in enumerate(words):\n        words[i] = word.capitalize()\n        \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # loop through each word and add a space before it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all words with capital letters with a space\n    str1 = re.sub(r'[A-Z]','', str1)\n    # Replace all remaining spaces with a single space\n    str1 = re.sub(r'\\s+','', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r\"(?<=[A-Z])[A-Z](?=[a-z])\")\n    return pattern.sub(\" \", str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    # Use the built-in sorted() function to sort the list of strings\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    nums_str = ['{:.2f}'.format(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    num_strings = []\n    for num_str in nums_str:\n        try:\n            num_strings.append(float(num_str))\n        except ValueError:\n            pass\n    num_strings.sort()\n    return num_strings"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(float(num))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    \n    nums.sort()\n    \n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (float('inf') if x[0] == '-' else 0.0, int(x)))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): List of strings of numbers.\n\n    Returns:\n    sorted_nums_str (list): Sorted list of strings of numbers.\n    \"\"\"\n\n    # Convert all strings to float and sort them numerically\n    nums_float = sorted(map(float, nums_str), key=float)\n\n    # Convert back to strings and return the sorted list\n    sorted_nums_str = [str(num) for num in nums_float]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for elem in test_tup:\n        test_list.append(elem)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list[i] = (test_list[i][0], test_list[i][1] + test_tup[0], test_list[i][2] + test_tup[1])\n        else:\n            test_list[i] = test_list[i] + test_tup[0]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    return smallest == i"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) // 2:  # base case\n        return True\n    \n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:  # check if left subtree is smaller than parent\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and checks if it represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # check if the node at index i is greater than the root\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    # check if the left child of the current node is less than the root\n    if i*2 <= len(arr)-1 and arr[i] < arr[i*2]:\n        return False\n    \n    # check if the right child of the current node is less than the root\n    if i*2+1 <= len(arr)-1 and arr[i] < arr[i*2+1]:\n        return False\n    \n    # if none of the conditions are met, then the node at index i is a valid min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i >= len(arr):\n        return True\n    \n    # left child index\n    left_child = 2 * i\n    \n    # right child index\n    right_child = 2 * i + 1\n    \n    # check if left child is smaller than root\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    \n    # check if right child is smaller than root\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    \n    # recursive call for left and right child\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if array is min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root is the smallest element in the heap\n    if i == 0 or arr[i] < arr[i//2]:\n        return True\n    # If not, check the root of the left subtree\n    elif arr[i] < arr[2*i]:\n        return check_min_heap_helper(arr, 2*i)\n    # If not, check the root of the right subtree\n    else:\n        return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array has only one element\n    if len(arr) == 1:\n        return True\n    # Check if the array is a min heap or not\n    elif check_min_heap_helper(arr, len(arr)//2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    elif i > 1 and arr[i] < arr[i // 2] and arr[i] < arr[(i // 2) // 2]:\n        return False\n    elif i > 2 and arr[i] < arr[i // 2] and arr[i] < arr[(i // 2) // 2] and arr[i] < arr[(i // 2) // 2]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the current index is greater than or equal to the size of the array,\n    # then the array is not a min heap\n    if i >= len(arr):\n        return False\n\n    # Check if the left child is smaller than the parent\n    if i > 0 and arr[i] < arr[i - 1]:\n        return False\n\n    # Check if the right child is smaller than the left child or the parent\n    if i + 1 < len(arr) and arr[i] < arr[i + 1]:\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, 2 * i + 1) or check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap.\n    '''\n\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    parent = (i - 1) // 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        arr[i], arr[left] = arr[left], arr[i]\n        check_min_heap_helper(arr, left)\n\n    if right < len(arr) and arr[right] > arr[i]:\n        arr[i], arr[right] = arr[right], arr[i]\n        check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef is_min_heap(arr):\n    \"\"\"\n    Given an array representing a binary heap, check if it is a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        k = 2\n        while k < n:\n            j += k\n            k += 1\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize jacobsthal number as 0\n    j = 0\n    # Initialize Lucas number as 1\n    l = 1\n    # Initialize counter for loop\n    count = 2\n    # While loop to find nth jacobsthal number\n    while count <= n:\n        # Find the sum of j and l\n        sum_j_l = j + l\n        # Update j and l\n        j = l\n        l = sum_j_l\n        # Increment count for loop\n        count += 1\n    return l"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 2\n        for i in range(2, n):\n            a, b = b, a + b\n            c, d = d, a + b\n        return c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two numbers\n    j = 0\n    l = 1\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the next number\n        next_num = (3*j + 1) // 2 + l\n\n        # Update the values\n        j = l\n        l = next_num\n\n    # Return the final number\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal = 0\n    if n == 1:\n        return jacobsthal\n    else:\n        for i in range(n-1):\n            jacobsthal += 1\n        return jacobsthal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    # Generate the first n positive integers\n    positive_integers = [i for i in range(1, n+1)]\n\n    # Sum up the positive integers to get the nth Jacobsthal number\n    jacobsthal = sum(positive_integers)\n\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (2*n-1) + (2*n-3)*jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 0\n    lucas = 1\n    for i in range(n):\n        jacobsthal, lucas = lucas, jacobsthal + lucas\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + 2**(2*n-1)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize a dictionary to store the frequency of each key\n    freq = {}\n    # Loop through the list and increment the frequency of each key\n    for record in test_list:\n        for key in record:\n            freq[key] = freq.get(key, 0) + 1\n    # Initialize a dictionary to store the minimum frequency\n    min_freq = {}\n    # Loop through the frequency dictionary and update the minimum frequency\n    for key, value in freq.items():\n        if value not in min_freq or min_freq[value] > value:\n            min_freq[value] = value\n    # Initialize a list to store the minimum k records\n    min_list = []\n    # Loop through the frequency dictionary again and add the keys with minimum frequency to the list\n    for key, value in freq.items():\n        if value == min_freq[value]:\n            min_list.append(key)\n    # Return the list of minimum k records\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples by the second element of each tuple (which is the minimum value)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize an empty list to store the minimum K records\n    min_records = []\n    \n    # Loop through the sorted list of tuples, starting from the first K records\n    for i in range(K):\n        # Add the current record to the min_records list\n        min_records.append(test_list[i])\n    \n    # Return the list of minimum K records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list of tuples in descending order of the second element (i.e., the second element of each tuple)\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum k records to the first k elements in the sorted list\n    min_k_list = sorted_list[:K]\n\n    # Return the minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n    Args:\n        test_list (list): List of tuples\n        K (int): Number of minimum records to be returned\n\n    Returns:\n        list: List of tuples containing the minimum K records from the list\n    '''\n\n    # Sort the list of tuples by the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list and add the first K records to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    # Return the min_records list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the minimum value to be the first element of the first tuple in the list\n    min_value = test_list[0][0]\n\n    # Initialize the count of the minimum value to be 1\n    count = 1\n\n    # Iterate over the rest of the list\n    for i in range(1, len(test_list)):\n\n        # If the current element in the list is greater than the minimum value, update the minimum value and count\n        if test_list[i][0] > min_value:\n            min_value = test_list[i][0]\n            count = 1\n\n        # If the current element in the list is equal to the minimum value, increment the count\n        elif test_list[i][0] == min_value:\n            count += 1\n\n        # If the count of the minimum value becomes greater than K, update the minimum value and count to the current element\n        if count > K:\n            min_value = test_list[i][0]\n            count = 1\n\n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = []\n    for tup in test_list:\n        if len(min_records) < K:\n            min_records.append(tup)\n        else:\n            if min_records[0] > tup:\n                min_records.pop(0)\n                min_records.append(tup)\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_list = [test_list[i] for i in range(min(len(test_list), K))]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n    else:\n        sorted_list = sorted(test_list, key=lambda x: x[0]) # sort by first element of each tuple\n        return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    Args:\n        test_list (list): A list of tuples.\n        K (int): The number of minimum records required.\n    Returns:\n        A list of tuples of size K with the minimum k records from the test_list.\n    \"\"\"\n\n    test_list.sort()  # sort the list in ascending order\n\n    # initialize an empty list to store the minimum k records\n    min_k_records = []\n\n    # iterate over the test_list\n    for i in range(len(test_list) - K + 1):\n        # add the current tuple to the min_k_records\n        min_k_records.append(test_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element (i.e. the value in the first tuple) in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize a variable to keep track of the minimum k records found so far\n    min_records = sorted_list[:K]\n\n    # Loop through the remaining tuples in the list and add them to the minimum k records list if they meet the condition\n    for i in range(K, len(sorted_list)):\n        if sorted_list[i][1] == min_records[-1][1]:\n            min_records.append(sorted_list[i])\n        else:\n            break\n\n    # Return the list of minimum k records found\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at the current index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add the element to the dictionary\n            common_dict[l1[i]] = True\n    # Return the list of common elements from the dictionary\n    return common_dict.keys()"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each element in list 1\n    for element1 in l1:\n        # Loop through each element in list 2\n        for element2 in l2:\n            # Check if the current element is equal to the other element in list 2\n            if element1 == element2:\n                # If it is, check if the current element is also in list 3\n                for element3 in l3:\n                    if element1 == element3:\n                        # If it is, add the current element to the list of common elements\n                        common_elements.append(element1)\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"The list should contain at least two numbers.\")\n    numbers.sort()  # sort the list in ascending order\n    return numbers[1]  # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # sort the list in ascending order\n    numbers.sort()\n    \n    # return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    second_smallest = numbers[-2]  # get the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # Sort the list in ascending order\n    return numbers[1]  # Return the second smallest number in the list"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # define the regular expression pattern to match the given string\n    pattern = r'a(b*)'\n    \n    # search the given string using the defined pattern\n    result = re.search(pattern, text)\n    \n    # check if a match was found\n    if result:\n        # print the matched string\n        print(result.group())\n    else:\n        # print a message indicating that no match was found\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.+b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # Use regex to match the string\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    \n    # If matches is not empty, return the matched string\n    if matches:\n        return matches[0]\n    \n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)*\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<![ab])a\\w*(?=[ab])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern is found in the text.\")\n        print(\"The matched string is:\", match.group())\n    else:\n        print(\"The pattern is not found in the text.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found!')\n    else:\n        print('Match not found.')"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(j+1, len(test_list[i])):\n                if test_list[i][j] == test_list[i][k][::-1] and test_list[i][k] == test_list[i][j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for string in test_list:\n        # split the string into two parts and reverse them\n        left, right = string[::-1], string[::-1]\n        # check if the left part is present in the list\n        if left in test_list:\n            # check if the right part is present in the list\n            if right in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n\n    # Sort the list of strings\n    test_list.sort()\n\n    # Iterate through the sorted list\n    for i in range(n-1):\n        # Find the starting and ending indices of the current string\n        start = i + 1\n        end = n - 1\n        while start < end:\n            # Check if the current substring is a reverse substring of the previous substring\n            if test_list[start] == test_list[end][::-1]:\n                # Check if the current substring has a greater length than the previous substring\n                if len(test_list[i]) < len(test_list[start]):\n                    # If the current substring is a reverse substring of the previous substring, increment the count\n                    count += 1\n                # Move the start index to the right\n                start += 1\n            else:\n                # If the current substring is not a reverse substring of the previous substring, move the end index to the left\n                end -= 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize a dictionary to store the count of reverse pairs\n    count = {}\n    # loop through the string list\n    for string in test_list:\n        # convert the string to a list of characters\n        char_list = list(string)\n        # sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        # convert the sorted list back to a string and store it in a new variable\n        sorted_string = ''.join(char_list)\n        # check if the sorted string is already in the dictionary, and increment its value if it is\n        if sorted_string in count:\n            count[sorted_string] += 1\n        # otherwise, add the sorted string to the dictionary with a value of 1\n        else:\n            count[sorted_string] = 1\n    # return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty dictionary to store the count of each string\n    string_count = {}\n    # iterate over the list of strings and add their count to the dictionary\n    for string in test_list:\n        if string in string_count:\n            string_count[string] += 1\n        else:\n            string_count[string] = 1\n    # iterate over the dictionary and count the pairs of reverse strings\n    count = 0\n    for string1, count1 in string_count.items():\n        for string2, count2 in string_count.items():\n            # if the counts are different and the strings are reversed, increment the count\n            if count1!= count2 and string1[::-1] in string_count and string2[::-1] in string_count:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each list in the input list\n    for lst in list1:\n        # Convert the list to a tuple\n        tup = tuple(lst)\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[tup] += 1\n            \n    # Return the dictionary with counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    count = {}\n    for i in list1:\n        sublist = tuple(i)\n        if sublist not in list2:\n            list2.append(sublist)\n            count[sublist] = list1.count(sublist)\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create a dictionary to store the count of lists\n    counts = {}\n    \n    # iterate over each list in the original list\n    for i in range(len(list1)):\n        # convert the current list to a tuple and check if it is already a key in the dictionary\n        if tuple(list1[i]) in counts:\n            # increment the count of the key by 1\n            counts[tuple(list1[i])] += 1\n        else:\n            # add the tuple as a key in the dictionary with a count of 1\n            counts[tuple(list1[i])] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    sublists = {}\n    \n    for num, sublist in enumerate(list1):\n        if tuple(sorted(sublist)) not in sublists:\n            sublists[tuple(sorted(sublist))] = 1\n        else:\n            sublists[tuple(sorted(sublist))] += 1\n    \n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        list_tuple = tuple(list1[i])\n        if list_tuple in count_dict:\n            count_dict[list_tuple] += 1\n        else:\n            count_dict[list_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store unique lists and their counts\n    result = {}\n    # loop through each list in the input list\n    for item in list1:\n        # convert the list to a tuple using tuple()\n        tup = tuple(item)\n        # check if the tuple is already a key in the result dictionary\n        if tup in result:\n            # if the tuple is already a key, increment its count by 1\n            result[tup] += 1\n        else:\n            # if the tuple is not a key, add it to the dictionary with a count of 1\n            result[tup] = 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        for j in i:\n            if (tuple(j),) in count:\n                count[(tuple(j),)] += 1\n            else:\n                count[(tuple(j),)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item in sublist_dict:\n                sublist_dict[tuple_item] += 1\n            else:\n                sublist_dict[tuple_item] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = [(tuple(x), x.count(x)) for x in list1]\n    dict_count = {}\n    for tup in list1_tuples:\n        if tup[0] not in dict_count:\n            dict_count[tup[0]] = tup[1]\n        else:\n            dict_count[tup[0]] += tup[1]\n    return dict_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n    num = num.strip()\n    if num == \"\":\n        return False\n    if num[0] in [\"-\", \"+\"]:\n        num = num[1:]\n    for char in num:\n        if char not in \"0123456789.\":\n            return False\n    if \".\" not in num and num.count(\".\") > 1:\n        return False\n    if \".\" in num:\n        precision = num.index(\".\") + 1\n        if num.count(\".\")!= 1 or len(num) - precision!= 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) == 2:\n            if len(parts[0]) <= 2 and len(parts[1]) <= 2:\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        decimal_number = float(num)\n        if decimal_number.is_integer() and abs(decimal_number - int(decimal_number)) < 0.01:\n            return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    # Remove any non-numeric characters from the number\n    num = ''.join(c for c in num if c.isdigit())\n    # Check if the number has more than 15 digits or less than 1\n    if len(num) > 15 or len(num) < 1:\n        return False\n    # Convert the number to a float with a precision of 2\n    num = float(num)\n    # Check if the number has a decimal point\n    if '.' not in num:\n        return False\n    # Split the number by the decimal point and get the integer and fractional parts\n    int_part, fract_part = num.split('.')\n    # Check if the integer part is within the allowed range\n    if int(int_part) > 1000000 or int(int_part) < -1000000:\n        return False\n    # Check if the fractional part is within the allowed range\n    if int(fract_part) > 99 or int(fract_part) < -99:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number contains any non-numeric characters\n    if not all(char.isdigit() or char == '.' for char in num):\n        return False\n\n    # Split the number into integer and decimal parts\n    int_part, dec_part = num.split('.')\n\n    # Check if the integer part is an integer\n    if not int_part.isdigit():\n        return False\n\n    # Check if the number of digits in the integer part is less than or equal to 18\n    if len(int_part) > 18:\n        return False\n\n    # Check if the decimal part has at most 2 digits\n    if dec_part and len(dec_part) > 2:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.count('.') > 1:\n        return False\n    elif '.' not in num and num.count('.') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) == 2:\n            for digit in decimal_part:\n                if not digit.isdigit():\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    num_list = num.split('.')\n    integer_part = int(num_list[0])\n    decimal_part = int(num_list[1])\n    if len(str(integer_part)) > 10 or len(str(decimal_part)) > 2:\n        return False\n    for digit in str(integer_part) + str(decimal_part):\n        if digit < 0 or digit > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if it is a decimal number with a precision of 2,\n    otherwise, it returns False.\n    \"\"\"\n\n    if num.isdigit():\n        decimal_part = num.split(\".\")[1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Convert the list to a set to remove duplicates and check if the length of the set is equal to 1\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    unique = True\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            unique = False\n            break\n    \n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Use a set to store unique elements\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check if there is only one element in the set\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store the unique elements in the array\n    unique_set = set(arr)\n    \n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0]!= arr[1]\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        print(\"The list contains only one unique element\")\n    else:\n        print(\"The list contains more than one unique element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Check if the length of the unique_set is equal to 1\n    if len(unique_set) == 1:\n        # If it is, return True\n        return True\n    else:\n        # If it is not, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # convert month number to string\n    monthnum_str = str(monthnum3)\n\n    # get the first two digits of the month number\n    monthnum_digits = monthnum_str[:2]\n\n    # check if the first two digits are 00 or 01\n    if monthnum_digits in ['00', '01']:\n        return False\n    \n    # check if the first two digits are divisible by 3\n    if int(monthnum_digits) % 3 == 0:\n        return True\n    \n    # check if the first two digits are divisible by 4 but not by 100\n    if int(monthnum_digits) % 4 == 0 and int(monthnum_digits) % 100!= 0:\n        return True\n    \n    # check if the first two digits are divisible by 400\n    if int(monthnum_digits) % 400 == 0:\n        return True\n    \n    # if none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and (year%4 == 0 and (year%100!= 0 or year%400 == 0)):\n            if daynum % 2 == 0:\n                return True\n            else:\n                return False\n        else:\n            return days[monthnum3-1]\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_name = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if month_name[monthnum3-1] == 'February':\n            if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n                if monthnum3 % 2 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        print('Invalid month number.')\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n\n    # Initialize two pointers at the start and end of the array\n    left = 0\n    right = n-1\n\n    while left < right:\n        # Calculate the difference between the elements at the two pointers\n        diff = arr[right] - arr[left]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is negative, move the right pointer to the left\n        if diff < 0:\n            left += 1\n        # If the difference is positive, move the left pointer to the right\n        else:\n            right -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Loop through the sorted array\n    for i in range(1, n):\n        # Calculate the difference between current and previous elements\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Loop through the array and calculate the difference between adjacent elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is less than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    prev = arr[0]\n\n    for i in range(1, n):\n        diff = arr[i] - prev\n        min_diff = min(min_diff, diff)\n        prev = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two arguments: the array and its size n.\n    It returns the minimum difference between any two elements in the array.\n    '''\n    # Find the minimum element in the array\n    min_el = min(arr)\n    # Initialize a variable to store the minimum difference\n    min_diff = float('inf')\n    # Loop through the array and find the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n    if n == 1:\n        return 0\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = 0\n\n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i + 1] - arr[i]\n\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is greater than the current maximum difference, update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Traverse through the sorted array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # Update the minimum and maximum difference\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference between any two elements\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and the length of the array as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    # initialize count variable\n    count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # check if the character is a digit\n        if char.isdigit():\n            # increment count\n            count += 1\n            \n    # return the count\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    return polite_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(n):\n        p.append(11 + i)\n    return p"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    # If n is 1, then the only polite number is 1\n    if n == 1:\n        return 1\n\n    # If n is odd, then the only polite number is 1 and then n\n    if n % 2 == 1:\n        return 1 + is_polite(n - 1)\n\n    # If n is even, then the only polite number is n and then n-2\n    if n % 2 == 0:\n        return is_polite(n) + is_polite(n - 2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_polite_helper(num, count):\n        if count >= n:\n            return True\n        if not is_prime(num):\n            return False\n        if num % 2 == 0:\n            return is_polite_helper(num // 2, count + 1)\n        else:\n            return is_polite_helper(num * 3 + 1, count + 1)\n\n    return is_polite_helper(3, 0)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite_number = 1\n    count = 1\n    \n    while count < n:\n        if math.gcd(polite_number, 2) == 1:\n            polite_number += 1\n        else:\n            polite_number += 2\n        count += 1\n        \n    return polite_number - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite_count = 0\n    i = 2\n    while polite_count < n:\n        if is_prime(i):\n            polite_count += 1\n        i += 1\n\n    return i-1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n\n    We start by defining a function called `is_polite` that takes in one parameter `n`.\n\n    We then use a nested loop to iterate over the range of `n` values from 1 to 50. For each iteration, we calculate the nth polite number by adding the digits of the number up to that point.\n\n    Finally, we check if the sum of the digits is divisible by 9, which is a requirement for a polite number. If it is, we return the current number. Otherwise, we move on to the next iteration of the loop and try again with the next value of `n`.\n\n    If we reach the end of the loop without finding a polite number, we return -1 to indicate that there is no such number.\n    \"\"\"\n    for i in range(1, 51):\n        num = i * (i + 1) // 2\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum % 9 == 0:\n            return num\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 1\n    \n    # Initialize the polite number variable and loop counter\n    polite = 0\n    count = 1\n    \n    # Loop until we find the nth polite number\n    while count <= n:\n        # Check if the polite number is greater than the current count\n        if polite > count:\n            # If it is, add the difference to the polite number and increment the count\n            polite += count - polite\n            count += 1\n        else:\n            # If it's not, increment the count\n            count += 1\n    \n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    polite_num = 2\n    prime_count = 0\n    while prime_count < n:\n        if is_prime(polite_num):\n            prime_count += 1\n        else:\n            polite_num = next_prime(polite_num)\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_polite(n):\n    a = 1\n    b = 3\n\n    return (a + (n - 1) * b) * 1000"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as an input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i],lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return list(zip(*[iter(lst)]*2))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, target_sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum as inputs and returns the count of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes two arguments:\n    arr: list of numbers\n    sum: target sum\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    difference = set1.symmetric_difference(set2)\n    return list(difference)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1.symmetric_difference(set2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n\n    Args:\n    li1: list\n    li2: list\n\n    Returns:\n    list: list containing the difference between the two input lists.\n    \"\"\"\n    return [i for i in li1 if i not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # initialize a list to store the difference between the two lists\n    diff_list = []\n    # loop through the first list and check if each element is in the second list\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    # loop through the second list and check if each element is in the first list\n    for item in li2:\n        if item not in li1:\n            diff_list.append(item)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    count = 1\n    \n    while count <= n:\n        if count % 2!= 0:\n            sum += count ** 4\n        count += 1\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    sum_of_powers = 0\n\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_powers += i ** 4\n\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        if i % 2 == 1:\n            sum += i**4\n        i += 1\n        \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum_of_fourth_power = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(2, n, 2):\n        # Calculate fourth power of i\n        fourth_power = i ** 4\n\n        # Add fourth power to sum\n        sum_of_fourth_power += fourth_power\n\n    # Return sum of fourth power of odd natural numbers\n    return sum_of_fourth_power"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] in ['(', ')']:\n            stack.append(exp[i])\n        elif exp[i] == '+':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '-':\n            if not stack or stack[-1] == '(':\n                return False\n            elif stack[-1] == '+':\n                stack.pop()\n            elif stack[-1] == ')':\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '*':\n            if not stack or stack[-1] == '(':\n                return False\n            elif stack[-1] == '+' or stack[-1] == '-':\n                stack.pop()\n            else:\n                stack.append(exp[i])\n        elif exp[i] == '/':\n            if not stack or stack[-1] == '(':\n                return False\n            elif stack[-1] in ['+', '-']:\n                stack.pop()\n            elif stack[-1] == '*':\n                stack.pop()\n            else:\n                return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if not (char == ')' and top_char == '(') and not (char == ']' and top_char == '[') and not (char == '}' and top_char == '{'):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char.isalpha():\n            return \"Not Balanced\"\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"Not Balanced\"\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return \"Not Balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for c in exp:\n        if c in open_brackets:\n            stack.append(c)\n        elif c in close_brackets:\n            if not stack:\n                return False\n            if stack[-1] in open_brackets:\n                if stack[-1] == open_brackets[c]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    open_brackets = ['(', '[', '{']\n    close_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            elif stack[-1] in open_brackets:\n                stack.pop()\n            else:\n                return False\n    \n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words without length K\n    result = []\n    # Loop through each word and check if its length is not equal to K\n    for word in words:\n        if len(word)!= K:\n            # If the word length is not equal to K, add it to the result list\n            result.append(word)\n    # Join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    new_words = []\n    for word in words:\n        # If the length of the word is not equal to K, add it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n\n    # Join the new list of words back into a string\n    new_str =''.join(new_words)\n\n    # Return the new string with all words of length K removed\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    \n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of pattern in the text\n    occurrences = re.findall(pattern, text)\n    if not occurrences:\n        # No match\n        return None\n    else:\n        # Find the index of the first occurrence\n        index = text.find(occurrences[0])\n        # Find the length of the first occurrence\n        length = len(occurrences[0])\n        # Loop through all the occurrences and find their positions\n        result = []\n        for occurrence in occurrences:\n            # Find the index of the current occurrence\n            position = text.find(occurrence, index)\n            # Add the position to the result list\n            result.append(position)\n            # Update the index to the next occurrence\n            index = position + length\n        # Return the result list\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(f\"Substring found at position {start}: {text[start:end]}\")\n            return (start, end)\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Using re.finditer() to iterate over all the occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n    \n    # If there is no match, return None\n    if not matches:\n        return None\n    \n    # Create an empty list to store the matches and their positions\n    occurrences = []\n    \n    # Iterate over all the matches and append their positions to occurrences list\n    for match in matches:\n        occurrences.append((match.start(), match.end()))\n    \n    return occurrences"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through the list and check if the current index is odd\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            # if it's odd, check if the current number at that index is odd\n            if nums[i] % 2!= 0:\n                return False\n    # if we get here, it means we found an odd number in an odd index\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    # Check if the length of the list is odd\n    if len(nums) % 2 == 1:\n        return False\n    # Iterate through the list and check if the number at each odd index is odd\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and (nums[i] % 2!= 0 or nums[i] % 2!= nums[i-1] % 2):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum(1 for n in nums if n % 2 == 1) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through the list and check if the current number is odd\n    for num in nums:\n        if num % 2!= 0:\n            # If the current number is odd, increment the count variable\n            count += 1\n            \n    # Return True if the count is equal to the length of the list, indicating that every odd index contains odd numbers\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if i % 2 == 1:\n                if nums[i] % 2 == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i!= 0 and test_str[i-1] in vowels) and (i!= len(test_str)-1 and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0:\n            if test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # define set of vowels\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))  # Convert list to set to remove duplicates and convert back to list\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to keep track of the non-repeated elements\n    unique_set = set()\n    \n    # Iterate through the list and add each unique element to the set\n    for num in arr:\n        unique_set.add(num)\n    \n    # Convert the set back to a list and calculate the sum of its elements\n    result = sum(unique_set)\n    \n    return result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the counts of each element in the list\n    count_dict = {}\n    for elem in arr:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n\n    # find the sum of all non-zero counts in the dictionary\n    non_zero_sum = sum([count for count in count_dict.values() if count > 0])\n\n    return non_zero_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n    \n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the unique elements in the list\n    unique_set = set(arr)\n    \n    # initialize a variable to store the sum of unique elements\n    sum_unique = 0\n    \n    # loop through the unique set and add the elements to the sum_unique variable\n    for element in unique_set:\n        sum_unique += element\n        \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_non_repeated = sum(unique_elements)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store unique elements and their counts\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # find the sum of non-repeated elements\n    sum_non_repeat = 0\n    for elem in arr:\n        if count_dict[elem] == 1:\n            sum_non_repeat += elem\n    \n    return sum_non_repeat"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and finds the sum of non-repeated elements in it.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the unique set and add the values to the sum\n    for i in unique_set:\n        sum += i\n    # Return the final sum value\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for num in arr:\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Iterate through the unique set and add its elements to the sum\n    for num in unique_set:\n        non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[-1]:\n            yield group\n        else:\n            yield [key] + list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # group the list by value\n    grouped_list = groupby(list1)\n\n    # initialize an empty list to store the sublists\n    sublists = []\n\n    # iterate over the grouped list and pack consecutive duplicates into sublists\n    for key, group in grouped_list:\n        # check if the current group contains only one element\n        if len(list(group)) == 1:\n            # if it does, add it to the sublists as a single element list\n            sublists.append([list(group)[0]])\n        else:\n            # if it contains more than one element, append a list of all the consecutive elements to the sublists\n            sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function packs consecutive duplicates of a given list elements into sublists.\n\n    Parameters:\n    lst (list): List of elements.\n\n    Returns:\n    list: List of sublists containing consecutive duplicates of the given list.\n    '''\n\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for key, group in groupby(list1):\n        groups.append([key] + list(group))\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    def pack(iterable):\n        \"\"\"\n        Pack consecutive duplicates of a given iterable into sublists.\n        \"\"\"\n        # Group consecutive duplicates into sublists\n        sublist = []\n        for key, group in groupby(iterable):\n            if key:\n                sublist.append(list(group))\n        return sublist\n\n    return pack(list1)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, pack consecutive duplicates of elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Convert the list to a dictionary with keys as elements and counts as values\n    counts = {x: sum(1 for y in lst if y == x) for x in lst}\n    # Create a generator of groups where the group key is the element and the group values are the count\n    grouped = groupby(sorted(lst, key=lambda x: x), key=lambda x: x)\n    # Create a list of lists where each inner list contains the consecutive duplicates of the original list\n    packed = [list(group) for key, group in grouped]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(list1)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i, item in enumerate(list1):\n        if i == len(list1) - 1:\n            continue\n        if list1[i] == list1[i+1]:\n            sublist = [item]\n        else:\n            sublist = [item]\n            for j in range(i+1, len(list1)):\n                if list1[j]!= list1[j-1]:\n                    break\n                sublist.append(list1[j])\n            yield sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in count_dict:\n            count_dict[list1[i]] = 1\n        else:\n            count_dict[list1[i]] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            count[sublist] = count.get(sublist, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            count[tuple(item)] = count.get(tuple(item), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    \n    # loop through the list of lists\n    for sublist in list1:\n        # turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # increment the count of the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and check if it exists in the dictionary\n            if tuple(element) in counts:\n                # Increment the count for the tuple\n                counts[tuple(element)] += 1\n            else:\n                # Add the tuple to the dictionary with a count of 1\n                counts[tuple(element)] = 1\n\n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each sublist\n    count_dict = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # If it is, increment the count by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create a dictionary to store the counts of unique sublists\n    count_dict = {}\n\n    # loop through each element in the list1\n    for element in list1:\n        # convert the element to a tuple and add it to the count_dict if it doesn't exist yet\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(lst, target, index, current_sum, res):\n        if current_sum == target and index == len(lst)-1:\n            res.append(lst[index])\n        if current_sum <= target:\n            helper(lst, target, index+1, current_sum+lst[index], res)\n        if current_sum > target:\n            helper(lst, target, index+1, current_sum, res)\n    \n    res = []\n    for i in range(len(test_list)):\n        helper(test_list, sum(test_list[i]), 0, 0, res)\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes in a list of tuples and returns all the combinations of sums of tuples in the list.\n\n    Example:\n    test_list = [(1,2),(3,4),(5,6)]\n    Output: [(1,3,5),(1,3,6),(1,4,5),(1,4,6),(1,2,5),(1,2,6),(2,3,5),(2,3,6),(2,4,5),(2,4,6),(2,6,5),(2,6,6),(3,5,6),(3,4,5),(3,4,6)]\n    '''\n    combos = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                combos.append(tuple(sorted([test_list[i][0]+test_list[j][0], test_list[i][1]+test_list[j][1], test_list[i][0]+test_list[k][1], test_list[j][0]+test_list[k][1]])))\n    return combos"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the unique tuples in the list\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n\n    # Use itertools to generate all combinations of unique tuples\n    combinations_list = [tuple(c) for c in combinations(unique_tuples, len(unique_tuples))]\n\n    # Filter out combinations that do not sum to zero\n    zero_sum_combinations = [c for c in combinations_list if sum(c) == 0]\n\n    return zero_sum_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the sum of each tuple in the list\n    sums = [sum(tup) for tup in test_list]\n\n    # Calculate the total sum\n    total_sum = sum(sums)\n\n    # Find the combinations of sums with tuples\n    combinations_list = []\n    for i in range(len(test_list) + 1):\n        for combination in combinations(sums, i):\n            if sum(combination) == total_sum:\n                combinations_list.append(combination)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Find all possible pairs of tuples in the given tuple list\n    pairs = combinations(test_list, 2)\n\n    # Find all possible pairs of sums from the given pairs of tuples\n    sums = set()\n    for pair in pairs:\n        sums.add(pair[0] + pair[1])\n\n    # Return the list of combinations of sums\n    return list(sums)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of unique tuples from the given tuple list\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    \n    # create a list of sums from the given tuple list\n    sums = set(sum(t) for t in test_list)\n    \n    # generate all combinations of sums with tuples in the set of unique tuples\n    for combo in combinations(unique_tuples, len(sums)):\n        if all(t in sums for t in combo):\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the given list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize a list to store the combinations of sums\n    combination_list = []\n\n    # Iterate through all the combinations of tuples in the sorted list\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            # Calculate the sum of the current combination\n            current_sum = sum(sorted_list[i]) + sum(sorted_list[j])\n            # Add the current combination to the combination list if it exists in the test list\n            if current_sum in test_list:\n                combination_list.append(sorted_list[i], sorted_list[j])\n    \n    # Return the combination list\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the maximum value of the tuples in the list\n    max_value = max(test_list, key=lambda x: sum(x))\n    # Find all pairs of tuples that sum up to the maximum value\n    pairs = list(combinations(test_list, 2))\n    # Find all combinations of pairs that add up to the maximum value\n    combinations = []\n    for pair in pairs:\n        if sum(pair[0]) == max_value and sum(pair[1]) == max_value:\n            combinations.append(pair)\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    combination = []\n    for i in range(len(test_list)):\n        if i == 0:\n            combination.append(test_list[i])\n        elif i == len(test_list) - 1:\n            combination.append(test_list[i])\n            combinations_list.append(combination)\n            combination = []\n        else:\n            combination.append(test_list[i])\n            combinations_list.append(combination)\n            combination = []\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even count of divisors.\")\n    else:\n        print(f\"{n} has an odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        count = 1\n    return count\n\nn = 28\nprint(count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    divisor_count = len(divisors)\n    if divisor_count % 2 == 0:\n        print(n, \"is divisible by 0 and\", divisor_count, \"divisors.\")\n    else:\n        print(n, \"is divisible by 1 and\", divisor_count, \"divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    count = len(div_list)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    def divisor_sum(num):\n        '''\n        Calculate the sum of the divisors of a given number.\n        '''\n        divisors_sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    # Calculate the sum of the divisors of the given number\n    divisors_sum = divisor_sum(n)\n\n    # Check if the count of divisors is even\n    if divisors_sum % 2 == 0:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n        if count > 10:\n            break\n    if count > 10:\n        return \"The count of divisors is greater than 10\"\n    return \"The count of divisors is even\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n    for i in range(n):\n        if i % 2!= 0:\n            temp_sum = 0\n            j = i\n            while j < n and j - i + 1 % 2!= 0:\n                temp_sum += arr[j]\n                j += 1\n            sum_odd += temp_sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += arr[j]\n                if j - i + 1 % 2!= 0:\n                    break\n            sum += curr_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1%2!=0:\n                res += sum(arr[i:j])\n\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        if arr[0] % 2 == 1:\n            return arr[0]\n        else:\n            return 0\n    else:\n        dp = [0] * (n+1)\n        dp[1] = arr[0]\n        if arr[0] % 2 == 1:\n            dp[2] = dp[1] + arr[1]\n        else:\n            dp[2] = 0\n        for i in range(3, n+1):\n            if arr[i-1] % 2 == 1:\n                dp[i] = dp[i-1] + arr[i-1]\n            else:\n                dp[i] = dp[i-1]\n            if arr[i-1] % 2 == 1 and arr[i-2] % 2 == 1:\n                dp[i] = dp[i] - dp[i-2]\n        return dp[n]"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_odd += arr[j]\n            if j - i + 1 % 2 == 1:\n                return sum_odd\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum_odd_len = 0\n    n = len(arr)\n\n    # Traverse through the array to find sum of odd length subarrays\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2!= 0:  # odd length subarray\n                sum_odd_len += sum(arr[i:j+1])\n\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize variables to keep track of the current and previous odd length subarrays\n    current_odd = 0\n    previous_odd = 0\n\n    # Iterate through the array and update the current and previous odd length subarrays\n    for num in arr:\n        # If the number is odd, add it to the current odd length subarray\n        if num % 2!= 0:\n            current_odd += num\n        # If the number is even, add it to the previous odd length subarray\n        else:\n            previous_odd += num\n        # If the current odd length subarray is not empty, add it to the result and reset the current odd length subarray\n        if current_odd!= 0:\n            result += current_odd\n            current_odd = 0\n        # If the previous odd length subarray is not empty, add it to the result and reset the previous odd length subarray\n        if previous_odd!= 0:\n            result += previous_odd\n            previous_odd = 0\n\n    # If the current odd length subarray is not empty, add it to the result\n    if current_odd!= 0:\n        result += current_odd\n    # If the previous odd length subarray is not empty, add it to the result\n    if previous_odd!= 0:\n        result += previous_odd\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(1, n//2+1):\n        for j in range(i, n-i+1, 2):\n            total_sum += arr[j]\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum variable\n    sum = 0\n    \n    # Traverse through the array\n    for i in range(n-2):\n        # Check if the length of the subarray is odd\n        if i+2 % 2 == 1:\n            # Calculate the sum of the subarray\n            temp = arr[i] + arr[i+1] + arr[i+2]\n            # Add the sum to the sum variable\n            sum += temp\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(1, len(arr) - 1):\n        if i % 2 == 0:\n            result += arr[i] + arr[i - 1] + arr[i + 1]\n    return result"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: red value (0-255)\n    :type r: int\n    :param g: green value (0-255)\n    :type g: int\n    :param b: blue value (0-255)\n    :type b: int\n    :return: h, s, v values (0-1)\n    :rtype: tuple\n    \"\"\"\n    r /= 255\n    g /= 255\n    b /= 255\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    h = 0\n    s = 0\n    v = max_rgb\n\n    if delta == 0:\n        h = 0\n    elif max_rgb == r:\n        h = ((g - b) / delta) % 6\n    elif max_rgb == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_rgb\n\n    h /= 6\n    s = min(s, 1)\n    v = min(v, 1)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find the greatest and smallest values of R, G, and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between max and min values\n    delta = max_val - min_val\n    \n    # Calculate the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    # Calculate the hue in degrees\n    hue_degrees = hue * 60.0\n    if hue_degrees < 0:\n        hue_degrees += 360.0\n    \n    # Convert hue to degrees and return as a tuple\n    return (hue_degrees, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_max = max_val - min_val\n    \n    h = 0\n    s = 0\n    \n    if del_max == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = 60 * (((g-b)/del_max) % 6)\n    elif max_val == g:\n        h = 60 * ((b-r)/del_max + 2)\n    else:\n        h = 60 * ((r-g)/del_max + 4)\n    \n    if h < 0:\n        h += 360\n    \n    if del_max == 0:\n        s = 0\n    else:\n        s = del_max / max_val\n    \n    return (h, s, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert R, G, and B values to floating point numbers between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the minimum and maximum values in the RGB color space\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find the delta between the maximum and minimum values in the RGB color space\n    delta = max_val - min_val\n\n    # Calculate the H, S, and V values based on the RGB color model\n    if max_val == min_val:\n        h = s = v = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6.0\n\n        if h < 0:\n            h += 1\n\n        s = delta / max_val\n\n        if s == 0:\n            v = max_val\n        else:\n            if max_val == r:\n                v = (g - b) / delta\n            elif max_val == g:\n                v = (b - r) / delta\n            else:\n                v = (r - g) / delta\n\n    # Convert the HSV values to integers and return the HSV color model\n    return int(h * 255), int(s * 255), int(v * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in three parameters, r, g, b, which are the red, green and blue values of the color in the RGB color model.\n    It returns the HSV values of the color.\n    '''\n    \n    # Convert the RGB values to float values\n    r_float = float(r) / 255\n    g_float = float(g) / 255\n    b_float = float(b) / 255\n    \n    # Find the maximum value in the RGB color model\n    max_value = max(r_float, g_float, b_float)\n    \n    # Find the minimum value in the RGB color model\n    min_value = min(r_float, g_float, b_float)\n    \n    # Find the difference between the maximum and minimum values\n    difference = max_value - min_value\n    \n    # Find the hue value\n    if max_value == r_float:\n        hue = (g_float - b_float) / difference\n    elif max_value == g_float:\n        hue = 2 + (b_float - r_float) / difference\n    else:\n        hue = 4 + (r_float - g_float) / difference\n    \n    # Convert the hue value from degrees to radians\n    hue_rad = hue * (2 * math.pi)\n    \n    # Find the saturation value\n    if difference == 0:\n        saturation = 0\n    else:\n        saturation = difference / max_value\n    \n    # Find the value value\n    value = max_value\n    \n    # Return the HSV values in a tuple\n    return (hue_rad, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert the color from RGB to HSV model\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    if max_c!= min_c:\n        delta = max_c - min_c\n        s = delta / max_c\n        if r == max_c:\n            h = (g - b) / delta\n        elif g == max_c:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_value\n    \n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = ((g - b) / delta) % 6\n    elif max_value == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n    \n    h = round(h * 60)\n    if h < 0:\n        h += 360\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Find the maximum and minimum values\n    max_val, min_val = max(r, g, b), min(r, g, b)\n    \n    # Find the delta value between maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the hue, saturation and value\n    if delta == 0:\n        h, s, v = 0, 0, max_val\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n        \n        # Calculate saturation\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n        \n        # Calculate value\n        v = max_val\n    \n    # Convert the values to the desired output format\n    hsv = (h, s, v)\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV color space\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    \n    h = 0\n    s = 0\n    \n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = ((g - b) / delta) % 6\n    elif max_color == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_color\n    \n    # Convert HSV to RGB color space\n    r = 0\n    g = 0\n    b = 0\n    \n    if h == 6:\n        h = 0\n    elif h == 0:\n        r = max_color\n    else:\n        i = int(h)\n        f = h - i\n        p = max_color - delta * f\n        q = max_color - delta * (1 - f)\n        t = delta / max_color\n        if i == 0:\n            r = max_color\n        elif i == 1:\n            r = q\n        elif i == 2:\n            r = p\n        elif i == 3:\n            r = max_color\n        elif i == 4:\n            r = t\n        elif i == 5:\n            r = p\n    \n    if h == 0 or h == 6:\n        g = max_color\n    elif h == 1:\n        g = p\n        b = max_color\n    elif h == 2:\n        g = max_color\n        b = q\n    elif h == 3:\n        g = p\n        b = 0\n    elif h == 4:\n        g = 0\n        b = p\n    else:\n        g = 0\n        b = max_color\n    \n    if s == 0:\n        v = max_color\n    else:\n        v = max_color\n    \n    # Convert HSV values to float\n    h, s, v = [float(i) / 255 for i in [h, s, v]]\n    hsv_color = (h, s, v)\n    \n    return hsv_color\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    # Calculate hue, saturation and value\n    if max_value == min_value:\n        hue = 0\n        saturation = 0\n    elif max_value == r:\n        hue = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        hue = 2 + (b - r) / (max_value - min_value)\n    else:\n        hue = 4 + (r - g) / (max_value - min_value)\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    saturation = (max_value - min_value) / max_value\n    value = max_value\n    # Calculate alpha\n    alpha = 1.0\n    # Return result as a tuple\n    return (int(hue), int(saturation * 255), int(value * 255), alpha)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count * odd_count)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count!= 0:\n        product *= even_count\n\n    if odd_count!= 0:\n        product *= odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even = even * i\n        else:\n            odd = odd * i\n    \n    product = even * odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            product *= (i + 1)\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even *= list1[i]\n        else:\n            odd *= list1[i]\n            \n        if i == 0:\n            product = even * odd\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to tuple using the split() method\n    test_tuple = tuple(test_str.split(','))\n    # convert tuple to integer tuple using the map() method\n    int_tuple = tuple(map(int, test_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= tuple:\n        return 'Input must be a tuple.'\n    try:\n        int_tuple = tuple(int(x) for x in test_str)\n        return int_tuple\n    except ValueError:\n        return 'Tuple string contains non-integer value.'"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    str_to_int = {'one': 1, 'two': 2, 'three': 3}\n    return tuple([str_to_int.get(word, None) for word in test_str])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the string to a list of strings\n    list_str = test_str.split(',')\n    \n    # Convert each string in the list to an integer and append it to a new list\n    list_int = [int(s.strip()) for s in list_str]\n    \n    # Convert the list to a tuple and return it\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Split the string by spaces and convert each substring to an integer\n    int_tuple = tuple(int(num) for num in test_str.split())\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (str): A tuple string of the form (1,2,3,4,5).\n\n    Returns:\n        Tuple: A tuple of integers representing the values in the tuple string.\n    \"\"\"\n    # Split the string into individual values\n    values = test_str.split(\",\")\n\n    # Convert each value to an integer and store in a list\n    int_list = [int(value.strip()) for value in values]\n\n    # Return the converted list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    tuple_str = test_str.split(',')\n    # Convert each string in the tuple to integer\n    tuple_int = [int(x) for x in tuple_str]\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = ()\n    for item in test_str:\n        if item.isnumeric():\n            result += (int(item),)\n        else:\n            return None  # if any non-numeric item is found\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in test_str:\n        if i.isdigit():\n            new_tuple.append(int(i))\n        else:\n            pass\n    return tuple(new_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = eval(test_str)\n    int_tuple = tuple(map(int, str_tuple))\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right index where x should be inserted\n    index = bisect.bisect_right(a, x)\n    \n    # If x is already present, return the index\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # If x is greater than the last element in the list, append it\n    elif index == len(a):\n        return index\n    \n    # Otherwise, insert x at the next index after the current insertion point\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point for x\n    i = bisect.bisect_left(a, x)\n\n    # If x is already in the array, return the index of the last occurrence\n    if i < len(a) and a[i] == x:\n        return i\n\n    # Otherwise, return the index of the next greater element\n    return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # use binary search to find the rightmost element smaller than x\n    i = bisect.bisect_right(a, x)\n    # if i is equal to the length of a, x is greater than all elements in a\n    if i == len(a):\n        return i\n    # if i is 0, x is smaller than or equal to the first element in a\n    elif i == 0:\n        return 0\n    # if i is greater than 0, x is in between two elements in a\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    # Find the index where the value should be inserted based on binary search\n    index = bisect.bisect_right(a, x)\n    # If the value is already present, return the index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index after the insertion point\n    return index + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        i = len(a) - 1\n    j = i - 1\n    while j >= 0 and a[j] >= x:\n        j -= 1\n    return j + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    left, right = 0, len(a)\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\1b{3}')\n    match = pattern.search(text)\n    if match:\n        return 'Match found at index', match.start(), match.end()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\w{3}b\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return 'Match found: {}'.format(matches[0])\n    else:\n        return 'No match found'"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # check if the length of the list and string is equal\n    if len(test_list) == len(test_str):\n        # initialize an empty list to store the new tuple\n        new_list = []\n        # iterate over each character in the string\n        for char in test_str:\n            # check if the character is in the list\n            if char in test_list:\n                # add the index of the character to the new list\n                new_list.append(test_list.index(char))\n            # if the character is not in the list, append None to the new list\n            else:\n                new_list.append(None)\n        # convert the list to a tuple\n        new_tuple = tuple(new_list)\n        # return the new tuple\n        return new_tuple\n    # if the length of the list and string is not equal, raise an exception\n    else:\n        raise Exception('The length of the list and string must be equal.')\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists and string into a tuple\n    new_tuple = (test_list + [test_str], test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    test_list = list(test_list)  # Convert the list to a list again to avoid errors\n    new_tuple = tuple(test_str.upper() for item in test_list)  # Create a new tuple with uppercase strings\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    tuple_list = tuple(test_list)\n    # Join the tuple and string to form a new tuple\n    new_tuple = tuple_list + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into a single list\n    new_list = test_list + test_str\n    \n    # Convert the concatenated list to a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Using list comprehension to create a new list from the given string and list\n    new_list = [test_str] + test_list\n    # Creating a tuple using the new list\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums if i+1 < len(nums) and num % 2 == 0])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if len([x for x in nums[i:] if x % 2 == 0]) % 2 == 1:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    even_found = False\n    \n    # Loop through the list\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # Check if the current number is even\n            if nums[i] % 2 == 0:\n                # If it is, then the even position has been found\n                even_found = True\n                break\n            \n    # Return whether every even index contains even numbers of the given list\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count = nums[i:]\n            while count:\n                if count.pop() % 2 == 0:\n                    return False\n                else:\n                    return True\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            for j in range(len(test_tup[i])):\n                test_tup[i] = test_tup[i][j]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # loop through each item in the list\n    for i in range(len(test_list)):\n        # if the item is a tuple, recursively call the function\n        if isinstance(test_list[i], tuple):\n            test_list[i] = remove_nested(test_list[i])\n    # remove tuples from the list\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list.pop(i)\n    # convert the list back to a tuple\n    new_tup = tuple(test_list)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flattened_tup.extend(item)\n        else:\n            flattened_tup.append(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove all tuples from the given tuple\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_list += remove_nested(item)\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through each item in the tuple\n    for item in test_tup:\n        # Check if the item is a tuple\n        if isinstance(item, tuple):\n            # If it is a tuple, recursively call the remove_nested function on it\n            result += remove_nested(item)\n        else:\n            # If it is not a tuple, append it to the result list\n            result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(lists):\n    \"\"\"\n    Recursively counts the number of lists in a given number of lists.\n\n    Args:\n        lists: A list of lists, where each sublist is a list.\n\n    Returns:\n        The number of lists in the input list.\n    \"\"\"\n    if lists == []:\n        return 0\n    elif isinstance(lists[0], list):\n        return 1 + count_lists(lists[1:])\n    else:\n        return 1 + count_lists(lists[1:])"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): a sorted array\n        x (int): the element to search for\n\n    Returns:\n        int: the last position of the element in the sorted array or -1 if the element is not in the array\n\n    \"\"\"\n\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    last_position = -1\n\n    # Loop until low is greater than or equal to high\n    while low <= high:\n        mid = (low + high) // 2\n\n        # If x is present at mid, then update last_position\n        if arr[mid] == x:\n            last_position = mid\n\n            # If x is greater than mid, ignore left half\n            if x > arr[mid + 1]:\n                low = mid + 1\n            # If x is smaller than mid, ignore right half\n            else:\n                high = mid - 1\n        # If x is smaller than mid, ignore left half\n        else:\n            low = mid + 1\n\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element x as input and returns the last position of the element in the array.\n    If the element is not found in the array, it returns -1.\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            left = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left < len(arr) and arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1  # search to the left to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1  # search to the right to find the last occurrence\n    return left if arr[left] == x else -1  # if not found, return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # find the index of the first element greater than or equal to x\n    i = bisect.bisect_left(arr, x)\n    # if the element is not present in the array, return -1\n    if i == len(arr) or arr[i]!= x:\n        return -1\n    # find the index of the last element less than or equal to x\n    j = bisect.bisect_right(arr, x)\n    # return the index of the last element less than or equal to x\n    return j-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: the sorted array and the element to find.\n    It finds the last position of the element in the array and returns the position.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1  # If element found, move left\n        elif arr[mid] < x:\n            low = mid + 1  # If element is smaller, move right\n        else:\n            return mid  # If element is larger, return mid\n    return -1  # If element not found in array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: arr (the sorted array) and x (the element to find the last position of).\n    It returns the last position of x in the sorted array. If x is not found in the array, it returns -1.\n    '''\n    # check if x is in the array\n    if x not in arr:\n        return -1\n    # find the last position of x in the array\n    last_position = arr.index(x)\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    \n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a\\w+b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    \n    if result:\n        print(\"Match found:\", result.group())\n    else:\n        print(\"Match not found.\")"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba[\\s\\S]*?b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a).*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key, value in dict.items():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_items = 0\n    for item in dict.values():\n        sum_items += item\n    return sum_items"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i\n        return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return 0\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n\n    sum = 0\n    \n    # loop through odd numbers from l to r and add them to sum\n    for i in range(l, r, 2):\n        sum += i\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through all natural numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add it to the sum variable\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through each element in the array\n    for i in arr:\n        # Add the element to the sum\n        sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    elif d >= 32:\n        return left_rotate(n, d - 32)\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert decimal number to binary\n    binary_number = bin(n)[2:]\n\n    # Calculate the number of bits to be rotated\n    n_bits = len(binary_number)\n    rotated_bits = binary_number[-d:] + binary_number[:-d]\n\n    # Convert binary back to decimal\n    rotated_number = int(rotated_bits, 2)\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # calculate the number of left rotations to perform\n    rotations = d % 32\n    # calculate the number of bits to rotate\n    bits_to_rotate = d // 32\n\n    # extract the bits to rotate\n    rotated_bits = (n >> (32 - bits_to_rotate)) << bits_to_rotate\n\n    # shift the remaining bits to the left\n    shifted_bits = n << rotations\n\n    # combine the rotated bits with the shifted bits\n    rotated_number = rotated_bits | shifted_bits\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert the number to binary string\n    bin_num = format(n, '032b')\n    # get the number of bits in binary string\n    num_bits = len(bin_num)\n    # calculate the number of bits to rotate\n    rot_bits = d % num_bits\n    # calculate the number of bits to shift\n    shift_bits = num_bits - rot_bits\n    # rotate the bits and shift the number\n    new_bin_num = bin_num[rot_bits:] + bin_num[:rot_bits]\n    # convert the rotated bits back to decimal\n    new_num = int(new_bin_num, 2)\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to a binary string\n    bin_str = format(n, '032b')\n    # Convert d to a binary string\n    d_bin = format(d, '04b')\n    # Initialize the result\n    result = 0\n    # Loop through each bit of n and shift it to the left by d bits\n    for i in range(len(bin_str)):\n        if bin_str[i] == '1':\n            result |= 1 << (len(bin_str)-i-1)\n        else:\n            result <<= 1\n    # If d is greater than or equal to the number of bits in n, return n\n    if d >= len(bin_str):\n        return n\n    # If d is negative, rotate left d bits and add to result\n    elif d < 0:\n        result = (result << -d) | (result >> (len(bin_str)-1))\n        result = result << -d\n        return n ^ result\n    # Otherwise, rotate left d bits and add to result\n    else:\n        result = (result << d) | (result >> (len(bin_str)-d))\n        return n ^ result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary string of n to an integer\n    num = int(n,2)\n    # Shift the bits by d positions to the left\n    num = (num<<d)|(num>>(32-d))\n    # Convert the integer back to a binary string\n    result = bin(num)[2:]\n    # If the number is negative, add a 1 to the binary string\n    if n[0] == '1':\n        result = '1' + result\n    # Return the binary string\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF\n    d = d % 32\n    n = (n << d) | (n >> (32 - d))\n    return n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to a list of bytes\n    bytes_list = [n >> i*8 & 0xff for i in range(4)]\n\n    # rotate left the bytes\n    for i in range(d//8):\n        temp = bytes_list[0]\n        for j in range(3):\n            bytes_list[j] = bytes_list[j+1]\n        bytes_list[3] = temp\n\n    # convert the rotated bytes back to a number\n    rotated_number = 0\n    for byte in bytes_list:\n        rotated_number |= byte << 8*i\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Get the number of bits in the number\n    bits = len(bin(n)[2:])\n\n    # If d is more than the number of bits in the number, rotate left 0 bits\n    d %= bits\n    if d > 0:\n        # Create a mask of the d least significant bits\n        mask = (1 << d) - 1\n        # Shift the number left by d bits\n        n = (n << d) & 0xffffffff\n        # Rotate the remaining bits to the right\n        n = (n >> (bits - d)) | (n & mask)\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    cleaned_text = re.sub(r'\\s+','', text)\n    # Return the cleaned string\n    return cleaned_text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all occurrences of one or more whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # Check if the numbers are equal\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, z+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    # Check that all three integers are different\n    if x == y or x == z or y == z:\n        return \"Error: all three integers must be different.\"\n\n    # Count the number of equal integers\n    count = 0\n    for i in range(x, y + 1):\n        if i == x or i == y or i == z:\n            continue\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n\n    # Return the count of equal integers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Initialize count to zero\n    count = 0\n\n    # Loop through each number in the list\n    for i in range(len(x)):\n        # Check if the current number is equal to all three numbers\n        if x[i] == y[i] == z[i]:\n            # Increment the count by one\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # if array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # find the pivot element and divide the array into two parts\n    pivot = arr[0]\n    left = [x for x in arr[1:] if x > pivot]\n    right = [x for x in arr[1:] if x < pivot]\n    # if there is only one element in the right part, return 0\n    if len(right) == 1:\n        return 0\n    # recursively count the rotations required for each part\n    left_rotations = count_rotation(left)\n    right_rotations = count_rotation(right)\n    # if the left part is sorted, return the number of rotations required for the right part\n    if len(left) == n:\n        return left_rotations + right_rotations\n    # if the right part is sorted, return the number of rotations required for the left part\n    elif len(right) == n:\n        return right_rotations + left_rotations\n    # if the right part is smaller than the left part, return the minimum of the two numbers\n    else:\n        return min(left_rotations + right_rotations, left_rotations + 1)"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    lis = 1\n    \n    for i in range(n):\n        if arr[i] > arr[n-1]:\n            count += 1\n            arr[n-1], arr[i] = arr[i], arr[n-1]\n            lis = n-i+1\n            \n    if count == 0:\n        return 0\n    else:\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers i and j to the first and last elements of the array respectively\n    i = 0\n    j = len(arr) - 1\n\n    # Loop through the array until i and j meet in the middle\n    while i < j:\n\n        # If the first element of the array is greater than the last element of the array, increment count and move i to the right by 1\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n\n        # If the last element of the array is greater than the first element of the array, decrement count and move j to the left by 1\n        elif arr[j] > arr[i]:\n            count += 1\n            j -= 1\n\n    # Return the count of rotations required to generate the sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # get the minimum element from the array\n    min_element = min(arr)\n    # calculate the sum of absolute values of elements from the minimum element to the maximum element in the array\n    sum_abs_diff = sum([abs(i-min_element) for i in arr])\n    # calculate the number of rotations required to generate a sorted array\n    rotations = sum_abs_diff//n\n    # check if there are any even rotations required\n    if sum_abs_diff%n > 0:\n        rotations += 1\n    # return the number of rotations required\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # To find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # To check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # To find the minimum element in the array\n    min_element = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # To find the number of rotations required\n    count = 0\n    for i in range(n):\n        if arr[i] < min_element or arr[i] > max_element:\n            count += 1\n            min_element = min(arr[i], min_element)\n            max_element = max(arr[i], max_element)\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Traverse the array from left to right\n    for i in range(n):\n        # Find the first index greater than or equal to the current index\n        j = i\n        while j < n - 1 and arr[j] < arr[j + 1]:\n            j += 1\n        # If the first index greater than or equal to the current index is not equal to the current index, there are no rotations required\n        if j == i:\n            continue\n        # Reverse the current segment of the array from i to j - 1\n        arr[i:j] = arr[i:j][::-1]\n        # Traverse the reversed segment from left to right\n        for k in range(i, n):\n            # If the current element is greater than the previous element, there is a rotation required\n            if arr[k] > arr[k - 1]:\n                return k - i\n    # If no rotation is required, return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Count number of inversions\n    i = 1\n    while i < n:\n        j = i + 1\n        while j < n:\n            if arr[i] > arr[j]:\n                i += 1\n            j += 1\n        i += 1\n    # Count number of rotations\n    count = 0\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Two pointers to traverse the array\n    # One pointer to the start of the sorted part of the array\n    # One pointer to the end of the sorted part of the array\n    left = 0\n    right = n - 1\n    # Count the number of rotations required to sort the array\n    count = 0\n    while left < right:\n        # If the left pointer is greater than or equal to the right pointer, there is no rotation\n        if arr[left] >= arr[right]:\n            count += 1\n            left += 1\n        else:\n            # If the left pointer is smaller than the right pointer, there is a rotation\n            # Move the left pointer to the right until it is equal to the right pointer\n            while arr[left] < arr[right]:\n                left += 1\n            # Swap the elements at the left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            # Move the left pointer to the right until it is equal to the right pointer again\n            while arr[left] < arr[right]:\n                right -= 1\n            # Move the left pointer to the right until it is equal to the right pointer again\n            while arr[left] < arr[right]:\n                left += 1\n            # If the left and right pointers are still not equal, there is a rotation\n            # Move the left pointer to the right until it is equal to the right pointer\n            while arr[left] < arr[right]:\n                left += 1\n            # Swap the elements at the left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            # Move the left pointer to the right until it is equal to the right pointer again\n            while arr[left] < arr[right]:\n                right -= 1\n            # Move the left pointer to the right until it is equal to the right pointer again\n            while arr[left] < arr[right]:\n                left += 1\n            # If the left and right pointers are still not equal, there is a rotation\n            # Move the left pointer to the right until it is equal to the right pointer\n            while arr[left] < arr[right]:\n                left += 1\n            # Swap the elements at the left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            # Move the left pointer to the right until it is equal to the right pointer again\n            while arr[left] < arr[right]:\n                right -= 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Check if the number is positive\n    if n <= 0:\n        return False\n\n    # Initialize the square root of the number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2!= n:\n        return False\n\n    # Check if the square of the square root is equal to the number\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0 and is_perfect_square(n//i):\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks if the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    square = 0\n    while square * square < n:\n        square += i\n        i += 1\n    return square * square == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    # find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    # check if the square root is an integer\n    if sqrt_n * sqrt_n!= n:\n        return False\n    # the number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case\n    if n == 1:\n        return True\n\n    # Step 1: Calculate the square root of the given number\n    sqrt_n = n ** 0.5\n\n    # Step 2: Check if the square root is an integer\n    if sqrt_n % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # convert n to float to avoid integer division\n    n = float(n)\n\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # check if n is already a perfect square\n    if n == int(n**0.5) * int(n**0.5):\n        return True\n\n    # check if n is a perfect square using the Euclidean algorithm\n    a = n\n    b = n\n    count = 0\n\n    while b**2 <= a:\n        count += 1\n        a = b\n        b = (a + b) / 2\n\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # We can check if the number is less than or equal to 1, as any number greater than 1 must be a perfect square.\n    if n <= 1:\n        return True\n    \n    # We can check if the number is a perfect square using the fact that the square of any number can be expressed as the sum of two squares.\n    # We can calculate the sum of two squares as (square of the number) + (square of the difference between the number and square root of the number).\n    # Let's find the square root of the number.\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # Now we can check if the sum of two squares is equal to the original number.\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    product = 1  # initialize the product variable to 1\n    for num in arr:  # iterate through each number in the list\n        product *= num  # multiply the product by the current number\n    \n    # check if the product is even or odd\n    if product % 2 == 0:  # if the product is even\n        return True  # return True\n    else:  # if the product is odd\n        return False  # return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of numbers in the list is even.\"\n    else:\n        return \"The product of numbers in the list is odd.\""
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        temp_sum = sum(i)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = None\n\n    # Iterate through each list in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # Check if the sum is greater than the current maximum sum\n        if sublist_sum > max_sum:\n            # Update the maximum sum and list\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize max_sum with negative infinity\n    max_list = None  # initialize max_list to None\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)  # calculate the sum of the sublist elements\n        if sublist_sum > max_sum:  # if the sublist sum is greater than max_sum\n            max_sum = sublist_sum\n            max_list = sublist  # update max_sum and max_list\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum to be the negative value of an integer, which will be replaced with the actual maximum sum later on\n    max_sum = -999999999999\n    \n    # Iterate through each list in the input list of lists\n    for sublist in lists:\n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through each element in the current list\n        for element in sublist:\n            # Add the current element to the current sum\n            current_sum += element\n            \n            # If the current sum becomes negative, replace it with 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum to be the current sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Create a new list that only contains the maximum sum list\n    max_sum_list = []\n    \n    # Iterate through each sublist in the input list of lists\n    for sublist in lists:\n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through each element in the current list\n        for element in sublist:\n            # Add the current element to the current sum\n            current_sum += element\n            \n            # If the current sum becomes negative, replace it with 0\n            if current_sum < 0:\n                current_sum = 0\n            \n            # If the current sum is equal to the maximum sum, add the sublist to the new list\n            if current_sum == max_sum:\n                max_sum_list.append(sublist)\n    \n    # Return the new list of maximum sum lists\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Iterate over each list in the input list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        lst_sum = sum(lst)\n        \n        # Check if this sum is greater than the current maximum sum\n        if lst_sum > max_sum:\n            # Update the maximum sum and the list with the maximum sum\n            max_sum = lst_sum\n            max_list = lst\n    \n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Get the maximum sum for each list\n    max_sums = [max(list) for list in lists]\n\n    # Iterate through the lists and find the maximum sum\n    max_list = []\n    for list in lists:\n        total = sum(list)\n        if total > max_sums[lists.index(list)]:\n            max_list = list\n            max_sums[lists.index(list)] = total\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize a variable to store the maximum sum and set it to 0\n    max_sum = 0\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Calculate the sum of all elements in the list\n        current_sum = sum(lst)\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Initialize an empty list to store the final result\n    final_result = []\n\n    # Loop through each list in the input list of lists again\n    for lst in lists:\n        # If the sum of the current list minus the maximum sum is greater than 0, add the current list to the final result\n        if sum(lst) - max_sum > 0:\n            final_result.append(lst)\n\n    # Return the final result\n    return final_result\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize max_sum to 0\n    max_sum = 0\n    \n    # loop over each list in the input list of lists\n    for sublist in lists:\n        # initialize current_sum to 0\n        current_sum = 0\n        \n        # loop over each element in the sublist\n        for element in sublist:\n            # add the element to the current_sum\n            current_sum += element\n            \n            # check if the current_sum is greater than the max_sum\n            if current_sum > max_sum:\n                # update max_sum to the current_sum\n                max_sum = current_sum\n    \n    # return the list in the input list of lists whose sum of elements is the highest\n    return [sublist for sublist in lists if max_sum == sum([sum(sublist) for sublist in lists])]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    i = 0\n    max_run = 0\n    max_run_start = 0\n    \n    while i < len(test_str):\n        if test_str[i].isupper():\n            max_run += 1\n            if max_run > max_run_start:\n                max_run_start = max_run\n                max_run_end = i\n        i += 1\n    \n    return test_str[max_run_start:max_run_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    for char in test_str:\n        if char.isupper():\n            uppercase = True\n        else:\n            if uppercase:\n                current_run += 1\n                if current_run > max_run:\n                    max_run = current_run\n                uppercase = False\n            else:\n                current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i] == current_char.upper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n            current_char = test_str[i]\n    if count > max_count:\n        max_count = count\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    uppercase_count = 0\n    # Iterate through the string\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            curr_run = 0\n        # Update max_run if curr_run is greater\n        if curr_run > max_run:\n            max_run = curr_run\n        # Update curr_run\n        curr_run += 1\n    # Return max_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables to store maximum run of uppercase characters\n    max_run = 0\n    run_start = 0\n    prev_char = None\n\n    # iterate through the string\n    for i, char in enumerate(test_str):\n        # if the current character is uppercase and the previous character was not,\n        # update the maximum run and the starting index of the run\n        if char.isupper() and prev_char is None:\n            max_run = 1\n            run_start = i\n        # if the current character is uppercase and the previous character was uppercase,\n        # increment the maximum run and keep track of its starting index\n        elif char.isupper() and prev_char.isupper():\n            max_run += 1\n        # if the current character is lowercase, reset the maximum run and the starting index\n        else:\n            max_run = 0\n            run_start = i\n\n        # update the previous character for the next iteration\n        prev_char = char\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:\n                max_run += 1\n            elif not test_str[i+1].isupper():\n                max_run += 1\n                if max_run > max_run:\n                    max_run = max_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the uppercase count if the character is uppercase\n            uppercase_count += 1\n            # check if the current run is greater than the maximum run\n            if current_run > max_run:\n                # update the maximum run if the current run is greater than the maximum run\n                max_run = current_run\n                # reset the current run to 0\n                current_run = 0\n        else:\n            # reset the uppercase count if the character is not uppercase\n            uppercase_count = 0\n            # increment the current run if the character is not uppercase\n            current_run += 1\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    run_length = 0\n    start_index = 0\n    max_run = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n\n            # If it is, check if the run length is greater than the current maximum run\n            if run_length > max_run:\n                max_run = run_length\n                start_index = i - max_run + 1\n\n        # If the current character is not uppercase, reset the run length\n        else:\n            run_length = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run, test_str[start_index:start_index + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    current_char = None\n    for char in test_str:\n        if char.isupper():\n            if current_char is None or char.isupper():\n                current_run += 1\n            else:\n                if current_run > max_run:\n                    max_run = current_run\n                current_run = 1\n            current_char = char\n        else:\n            current_char = None\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize max_run to 1, as we need at least one uppercase character in the string\n    max_run = 1\n    \n    # iterate through each character of the string\n    for i in range(len(test_str)):\n        # if the current character is an uppercase character, increment the max_run counter\n        if test_str[i].isupper():\n            max_run += 1\n        # if the current character is not an uppercase character, reset the max_run counter to 1\n        else:\n            max_run = 1\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            count += 1\n            if count == len(test_tup):\n                return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (K in test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(set(test_tup)) == K:\n        print(\"The tuples contain\", K, \"elements.\")\n    else:\n        print(\"The tuples do not contain\", K, \"elements.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(K in tup for tup in test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # iterate through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # check if the i-th element of the second tuple is smaller than the i-th element of the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    # if all the elements of the second tuple are smaller than their corresponding elements of the first tuple, then the first tuple is smaller\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is smaller.\")\n            return True\n    \n    print(\"The second tuple is smaller.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # iterate over the elements in the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]